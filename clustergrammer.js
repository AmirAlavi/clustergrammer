var Clustergrammer =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	eval("var make_config = __webpack_require__(1);\nvar make_params = __webpack_require__(5);\nvar make_viz = __webpack_require__(17);\n\n/* clustergrammer 1.0\n * Nick Fernandez, Ma'ayan Lab, Icahn School of Medicine at Mount Sinai\n * (c) 2016\n */\nfunction Clustergrammer(args) {\n\n  /* Main program\n   * ----------------------------------------------------------------------- */\n  // consume and validate user input\n  // build giant config object\n  // visualize based on config object\n  // handle user events\n\n  // consume and validate user arguments, produce configuration object\n  var config = make_config(args);\n  // make visualization parameters using configuration object\n  var params = make_params(config);\n  // make visualization using parameters\n  var viz = make_viz(params);\n\n  if (params.use_sidebar) {\n    var generate_sidebar = __webpack_require__(48);\n    generate_sidebar(params, viz);\n  }\n\n  return {\n    params: params,\n    config: config,\n    find_gene: viz.search.find_entities,\n    get_genes: viz.search.get_entities,\n    change_groups: viz.change_groups,\n    reorder: viz.reorder,\n    opacity_slider: viz.opacity_slider,\n    opacity_function: viz.opacity_function,\n    resize: viz.run_reset_visualization_size,\n    update_network: viz.update_network,\n    reset_zoom: viz.reset_zoom,\n    change_category: __webpack_require__(49),\n    set_up_N_filters: __webpack_require__(50),\n    ini_sliders: __webpack_require__(51)\n  };\n}\n\nmodule.exports = Clustergrammer;//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvbWFpbi5qcz8xYzkwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBtYWtlX2NvbmZpZyA9IHJlcXVpcmUoJy4vY29uZmlnJyk7XG52YXIgbWFrZV9wYXJhbXMgPSByZXF1aXJlKCcuL3BhcmFtcycpO1xudmFyIG1ha2Vfdml6ID0gcmVxdWlyZSgnLi92aXonKTtcblxuLyogY2x1c3RlcmdyYW1tZXIgMS4wXG4gKiBOaWNrIEZlcm5hbmRleiwgTWEnYXlhbiBMYWIsIEljYWhuIFNjaG9vbCBvZiBNZWRpY2luZSBhdCBNb3VudCBTaW5haVxuICogKGMpIDIwMTZcbiAqL1xuZnVuY3Rpb24gQ2x1c3RlcmdyYW1tZXIoYXJncykge1xuXG4gIC8qIE1haW4gcHJvZ3JhbVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuICAvLyBjb25zdW1lIGFuZCB2YWxpZGF0ZSB1c2VyIGlucHV0XG4gIC8vIGJ1aWxkIGdpYW50IGNvbmZpZyBvYmplY3RcbiAgLy8gdmlzdWFsaXplIGJhc2VkIG9uIGNvbmZpZyBvYmplY3RcbiAgLy8gaGFuZGxlIHVzZXIgZXZlbnRzXG5cbiAgLy8gY29uc3VtZSBhbmQgdmFsaWRhdGUgdXNlciBhcmd1bWVudHMsIHByb2R1Y2UgY29uZmlndXJhdGlvbiBvYmplY3RcbiAgdmFyIGNvbmZpZyA9IG1ha2VfY29uZmlnKGFyZ3MpO1xuICAvLyBtYWtlIHZpc3VhbGl6YXRpb24gcGFyYW1ldGVycyB1c2luZyBjb25maWd1cmF0aW9uIG9iamVjdFxuICB2YXIgcGFyYW1zID0gbWFrZV9wYXJhbXMoY29uZmlnKTtcbiAgLy8gbWFrZSB2aXN1YWxpemF0aW9uIHVzaW5nIHBhcmFtZXRlcnNcbiAgdmFyIHZpeiA9IG1ha2Vfdml6KHBhcmFtcyk7XG5cbiAgaWYgKHBhcmFtcy51c2Vfc2lkZWJhcikge1xuICAgIHZhciBnZW5lcmF0ZV9zaWRlYmFyID0gcmVxdWlyZSgnLi9zaWRlYmFyJyk7XG4gICAgZ2VuZXJhdGVfc2lkZWJhcihwYXJhbXMsIHZpeik7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhcmFtczogcGFyYW1zLFxuICAgIGNvbmZpZzpjb25maWcsXG4gICAgZmluZF9nZW5lOiB2aXouc2VhcmNoLmZpbmRfZW50aXRpZXMsXG4gICAgZ2V0X2dlbmVzOiB2aXouc2VhcmNoLmdldF9lbnRpdGllcyxcbiAgICBjaGFuZ2VfZ3JvdXBzOiB2aXouY2hhbmdlX2dyb3VwcyxcbiAgICByZW9yZGVyOiB2aXoucmVvcmRlcixcbiAgICBvcGFjaXR5X3NsaWRlcjogdml6Lm9wYWNpdHlfc2xpZGVyLFxuICAgIG9wYWNpdHlfZnVuY3Rpb246IHZpei5vcGFjaXR5X2Z1bmN0aW9uLFxuICAgIHJlc2l6ZTogdml6LnJ1bl9yZXNldF92aXN1YWxpemF0aW9uX3NpemUsXG4gICAgdXBkYXRlX25ldHdvcms6IHZpei51cGRhdGVfbmV0d29yayxcbiAgICByZXNldF96b29tOiB2aXoucmVzZXRfem9vbSxcbiAgICBjaGFuZ2VfY2F0ZWdvcnk6IHJlcXVpcmUoJy4vbmV0d29yay9jaGFuZ2VfY2F0ZWdvcnknKSxcbiAgICBzZXRfdXBfTl9maWx0ZXJzOiByZXF1aXJlKCcuL2ZpbHRlcnMvc2V0X3VwX05fZmlsdGVycycpLFxuICAgIGluaV9zbGlkZXJzOiByZXF1aXJlKCcuL2ZpbHRlcnMvaW5pX3NsaWRlcnMnKVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENsdXN0ZXJncmFtbWVyO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogc3JjL21haW4uanNcbiAqKi8iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0E7Ozs7Ozs7OztBQVNBOztBQVZBOztBQUFBO0FBQ0E7QUFlQTtBQUNBO0FBQ0E7QUFGQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBZEE7QUFyQkE7QUFDQTtBQXNDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	eval("var utils = __webpack_require__(2);\nvar colors = __webpack_require__(3);\nvar transpose_network = __webpack_require__(4);\n\nmodule.exports = function (args) {\n  var defaults = {\n    // Label options\n    row_label_scale: 1,\n    col_label_scale: 1,\n    super_labels: false,\n    show_label_tooltips: false,\n    show_tile_tooltips: false,\n    // matrix options\n    transpose: false,\n    tile_colors: ['#FF0000', '#1C86EE'],\n    bar_colors: ['#FF0000', '#1C86EE'],\n    outline_colors: ['orange', 'black'],\n    highlight_color: '#FFFF00',\n    tile_title: false,\n    // Default domain is set to 0, which means that the domain will be set automatically\n    input_domain: 0,\n    opacity_scale: 'linear',\n    do_zoom: true,\n    background_color: '#FFFFFF',\n    super_border_color: '#F5F5F5',\n    resize: true,\n    outer_margins: {\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0\n    },\n    outer_margins_expand: {\n      top: -666,\n      bottom: 0,\n      left: 0,\n      right: 0\n    },\n    ini_expand: false,\n    // Gray border around the visualization\n    grey_border_width: 3,\n    // the distance between labels and clustergram\n    // a universal margin for the clustergram\n    uni_margin: 4,\n    // force the visualization to be square\n    force_square: 0,\n    tile_click_hlight: false,\n    super_label_scale: 1,\n    make_tile_tooltip: function (d) {\n      return d.info;\n    },\n    // initialize view, e.g. initialize with row filtering\n    ini_view: null,\n    // initialize column category - only show data from one category\n    current_col_cat: 'all_category',\n    use_sidebar: true\n  };\n  // Mixin defaults with user-defined arguments.\n  var config = utils.extend(defaults, args);\n\n  if (config.outer_margins_expand.top === -666) {\n    config.expand_button = false;\n  } else {\n    config.expand_button = true;\n  }\n\n  // save network_data to config\n  // extend does not properly pass network_data\n  config.network_data = args.network_data;\n\n  // replace undersores with space in row/col names\n  config.network_data.row_nodes.forEach(function (d) {\n    d.name = d.name.replace(/_/g, ' ');\n  });\n  config.network_data.col_nodes.forEach(function (d) {\n    d.name = d.name.replace(/_/g, ' ');\n  });\n\n  // replace underscore with space in row/col names from views\n  config.network_data.views.forEach(function (inst_view) {\n\n    var inst_nodes = inst_view.nodes;\n\n    // fix rows in views\n    inst_nodes.row_nodes.forEach(function (d) {\n      d.name = d.name.replace(/_/g, ' ');\n    });\n\n    // fix cols in views\n    inst_nodes.col_nodes.forEach(function (d) {\n      d.name = d.name.replace(/_/g, ' ');\n    });\n  });\n\n  var col_nodes = config.network_data.col_nodes;\n  var row_nodes = config.network_data.row_nodes;\n\n  // add names and instantaneous positions to links\n  config.network_data.links.forEach(function (d) {\n    d.name = row_nodes[d.source].name + '_' + col_nodes[d.target].name;\n    d.row_name = row_nodes[d.source].name;\n    d.col_name = col_nodes[d.target].name;\n  });\n\n  // transpose network if necessary\n  if (config.transpose) {\n    config.network_data = transpose_network(args.network_data);\n    var tmp_col_label = args.col_label;\n    var tmp_row_label = args.row_label;\n    args.row_label = tmp_col_label;\n    args.col_label = tmp_row_label;\n  }\n\n  // super-row/col labels\n  if (!utils.is_undefined(args.row_label) && !utils.is_undefined(args.col_label)) {\n    config.super_labels = true;\n    config.super = {};\n    config.super.row = args.row_label;\n    config.super.col = args.col_label;\n  }\n\n  // initialize cluster ordering - both rows and columns\n  config.inst_order = {};\n  if (!utils.is_undefined(args.order) && utils.is_supported_order(args.order)) {\n    config.inst_order.row = args.order;\n    config.inst_order.col = args.order;\n  } else {\n    config.inst_order.row = 'clust';\n    config.inst_order.col = 'clust';\n  }\n\n  // set row or column order directly -- note that row/col are swapped\n  // !! need to swap row/col orderings\n  if (!utils.is_undefined(args.row_order) && utils.is_supported_order(args.row_order)) {\n    // !! row and col orderings are swapped, need to fix\n    config.inst_order.col = args.row_order;\n  }\n\n  if (!utils.is_undefined(args.col_order) && utils.is_supported_order(args.col_order)) {\n    // !! row and col orderings are swapped, need to fix\n    config.inst_order.row = args.col_order;\n  }\n\n  config.show_dendrogram = utils.has(args.network_data.row_nodes[0], 'group') || utils.has(args.network_data.col_nodes[0], 'group');\n  config.show_categories = utils.has(args.network_data.row_nodes[0], 'cl') || utils.has(args.network_data.col_nodes[0], 'cl');\n\n  // check for category information\n  if (config.show_categories) {\n\n    // initialize dictionary of colors\n    config.class_colors = {};\n\n    // associate classes with colors\n    var class_rows = _.uniq(_.pluck(args.network_data.row_nodes, 'cl'));\n    config.class_colors.row = {};\n    class_rows.forEach(function (c_row, i) {\n      if (i === 0) {\n        config.class_colors.row[c_row] = '#eee';\n      } else {\n        config.class_colors.row[c_row] = colors.get_random_color(i);\n      }\n    });\n\n    // associate classes with colors\n    var class_cols = _.uniq(_.pluck(args.network_data.col_nodes, 'cl'));\n    config.class_colors.col = {};\n\n    // custom column group colors\n    var cat_colors = ['#1f77b4', 'orange', '#8c564b', 'yellow', 'red', 'pink', 'blue', '#e377c2', 'grey'];\n\n    class_cols.forEach(function (c_col, i) {\n      config.class_colors.col[c_col] = cat_colors[i % cat_colors.length];\n    });\n\n    // generate a dictionary of columns in each category\n    config.class_dict = {};\n    col_nodes.forEach(function (d) {\n      // initialize array for each category\n      if (!utils.has(config.class_dict, d.cl)) {\n        config.class_dict[d.cl] = [];\n      }\n      // add column name to category array\n      config.class_dict[d.cl].push(d.name);\n    });\n  }\n\n  return config;\n};//@ sourceMappingURL=data:application/json;base64,");

/***/ },
/* 2 */
/***/ function(module, exports) {

	eval("\n/* Utility functions\n * ----------------------------------------------------------------------- */\nmodule.exports = {\n  normal_name: function (d, max_char) {\n    var inst_name = d.name.replace(/_/g, ' ').split('#')[0];\n    if (inst_name.length > max_char) {\n      inst_name = inst_name.substring(0, max_char) + '..';\n    }\n    return inst_name;\n  },\n  is_supported_order: function (order) {\n    return order === 'ini' || order === 'clust' || order === 'rank' || order === 'class';\n  },\n\n  /* Returns whether or not an object has a certain property.\n   */\n  has: function (obj, key) {\n    return obj != null && hasOwnProperty.call(obj, key);\n  },\n\n  /* Returns true if the object is undefined.\n   */\n  is_undefined: function (obj) {\n    return obj === void 0;\n  },\n\n  /* Mixes two objects in together, overwriting a target with a source.\n   */\n  extend: function (target, source) {\n    target = target || {};\n    for (var prop in source) {\n      if (typeof source[prop] === 'object') {\n        target[prop] = this.extend(target[prop], source[prop]);\n      } else {\n        target[prop] = source[prop];\n      }\n    }\n    return target;\n  }\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvdXRpbHMuanM/MmI0YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qIFV0aWxpdHkgZnVuY3Rpb25zXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIG5vcm1hbF9uYW1lOiBmdW5jdGlvbihkLCBtYXhfY2hhcikge1xuICAgIHZhciBpbnN0X25hbWUgPSBkLm5hbWUucmVwbGFjZSgvXy9nLCAnICcpLnNwbGl0KCcjJylbMF07XG4gICAgaWYgKGluc3RfbmFtZS5sZW5ndGggPiBtYXhfY2hhcikge1xuICAgICAgaW5zdF9uYW1lID0gaW5zdF9uYW1lLnN1YnN0cmluZygwLCBtYXhfY2hhcikgKyAnLi4nO1xuICAgIH1cbiAgICByZXR1cm4gaW5zdF9uYW1lO1xuICB9LFxuICBpc19zdXBwb3J0ZWRfb3JkZXI6IGZ1bmN0aW9uKG9yZGVyKSB7XG4gICAgcmV0dXJuIG9yZGVyID09PSAnaW5pJyB8fCBvcmRlciA9PT0gJ2NsdXN0JyB8fCBvcmRlciA9PT0gJ3JhbmsnIHx8IG9yZGVyID09PSAnY2xhc3MnO1xuICB9LFxuXG4gIC8qIFJldHVybnMgd2hldGhlciBvciBub3QgYW4gb2JqZWN0IGhhcyBhIGNlcnRhaW4gcHJvcGVydHkuXG4gICAqL1xuICBoYXM6IGZ1bmN0aW9uKG9iaiwga2V5KSB7XG4gICAgcmV0dXJuIG9iaiAhPSBudWxsICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpO1xuICB9LFxuXG4gIC8qIFJldHVybnMgdHJ1ZSBpZiB0aGUgb2JqZWN0IGlzIHVuZGVmaW5lZC5cbiAgICovXG4gIGlzX3VuZGVmaW5lZDogZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIG9iaiA9PT0gdm9pZCAwO1xuICB9LFxuXG4gIC8qIE1peGVzIHR3byBvYmplY3RzIGluIHRvZ2V0aGVyLCBvdmVyd3JpdGluZyBhIHRhcmdldCB3aXRoIGEgc291cmNlLlxuICAgKi9cbiAgZXh0ZW5kOiBmdW5jdGlvbih0YXJnZXQsIHNvdXJjZSkge1xuICAgIHRhcmdldCA9IHRhcmdldCB8fCB7fTtcbiAgICBmb3IgKHZhciBwcm9wIGluIHNvdXJjZSkge1xuICAgICAgaWYgKHR5cGVvZiBzb3VyY2VbcHJvcF0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHRhcmdldFtwcm9wXSA9IHRoaXMuZXh0ZW5kKHRhcmdldFtwcm9wXSwgc291cmNlW3Byb3BdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldFtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxufTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHNyYy91dGlscy5qc1xuICoqLyJdLCJtYXBwaW5ncyI6Ijs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBR0E7QUFMQTtBQU9BO0FBQ0E7QUFEQTtBQUNBOzs7QUFLQTtBQUNBO0FBREE7QUFDQTs7O0FBS0E7QUFDQTtBQURBO0FBQ0E7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUdBO0FBSEE7QUFEQTtBQU9BO0FBVEE7QUExQkEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 3 */
/***/ function(module, exports) {

	eval("// colors from http://graphicdesign.stackexchange.com/revisions/3815/8\nvar rand_colors;\n\n// generate random colors\nvar tmp0 = ['#000000', '#FF34FF', '#FFFF00', '#FF4A46'];\nvar tmp1 = d3.scale.category20().range().reverse();\nvar tmp2 = d3.scale.category20b().range();\nvar tmp3 = d3.scale.category20c().range();\nrand_colors = tmp0.concat(tmp1).concat(tmp2).concat(tmp3);\n\nfunction get_default_color() {\n  //return rand_colors[0];\n  return '#EEE';\n}\n\nfunction get_random_color(i) {\n  return rand_colors[i % get_num_colors()];\n}\n\nfunction get_num_colors() {\n  return rand_colors.length;\n}\n\nmodule.exports = {\n  get_default_color: get_default_color,\n  get_random_color: get_random_color,\n  get_num_colors: get_num_colors\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvY29sb3JzLmpzPzE5ZWMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gY29sb3JzIGZyb20gaHR0cDovL2dyYXBoaWNkZXNpZ24uc3RhY2tleGNoYW5nZS5jb20vcmV2aXNpb25zLzM4MTUvOFxudmFyIHJhbmRfY29sb3JzO1xuXG4vLyBnZW5lcmF0ZSByYW5kb20gY29sb3JzXG52YXIgdG1wMCA9IFsnIzAwMDAwMCcsICcjRkYzNEZGJywgJyNGRkZGMDAnLCAnI0ZGNEE0NiddO1xudmFyIHRtcDEgPSBkMy5zY2FsZS5jYXRlZ29yeTIwKCkucmFuZ2UoKS5yZXZlcnNlKCk7XG52YXIgdG1wMiA9IGQzLnNjYWxlLmNhdGVnb3J5MjBiKCkucmFuZ2UoKTtcbnZhciB0bXAzID0gZDMuc2NhbGUuY2F0ZWdvcnkyMGMoKS5yYW5nZSgpO1xucmFuZF9jb2xvcnMgPSB0bXAwLmNvbmNhdCh0bXAxKS5jb25jYXQodG1wMikuY29uY2F0KHRtcDMpO1xuXG5mdW5jdGlvbiBnZXRfZGVmYXVsdF9jb2xvcigpIHtcbiAgLy9yZXR1cm4gcmFuZF9jb2xvcnNbMF07XG4gIHJldHVybiAnI0VFRSc7XG59XG5cbmZ1bmN0aW9uIGdldF9yYW5kb21fY29sb3IoaSkge1xuICByZXR1cm4gcmFuZF9jb2xvcnNbaSAlIGdldF9udW1fY29sb3JzKCldO1xufVxuXG5mdW5jdGlvbiBnZXRfbnVtX2NvbG9ycygpIHtcbiAgcmV0dXJuIHJhbmRfY29sb3JzLmxlbmd0aDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldF9kZWZhdWx0X2NvbG9yOiBnZXRfZGVmYXVsdF9jb2xvcixcbiAgZ2V0X3JhbmRvbV9jb2xvcjogZ2V0X3JhbmRvbV9jb2xvcixcbiAgZ2V0X251bV9jb2xvcnM6IGdldF9udW1fY29sb3JzXG59O1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogc3JjL2NvbG9ycy5qc1xuICoqLyJdLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFGQTtBQUNBO0FBSUE7QUFDQTtBQURBO0FBQ0E7QUFHQTtBQUNBO0FBREE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBSEEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	eval("var utils = __webpack_require__(2);\n/* Transpose network.\n */\nmodule.exports = function (net) {\n  var tnet = {},\n      inst_link,\n      i;\n\n  tnet.row_nodes = net.col_nodes;\n  tnet.col_nodes = net.row_nodes;\n  tnet.links = [];\n\n  for (i = 0; i < net.links.length; i++) {\n    inst_link = {};\n    inst_link.source = net.links[i].target;\n    inst_link.target = net.links[i].source;\n    inst_link.value = net.links[i].value;\n\n    // Optional highlight.\n    if (utils.has(net.links[i], 'highlight')) {\n      inst_link.highlight = net.links[i].highlight;\n    }\n    if (utils.has(net.links[i], 'value_up')) {\n      inst_link.value_up = net.links[i].value_up;\n    }\n    if (utils.has(net.links[i], 'value_dn')) {\n      inst_link.value_dn = net.links[i].value_dn;\n    }\n    if (utils.has(net.links[i], 'info')) {\n      inst_link.info = net.links[i].info;\n    }\n    tnet.links.push(inst_link);\n  }\n\n  return tnet;\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvbmV0d29yay90cmFuc3Bvc2VfbmV0d29yay5qcz9iOGYxIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG4vKiBUcmFuc3Bvc2UgbmV0d29yay5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmV0KSB7XG4gIHZhciB0bmV0ID0ge30sXG4gICAgICBpbnN0X2xpbmssXG4gICAgICBpO1xuXG4gIHRuZXQucm93X25vZGVzID0gbmV0LmNvbF9ub2RlcztcbiAgdG5ldC5jb2xfbm9kZXMgPSBuZXQucm93X25vZGVzO1xuICB0bmV0LmxpbmtzID0gW107XG5cbiAgZm9yIChpID0gMDsgaSA8IG5ldC5saW5rcy5sZW5ndGg7IGkrKykge1xuICAgIGluc3RfbGluayA9IHt9O1xuICAgIGluc3RfbGluay5zb3VyY2UgPSBuZXQubGlua3NbaV0udGFyZ2V0O1xuICAgIGluc3RfbGluay50YXJnZXQgPSBuZXQubGlua3NbaV0uc291cmNlO1xuICAgIGluc3RfbGluay52YWx1ZSA9IG5ldC5saW5rc1tpXS52YWx1ZTtcblxuICAgIC8vIE9wdGlvbmFsIGhpZ2hsaWdodC5cbiAgICBpZiAodXRpbHMuaGFzKG5ldC5saW5rc1tpXSwgJ2hpZ2hsaWdodCcpKSB7XG4gICAgICBpbnN0X2xpbmsuaGlnaGxpZ2h0ID0gbmV0LmxpbmtzW2ldLmhpZ2hsaWdodDtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmhhcyhuZXQubGlua3NbaV0sICd2YWx1ZV91cCcpKSB7XG4gICAgICBpbnN0X2xpbmsudmFsdWVfdXAgPSBuZXQubGlua3NbaV0udmFsdWVfdXA7XG4gICAgfVxuICAgIGlmICh1dGlscy5oYXMobmV0LmxpbmtzW2ldLCAndmFsdWVfZG4nKSkge1xuICAgICAgaW5zdF9saW5rLnZhbHVlX2RuID0gbmV0LmxpbmtzW2ldLnZhbHVlX2RuO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaGFzKG5ldC5saW5rc1tpXSwgJ2luZm8nKSkge1xuICAgICAgaW5zdF9saW5rLmluZm8gPSBuZXQubGlua3NbaV0uaW5mbztcbiAgICB9XG4gICAgdG5ldC5saW5rcy5wdXNoKGluc3RfbGluayk7XG4gIH1cblxuICByZXR1cm4gdG5ldDtcbn07XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBzcmMvbmV0d29yay90cmFuc3Bvc2VfbmV0d29yay5qc1xuICoqLyJdLCJtYXBwaW5ncyI6IkFBQUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFMQTtBQVFBO0FBREE7QUFHQTtBQUNBO0FBREE7QUFHQTtBQUNBO0FBREE7QUFHQTtBQUNBO0FBREE7QUFHQTtBQW5CQTtBQUNBO0FBcUJBO0FBL0JBIiwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	eval("var crossfilter = __webpack_require__(6);\nvar extend = __webpack_require__(8);\nvar utils = __webpack_require__(2);\nvar change_network_view = __webpack_require__(9);\nvar parent_div_size = __webpack_require__(11);\nvar initialize_matrix = __webpack_require__(12);\nvar zoomed = __webpack_require__(13);\n\n/* Params: calculates the size of all the visualization elements in the\nclustergram.\n */\n\nmodule.exports = function (input_config) {\n\n  var config = extend(true, {}, input_config);\n  var params = config;\n\n  if (params.ini_view !== null) {\n    params.network_data = change_network_view(params, params.network_data, params.ini_view);\n    params.ini_view = null;\n  }\n\n  params.labels = {};\n  params.labels.super_label_scale = config.super_label_scale;\n  params.labels.super_labels = config.super_labels;\n\n  if (params.labels.super_labels) {\n    params.labels.super_label_width = 20 * params.labels.super_label_scale;\n    params.labels.super = {};\n    params.labels.super.row = config.super.row;\n    params.labels.super.col = config.super.col;\n  } else {\n    params.labels.super_label_width = 0;\n  }\n\n  params.labels.show_categories = config.show_categories;\n  if (params.labels.show_categories) {\n    params.labels.class_colors = config.class_colors;\n  }\n  params.labels.show_label_tooltips = config.show_label_tooltips;\n\n  params.matrix = {};\n  params.matrix.tile_colors = config.tile_colors;\n  params.matrix.bar_colors = config.bar_colors;\n  params.matrix.outline_colors = config.outline_colors;\n  params.matrix.hlight_color = config.highlight_color;\n  params.matrix.tile_title = config.tile_title;\n  params.matrix.show_tile_tooltips = config.show_tile_tooltips;\n\n  params.matrix.make_tile_tooltip = config.make_tile_tooltip;\n\n  params.viz = {};\n\n  params.viz.viz_wrapper = config.root + ' .viz_wrapper';\n  params.viz.viz_svg = params.viz.viz_wrapper + ' .viz_svg';\n\n  params.sidebar = {};\n  params.sidebar.sidebar_class = 'sidebar_wrapper';\n\n  params.viz.do_zoom = config.do_zoom;\n  params.viz.resize = config.resize;\n  // background colors\n  params.viz.background_color = config.background_color;\n  params.viz.super_border_color = config.super_border_color;\n  // margin widths\n  params.viz.outer_margins = config.outer_margins;\n  params.viz.outer_margins_expand = config.outer_margins_expand;\n  params.viz.expand = config.ini_expand;\n  params.viz.uni_margin = config.uni_margin;\n  params.viz.grey_border_width = config.grey_border_width;\n  params.viz.show_dendrogram = config.show_dendrogram;\n  params.viz.tile_click_hlight = config.tile_click_hlight;\n\n  params.viz.uni_duration = 1000;\n\n  // initialized clicked tile and rows\n  params.matrix.click_hlight_x = -666;\n  params.matrix.click_hlight_y = -666;\n  params.matrix.click_hlight_row = -666;\n  params.matrix.click_hlight_col = -666;\n\n  // definition of a large matrix - based on number of links\n  // below this cutoff reordering is done with transitions\n  params.matrix.def_large_matrix = 10000;\n\n  params.viz.inst_order = config.inst_order;\n\n  params.matrix.opacity_function = config.opacity_scale;\n\n  params.viz.expand_button = config.expand_button;\n\n  var col_nodes = params.network_data.col_nodes;\n  var row_nodes = params.network_data.row_nodes;\n\n  // Create wrapper around SVG visualization\n  d3.select(config.root).append('div').attr('class', 'viz_wrapper');\n\n  // resize parent div - needs to be run here\n  parent_div_size(params);\n\n  params.viz.svg_dim = {};\n  params.viz.svg_dim.width = Number(d3.select(params.viz.viz_wrapper).style('width').replace('px', ''));\n  params.viz.svg_dim.height = Number(d3.select(params.viz.viz_wrapper).style('height').replace('px', ''));\n\n  params.network_data.row_nodes_names = _.pluck(row_nodes, 'name');\n  params.network_data.col_nodes_names = _.pluck(col_nodes, 'name');\n\n  var row_max_char = _.max(row_nodes, function (inst) {\n    return inst.name.length;\n  }).name.length;\n  var col_max_char = _.max(col_nodes, function (inst) {\n    return inst.name.length;\n  }).name.length;\n\n  params.labels.row_max_char = row_max_char;\n  params.labels.col_max_char = col_max_char;\n\n  params.labels.max_label_char = 10;\n\n  var min_num_char = 5;\n  var max_num_char = params.labels.max_label_char;\n\n  params.labels.show_char = 10;\n\n  // calc how much of the label to keep\n  var keep_label_scale = d3.scale.linear().domain([params.labels.show_char, max_num_char]).range([1, params.labels.show_char / max_num_char]).clamp('true');\n\n  params.labels.row_keep = keep_label_scale(row_max_char);\n  params.labels.col_keep = keep_label_scale(col_max_char);\n\n  // define label scale\n  var min_label_width = 65;\n  var max_label_width = 115;\n  var label_scale = d3.scale.linear().domain([min_num_char, max_num_char]).range([min_label_width, max_label_width]).clamp('true');\n\n  params.norm_label = {};\n  params.norm_label.width = {};\n\n  params.norm_label.width.row = label_scale(row_max_char) * params.row_label_scale;\n\n  params.norm_label.width.col = label_scale(col_max_char) * params.col_label_scale;\n\n  params.norm_label.margin = {};\n  params.norm_label.margin.left = params.viz.grey_border_width + params.labels.super_label_width;\n  params.norm_label.margin.top = params.viz.grey_border_width + params.labels.super_label_width;\n\n  params.class_room = {};\n\n  params.class_room.symbol_width = 11;\n\n  if (params.viz.show_dendrogram) {\n    params.class_room.row = 2 * params.class_room.symbol_width;\n    params.class_room.col = params.class_room.symbol_width;\n\n    // TODO check this\n    config.group_level = {\n      row: 5,\n      col: 5\n    };\n  } else {\n    params.class_room.row = params.class_room.symbol_width;\n    params.class_room.col = 0;\n  }\n\n  params.norm_label.background = {};\n  params.norm_label.background.row = params.norm_label.width.row + params.class_room.row + params.viz.uni_margin;\n  params.norm_label.background.col = params.norm_label.width.col + params.class_room.col + params.viz.uni_margin;\n\n  params.viz.clust = {};\n  params.viz.clust.margin = {};\n  params.viz.clust.margin.left = params.norm_label.margin.left + params.norm_label.background.row;\n  params.viz.clust.margin.top = params.norm_label.margin.top + params.norm_label.background.col;\n  params.viz.spillover_x_offset = label_scale(col_max_char) * 0.7 * params.col_label_scale;\n\n  // reduce width by row/col labels and by grey_border width\n  //(reduce width by less since this is less aparent with slanted col labels)\n  var ini_clust_width = params.viz.svg_dim.width - (params.labels.super_label_width + params.norm_label.width.row + params.class_room.row) - params.viz.grey_border_width - params.viz.spillover_x_offset;\n\n  // there is space between the clustergram and the border\n  var ini_clust_height = params.viz.svg_dim.height - (params.labels.super_label_width + params.norm_label.width.col + params.class_room.col) - 5 * params.viz.grey_border_width;\n\n  params.viz.num_col_nodes = col_nodes.length;\n  params.viz.num_row_nodes = row_nodes.length;\n\n  params.viz.clust.dim = {};\n\n  var tmp_x_scale = d3.scale.ordinal().rangeBands([0, ini_clust_width]);\n  tmp_x_scale.domain(_.range(col_nodes.length));\n  var triangle_height = tmp_x_scale.rangeBand() / 2;\n\n  if (triangle_height > params.norm_label.width.col) {\n    ini_clust_width = ini_clust_width * (params.norm_label.width.col / triangle_height);\n  }\n  params.viz.clust.dim.width = ini_clust_width;\n\n  if (ini_clust_width / params.viz.num_col_nodes < ini_clust_height / params.viz.num_row_nodes) {\n\n    params.viz.clust.dim.height = ini_clust_width * (params.viz.num_row_nodes / params.viz.num_col_nodes);\n\n    params.viz.force_square = 1;\n\n    if (params.viz.clust.dim.height > ini_clust_height) {\n      params.viz.clust.dim.height = ini_clust_height;\n      params.viz.force_square = 0;\n    }\n  } else {\n    params.viz.clust.dim.height = ini_clust_height;\n    params.viz.force_square = 0;\n  }\n\n  if (config.force_square === 1) {\n    params.viz.force_square = 1;\n  }\n\n  var enr_max = Math.abs(_.max(col_nodes, function (d) {\n    return Math.abs(d.value);\n  }).value);\n\n  params.labels.bar_scale_col = d3.scale.linear().domain([0, enr_max]).range([0, 0.75 * params.norm_label.width.col]);\n\n  var enr_max = Math.abs(_.max(row_nodes, function (d) {\n    return Math.abs(d.value);\n  }).value);\n  params.labels.bar_scale_row = d3.scale.linear().domain([0, enr_max]).range([0, params.norm_label.width.row]);\n\n  // Define Orderings\n  params.matrix.orders = {\n    // ini\n    ini_row: d3.range(params.viz.num_col_nodes).sort(function (a, b) {\n      return col_nodes[b].ini - col_nodes[a].ini;\n    }),\n    ini_col: d3.range(params.viz.num_row_nodes).sort(function (a, b) {\n      return row_nodes[b].ini - row_nodes[a].ini;\n    }),\n    // rank\n    rank_row: d3.range(params.viz.num_col_nodes).sort(function (a, b) {\n      return col_nodes[b].rank - col_nodes[a].rank;\n    }),\n    rank_col: d3.range(params.viz.num_row_nodes).sort(function (a, b) {\n      return row_nodes[b].rank - row_nodes[a].rank;\n    }),\n    // clustered\n    clust_row: d3.range(params.viz.num_col_nodes).sort(function (a, b) {\n      return col_nodes[b].clust - col_nodes[a].clust;\n    }),\n    clust_col: d3.range(params.viz.num_row_nodes).sort(function (a, b) {\n      return row_nodes[b].clust - row_nodes[a].clust;\n    })\n  };\n\n  // // define class ordering - define on front-end\n  // if (utils.has(col_nodes[0],'cl')){\n\n  //   // the order should be interpreted as the nth node should be positioned here\n  //   // in the order\n\n  //   var tmp_col_nodes = _.sortBy(col_nodes,'cl')\n\n  //   var ordered_col_names = []\n  //   for (var i=0; i< tmp_col_nodes.length; i++){\n  //     ordered_col_names.push( tmp_col_nodes[i].name );\n  //   }\n\n  //   var order_col_class = []\n  //   for (var i=0; i< col_nodes.length; i++){\n  //     var inst_col_name = ordered_col_names[i];\n  //     order_col_class.push( _.indexOf( params.network_data.col_nodes_names, inst_col_name) );\n  //   }\n\n  //   params.matrix.orders.class_row = order_col_class;\n  // }\n\n  if (utils.has(col_nodes[0], 'cl_index')) {\n    params.matrix.orders.class_row = d3.range(params.viz.num_col_nodes).sort(function (a, b) {\n      return col_nodes[b].cl_index - col_nodes[a].cl_index;\n    });\n  }\n\n  params.matrix.x_scale = d3.scale.ordinal().rangeBands([0, params.viz.clust.dim.width]);\n  params.matrix.y_scale = d3.scale.ordinal().rangeBands([0, params.viz.clust.dim.height]);\n\n  if (params.viz.inst_order.row === 'ini') {\n    params.matrix.x_scale.domain(params.matrix.orders.ini_row);\n  } else if (params.viz.inst_order.row === 'clust') {\n    params.matrix.x_scale.domain(params.matrix.orders.clust_row);\n  } else if (params.viz.inst_order.row === 'rank') {\n    params.matrix.x_scale.domain(params.matrix.orders.rank_row);\n  } else if (params.viz.inst_order.row === 'class') {\n    if (utils.has(params.matrix.orders, 'class_row')) {\n      params.matrix.x_scale.domain(params.matrix.orders.class_row);\n    } else {\n      params.matrix.x_scale.domain(params.matrix.orders.clust_row);\n    }\n  }\n\n  if (params.viz.inst_order.col === 'ini') {\n    params.matrix.y_scale.domain(params.matrix.orders.ini_col);\n  } else if (params.viz.inst_order.col === 'clust') {\n    params.matrix.y_scale.domain(params.matrix.orders.clust_col);\n  } else if (params.viz.inst_order.col === 'rank') {\n    params.matrix.y_scale.domain(params.matrix.orders.rank_col);\n  } else if (params.viz.inst_order.col === 'class') {\n    if (utils.has(params.matrix.orders, 'class_row')) {\n      params.matrix.y_scale.domain(params.matrix.orders.class_col);\n    } else {\n      params.matrix.y_scale.domain(params.matrix.orders.clust_col);\n    }\n  }\n\n  params.network_data.links.forEach(function (d) {\n    // d.name = row_nodes[d.source].name + '_' + col_nodes[d.target].name;\n    // d.row_name = row_nodes[d.source].name;\n    // d.col_name = col_nodes[d.target].name;\n    d.x = params.matrix.x_scale(d.target);\n    d.y = params.matrix.y_scale(d.source);\n  });\n\n  // make lnks crossfilter\n  // TODO check if relying on crossfilter\n  params.cf = {};\n  params.cf.links = crossfilter(params.network_data.links);\n  params.cf.dim_x = params.cf.links.dimension(function (d) {\n    return d.x;\n  });\n  params.cf.dim_y = params.cf.links.dimension(function (d) {\n    return d.y;\n  });\n\n  params.matrix.matrix = initialize_matrix(params.network_data);\n\n  params.viz.border_fraction = 55;\n  params.viz.border_width = params.matrix.x_scale.rangeBand() / params.viz.border_fraction;\n\n  params.viz.zoom_switch = params.viz.clust.dim.width / params.viz.num_col_nodes / (params.viz.clust.dim.height / params.viz.num_row_nodes);\n\n  if (params.viz.zoom_switch < 1) {\n    params.viz.zoom_switch = 1;\n  }\n\n  params.matrix.rect_width = params.matrix.x_scale.rangeBand() - 1 * params.viz.border_width;\n  params.matrix.rect_height = params.matrix.y_scale.rangeBand() - 1 * params.viz.border_width / params.viz.zoom_switch;\n\n  params.scale_font_offset = d3.scale.linear().domain([1, 0]).range([0.8, 0.5]);\n\n  params.labels.default_fs_row = params.matrix.y_scale.rangeBand() * 1.01;\n  params.labels.default_fs_col = params.matrix.x_scale.rangeBand() * 0.87;\n\n  params.viz.zoom_scale_font = {};\n  params.viz.zoom_scale_font.row = 1;\n  params.viz.zoom_scale_font.col = 1;\n\n  params.viz.real_zoom = params.norm_label.width.col / (params.matrix.x_scale.rangeBand() / 2);\n\n  if (utils.has(params.network_data, 'all_links')) {\n    params.matrix.max_link = _.max(params.network_data.all_links, function (d) {\n      return Math.abs(d.value);\n    }).value;\n  } else {\n    params.matrix.max_link = _.max(params.network_data.links, function (d) {\n      return Math.abs(d.value);\n    }).value;\n  }\n\n  if (config.input_domain === 0) {\n    if (params.matrix.opacity_function === 'linear') {\n      params.matrix.opacity_scale = d3.scale.linear().domain([0, Math.abs(params.matrix.max_link)]).clamp(true).range([0.0, 1.0]);\n    } else if (params.matrix.opacity_function === 'log') {\n      params.matrix.opacity_scale = d3.scale.log().domain([0.001, Math.abs(params.matrix.max_link)]).clamp(true).range([0.0, 1.0]);\n    }\n  } else {\n    if (params.matrix.opacity_function === 'linear') {\n      params.matrix.opacity_scale = d3.scale.linear().domain([0, config.input_domain]).clamp(true).range([0.0, 1.0]);\n    } else if (params.matrix.opacity_function === 'log') {\n      params.matrix.opacity_scale = d3.scale.log().domain([0.001, config.input_domain]).clamp(true).range([0.0, 1.0]);\n    }\n  }\n\n  // TODO check if using run_trans\n  params.viz.run_trans = false;\n\n  if (utils.has(params.network_data.links[0], 'value_up') || utils.has(params.network_data.links[0], 'value_dn')) {\n    params.matrix.tile_type = 'updn';\n  } else {\n    params.matrix.tile_type = 'simple';\n  }\n\n  if (utils.has(params.network_data.links[0], 'highlight')) {\n    params.matrix.highlight = 1;\n  } else {\n    params.matrix.highlight = 0;\n  }\n\n  params.zoom_behavior = d3.behavior.zoom().scaleExtent([1, params.viz.real_zoom * params.viz.zoom_switch]).on('zoom', function () {\n    zoomed(params);\n  });\n\n  return params;\n};//@ sourceMappingURL=data:application/json;base64,");

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	eval("module.exports = __webpack_require__(7).crossfilter;//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9ub2RlX21vZHVsZXMvY3Jvc3NmaWx0ZXIvaW5kZXguanM/MTdkZCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL2Nyb3NzZmlsdGVyXCIpLmNyb3NzZmlsdGVyO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogbm9kZV9tb2R1bGVzL2Nyb3NzZmlsdGVyL2luZGV4LmpzXG4gKiovIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 7 */
/***/ function(module, exports) {

	eval("(function (exports) {\n  crossfilter.version = \"1.3.12\";\n  function crossfilter_identity(d) {\n    return d;\n  }\n  crossfilter.permute = permute;\n\n  function permute(array, index) {\n    for (var i = 0, n = index.length, copy = new Array(n); i < n; ++i) {\n      copy[i] = array[index[i]];\n    }\n    return copy;\n  }\n  var bisect = crossfilter.bisect = bisect_by(crossfilter_identity);\n\n  bisect.by = bisect_by;\n\n  function bisect_by(f) {\n\n    // Locate the insertion point for x in a to maintain sorted order. The\n    // arguments lo and hi may be used to specify a subset of the array which\n    // should be considered; by default the entire array is used. If x is already\n    // present in a, the insertion point will be before (to the left of) any\n    // existing entries. The return value is suitable for use as the first\n    // argument to `array.splice` assuming that a is already sorted.\n    //\n    // The returned insertion point i partitions the array a into two halves so\n    // that all v < x for v in a[lo:i] for the left side and all v >= x for v in\n    // a[i:hi] for the right side.\n    function bisectLeft(a, x, lo, hi) {\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (f(a[mid]) < x) lo = mid + 1;else hi = mid;\n      }\n      return lo;\n    }\n\n    // Similar to bisectLeft, but returns an insertion point which comes after (to\n    // the right of) any existing entries of x in a.\n    //\n    // The returned insertion point i partitions the array into two halves so that\n    // all v <= x for v in a[lo:i] for the left side and all v > x for v in\n    // a[i:hi] for the right side.\n    function bisectRight(a, x, lo, hi) {\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (x < f(a[mid])) hi = mid;else lo = mid + 1;\n      }\n      return lo;\n    }\n\n    bisectRight.right = bisectRight;\n    bisectRight.left = bisectLeft;\n    return bisectRight;\n  }\n  var heap = crossfilter.heap = heap_by(crossfilter_identity);\n\n  heap.by = heap_by;\n\n  function heap_by(f) {\n\n    // Builds a binary heap within the specified array a[lo:hi]. The heap has the\n    // property such that the parent a[lo+i] is always less than or equal to its\n    // two children: a[lo+2*i+1] and a[lo+2*i+2].\n    function heap(a, lo, hi) {\n      var n = hi - lo,\n          i = (n >>> 1) + 1;\n      while (--i > 0) sift(a, i, n, lo);\n      return a;\n    }\n\n    // Sorts the specified array a[lo:hi] in descending order, assuming it is\n    // already a heap.\n    function sort(a, lo, hi) {\n      var n = hi - lo,\n          t;\n      while (--n > 0) t = a[lo], a[lo] = a[lo + n], a[lo + n] = t, sift(a, 1, n, lo);\n      return a;\n    }\n\n    // Sifts the element a[lo+i-1] down the heap, where the heap is the contiguous\n    // slice of array a[lo:lo+n]. This method can also be used to update the heap\n    // incrementally, without incurring the full cost of reconstructing the heap.\n    function sift(a, i, n, lo) {\n      var d = a[--lo + i],\n          x = f(d),\n          child;\n      while ((child = i << 1) <= n) {\n        if (child < n && f(a[lo + child]) > f(a[lo + child + 1])) child++;\n        if (x <= f(a[lo + child])) break;\n        a[lo + i] = a[lo + child];\n        i = child;\n      }\n      a[lo + i] = d;\n    }\n\n    heap.sort = sort;\n    return heap;\n  }\n  var heapselect = crossfilter.heapselect = heapselect_by(crossfilter_identity);\n\n  heapselect.by = heapselect_by;\n\n  function heapselect_by(f) {\n    var heap = heap_by(f);\n\n    // Returns a new array containing the top k elements in the array a[lo:hi].\n    // The returned array is not sorted, but maintains the heap property. If k is\n    // greater than hi - lo, then fewer than k elements will be returned. The\n    // order of elements in a is unchanged by this operation.\n    function heapselect(a, lo, hi, k) {\n      var queue = new Array(k = Math.min(hi - lo, k)),\n          min,\n          i,\n          x,\n          d;\n\n      for (i = 0; i < k; ++i) queue[i] = a[lo++];\n      heap(queue, 0, k);\n\n      if (lo < hi) {\n        min = f(queue[0]);\n        do {\n          if (x = f(d = a[lo]) > min) {\n            queue[0] = d;\n            min = f(heap(queue, 0, k)[0]);\n          }\n        } while (++lo < hi);\n      }\n\n      return queue;\n    }\n\n    return heapselect;\n  }\n  var insertionsort = crossfilter.insertionsort = insertionsort_by(crossfilter_identity);\n\n  insertionsort.by = insertionsort_by;\n\n  function insertionsort_by(f) {\n\n    function insertionsort(a, lo, hi) {\n      for (var i = lo + 1; i < hi; ++i) {\n        for (var j = i, t = a[i], x = f(t); j > lo && f(a[j - 1]) > x; --j) {\n          a[j] = a[j - 1];\n        }\n        a[j] = t;\n      }\n      return a;\n    }\n\n    return insertionsort;\n  }\n  // Algorithm designed by Vladimir Yaroslavskiy.\n  // Implementation based on the Dart project; see lib/dart/LICENSE for details.\n\n  var quicksort = crossfilter.quicksort = quicksort_by(crossfilter_identity);\n\n  quicksort.by = quicksort_by;\n\n  function quicksort_by(f) {\n    var insertionsort = insertionsort_by(f);\n\n    function sort(a, lo, hi) {\n      return (hi - lo < quicksort_sizeThreshold ? insertionsort : quicksort)(a, lo, hi);\n    }\n\n    function quicksort(a, lo, hi) {\n      // Compute the two pivots by looking at 5 elements.\n      var sixth = (hi - lo) / 6 | 0,\n          i1 = lo + sixth,\n          i5 = hi - 1 - sixth,\n          i3 = lo + hi - 1 >> 1,\n          // The midpoint.\n      i2 = i3 - sixth,\n          i4 = i3 + sixth;\n\n      var e1 = a[i1],\n          x1 = f(e1),\n          e2 = a[i2],\n          x2 = f(e2),\n          e3 = a[i3],\n          x3 = f(e3),\n          e4 = a[i4],\n          x4 = f(e4),\n          e5 = a[i5],\n          x5 = f(e5);\n\n      var t;\n\n      // Sort the selected 5 elements using a sorting network.\n      if (x1 > x2) t = e1, e1 = e2, e2 = t, t = x1, x1 = x2, x2 = t;\n      if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;\n      if (x1 > x3) t = e1, e1 = e3, e3 = t, t = x1, x1 = x3, x3 = t;\n      if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;\n      if (x1 > x4) t = e1, e1 = e4, e4 = t, t = x1, x1 = x4, x4 = t;\n      if (x3 > x4) t = e3, e3 = e4, e4 = t, t = x3, x3 = x4, x4 = t;\n      if (x2 > x5) t = e2, e2 = e5, e5 = t, t = x2, x2 = x5, x5 = t;\n      if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;\n      if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;\n\n      var pivot1 = e2,\n          pivotValue1 = x2,\n          pivot2 = e4,\n          pivotValue2 = x4;\n\n      // e2 and e4 have been saved in the pivot variables. They will be written\n      // back, once the partitioning is finished.\n      a[i1] = e1;\n      a[i2] = a[lo];\n      a[i3] = e3;\n      a[i4] = a[hi - 1];\n      a[i5] = e5;\n\n      var less = lo + 1,\n          // First element in the middle partition.\n      great = hi - 2; // Last element in the middle partition.\n\n      // Note that for value comparison, <, <=, >= and > coerce to a primitive via\n      // Object.prototype.valueOf; == and === do not, so in order to be consistent\n      // with natural order (such as for Date objects), we must do two compares.\n      var pivotsEqual = pivotValue1 <= pivotValue2 && pivotValue1 >= pivotValue2;\n      if (pivotsEqual) {\n\n        // Degenerated case where the partitioning becomes a dutch national flag\n        // problem.\n        //\n        // [ |  < pivot  | == pivot | unpartitioned | > pivot  | ]\n        //  ^             ^          ^             ^            ^\n        // left         less         k           great         right\n        //\n        // a[left] and a[right] are undefined and are filled after the\n        // partitioning.\n        //\n        // Invariants:\n        //   1) for x in ]left, less[ : x < pivot.\n        //   2) for x in [less, k[ : x == pivot.\n        //   3) for x in ]great, right[ : x > pivot.\n        for (var k = less; k <= great; ++k) {\n          var ek = a[k],\n              xk = f(ek);\n          if (xk < pivotValue1) {\n            if (k !== less) {\n              a[k] = a[less];\n              a[less] = ek;\n            }\n            ++less;\n          } else if (xk > pivotValue1) {\n\n            // Find the first element <= pivot in the range [k - 1, great] and\n            // put [:ek:] there. We know that such an element must exist:\n            // When k == less, then el3 (which is equal to pivot) lies in the\n            // interval. Otherwise a[k - 1] == pivot and the search stops at k-1.\n            // Note that in the latter case invariant 2 will be violated for a\n            // short amount of time. The invariant will be restored when the\n            // pivots are put into their final positions.\n            while (true) {\n              var greatValue = f(a[great]);\n              if (greatValue > pivotValue1) {\n                great--;\n                // This is the only location in the while-loop where a new\n                // iteration is started.\n                continue;\n              } else if (greatValue < pivotValue1) {\n                // Triple exchange.\n                a[k] = a[less];\n                a[less++] = a[great];\n                a[great--] = ek;\n                break;\n              } else {\n                a[k] = a[great];\n                a[great--] = ek;\n                // Note: if great < k then we will exit the outer loop and fix\n                // invariant 2 (which we just violated).\n                break;\n              }\n            }\n          }\n        }\n      } else {\n\n        // We partition the list into three parts:\n        //  1. < pivot1\n        //  2. >= pivot1 && <= pivot2\n        //  3. > pivot2\n        //\n        // During the loop we have:\n        // [ | < pivot1 | >= pivot1 && <= pivot2 | unpartitioned  | > pivot2  | ]\n        //  ^            ^                        ^              ^             ^\n        // left         less                     k              great        right\n        //\n        // a[left] and a[right] are undefined and are filled after the\n        // partitioning.\n        //\n        // Invariants:\n        //   1. for x in ]left, less[ : x < pivot1\n        //   2. for x in [less, k[ : pivot1 <= x && x <= pivot2\n        //   3. for x in ]great, right[ : x > pivot2\n        for (var k = less; k <= great; k++) {\n          var ek = a[k],\n              xk = f(ek);\n          if (xk < pivotValue1) {\n            if (k !== less) {\n              a[k] = a[less];\n              a[less] = ek;\n            }\n            ++less;\n          } else {\n            if (xk > pivotValue2) {\n              while (true) {\n                var greatValue = f(a[great]);\n                if (greatValue > pivotValue2) {\n                  great--;\n                  if (great < k) break;\n                  // This is the only location inside the loop where a new\n                  // iteration is started.\n                  continue;\n                } else {\n                  // a[great] <= pivot2.\n                  if (greatValue < pivotValue1) {\n                    // Triple exchange.\n                    a[k] = a[less];\n                    a[less++] = a[great];\n                    a[great--] = ek;\n                  } else {\n                    // a[great] >= pivot1.\n                    a[k] = a[great];\n                    a[great--] = ek;\n                  }\n                  break;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // Move pivots into their final positions.\n      // We shrunk the list from both sides (a[left] and a[right] have\n      // meaningless values in them) and now we move elements from the first\n      // and third partition into these locations so that we can store the\n      // pivots.\n      a[lo] = a[less - 1];\n      a[less - 1] = pivot1;\n      a[hi - 1] = a[great + 1];\n      a[great + 1] = pivot2;\n\n      // The list is now partitioned into three partitions:\n      // [ < pivot1   | >= pivot1 && <= pivot2   |  > pivot2   ]\n      //  ^            ^                        ^             ^\n      // left         less                     great        right\n\n      // Recursive descent. (Don't include the pivot values.)\n      sort(a, lo, less - 1);\n      sort(a, great + 2, hi);\n\n      if (pivotsEqual) {\n        // All elements in the second partition are equal to the pivot. No\n        // need to sort them.\n        return a;\n      }\n\n      // In theory it should be enough to call _doSort recursively on the second\n      // partition.\n      // The Android source however removes the pivot elements from the recursive\n      // call if the second partition is too large (more than 2/3 of the list).\n      if (less < i1 && great > i5) {\n        var lessValue, greatValue;\n        while ((lessValue = f(a[less])) <= pivotValue1 && lessValue >= pivotValue1) ++less;\n        while ((greatValue = f(a[great])) <= pivotValue2 && greatValue >= pivotValue2) --great;\n\n        // Copy paste of the previous 3-way partitioning with adaptions.\n        //\n        // We partition the list into three parts:\n        //  1. == pivot1\n        //  2. > pivot1 && < pivot2\n        //  3. == pivot2\n        //\n        // During the loop we have:\n        // [ == pivot1 | > pivot1 && < pivot2 | unpartitioned  | == pivot2 ]\n        //              ^                      ^              ^\n        //            less                     k              great\n        //\n        // Invariants:\n        //   1. for x in [ *, less[ : x == pivot1\n        //   2. for x in [less, k[ : pivot1 < x && x < pivot2\n        //   3. for x in ]great, * ] : x == pivot2\n        for (var k = less; k <= great; k++) {\n          var ek = a[k],\n              xk = f(ek);\n          if (xk <= pivotValue1 && xk >= pivotValue1) {\n            if (k !== less) {\n              a[k] = a[less];\n              a[less] = ek;\n            }\n            less++;\n          } else {\n            if (xk <= pivotValue2 && xk >= pivotValue2) {\n              while (true) {\n                var greatValue = f(a[great]);\n                if (greatValue <= pivotValue2 && greatValue >= pivotValue2) {\n                  great--;\n                  if (great < k) break;\n                  // This is the only location inside the loop where a new\n                  // iteration is started.\n                  continue;\n                } else {\n                  // a[great] < pivot2.\n                  if (greatValue < pivotValue1) {\n                    // Triple exchange.\n                    a[k] = a[less];\n                    a[less++] = a[great];\n                    a[great--] = ek;\n                  } else {\n                    // a[great] == pivot1.\n                    a[k] = a[great];\n                    a[great--] = ek;\n                  }\n                  break;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // The second partition has now been cleared of pivot elements and looks\n      // as follows:\n      // [  *  |  > pivot1 && < pivot2  | * ]\n      //        ^                      ^\n      //       less                  great\n      // Sort the second partition using recursive descent.\n\n      // The second partition looks as follows:\n      // [  *  |  >= pivot1 && <= pivot2  | * ]\n      //        ^                        ^\n      //       less                    great\n      // Simply sort it by recursive descent.\n\n      return sort(a, less, great + 1);\n    }\n\n    return sort;\n  }\n\n  var quicksort_sizeThreshold = 32;\n  var crossfilter_array8 = crossfilter_arrayUntyped,\n      crossfilter_array16 = crossfilter_arrayUntyped,\n      crossfilter_array32 = crossfilter_arrayUntyped,\n      crossfilter_arrayLengthen = crossfilter_arrayLengthenUntyped,\n      crossfilter_arrayWiden = crossfilter_arrayWidenUntyped;\n\n  if (typeof Uint8Array !== \"undefined\") {\n    crossfilter_array8 = function (n) {\n      return new Uint8Array(n);\n    };\n    crossfilter_array16 = function (n) {\n      return new Uint16Array(n);\n    };\n    crossfilter_array32 = function (n) {\n      return new Uint32Array(n);\n    };\n\n    crossfilter_arrayLengthen = function (array, length) {\n      if (array.length >= length) return array;\n      var copy = new array.constructor(length);\n      copy.set(array);\n      return copy;\n    };\n\n    crossfilter_arrayWiden = function (array, width) {\n      var copy;\n      switch (width) {\n        case 16:\n          copy = crossfilter_array16(array.length);break;\n        case 32:\n          copy = crossfilter_array32(array.length);break;\n        default:\n          throw new Error(\"invalid array width!\");\n      }\n      copy.set(array);\n      return copy;\n    };\n  }\n\n  function crossfilter_arrayUntyped(n) {\n    var array = new Array(n),\n        i = -1;\n    while (++i < n) array[i] = 0;\n    return array;\n  }\n\n  function crossfilter_arrayLengthenUntyped(array, length) {\n    var n = array.length;\n    while (n < length) array[n++] = 0;\n    return array;\n  }\n\n  function crossfilter_arrayWidenUntyped(array, width) {\n    if (width > 32) throw new Error(\"invalid array width!\");\n    return array;\n  }\n  function crossfilter_filterExact(bisect, value) {\n    return function (values) {\n      var n = values.length;\n      return [bisect.left(values, value, 0, n), bisect.right(values, value, 0, n)];\n    };\n  }\n\n  function crossfilter_filterRange(bisect, range) {\n    var min = range[0],\n        max = range[1];\n    return function (values) {\n      var n = values.length;\n      return [bisect.left(values, min, 0, n), bisect.left(values, max, 0, n)];\n    };\n  }\n\n  function crossfilter_filterAll(values) {\n    return [0, values.length];\n  }\n  function crossfilter_null() {\n    return null;\n  }\n  function crossfilter_zero() {\n    return 0;\n  }\n  function crossfilter_reduceIncrement(p) {\n    return p + 1;\n  }\n\n  function crossfilter_reduceDecrement(p) {\n    return p - 1;\n  }\n\n  function crossfilter_reduceAdd(f) {\n    return function (p, v) {\n      return p + +f(v);\n    };\n  }\n\n  function crossfilter_reduceSubtract(f) {\n    return function (p, v) {\n      return p - f(v);\n    };\n  }\n  exports.crossfilter = crossfilter;\n\n  function crossfilter() {\n    var crossfilter = {\n      add: add,\n      remove: removeData,\n      dimension: dimension,\n      groupAll: groupAll,\n      size: size\n    };\n\n    var data = [],\n        // the records\n    n = 0,\n        // the number of records; data.length\n    m = 0,\n        // a bit mask representing which dimensions are in use\n    M = 8,\n        // number of dimensions that can fit in `filters`\n    filters = crossfilter_array8(0),\n        // M bits per record; 1 is filtered out\n    filterListeners = [],\n        // when the filters change\n    dataListeners = [],\n        // when data is added\n    removeDataListeners = []; // when data is removed\n\n    // Adds the specified new records to this crossfilter.\n    function add(newData) {\n      var n0 = n,\n          n1 = newData.length;\n\n      // If there's actually new data to add…\n      // Merge the new data into the existing data.\n      // Lengthen the filter bitset to handle the new records.\n      // Notify listeners (dimensions and groups) that new data is available.\n      if (n1) {\n        data = data.concat(newData);\n        filters = crossfilter_arrayLengthen(filters, n += n1);\n        dataListeners.forEach(function (l) {\n          l(newData, n0, n1);\n        });\n      }\n\n      return crossfilter;\n    }\n\n    // Removes all records that match the current filters.\n    function removeData() {\n      var newIndex = crossfilter_index(n, n),\n          removed = [];\n      for (var i = 0, j = 0; i < n; ++i) {\n        if (filters[i]) newIndex[i] = j++;else removed.push(i);\n      }\n\n      // Remove all matching records from groups.\n      filterListeners.forEach(function (l) {\n        l(0, [], removed);\n      });\n\n      // Update indexes.\n      removeDataListeners.forEach(function (l) {\n        l(newIndex);\n      });\n\n      // Remove old filters and data by overwriting.\n      for (var i = 0, j = 0, k; i < n; ++i) {\n        if (k = filters[i]) {\n          if (i !== j) filters[j] = k, data[j] = data[i];\n          ++j;\n        }\n      }\n      data.length = j;\n      while (n > j) filters[--n] = 0;\n    }\n\n    // Adds a new dimension with the specified value accessor function.\n    function dimension(value) {\n      var dimension = {\n        filter: filter,\n        filterExact: filterExact,\n        filterRange: filterRange,\n        filterFunction: filterFunction,\n        filterAll: filterAll,\n        top: top,\n        bottom: bottom,\n        group: group,\n        groupAll: groupAll,\n        dispose: dispose,\n        remove: dispose // for backwards-compatibility\n      };\n\n      var one = ~m & - ~m,\n          // lowest unset bit as mask, e.g., 00001000\n      zero = ~one,\n          // inverted one, e.g., 11110111\n      values,\n          // sorted, cached array\n      index,\n          // value rank ↦ object id\n      newValues,\n          // temporary array storing newly-added values\n      newIndex,\n          // temporary array storing newly-added index\n      sort = quicksort_by(function (i) {\n        return newValues[i];\n      }),\n          refilter = crossfilter_filterAll,\n          // for recomputing filter\n      refilterFunction,\n          // the custom filter function in use\n      indexListeners = [],\n          // when data is added\n      dimensionGroups = [],\n          lo0 = 0,\n          hi0 = 0;\n\n      // Updating a dimension is a two-stage process. First, we must update the\n      // associated filters for the newly-added records. Once all dimensions have\n      // updated their filters, the groups are notified to update.\n      dataListeners.unshift(preAdd);\n      dataListeners.push(postAdd);\n\n      removeDataListeners.push(removeData);\n\n      // Incorporate any existing data into this dimension, and make sure that the\n      // filter bitset is wide enough to handle the new dimension.\n      m |= one;\n      if (M >= 32 ? !one : m & -(1 << M)) {\n        filters = crossfilter_arrayWiden(filters, M <<= 1);\n      }\n      preAdd(data, 0, n);\n      postAdd(data, 0, n);\n\n      // Incorporates the specified new records into this dimension.\n      // This function is responsible for updating filters, values, and index.\n      function preAdd(newData, n0, n1) {\n\n        // Permute new values into natural order using a sorted index.\n        newValues = newData.map(value);\n        newIndex = sort(crossfilter_range(n1), 0, n1);\n        newValues = permute(newValues, newIndex);\n\n        // Bisect newValues to determine which new records are selected.\n        var bounds = refilter(newValues),\n            lo1 = bounds[0],\n            hi1 = bounds[1],\n            i;\n        if (refilterFunction) {\n          for (i = 0; i < n1; ++i) {\n            if (!refilterFunction(newValues[i], i)) filters[newIndex[i] + n0] |= one;\n          }\n        } else {\n          for (i = 0; i < lo1; ++i) filters[newIndex[i] + n0] |= one;\n          for (i = hi1; i < n1; ++i) filters[newIndex[i] + n0] |= one;\n        }\n\n        // If this dimension previously had no data, then we don't need to do the\n        // more expensive merge operation; use the new values and index as-is.\n        if (!n0) {\n          values = newValues;\n          index = newIndex;\n          lo0 = lo1;\n          hi0 = hi1;\n          return;\n        }\n\n        var oldValues = values,\n            oldIndex = index,\n            i0 = 0,\n            i1 = 0;\n\n        // Otherwise, create new arrays into which to merge new and old.\n        values = new Array(n);\n        index = crossfilter_index(n, n);\n\n        // Merge the old and new sorted values, and old and new index.\n        for (i = 0; i0 < n0 && i1 < n1; ++i) {\n          if (oldValues[i0] < newValues[i1]) {\n            values[i] = oldValues[i0];\n            index[i] = oldIndex[i0++];\n          } else {\n            values[i] = newValues[i1];\n            index[i] = newIndex[i1++] + n0;\n          }\n        }\n\n        // Add any remaining old values.\n        for (; i0 < n0; ++i0, ++i) {\n          values[i] = oldValues[i0];\n          index[i] = oldIndex[i0];\n        }\n\n        // Add any remaining new values.\n        for (; i1 < n1; ++i1, ++i) {\n          values[i] = newValues[i1];\n          index[i] = newIndex[i1] + n0;\n        }\n\n        // Bisect again to recompute lo0 and hi0.\n        bounds = refilter(values), lo0 = bounds[0], hi0 = bounds[1];\n      }\n\n      // When all filters have updated, notify index listeners of the new values.\n      function postAdd(newData, n0, n1) {\n        indexListeners.forEach(function (l) {\n          l(newValues, newIndex, n0, n1);\n        });\n        newValues = newIndex = null;\n      }\n\n      function removeData(reIndex) {\n        for (var i = 0, j = 0, k; i < n; ++i) {\n          if (filters[k = index[i]]) {\n            if (i !== j) values[j] = values[i];\n            index[j] = reIndex[k];\n            ++j;\n          }\n        }\n        values.length = j;\n        while (j < n) index[j++] = 0;\n\n        // Bisect again to recompute lo0 and hi0.\n        var bounds = refilter(values);\n        lo0 = bounds[0], hi0 = bounds[1];\n      }\n\n      // Updates the selected values based on the specified bounds [lo, hi].\n      // This implementation is used by all the public filter methods.\n      function filterIndexBounds(bounds) {\n        var lo1 = bounds[0],\n            hi1 = bounds[1];\n\n        if (refilterFunction) {\n          refilterFunction = null;\n          filterIndexFunction(function (d, i) {\n            return lo1 <= i && i < hi1;\n          });\n          lo0 = lo1;\n          hi0 = hi1;\n          return dimension;\n        }\n\n        var i,\n            j,\n            k,\n            added = [],\n            removed = [];\n\n        // Fast incremental update based on previous lo index.\n        if (lo1 < lo0) {\n          for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {\n            filters[k = index[i]] ^= one;\n            added.push(k);\n          }\n        } else if (lo1 > lo0) {\n          for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {\n            filters[k = index[i]] ^= one;\n            removed.push(k);\n          }\n        }\n\n        // Fast incremental update based on previous hi index.\n        if (hi1 > hi0) {\n          for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {\n            filters[k = index[i]] ^= one;\n            added.push(k);\n          }\n        } else if (hi1 < hi0) {\n          for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {\n            filters[k = index[i]] ^= one;\n            removed.push(k);\n          }\n        }\n\n        lo0 = lo1;\n        hi0 = hi1;\n        filterListeners.forEach(function (l) {\n          l(one, added, removed);\n        });\n        return dimension;\n      }\n\n      // Filters this dimension using the specified range, value, or null.\n      // If the range is null, this is equivalent to filterAll.\n      // If the range is an array, this is equivalent to filterRange.\n      // Otherwise, this is equivalent to filterExact.\n      function filter(range) {\n        return range == null ? filterAll() : Array.isArray(range) ? filterRange(range) : typeof range === \"function\" ? filterFunction(range) : filterExact(range);\n      }\n\n      // Filters this dimension to select the exact value.\n      function filterExact(value) {\n        return filterIndexBounds((refilter = crossfilter_filterExact(bisect, value))(values));\n      }\n\n      // Filters this dimension to select the specified range [lo, hi].\n      // The lower bound is inclusive, and the upper bound is exclusive.\n      function filterRange(range) {\n        return filterIndexBounds((refilter = crossfilter_filterRange(bisect, range))(values));\n      }\n\n      // Clears any filters on this dimension.\n      function filterAll() {\n        return filterIndexBounds((refilter = crossfilter_filterAll)(values));\n      }\n\n      // Filters this dimension using an arbitrary function.\n      function filterFunction(f) {\n        refilter = crossfilter_filterAll;\n\n        filterIndexFunction(refilterFunction = f);\n\n        lo0 = 0;\n        hi0 = n;\n\n        return dimension;\n      }\n\n      function filterIndexFunction(f) {\n        var i,\n            k,\n            x,\n            added = [],\n            removed = [];\n\n        for (i = 0; i < n; ++i) {\n          if (!(filters[k = index[i]] & one) ^ !!(x = f(values[i], i))) {\n            if (x) filters[k] &= zero, added.push(k);else filters[k] |= one, removed.push(k);\n          }\n        }\n        filterListeners.forEach(function (l) {\n          l(one, added, removed);\n        });\n      }\n\n      // Returns the top K selected records based on this dimension's order.\n      // Note: observes this dimension's filter, unlike group and groupAll.\n      function top(k) {\n        var array = [],\n            i = hi0,\n            j;\n\n        while (--i >= lo0 && k > 0) {\n          if (!filters[j = index[i]]) {\n            array.push(data[j]);\n            --k;\n          }\n        }\n\n        return array;\n      }\n\n      // Returns the bottom K selected records based on this dimension's order.\n      // Note: observes this dimension's filter, unlike group and groupAll.\n      function bottom(k) {\n        var array = [],\n            i = lo0,\n            j;\n\n        while (i < hi0 && k > 0) {\n          if (!filters[j = index[i]]) {\n            array.push(data[j]);\n            --k;\n          }\n          i++;\n        }\n\n        return array;\n      }\n\n      // Adds a new group to this dimension, using the specified key function.\n      function group(key) {\n        var group = {\n          top: top,\n          all: all,\n          reduce: reduce,\n          reduceCount: reduceCount,\n          reduceSum: reduceSum,\n          order: order,\n          orderNatural: orderNatural,\n          size: size,\n          dispose: dispose,\n          remove: dispose // for backwards-compatibility\n        };\n\n        // Ensure that this group will be removed when the dimension is removed.\n        dimensionGroups.push(group);\n\n        var groups,\n            // array of {key, value}\n        groupIndex,\n            // object id ↦ group id\n        groupWidth = 8,\n            groupCapacity = crossfilter_capacity(groupWidth),\n            k = 0,\n            // cardinality\n        select,\n            heap,\n            reduceAdd,\n            reduceRemove,\n            reduceInitial,\n            update = crossfilter_null,\n            reset = crossfilter_null,\n            resetNeeded = true,\n            groupAll = key === crossfilter_null;\n\n        if (arguments.length < 1) key = crossfilter_identity;\n\n        // The group listens to the crossfilter for when any dimension changes, so\n        // that it can update the associated reduce values. It must also listen to\n        // the parent dimension for when data is added, and compute new keys.\n        filterListeners.push(update);\n        indexListeners.push(add);\n        removeDataListeners.push(removeData);\n\n        // Incorporate any existing data into the grouping.\n        add(values, index, 0, n);\n\n        // Incorporates the specified new values into this group.\n        // This function is responsible for updating groups and groupIndex.\n        function add(newValues, newIndex, n0, n1) {\n          var oldGroups = groups,\n              reIndex = crossfilter_index(k, groupCapacity),\n              add = reduceAdd,\n              initial = reduceInitial,\n              k0 = k,\n              // old cardinality\n          i0 = 0,\n              // index of old group\n          i1 = 0,\n              // index of new record\n          j,\n              // object id\n          g0,\n              // old group\n          x0,\n              // old key\n          x1,\n              // new key\n          g,\n              // group to add\n          x; // key of group to add\n\n          // If a reset is needed, we don't need to update the reduce values.\n          if (resetNeeded) add = initial = crossfilter_null;\n\n          // Reset the new groups (k is a lower bound).\n          // Also, make sure that groupIndex exists and is long enough.\n          groups = new Array(k), k = 0;\n          groupIndex = k0 > 1 ? crossfilter_arrayLengthen(groupIndex, n) : crossfilter_index(n, groupCapacity);\n\n          // Get the first old key (x0 of g0), if it exists.\n          if (k0) x0 = (g0 = oldGroups[0]).key;\n\n          // Find the first new key (x1), skipping NaN keys.\n          while (i1 < n1 && !((x1 = key(newValues[i1])) >= x1)) ++i1;\n\n          // While new keys remain…\n          while (i1 < n1) {\n\n            // Determine the lesser of the two current keys; new and old.\n            // If there are no old keys remaining, then always add the new key.\n            if (g0 && x0 <= x1) {\n              g = g0, x = x0;\n\n              // Record the new index of the old group.\n              reIndex[i0] = k;\n\n              // Retrieve the next old key.\n              if (g0 = oldGroups[++i0]) x0 = g0.key;\n            } else {\n              g = { key: x1, value: initial() }, x = x1;\n            }\n\n            // Add the lesser group.\n            groups[k] = g;\n\n            // Add any selected records belonging to the added group, while\n            // advancing the new key and populating the associated group index.\n            while (!(x1 > x)) {\n              groupIndex[j = newIndex[i1] + n0] = k;\n              if (!(filters[j] & zero)) g.value = add(g.value, data[j]);\n              if (++i1 >= n1) break;\n              x1 = key(newValues[i1]);\n            }\n\n            groupIncrement();\n          }\n\n          // Add any remaining old groups that were greater than all new keys.\n          // No incremental reduce is needed; these groups have no new records.\n          // Also record the new index of the old group.\n          while (i0 < k0) {\n            groups[reIndex[i0] = k] = oldGroups[i0++];\n            groupIncrement();\n          }\n\n          // If we added any new groups before any old groups,\n          // update the group index of all the old records.\n          if (k > i0) for (i0 = 0; i0 < n0; ++i0) {\n            groupIndex[i0] = reIndex[groupIndex[i0]];\n          }\n\n          // Modify the update and reset behavior based on the cardinality.\n          // If the cardinality is less than or equal to one, then the groupIndex\n          // is not needed. If the cardinality is zero, then there are no records\n          // and therefore no groups to update or reset. Note that we also must\n          // change the registered listener to point to the new method.\n          j = filterListeners.indexOf(update);\n          if (k > 1) {\n            update = updateMany;\n            reset = resetMany;\n          } else {\n            if (!k && groupAll) {\n              k = 1;\n              groups = [{ key: null, value: initial() }];\n            }\n            if (k === 1) {\n              update = updateOne;\n              reset = resetOne;\n            } else {\n              update = crossfilter_null;\n              reset = crossfilter_null;\n            }\n            groupIndex = null;\n          }\n          filterListeners[j] = update;\n\n          // Count the number of added groups,\n          // and widen the group index as needed.\n          function groupIncrement() {\n            if (++k === groupCapacity) {\n              reIndex = crossfilter_arrayWiden(reIndex, groupWidth <<= 1);\n              groupIndex = crossfilter_arrayWiden(groupIndex, groupWidth);\n              groupCapacity = crossfilter_capacity(groupWidth);\n            }\n          }\n        }\n\n        function removeData() {\n          if (k > 1) {\n            var oldK = k,\n                oldGroups = groups,\n                seenGroups = crossfilter_index(oldK, oldK);\n\n            // Filter out non-matches by copying matching group index entries to\n            // the beginning of the array.\n            for (var i = 0, j = 0; i < n; ++i) {\n              if (filters[i]) {\n                seenGroups[groupIndex[j] = groupIndex[i]] = 1;\n                ++j;\n              }\n            }\n\n            // Reassemble groups including only those groups that were referred\n            // to by matching group index entries.  Note the new group index in\n            // seenGroups.\n            groups = [], k = 0;\n            for (i = 0; i < oldK; ++i) {\n              if (seenGroups[i]) {\n                seenGroups[i] = k++;\n                groups.push(oldGroups[i]);\n              }\n            }\n\n            if (k > 1) {\n              // Reindex the group index using seenGroups to find the new index.\n              for (var i = 0; i < j; ++i) groupIndex[i] = seenGroups[groupIndex[i]];\n            } else {\n              groupIndex = null;\n            }\n            filterListeners[filterListeners.indexOf(update)] = k > 1 ? (reset = resetMany, update = updateMany) : k === 1 ? (reset = resetOne, update = updateOne) : reset = update = crossfilter_null;\n          } else if (k === 1) {\n            if (groupAll) return;\n            for (var i = 0; i < n; ++i) if (filters[i]) return;\n            groups = [], k = 0;\n            filterListeners[filterListeners.indexOf(update)] = update = reset = crossfilter_null;\n          }\n        }\n\n        // Reduces the specified selected or deselected records.\n        // This function is only used when the cardinality is greater than 1.\n        function updateMany(filterOne, added, removed) {\n          if (filterOne === one || resetNeeded) return;\n\n          var i, k, n, g;\n\n          // Add the added values.\n          for (i = 0, n = added.length; i < n; ++i) {\n            if (!(filters[k = added[i]] & zero)) {\n              g = groups[groupIndex[k]];\n              g.value = reduceAdd(g.value, data[k]);\n            }\n          }\n\n          // Remove the removed values.\n          for (i = 0, n = removed.length; i < n; ++i) {\n            if ((filters[k = removed[i]] & zero) === filterOne) {\n              g = groups[groupIndex[k]];\n              g.value = reduceRemove(g.value, data[k]);\n            }\n          }\n        }\n\n        // Reduces the specified selected or deselected records.\n        // This function is only used when the cardinality is 1.\n        function updateOne(filterOne, added, removed) {\n          if (filterOne === one || resetNeeded) return;\n\n          var i,\n              k,\n              n,\n              g = groups[0];\n\n          // Add the added values.\n          for (i = 0, n = added.length; i < n; ++i) {\n            if (!(filters[k = added[i]] & zero)) {\n              g.value = reduceAdd(g.value, data[k]);\n            }\n          }\n\n          // Remove the removed values.\n          for (i = 0, n = removed.length; i < n; ++i) {\n            if ((filters[k = removed[i]] & zero) === filterOne) {\n              g.value = reduceRemove(g.value, data[k]);\n            }\n          }\n        }\n\n        // Recomputes the group reduce values from scratch.\n        // This function is only used when the cardinality is greater than 1.\n        function resetMany() {\n          var i, g;\n\n          // Reset all group values.\n          for (i = 0; i < k; ++i) {\n            groups[i].value = reduceInitial();\n          }\n\n          // Add any selected records.\n          for (i = 0; i < n; ++i) {\n            if (!(filters[i] & zero)) {\n              g = groups[groupIndex[i]];\n              g.value = reduceAdd(g.value, data[i]);\n            }\n          }\n        }\n\n        // Recomputes the group reduce values from scratch.\n        // This function is only used when the cardinality is 1.\n        function resetOne() {\n          var i,\n              g = groups[0];\n\n          // Reset the singleton group values.\n          g.value = reduceInitial();\n\n          // Add any selected records.\n          for (i = 0; i < n; ++i) {\n            if (!(filters[i] & zero)) {\n              g.value = reduceAdd(g.value, data[i]);\n            }\n          }\n        }\n\n        // Returns the array of group values, in the dimension's natural order.\n        function all() {\n          if (resetNeeded) reset(), resetNeeded = false;\n          return groups;\n        }\n\n        // Returns a new array containing the top K group values, in reduce order.\n        function top(k) {\n          var top = select(all(), 0, groups.length, k);\n          return heap.sort(top, 0, top.length);\n        }\n\n        // Sets the reduce behavior for this group to use the specified functions.\n        // This method lazily recomputes the reduce values, waiting until needed.\n        function reduce(add, remove, initial) {\n          reduceAdd = add;\n          reduceRemove = remove;\n          reduceInitial = initial;\n          resetNeeded = true;\n          return group;\n        }\n\n        // A convenience method for reducing by count.\n        function reduceCount() {\n          return reduce(crossfilter_reduceIncrement, crossfilter_reduceDecrement, crossfilter_zero);\n        }\n\n        // A convenience method for reducing by sum(value).\n        function reduceSum(value) {\n          return reduce(crossfilter_reduceAdd(value), crossfilter_reduceSubtract(value), crossfilter_zero);\n        }\n\n        // Sets the reduce order, using the specified accessor.\n        function order(value) {\n          select = heapselect_by(valueOf);\n          heap = heap_by(valueOf);\n          function valueOf(d) {\n            return value(d.value);\n          }\n          return group;\n        }\n\n        // A convenience method for natural ordering by reduce value.\n        function orderNatural() {\n          return order(crossfilter_identity);\n        }\n\n        // Returns the cardinality of this group, irrespective of any filters.\n        function size() {\n          return k;\n        }\n\n        // Removes this group and associated event listeners.\n        function dispose() {\n          var i = filterListeners.indexOf(update);\n          if (i >= 0) filterListeners.splice(i, 1);\n          i = indexListeners.indexOf(add);\n          if (i >= 0) indexListeners.splice(i, 1);\n          i = removeDataListeners.indexOf(removeData);\n          if (i >= 0) removeDataListeners.splice(i, 1);\n          return group;\n        }\n\n        return reduceCount().orderNatural();\n      }\n\n      // A convenience function for generating a singleton group.\n      function groupAll() {\n        var g = group(crossfilter_null),\n            all = g.all;\n        delete g.all;\n        delete g.top;\n        delete g.order;\n        delete g.orderNatural;\n        delete g.size;\n        g.value = function () {\n          return all()[0].value;\n        };\n        return g;\n      }\n\n      // Removes this dimension and associated groups and event listeners.\n      function dispose() {\n        dimensionGroups.forEach(function (group) {\n          group.dispose();\n        });\n        var i = dataListeners.indexOf(preAdd);\n        if (i >= 0) dataListeners.splice(i, 1);\n        i = dataListeners.indexOf(postAdd);\n        if (i >= 0) dataListeners.splice(i, 1);\n        i = removeDataListeners.indexOf(removeData);\n        if (i >= 0) removeDataListeners.splice(i, 1);\n        m &= zero;\n        return filterAll();\n      }\n\n      return dimension;\n    }\n\n    // A convenience method for groupAll on a dummy dimension.\n    // This implementation can be optimized since it always has cardinality 1.\n    function groupAll() {\n      var group = {\n        reduce: reduce,\n        reduceCount: reduceCount,\n        reduceSum: reduceSum,\n        value: value,\n        dispose: dispose,\n        remove: dispose // for backwards-compatibility\n      };\n\n      var reduceValue,\n          reduceAdd,\n          reduceRemove,\n          reduceInitial,\n          resetNeeded = true;\n\n      // The group listens to the crossfilter for when any dimension changes, so\n      // that it can update the reduce value. It must also listen to the parent\n      // dimension for when data is added.\n      filterListeners.push(update);\n      dataListeners.push(add);\n\n      // For consistency; actually a no-op since resetNeeded is true.\n      add(data, 0, n);\n\n      // Incorporates the specified new values into this group.\n      function add(newData, n0) {\n        var i;\n\n        if (resetNeeded) return;\n\n        // Add the added values.\n        for (i = n0; i < n; ++i) {\n          if (!filters[i]) {\n            reduceValue = reduceAdd(reduceValue, data[i]);\n          }\n        }\n      }\n\n      // Reduces the specified selected or deselected records.\n      function update(filterOne, added, removed) {\n        var i, k, n;\n\n        if (resetNeeded) return;\n\n        // Add the added values.\n        for (i = 0, n = added.length; i < n; ++i) {\n          if (!filters[k = added[i]]) {\n            reduceValue = reduceAdd(reduceValue, data[k]);\n          }\n        }\n\n        // Remove the removed values.\n        for (i = 0, n = removed.length; i < n; ++i) {\n          if (filters[k = removed[i]] === filterOne) {\n            reduceValue = reduceRemove(reduceValue, data[k]);\n          }\n        }\n      }\n\n      // Recomputes the group reduce value from scratch.\n      function reset() {\n        var i;\n\n        reduceValue = reduceInitial();\n\n        for (i = 0; i < n; ++i) {\n          if (!filters[i]) {\n            reduceValue = reduceAdd(reduceValue, data[i]);\n          }\n        }\n      }\n\n      // Sets the reduce behavior for this group to use the specified functions.\n      // This method lazily recomputes the reduce value, waiting until needed.\n      function reduce(add, remove, initial) {\n        reduceAdd = add;\n        reduceRemove = remove;\n        reduceInitial = initial;\n        resetNeeded = true;\n        return group;\n      }\n\n      // A convenience method for reducing by count.\n      function reduceCount() {\n        return reduce(crossfilter_reduceIncrement, crossfilter_reduceDecrement, crossfilter_zero);\n      }\n\n      // A convenience method for reducing by sum(value).\n      function reduceSum(value) {\n        return reduce(crossfilter_reduceAdd(value), crossfilter_reduceSubtract(value), crossfilter_zero);\n      }\n\n      // Returns the computed reduce value.\n      function value() {\n        if (resetNeeded) reset(), resetNeeded = false;\n        return reduceValue;\n      }\n\n      // Removes this group and associated event listeners.\n      function dispose() {\n        var i = filterListeners.indexOf(update);\n        if (i >= 0) filterListeners.splice(i);\n        i = dataListeners.indexOf(add);\n        if (i >= 0) dataListeners.splice(i);\n        return group;\n      }\n\n      return reduceCount();\n    }\n\n    // Returns the number of records in this crossfilter, irrespective of any filters.\n    function size() {\n      return n;\n    }\n\n    return arguments.length ? add(arguments[0]) : crossfilter;\n  }\n\n  // Returns an array of size n, big enough to store ids up to m.\n  function crossfilter_index(n, m) {\n    return (m < 0x101 ? crossfilter_array8 : m < 0x10001 ? crossfilter_array16 : crossfilter_array32)(n);\n  }\n\n  // Constructs a new array of size n, with sequential values from 0 to n - 1.\n  function crossfilter_range(n) {\n    var range = crossfilter_index(n, n);\n    for (var i = -1; ++i < n;) range[i] = i;\n    return range;\n  }\n\n  function crossfilter_capacity(w) {\n    return w === 8 ? 0x100 : w === 16 ? 0x10000 : 0x100000000;\n  }\n})(typeof exports !== 'undefined' && exports || this);//@ sourceMappingURL=data:application/json;base64,");

/***/ },
/* 8 */
/***/ function(module, exports) {

	eval("'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) {/**/}\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\nmodule.exports = function extend() {\n\tvar options,\n\t    name,\n\t    src,\n\t    copy,\n\t    copyIsArray,\n\t    clone,\n\t    target = arguments[0],\n\t    i = 1,\n\t    length = arguments.length,\n\t    deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t} else if (typeof target !== 'object' && typeof target !== 'function' || target == null) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = target[name];\n\t\t\t\tcopy = options[name];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\n\t\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9ub2RlX21vZHVsZXMvZXh0ZW5kL2luZGV4LmpzP2U1YjkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbnZhciBpc0FycmF5ID0gZnVuY3Rpb24gaXNBcnJheShhcnIpIHtcblx0aWYgKHR5cGVvZiBBcnJheS5pc0FycmF5ID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0cmV0dXJuIEFycmF5LmlzQXJyYXkoYXJyKTtcblx0fVxuXG5cdHJldHVybiB0b1N0ci5jYWxsKGFycikgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG52YXIgaXNQbGFpbk9iamVjdCA9IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG5cdGlmICghb2JqIHx8IHRvU3RyLmNhbGwob2JqKSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHR2YXIgaGFzT3duQ29uc3RydWN0b3IgPSBoYXNPd24uY2FsbChvYmosICdjb25zdHJ1Y3RvcicpO1xuXHR2YXIgaGFzSXNQcm90b3R5cGVPZiA9IG9iai5jb25zdHJ1Y3RvciAmJiBvYmouY29uc3RydWN0b3IucHJvdG90eXBlICYmIGhhc093bi5jYWxsKG9iai5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsICdpc1Byb3RvdHlwZU9mJyk7XG5cdC8vIE5vdCBvd24gY29uc3RydWN0b3IgcHJvcGVydHkgbXVzdCBiZSBPYmplY3Rcblx0aWYgKG9iai5jb25zdHJ1Y3RvciAmJiAhaGFzT3duQ29uc3RydWN0b3IgJiYgIWhhc0lzUHJvdG90eXBlT2YpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBPd24gcHJvcGVydGllcyBhcmUgZW51bWVyYXRlZCBmaXJzdGx5LCBzbyB0byBzcGVlZCB1cCxcblx0Ly8gaWYgbGFzdCBvbmUgaXMgb3duLCB0aGVuIGFsbCBwcm9wZXJ0aWVzIGFyZSBvd24uXG5cdHZhciBrZXk7XG5cdGZvciAoa2V5IGluIG9iaikgey8qKi99XG5cblx0cmV0dXJuIHR5cGVvZiBrZXkgPT09ICd1bmRlZmluZWQnIHx8IGhhc093bi5jYWxsKG9iaiwga2V5KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZXh0ZW5kKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWzBdLFxuXHRcdGkgPSAxLFxuXHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFx0ZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKHR5cGVvZiB0YXJnZXQgPT09ICdib29sZWFuJykge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWzFdIHx8IHt9O1xuXHRcdC8vIHNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcblx0XHRpID0gMjtcblx0fSBlbHNlIGlmICgodHlwZW9mIHRhcmdldCAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIHRhcmdldCAhPT0gJ2Z1bmN0aW9uJykgfHwgdGFyZ2V0ID09IG51bGwpIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdGZvciAoOyBpIDwgbGVuZ3RoOyArK2kpIHtcblx0XHRvcHRpb25zID0gYXJndW1lbnRzW2ldO1xuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAob3B0aW9ucyAhPSBudWxsKSB7XG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKG5hbWUgaW4gb3B0aW9ucykge1xuXHRcdFx0XHRzcmMgPSB0YXJnZXRbbmFtZV07XG5cdFx0XHRcdGNvcHkgPSBvcHRpb25zW25hbWVdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKHRhcmdldCAhPT0gY29weSkge1xuXHRcdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRcdGlmIChkZWVwICYmIGNvcHkgJiYgKGlzUGxhaW5PYmplY3QoY29weSkgfHwgKGNvcHlJc0FycmF5ID0gaXNBcnJheShjb3B5KSkpKSB7XG5cdFx0XHRcdFx0XHRpZiAoY29weUlzQXJyYXkpIHtcblx0XHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblx0XHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgaXNBcnJheShzcmMpID8gc3JjIDogW107XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBpc1BsYWluT2JqZWN0KHNyYykgPyBzcmMgOiB7fTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0XHR0YXJnZXRbbmFtZV0gPSBleHRlbmQoZGVlcCwgY2xvbmUsIGNvcHkpO1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAodHlwZW9mIGNvcHkgIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdFx0XHR0YXJnZXRbbmFtZV0gPSBjb3B5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBub2RlX21vZHVsZXMvZXh0ZW5kL2luZGV4LmpzXG4gKiovIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFDQTtBQUdBO0FBTEE7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQURBO0FBQ0E7QUFHQTtBQUNBOztBQU5BO0FBU0E7QUFEQTtBQUNBOzs7QUFUQTtBQWVBO0FBQ0E7QUFDQTtBQWpCQTtBQUNBO0FBbUJBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFOQTtBQVNBO0FBQ0E7O0FBRkE7QUFBQTtBQU1BO0FBREE7QUFDQTtBQUdBO0FBQ0E7O0FBREE7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7O0FBSEE7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBSkE7QUFDQTs7QUFGQTtBQUNBOztBQURBO0FBYUE7QUFEQTtBQWRBO0FBTEE7QUFGQTtBQUhBO0FBQ0E7O0FBbEJBO0FBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	eval("var utils = __webpack_require__(2);\nvar filter_using_new_nodes = __webpack_require__(10);\n\nmodule.exports = function (params, orig_network_data, change_view) {\n  console.log('change_network_view');\n  var views = orig_network_data.views;\n\n  // Get Row Filtering View\n  ///////////////////////////////////////////////////////////////\n  // change_view has the name of the new view (e.g. {N_row_sum:20})\n  // this view name is used to pull up the view information. The view consists\n  // of a description of the view (e.g N_row_sum number and distance type) and\n  // the nodes of the view (e.g. row_nodes and col_nodes). With the new set of\n  // nodes, new_nodes, the links will be filtered in order to only keep links\n  // between nodes that still exist in the view\n\n  if (utils.has(change_view, 'filter_row')) {\n\n    // failsafe if there is only row+col filtering from front-end\n    var filt_views = _.filter(views, function (d) {\n\n      // failsafe from json\n      if (utils.has(d, 'filter_row')) {\n        // filter_row_value is the same as filter_row\n        return d.filter_row == change_view.filter_row;\n      } else {\n        return d.filt == change_view.filter_row;\n      }\n    });\n  } else if (utils.has(change_view, 'filter_row_value')) {\n\n    // filter row value\n    var filt_views = _.filter(views, function (d) {\n\n      // failsafe from json\n      return d.filter_row_value == change_view.filter_row_value;\n    });\n  } else if (utils.has(change_view, 'filter_row_sum')) {\n\n    var filt_views = _.filter(views, function (d) {\n      return d.filter_row_sum == change_view.filter_row_sum;\n    });\n  } else if (utils.has(change_view, 'filter_row_num')) {\n\n    var filt_views = _.filter(views, function (d) {\n      return d.filter_row_num == change_view.filter_row_num;\n    });\n  } else if (utils.has(change_view, 'N_row_sum')) {\n\n    var filt_views = _.filter(views, function (d) {\n      return d.N_row_sum == change_view.N_row_sum;\n    });\n\n    if (typeof filt_views === 'undefined') {\n      filt_views = [views[0]];\n    }\n  }\n\n  if (change_view === 'default') {\n    filt_views = [views[0]];\n  }\n\n  /*\n  get the inst_view\n  */\n\n  // get the single view that will be used to update the network from\n  // the array of filtered views\n  if (params.show_categories === false) {\n    console.log('\\nview defined by filter only, no category\\n');\n    console.log('there are ' + String(filt_views.length) + ' views with this N_row_sum');\n    var inst_view = filt_views[0];\n\n    if (utils.has(change_view, 'enr_score_type')) {\n\n      inst_view = _.filter(filt_views, function (d) {\n        return d.enr_score_type == change_view.enr_score_type;\n      })[0];\n\n      console.log('\\n\\n final inst_view ');\n      console.log(inst_view);\n    }\n  }\n\n  if (params.show_categories) {\n    console.log('\\nview defined by filter and category\\n');\n    // apply category filtering if necessary\n    var inst_view = _.find(filt_views, function (d) {\n      return d.col_cat === params.current_col_cat;\n    });\n  }\n\n  /*\n  assign the inst_view, if it is defined\n  */\n  if (typeof inst_view !== 'undefined') {\n\n    var new_nodes = inst_view.nodes;\n    var links = orig_network_data.links;\n    var new_network_data = filter_using_new_nodes(params, new_nodes, links, views);\n  } else {\n    var new_network_data = orig_network_data;\n  }\n\n  return new_network_data;\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvbmV0d29yay9jaGFuZ2VfbmV0d29ya192aWV3LmpzP2U4YmYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBmaWx0ZXJfdXNpbmdfbmV3X25vZGVzID0gcmVxdWlyZSgnLi9maWx0ZXJfdXNpbmdfbmV3X25vZGVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ocGFyYW1zLCBvcmlnX25ldHdvcmtfZGF0YSwgY2hhbmdlX3ZpZXcpIHtcbiAgY29uc29sZS5sb2coJ2NoYW5nZV9uZXR3b3JrX3ZpZXcnKTtcbiAgdmFyIHZpZXdzID0gb3JpZ19uZXR3b3JrX2RhdGEudmlld3M7XG5cblxuICAvLyBHZXQgUm93IEZpbHRlcmluZyBWaWV3XG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBjaGFuZ2VfdmlldyBoYXMgdGhlIG5hbWUgb2YgdGhlIG5ldyB2aWV3IChlLmcuIHtOX3Jvd19zdW06MjB9KVxuICAvLyB0aGlzIHZpZXcgbmFtZSBpcyB1c2VkIHRvIHB1bGwgdXAgdGhlIHZpZXcgaW5mb3JtYXRpb24uIFRoZSB2aWV3IGNvbnNpc3RzXG4gIC8vIG9mIGEgZGVzY3JpcHRpb24gb2YgdGhlIHZpZXcgKGUuZyBOX3Jvd19zdW0gbnVtYmVyIGFuZCBkaXN0YW5jZSB0eXBlKSBhbmRcbiAgLy8gdGhlIG5vZGVzIG9mIHRoZSB2aWV3IChlLmcuIHJvd19ub2RlcyBhbmQgY29sX25vZGVzKS4gV2l0aCB0aGUgbmV3IHNldCBvZlxuICAvLyBub2RlcywgbmV3X25vZGVzLCB0aGUgbGlua3Mgd2lsbCBiZSBmaWx0ZXJlZCBpbiBvcmRlciB0byBvbmx5IGtlZXAgbGlua3NcbiAgLy8gYmV0d2VlbiBub2RlcyB0aGF0IHN0aWxsIGV4aXN0IGluIHRoZSB2aWV3XG5cbiAgaWYgKHV0aWxzLmhhcyhjaGFuZ2VfdmlldywnZmlsdGVyX3JvdycpKXtcblxuICAgIC8vIGZhaWxzYWZlIGlmIHRoZXJlIGlzIG9ubHkgcm93K2NvbCBmaWx0ZXJpbmcgZnJvbSBmcm9udC1lbmRcbiAgICB2YXIgZmlsdF92aWV3cyA9IF8uZmlsdGVyKHZpZXdzLCBmdW5jdGlvbihkKXtcblxuICAgICAgLy8gZmFpbHNhZmUgZnJvbSBqc29uXG4gICAgICBpZiAodXRpbHMuaGFzKGQsICdmaWx0ZXJfcm93Jykpe1xuICAgICAgICAvLyBmaWx0ZXJfcm93X3ZhbHVlIGlzIHRoZSBzYW1lIGFzIGZpbHRlcl9yb3dcbiAgICAgICAgcmV0dXJuIGQuZmlsdGVyX3JvdyA9PSBjaGFuZ2Vfdmlldy5maWx0ZXJfcm93O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGQuZmlsdCA9PSBjaGFuZ2Vfdmlldy5maWx0ZXJfcm93O1xuICAgICAgfVxuXG4gICAgfSk7XG5cbiAgfSBlbHNlIGlmICh1dGlscy5oYXMoY2hhbmdlX3ZpZXcsICdmaWx0ZXJfcm93X3ZhbHVlJykpIHtcblxuICAgIC8vIGZpbHRlciByb3cgdmFsdWVcbiAgICB2YXIgZmlsdF92aWV3cyA9IF8uZmlsdGVyKHZpZXdzLCBmdW5jdGlvbihkKXtcblxuICAgICAgLy8gZmFpbHNhZmUgZnJvbSBqc29uXG4gICAgICByZXR1cm4gZC5maWx0ZXJfcm93X3ZhbHVlID09IGNoYW5nZV92aWV3LmZpbHRlcl9yb3dfdmFsdWU7XG5cbiAgICB9KTtcblxuICB9IGVsc2UgaWYgKHV0aWxzLmhhcyhjaGFuZ2VfdmlldywnZmlsdGVyX3Jvd19zdW0nKSkge1xuXG4gICAgdmFyIGZpbHRfdmlld3MgPSBfLmZpbHRlcih2aWV3cywgZnVuY3Rpb24oZCl7XG4gICAgICByZXR1cm4gZC5maWx0ZXJfcm93X3N1bSA9PSBjaGFuZ2Vfdmlldy5maWx0ZXJfcm93X3N1bTtcbiAgICB9KTtcblxuICB9IGVsc2UgaWYgKHV0aWxzLmhhcyhjaGFuZ2VfdmlldywnZmlsdGVyX3Jvd19udW0nKSkge1xuXG4gICAgdmFyIGZpbHRfdmlld3MgPSBfLmZpbHRlcih2aWV3cywgZnVuY3Rpb24oZCl7XG4gICAgICByZXR1cm4gZC5maWx0ZXJfcm93X251bSA9PSBjaGFuZ2Vfdmlldy5maWx0ZXJfcm93X251bTtcbiAgICB9KTtcblxuICB9IGVsc2UgaWYgKHV0aWxzLmhhcyhjaGFuZ2VfdmlldywgJ05fcm93X3N1bScpKXtcblxuICAgIHZhciBmaWx0X3ZpZXdzID0gXy5maWx0ZXIodmlld3MsIGZ1bmN0aW9uKGQpe1xuICAgICAgcmV0dXJuIGQuTl9yb3dfc3VtID09IGNoYW5nZV92aWV3Lk5fcm93X3N1bTtcbiAgICB9KTtcblxuICAgIGlmKHR5cGVvZiBmaWx0X3ZpZXdzID09PSAndW5kZWZpbmVkJyl7XG4gICAgICAgIGZpbHRfdmlld3MgPSBbdmlld3NbMF1dO1xuICAgIH1cblxuICB9XG5cbiAgaWYgKGNoYW5nZV92aWV3PT09J2RlZmF1bHQnKXtcbiAgICBmaWx0X3ZpZXdzID0gW3ZpZXdzWzBdXTtcbiAgfVxuXG4gIC8qXG4gIGdldCB0aGUgaW5zdF92aWV3XG4gICovXG5cbiAgLy8gZ2V0IHRoZSBzaW5nbGUgdmlldyB0aGF0IHdpbGwgYmUgdXNlZCB0byB1cGRhdGUgdGhlIG5ldHdvcmsgZnJvbVxuICAvLyB0aGUgYXJyYXkgb2YgZmlsdGVyZWQgdmlld3NcbiAgaWYgKCBwYXJhbXMuc2hvd19jYXRlZ29yaWVzID09PSBmYWxzZSApe1xuICAgIGNvbnNvbGUubG9nKCdcXG52aWV3IGRlZmluZWQgYnkgZmlsdGVyIG9ubHksIG5vIGNhdGVnb3J5XFxuJyk7XG4gICAgY29uc29sZS5sb2coJ3RoZXJlIGFyZSAnK1N0cmluZyhmaWx0X3ZpZXdzLmxlbmd0aCkrJyB2aWV3cyB3aXRoIHRoaXMgTl9yb3dfc3VtJyk7XG4gICAgdmFyIGluc3RfdmlldyA9IGZpbHRfdmlld3NbMF07XG5cbiAgICBpZiAodXRpbHMuaGFzKGNoYW5nZV92aWV3LCdlbnJfc2NvcmVfdHlwZScpKXtcblxuICAgICAgaW5zdF92aWV3ID0gXy5maWx0ZXIoZmlsdF92aWV3cywgZnVuY3Rpb24oZCl7XG4gICAgICAgIHJldHVybiBkLmVucl9zY29yZV90eXBlID09IGNoYW5nZV92aWV3LmVucl9zY29yZV90eXBlO1xuICAgICAgfSlbMF07XG5cbiAgICAgIGNvbnNvbGUubG9nKCdcXG5cXG4gZmluYWwgaW5zdF92aWV3ICcpO1xuICAgICAgY29uc29sZS5sb2coaW5zdF92aWV3KTtcbiAgICB9XG5cbiAgfVxuXG4gIGlmIChwYXJhbXMuc2hvd19jYXRlZ29yaWVzKXtcbiAgICBjb25zb2xlLmxvZygnXFxudmlldyBkZWZpbmVkIGJ5IGZpbHRlciBhbmQgY2F0ZWdvcnlcXG4nKTtcbiAgICAvLyBhcHBseSBjYXRlZ29yeSBmaWx0ZXJpbmcgaWYgbmVjZXNzYXJ5XG4gICAgdmFyIGluc3RfdmlldyA9IF8uZmluZChmaWx0X3ZpZXdzLCBmdW5jdGlvbihkKXtcbiAgICAgIHJldHVybiBkLmNvbF9jYXQgPT09IHBhcmFtcy5jdXJyZW50X2NvbF9jYXQ7XG4gICAgfSk7XG4gIH1cblxuICAvKlxuICBhc3NpZ24gdGhlIGluc3RfdmlldywgaWYgaXQgaXMgZGVmaW5lZFxuICAqL1xuICBpZiAodHlwZW9mIGluc3RfdmlldyAhPT0gJ3VuZGVmaW5lZCcpe1xuXG4gICAgdmFyIG5ld19ub2RlcyA9IGluc3Rfdmlldy5ub2RlcztcbiAgICB2YXIgbGlua3MgPSBvcmlnX25ldHdvcmtfZGF0YS5saW5rcztcbiAgICB2YXIgbmV3X25ldHdvcmtfZGF0YSA9IGZpbHRlcl91c2luZ19uZXdfbm9kZXMocGFyYW1zLCBuZXdfbm9kZXMsIGxpbmtzLCB2aWV3cyk7XG5cbiAgfSBlbHNlIHtcbiAgICB2YXIgbmV3X25ldHdvcmtfZGF0YSA9IG9yaWdfbmV0d29ya19kYXRhO1xuICB9XG5cbiAgcmV0dXJuIG5ld19uZXR3b3JrX2RhdGE7XG59O1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogc3JjL25ldHdvcmsvY2hhbmdlX25ldHdvcmtfdmlldy5qc1xuICoqLyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7QUFIQTtBQUNBOztBQWdCQTtBQUNBOztBQUVBOztBQUVBO0FBRkE7QUFJQTtBQUpBO0FBSEE7QUFIQTtBQUNBOztBQWlCQTtBQUNBOztBQUVBO0FBSEE7QUFIQTtBQUNBO0FBV0E7QUFDQTtBQURBO0FBRkE7QUFDQTtBQU9BO0FBQ0E7QUFEQTtBQUZBO0FBQ0E7QUFPQTtBQUNBO0FBREE7QUFDQTtBQUdBO0FBQ0E7QUFEQTtBQU5BO0FBQ0E7QUFXQTtBQUNBO0FBREE7QUFDQTs7Ozs7OztBQWhFQTtBQTBFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFDQTtBQUdBO0FBQ0E7QUFQQTtBQUxBO0FBQ0E7QUFnQkE7QUFDQTs7QUFEQTtBQUlBO0FBREE7QUFIQTtBQUNBOzs7O0FBM0ZBO0FBQ0E7QUFzR0E7QUFDQTtBQUNBO0FBSkE7QUFPQTtBQVBBO0FBQ0E7QUFTQTtBQS9HQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 10 */
/***/ function(module, exports) {

	eval("module.exports = function (params, new_nodes, links, views) {\n\n  // get new names of rows and cols\n  var row_names = _.pluck(new_nodes.row_nodes, 'name');\n  var col_names = _.pluck(new_nodes.col_nodes, 'name');\n\n  var new_links = _.filter(links, function (d) {\n    var inst_row = d.name.split('_')[0];\n    var inst_col = d.name.split('_')[1];\n\n    var row_index = _.indexOf(row_names, inst_row);\n    var col_index = _.indexOf(col_names, inst_col);\n\n    if (row_index > -1 & col_index > -1) {\n      // redefine source and target\n      d.source = row_index;\n      d.target = col_index;\n      return d;\n    }\n  });\n\n  // set up new_network_data\n  var new_network_data = {};\n  // rows\n  new_network_data.row_nodes = new_nodes.row_nodes;\n  new_network_data.row_nodes_names = row_names;\n  // cols\n  new_network_data.col_nodes = new_nodes.col_nodes;\n  new_network_data.col_nodes_names = col_names;\n  // links\n  new_network_data.links = new_links;\n\n  // save all links\n  new_network_data.all_links = links;\n\n  // pass on all views\n  new_network_data.views = views;\n\n  return new_network_data;\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL25ldHdvcmsvZmlsdGVyX3VzaW5nX25ld19ub2Rlcy5qcz84NDIwIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ocGFyYW1zLCBuZXdfbm9kZXMsIGxpbmtzLCB2aWV3cykge1xuXG4gIC8vIGdldCBuZXcgbmFtZXMgb2Ygcm93cyBhbmQgY29sc1xuICB2YXIgcm93X25hbWVzID0gXy5wbHVjayhuZXdfbm9kZXMucm93X25vZGVzLCAnbmFtZScpO1xuICB2YXIgY29sX25hbWVzID0gXy5wbHVjayhuZXdfbm9kZXMuY29sX25vZGVzLCAnbmFtZScpO1xuXG4gIHZhciBuZXdfbGlua3MgPSBfLmZpbHRlcihsaW5rcywgZnVuY3Rpb24oZCl7XG4gICAgdmFyIGluc3Rfcm93ID0gZC5uYW1lLnNwbGl0KCdfJylbMF07XG4gICAgdmFyIGluc3RfY29sID0gZC5uYW1lLnNwbGl0KCdfJylbMV07XG5cbiAgICB2YXIgcm93X2luZGV4ID0gXy5pbmRleE9mKHJvd19uYW1lcywgaW5zdF9yb3cpO1xuICAgIHZhciBjb2xfaW5kZXggPSBfLmluZGV4T2YoY29sX25hbWVzLCBpbnN0X2NvbCk7XG5cbiAgICBpZiAoIHJvd19pbmRleCA+LTEgJiBjb2xfaW5kZXggPi0xICl7XG4gICAgICAvLyByZWRlZmluZSBzb3VyY2UgYW5kIHRhcmdldFxuICAgICAgZC5zb3VyY2UgPSByb3dfaW5kZXg7XG4gICAgICBkLnRhcmdldCA9IGNvbF9pbmRleDtcbiAgICAgIHJldHVybiBkO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gc2V0IHVwIG5ld19uZXR3b3JrX2RhdGFcbiAgdmFyIG5ld19uZXR3b3JrX2RhdGEgPSB7fTtcbiAgLy8gcm93c1xuICBuZXdfbmV0d29ya19kYXRhLnJvd19ub2RlcyA9IG5ld19ub2Rlcy5yb3dfbm9kZXM7XG4gIG5ld19uZXR3b3JrX2RhdGEucm93X25vZGVzX25hbWVzID0gcm93X25hbWVzO1xuICAvLyBjb2xzXG4gIG5ld19uZXR3b3JrX2RhdGEuY29sX25vZGVzID0gbmV3X25vZGVzLmNvbF9ub2RlcztcbiAgbmV3X25ldHdvcmtfZGF0YS5jb2xfbm9kZXNfbmFtZXMgPSBjb2xfbmFtZXM7XG4gIC8vIGxpbmtzXG4gIG5ld19uZXR3b3JrX2RhdGEubGlua3MgPSBuZXdfbGlua3M7XG5cbiAgLy8gc2F2ZSBhbGwgbGlua3NcbiAgbmV3X25ldHdvcmtfZGF0YS5hbGxfbGlua3MgPSBsaW5rcztcblxuICAvLyBwYXNzIG9uIGFsbCB2aWV3c1xuICBuZXdfbmV0d29ya19kYXRhLnZpZXdzID0gdmlld3M7XG5cbiAgcmV0dXJuIG5ld19uZXR3b3JrX2RhdGE7XG59O1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogc3JjL25ldHdvcmsvZmlsdGVyX3VzaW5nX25ld19ub2Rlcy5qc1xuICoqLyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUpBO0FBUEE7QUFDQTs7QUFQQTs7QUFBQTtBQXlCQTs7QUF6QkE7QUE0QkE7O0FBNUJBO0FBQ0E7O0FBREE7QUFDQTs7QUFEQTtBQUNBO0FBcUNBO0FBdENBIiwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 11 */
/***/ function(module, exports) {

	eval("// resize parent div\nmodule.exports = function (params) {\n\n  // get outer_margins\n  if (params.viz.expand === false) {\n    var outer_margins = params.viz.outer_margins;\n  } else {\n    var outer_margins = params.viz.outer_margins_expand;\n  }\n\n  if (params.viz.resize) {\n\n    // get the size of the window\n    var screen_width = window.innerWidth;\n    var screen_height = window.innerHeight;\n\n    var cont_dim = {};\n    cont_dim.width = screen_width - outer_margins.left - outer_margins.right;\n    cont_dim.height = screen_height - outer_margins.top - outer_margins.bottom;\n\n    // resize and position\n    d3.select(params.viz.viz_wrapper).style('float', 'right').style('margin-top', outer_margins.top + 'px').style('width', cont_dim.width + 'px').style('height', cont_dim.height + 'px');\n  } else {\n\n    // position\n    d3.select(params.viz.viz_wrapper).style('float', 'right').style('margin-top', outer_margins.top + 'px');\n  }\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL3BhcmVudF9kaXZfc2l6ZS5qcz8xYzAyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHJlc2l6ZSBwYXJlbnQgZGl2XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHBhcmFtcykge1xuXG4gIC8vIGdldCBvdXRlcl9tYXJnaW5zXG4gIGlmIChwYXJhbXMudml6LmV4cGFuZCA9PT0gZmFsc2UpIHtcbiAgICB2YXIgb3V0ZXJfbWFyZ2lucyA9IHBhcmFtcy52aXoub3V0ZXJfbWFyZ2lucztcbiAgfSBlbHNlIHtcbiAgICB2YXIgb3V0ZXJfbWFyZ2lucyA9IHBhcmFtcy52aXoub3V0ZXJfbWFyZ2luc19leHBhbmQ7XG4gIH1cblxuICBpZiAocGFyYW1zLnZpei5yZXNpemUpIHtcblxuICAgIC8vIGdldCB0aGUgc2l6ZSBvZiB0aGUgd2luZG93XG4gICAgdmFyIHNjcmVlbl93aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgIHZhciBzY3JlZW5faGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuXG4gICAgdmFyIGNvbnRfZGltID0ge307XG4gICAgY29udF9kaW0ud2lkdGggPSBzY3JlZW5fd2lkdGggLSBvdXRlcl9tYXJnaW5zLmxlZnQgLSBvdXRlcl9tYXJnaW5zLnJpZ2h0O1xuICAgIGNvbnRfZGltLmhlaWdodCA9IHNjcmVlbl9oZWlnaHQgLSBvdXRlcl9tYXJnaW5zLnRvcCAtIG91dGVyX21hcmdpbnMuYm90dG9tO1xuXG4gICAgLy8gcmVzaXplIGFuZCBwb3NpdGlvblxuICAgIGQzLnNlbGVjdChwYXJhbXMudml6LnZpel93cmFwcGVyKVxuICAgICAgLnN0eWxlKCdmbG9hdCcsICdyaWdodCcpXG4gICAgICAuc3R5bGUoJ21hcmdpbi10b3AnLCBvdXRlcl9tYXJnaW5zLnRvcCArICdweCcpXG4gICAgICAuc3R5bGUoJ3dpZHRoJywgY29udF9kaW0ud2lkdGggKyAncHgnKVxuICAgICAgLnN0eWxlKCdoZWlnaHQnLCBjb250X2RpbS5oZWlnaHQgKyAncHgnKTtcblxuICB9IGVsc2Uge1xuXG4gICAgLy8gcG9zaXRpb25cbiAgICBkMy5zZWxlY3QocGFyYW1zLnZpei52aXpfd3JhcHBlcilcbiAgICAgIC5zdHlsZSgnZmxvYXQnLCAncmlnaHQnKVxuICAgICAgLnN0eWxlKCdtYXJnaW4tdG9wJywgb3V0ZXJfbWFyZ2lucy50b3AgKyAncHgnKTtcbiAgfVxufTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHNyYy9wYXJlbnRfZGl2X3NpemUuanNcbiAqKi8iXSwibWFwcGluZ3MiOiI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFEQTtBQUdBO0FBSEE7QUFDQTtBQUtBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBVEE7QUFBQTtBQUNBOztBQW1CQTtBQXBCQTtBQVRBIiwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	eval("var utils = __webpack_require__(2);\n\nmodule.exports = function (network_data) {\n  var matrix = [];\n\n  network_data.row_nodes.forEach(function (tmp, row_index) {\n\n    matrix[row_index] = {};\n    matrix[row_index].name = network_data.row_nodes[row_index].name;\n    matrix[row_index].row_data = d3.range(network_data.col_nodes.length).map(function (col_index) {\n\n      if (utils.has(network_data.links[0], 'value_up') || utils.has(network_data.links[0], 'value_dn')) {\n        var ini_object = {\n          pos_x: col_index,\n          pos_y: row_index,\n          value: 0,\n          value_up: 0,\n          value_dn: 0,\n          highlight: 0\n        };\n      } else {\n\n        var ini_object = {\n          pos_x: col_index,\n          pos_y: row_index,\n          value: 0,\n          highlight: 0\n        };\n      }\n      return ini_object;\n    });\n  });\n\n  network_data.links.forEach(function (link) {\n\n    // transfer additional link information is necessary\n    matrix[link.source].row_data[link.target].value = link.value;\n    matrix[link.source].row_data[link.target].row_name = link.row_name;\n    matrix[link.source].row_data[link.target].col_name = link.col_name;\n\n    if (utils.has(link, 'value_up') || utils.has(link, 'value_dn')) {\n      matrix[link.source].row_data[link.target].value_up = link.value_up;\n      matrix[link.source].row_data[link.target].value_dn = link.value_dn;\n    }\n\n    if (link.highlight) {\n      matrix[link.source].row_data[link.target].highlight = link.highlight;\n    }\n    if (link.info) {\n      matrix[link.source].row_data[link.target].info = link.info;\n    }\n  });\n\n  return matrix;\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2luaXRpYWxpemVfbWF0cml4LmpzPzU3MWEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG5ldHdvcmtfZGF0YSkge1xuICB2YXIgbWF0cml4ID0gW107XG5cbiAgbmV0d29ya19kYXRhLnJvd19ub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uICh0bXAsIHJvd19pbmRleCkge1xuXG4gICAgbWF0cml4W3Jvd19pbmRleF0gPSB7fTtcbiAgICBtYXRyaXhbcm93X2luZGV4XS5uYW1lID0gbmV0d29ya19kYXRhLnJvd19ub2Rlc1tyb3dfaW5kZXhdLm5hbWU7XG4gICAgbWF0cml4W3Jvd19pbmRleF0ucm93X2RhdGEgPSBkMy5yYW5nZShuZXR3b3JrX2RhdGEuY29sX25vZGVzLmxlbmd0aCkubWFwKFxuICAgICAgZnVuY3Rpb24gKGNvbF9pbmRleCkge1xuXG4gICAgICAgIGlmICh1dGlscy5oYXMobmV0d29ya19kYXRhLmxpbmtzWzBdLCAndmFsdWVfdXAnKSB8fCB1dGlscy5oYXMobmV0d29ya19kYXRhLmxpbmtzWzBdLCAndmFsdWVfZG4nKSkge1xuICAgICAgICAgIHZhciBpbmlfb2JqZWN0ID0ge1xuICAgICAgICAgICAgcG9zX3g6IGNvbF9pbmRleCxcbiAgICAgICAgICAgIHBvc195OiByb3dfaW5kZXgsXG4gICAgICAgICAgICB2YWx1ZTogMCxcbiAgICAgICAgICAgIHZhbHVlX3VwOiAwLFxuICAgICAgICAgICAgdmFsdWVfZG46IDAsXG4gICAgICAgICAgICBoaWdobGlnaHQ6IDBcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICB2YXIgaW5pX29iamVjdCA9IHtcbiAgICAgICAgICAgIHBvc194OiBjb2xfaW5kZXgsXG4gICAgICAgICAgICBwb3NfeTogcm93X2luZGV4LFxuICAgICAgICAgICAgdmFsdWU6IDAsXG4gICAgICAgICAgICBoaWdobGlnaHQ6IDBcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluaV9vYmplY3Q7XG4gICAgICB9KTtcblxuICB9KTtcblxuICBuZXR3b3JrX2RhdGEubGlua3MuZm9yRWFjaChmdW5jdGlvbiAobGluaykge1xuXG4gICAgLy8gdHJhbnNmZXIgYWRkaXRpb25hbCBsaW5rIGluZm9ybWF0aW9uIGlzIG5lY2Vzc2FyeVxuICAgIG1hdHJpeFtsaW5rLnNvdXJjZV0ucm93X2RhdGFbbGluay50YXJnZXRdLnZhbHVlID0gbGluay52YWx1ZTtcbiAgICBtYXRyaXhbbGluay5zb3VyY2VdLnJvd19kYXRhW2xpbmsudGFyZ2V0XS5yb3dfbmFtZSA9IGxpbmsucm93X25hbWU7XG4gICAgbWF0cml4W2xpbmsuc291cmNlXS5yb3dfZGF0YVtsaW5rLnRhcmdldF0uY29sX25hbWUgPSBsaW5rLmNvbF9uYW1lO1xuXG4gICAgaWYgKHV0aWxzLmhhcyhsaW5rLCAndmFsdWVfdXAnKSB8fCB1dGlscy5oYXMobGluaywgJ3ZhbHVlX2RuJykpIHtcbiAgICAgIG1hdHJpeFtsaW5rLnNvdXJjZV0ucm93X2RhdGFbbGluay50YXJnZXRdLnZhbHVlX3VwID0gbGluay52YWx1ZV91cDtcbiAgICAgIG1hdHJpeFtsaW5rLnNvdXJjZV0ucm93X2RhdGFbbGluay50YXJnZXRdLnZhbHVlX2RuID0gbGluay52YWx1ZV9kbjtcbiAgICB9XG5cbiAgICBpZiAobGluay5oaWdobGlnaHQpIHtcbiAgICAgIG1hdHJpeFtsaW5rLnNvdXJjZV0ucm93X2RhdGFbbGluay50YXJnZXRdLmhpZ2hsaWdodCA9IGxpbmsuaGlnaGxpZ2h0O1xuICAgIH1cbiAgICBpZiAobGluay5pbmZvKSB7XG4gICAgICBtYXRyaXhbbGluay5zb3VyY2VdLnJvd19kYXRhW2xpbmsudGFyZ2V0XS5pbmZvID0gbGluay5pbmZvO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIG1hdHJpeDtcbn07XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBzcmMvaW5pdGlhbGl6ZV9tYXRyaXguanNcbiAqKi8iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTkE7QUFEQTtBQUNBO0FBV0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBWkE7QUFvQkE7QUF0QkE7QUFMQTtBQUNBO0FBK0JBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUNBO0FBSUE7QUFDQTtBQURBO0FBR0E7QUFDQTtBQURBO0FBZkE7QUFDQTtBQW1CQTtBQXZEQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	eval("var apply_transformation = __webpack_require__(14);\n\nmodule.exports = function (params) {\n  var zoom_x = d3.event.scale,\n      zoom_y = d3.event.scale,\n      trans_x = d3.event.translate[0] - params.viz.clust.margin.left,\n      trans_y = d3.event.translate[1] - params.viz.clust.margin.top;\n\n  apply_transformation(params, trans_x, trans_y, zoom_x, zoom_y);\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL3pvb21lZC5qcz82MzFhIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBhcHBseV90cmFuc2Zvcm1hdGlvbiA9IHJlcXVpcmUoJy4vYXBwbHlfdHJhbnNmb3JtYXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihwYXJhbXMpIHtcbiAgdmFyIHpvb21feCA9IGQzLmV2ZW50LnNjYWxlLFxuICAgIHpvb21feSA9IGQzLmV2ZW50LnNjYWxlLFxuICAgIHRyYW5zX3ggPSBkMy5ldmVudC50cmFuc2xhdGVbMF0gLSBwYXJhbXMudml6LmNsdXN0Lm1hcmdpbi5sZWZ0LFxuICAgIHRyYW5zX3kgPSBkMy5ldmVudC50cmFuc2xhdGVbMV0gLSBwYXJhbXMudml6LmNsdXN0Lm1hcmdpbi50b3A7XG5cbiAgYXBwbHlfdHJhbnNmb3JtYXRpb24ocGFyYW1zLCB0cmFuc194LCB0cmFuc195LCB6b29tX3gsIHpvb21feSk7XG59O1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogc3JjL3pvb21lZC5qc1xuICoqLyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTkEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	eval("var utils = __webpack_require__(2);\nvar constrain_font_size = __webpack_require__(15);\n\nmodule.exports = function (params, trans_x, trans_y, zoom_x, zoom_y) {\n  var d3_scale = zoom_x;\n\n  // y - rules\n  ///////////////////////////////////////////////////\n  // available panning room in the y direction\n  // multiple extra room (zoom - 1) by the width\n  // always defined in the same way\n  var pan_room_y = (d3_scale - 1) * params.viz.clust.dim.height;\n\n  // do not translate if translate in y direction is positive\n  if (trans_y >= 0) {\n    // restrict transformation parameters\n    // no panning in either direction\n    trans_y = 0;\n  }\n  // restrict y pan to pan_room_y if necessary\n  else if (trans_y <= -pan_room_y) {\n      trans_y = -pan_room_y;\n    }\n\n  // x - rules\n  ///////////////////////////////////////////////////\n  // zoom in y direction only - translate in y only\n  if (d3_scale < params.viz.zoom_switch) {\n    // no x translate or zoom\n    trans_x = 0;\n    zoom_x = 1;\n  }\n  // zoom in both directions\n  // scale is greater than params.viz.zoom_switch\n  else {\n      // available panning room in the x direction\n      // multiple extra room (zoom - 1) by the width\n      var pan_room_x = (d3_scale / params.viz.zoom_switch - 1) * params.viz.clust.dim.width;\n\n      // no panning in the positive direction\n      if (trans_x > 0) {\n        // restrict transformation parameters\n        // no panning in the x direction\n        trans_x = 0;\n        // set zoom_x\n        zoom_x = d3_scale / params.viz.zoom_switch;\n      }\n      // restrict panning to pan_room_x\n      else if (trans_x <= -pan_room_x) {\n          // restrict transformation parameters\n          // no panning in the x direction\n          trans_x = -pan_room_x;\n          // set zoom_x\n          zoom_x = d3_scale / params.viz.zoom_switch;\n        }\n        // allow two dimensional panning\n        else {\n            // restrict transformation parameters\n            // set zoom_x\n            zoom_x = d3_scale / params.viz.zoom_switch;\n          }\n    }\n\n  // update visible links\n  var min_rect_height = 3;\n\n  // apply transformation and reset translate vector\n  // the zoom vector (zoom.scale) never gets reset\n  ///////////////////////////////////////////////////\n  // translate clustergram\n  // viz.get_clust_group()\n  d3.select(params.root + ' .clust_group').attr('transform', 'translate(' + [trans_x, trans_y] + ') scale(' + zoom_x + ',' + zoom_y + ')');\n\n  // transform row labels\n  d3.select(params.root + ' .row_label_zoom_container').attr('transform', 'translate(' + [0, trans_y] + ') scale(' + zoom_y + ')');\n\n  // transform row_zoom_container\n  // use the offset saved in params, only zoom in the y direction\n  d3.select(params.root + ' .row_zoom_container').attr('transform', 'translate(' + [0, trans_y] + ') scale( 1,' + zoom_y + ')');\n\n  // transform col labels\n  // move down col labels as zooming occurs, subtract trans_x - 20 almost works\n  d3.select(params.root + ' .col_zoom_container').attr('transform', 'translate(' + [trans_x, 0] + ') scale(' + zoom_x + ')');\n\n  // transform col_class\n  d3.select('.col_viz_zoom_container').attr('transform', 'translate(' + [trans_x, 0] + ') scale(' + zoom_x + ',1)');\n\n  // reset translate vector - add back margins to trans_x and trans_y\n  params.zoom_behavior.translate([trans_x + params.viz.clust.margin.left, trans_y + params.viz.clust.margin.top]);\n\n  var trans = false;\n  constrain_font_size(params, trans);\n\n  // resize label bars if necessary\n  ////////////////////////////////////\n\n  if (utils.has(params.network_data.row_nodes[0], 'value')) {\n    d3.selectAll('.row_bars').attr('width', function (d) {\n      var inst_value = 0;\n      inst_value = params.labels.bar_scale_row(Math.abs(d.value)) / zoom_y;\n      return inst_value;\n    }).attr('x', function (d) {\n      var inst_value = 0;\n      inst_value = -params.labels.bar_scale_row(Math.abs(d.value)) / zoom_y;\n      return inst_value;\n    });\n  }\n\n  if (utils.has(params.network_data.col_nodes[0], 'value')) {\n    d3.selectAll('.col_bars').attr('width', function (d) {\n      var inst_value = 0;\n      if (d.value > 0) {\n        inst_value = params.labels.bar_scale_col(d.value) / zoom_x;\n      }\n      return inst_value;\n    });\n  }\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2FwcGx5X3RyYW5zZm9ybWF0aW9uLmpzPzIzMDciXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGNvbnN0cmFpbl9mb250X3NpemUgPSByZXF1aXJlKCcuL2NvbnN0cmFpbl9mb250X3NpemUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihwYXJhbXMsIHRyYW5zX3gsIHRyYW5zX3ksIHpvb21feCwgem9vbV95KSB7XG4gIHZhciBkM19zY2FsZSA9IHpvb21feDtcblxuICAvLyB5IC0gcnVsZXNcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIGF2YWlsYWJsZSBwYW5uaW5nIHJvb20gaW4gdGhlIHkgZGlyZWN0aW9uXG4gIC8vIG11bHRpcGxlIGV4dHJhIHJvb20gKHpvb20gLSAxKSBieSB0aGUgd2lkdGhcbiAgLy8gYWx3YXlzIGRlZmluZWQgaW4gdGhlIHNhbWUgd2F5XG4gIHZhciBwYW5fcm9vbV95ID0gKGQzX3NjYWxlIC0gMSkgKiBwYXJhbXMudml6LmNsdXN0LmRpbS5oZWlnaHQ7XG5cbiAgLy8gZG8gbm90IHRyYW5zbGF0ZSBpZiB0cmFuc2xhdGUgaW4geSBkaXJlY3Rpb24gaXMgcG9zaXRpdmVcbiAgaWYgKHRyYW5zX3kgPj0gMCkge1xuICAgIC8vIHJlc3RyaWN0IHRyYW5zZm9ybWF0aW9uIHBhcmFtZXRlcnNcbiAgICAvLyBubyBwYW5uaW5nIGluIGVpdGhlciBkaXJlY3Rpb25cbiAgICB0cmFuc195ID0gMDtcbiAgfVxuICAvLyByZXN0cmljdCB5IHBhbiB0byBwYW5fcm9vbV95IGlmIG5lY2Vzc2FyeVxuICBlbHNlIGlmICh0cmFuc195IDw9IC1wYW5fcm9vbV95KSB7XG4gICAgdHJhbnNfeSA9IC1wYW5fcm9vbV95O1xuICB9XG5cbiAgLy8geCAtIHJ1bGVzXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyB6b29tIGluIHkgZGlyZWN0aW9uIG9ubHkgLSB0cmFuc2xhdGUgaW4geSBvbmx5XG4gIGlmIChkM19zY2FsZSA8IHBhcmFtcy52aXouem9vbV9zd2l0Y2gpIHtcbiAgICAvLyBubyB4IHRyYW5zbGF0ZSBvciB6b29tXG4gICAgdHJhbnNfeCA9IDA7XG4gICAgem9vbV94ID0gMTtcbiAgfVxuICAvLyB6b29tIGluIGJvdGggZGlyZWN0aW9uc1xuICAvLyBzY2FsZSBpcyBncmVhdGVyIHRoYW4gcGFyYW1zLnZpei56b29tX3N3aXRjaFxuICBlbHNlIHtcbiAgICAvLyBhdmFpbGFibGUgcGFubmluZyByb29tIGluIHRoZSB4IGRpcmVjdGlvblxuICAgIC8vIG11bHRpcGxlIGV4dHJhIHJvb20gKHpvb20gLSAxKSBieSB0aGUgd2lkdGhcbiAgICB2YXIgcGFuX3Jvb21feCA9IChkM19zY2FsZSAvIHBhcmFtcy52aXouem9vbV9zd2l0Y2ggLSAxKSAqIHBhcmFtcy52aXouY2x1c3QuZGltLndpZHRoO1xuXG4gICAgLy8gbm8gcGFubmluZyBpbiB0aGUgcG9zaXRpdmUgZGlyZWN0aW9uXG4gICAgaWYgKHRyYW5zX3ggPiAwKSB7XG4gICAgICAvLyByZXN0cmljdCB0cmFuc2Zvcm1hdGlvbiBwYXJhbWV0ZXJzXG4gICAgICAvLyBubyBwYW5uaW5nIGluIHRoZSB4IGRpcmVjdGlvblxuICAgICAgdHJhbnNfeCA9IDA7XG4gICAgICAvLyBzZXQgem9vbV94XG4gICAgICB6b29tX3ggPSBkM19zY2FsZSAvIHBhcmFtcy52aXouem9vbV9zd2l0Y2g7XG4gICAgfVxuICAgIC8vIHJlc3RyaWN0IHBhbm5pbmcgdG8gcGFuX3Jvb21feFxuICAgIGVsc2UgaWYgKHRyYW5zX3ggPD0gLXBhbl9yb29tX3gpIHtcbiAgICAgIC8vIHJlc3RyaWN0IHRyYW5zZm9ybWF0aW9uIHBhcmFtZXRlcnNcbiAgICAgIC8vIG5vIHBhbm5pbmcgaW4gdGhlIHggZGlyZWN0aW9uXG4gICAgICB0cmFuc194ID0gLXBhbl9yb29tX3g7XG4gICAgICAvLyBzZXQgem9vbV94XG4gICAgICB6b29tX3ggPSBkM19zY2FsZSAvIHBhcmFtcy52aXouem9vbV9zd2l0Y2g7XG4gICAgfVxuICAgIC8vIGFsbG93IHR3byBkaW1lbnNpb25hbCBwYW5uaW5nXG4gICAgZWxzZSB7XG4gICAgICAvLyByZXN0cmljdCB0cmFuc2Zvcm1hdGlvbiBwYXJhbWV0ZXJzXG4gICAgICAvLyBzZXQgem9vbV94XG4gICAgICB6b29tX3ggPSBkM19zY2FsZSAvIHBhcmFtcy52aXouem9vbV9zd2l0Y2g7XG4gICAgfVxuICB9XG5cbiAgLy8gdXBkYXRlIHZpc2libGUgbGlua3NcbiAgdmFyIG1pbl9yZWN0X2hlaWdodCA9IDM7XG5cbiAgLy8gYXBwbHkgdHJhbnNmb3JtYXRpb24gYW5kIHJlc2V0IHRyYW5zbGF0ZSB2ZWN0b3JcbiAgLy8gdGhlIHpvb20gdmVjdG9yICh6b29tLnNjYWxlKSBuZXZlciBnZXRzIHJlc2V0XG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyB0cmFuc2xhdGUgY2x1c3RlcmdyYW1cbiAgLy8gdml6LmdldF9jbHVzdF9ncm91cCgpXG4gIGQzLnNlbGVjdChwYXJhbXMucm9vdCsnIC5jbHVzdF9ncm91cCcpXG4gICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJyArIFt0cmFuc194LCB0cmFuc195XSArICcpIHNjYWxlKCcgK1xuICAgIHpvb21feCArICcsJyArIHpvb21feSArICcpJyk7XG5cbiAgLy8gdHJhbnNmb3JtIHJvdyBsYWJlbHNcbiAgZDMuc2VsZWN0KHBhcmFtcy5yb290KycgLnJvd19sYWJlbF96b29tX2NvbnRhaW5lcicpXG4gICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJyArIFswLCB0cmFuc195XSArICcpIHNjYWxlKCcgKyB6b29tX3kgK1xuICAgICcpJyk7XG5cbiAgLy8gdHJhbnNmb3JtIHJvd196b29tX2NvbnRhaW5lclxuICAvLyB1c2UgdGhlIG9mZnNldCBzYXZlZCBpbiBwYXJhbXMsIG9ubHkgem9vbSBpbiB0aGUgeSBkaXJlY3Rpb25cbiAgZDMuc2VsZWN0KHBhcmFtcy5yb290KycgLnJvd196b29tX2NvbnRhaW5lcicpXG4gICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJyArIFswLCB0cmFuc195XSArICcpIHNjYWxlKCAxLCcgK1xuICAgIHpvb21feSArICcpJyk7XG5cbiAgLy8gdHJhbnNmb3JtIGNvbCBsYWJlbHNcbiAgLy8gbW92ZSBkb3duIGNvbCBsYWJlbHMgYXMgem9vbWluZyBvY2N1cnMsIHN1YnRyYWN0IHRyYW5zX3ggLSAyMCBhbG1vc3Qgd29ya3NcbiAgZDMuc2VsZWN0KHBhcmFtcy5yb290KycgLmNvbF96b29tX2NvbnRhaW5lcicpXG4gICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJyArIFt0cmFuc194LCAwXSArICcpIHNjYWxlKCcgKyB6b29tX3ggK1xuICAgICcpJyk7XG5cbiAgLy8gdHJhbnNmb3JtIGNvbF9jbGFzc1xuICBkMy5zZWxlY3QoJy5jb2xfdml6X3pvb21fY29udGFpbmVyJylcbiAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgW3RyYW5zX3gsIDBdICsgJykgc2NhbGUoJyArIHpvb21feCArXG4gICAgJywxKScpO1xuXG4gIC8vIHJlc2V0IHRyYW5zbGF0ZSB2ZWN0b3IgLSBhZGQgYmFjayBtYXJnaW5zIHRvIHRyYW5zX3ggYW5kIHRyYW5zX3lcbiAgcGFyYW1zLnpvb21fYmVoYXZpb3JcbiAgICAudHJhbnNsYXRlKFt0cmFuc194ICsgcGFyYW1zLnZpei5jbHVzdC5tYXJnaW4ubGVmdCwgdHJhbnNfeSArIHBhcmFtcy52aXouY2x1c3QubWFyZ2luLnRvcFxuICAgIF0pO1xuXG4gIHZhciB0cmFucyA9IGZhbHNlO1xuICBjb25zdHJhaW5fZm9udF9zaXplKHBhcmFtcywgdHJhbnMpO1xuXG5cbiAgLy8gcmVzaXplIGxhYmVsIGJhcnMgaWYgbmVjZXNzYXJ5XG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gIGlmICh1dGlscy5oYXMocGFyYW1zLm5ldHdvcmtfZGF0YS5yb3dfbm9kZXNbMF0sICd2YWx1ZScpKSB7XG4gICAgZDMuc2VsZWN0QWxsKCcucm93X2JhcnMnKVxuICAgIC5hdHRyKCd3aWR0aCcsIGZ1bmN0aW9uKGQpIHtcbiAgICAgIHZhciBpbnN0X3ZhbHVlID0gMDtcbiAgICAgIGluc3RfdmFsdWUgPSBwYXJhbXMubGFiZWxzLmJhcl9zY2FsZV9yb3coTWF0aC5hYnMoZC52YWx1ZSkpL3pvb21feTtcbiAgICAgIHJldHVybiBpbnN0X3ZhbHVlO1xuICAgIH0pXG4gICAgLmF0dHIoJ3gnLCBmdW5jdGlvbihkKSB7XG4gICAgICB2YXIgaW5zdF92YWx1ZSA9IDA7XG4gICAgICBpbnN0X3ZhbHVlID0gLXBhcmFtcy5sYWJlbHMuYmFyX3NjYWxlX3JvdyhNYXRoLmFicyhkLnZhbHVlKSkvem9vbV95O1xuICAgICAgcmV0dXJuIGluc3RfdmFsdWU7XG4gICAgfSk7XG4gIH1cblxuICBpZiAodXRpbHMuaGFzKHBhcmFtcy5uZXR3b3JrX2RhdGEuY29sX25vZGVzWzBdLCAndmFsdWUnKSkge1xuICAgIGQzLnNlbGVjdEFsbCgnLmNvbF9iYXJzJylcbiAgICAgIC5hdHRyKCd3aWR0aCcsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgdmFyIGluc3RfdmFsdWUgPSAwO1xuICAgICAgICBpZiAoZC52YWx1ZSA+IDApe1xuICAgICAgICAgIGluc3RfdmFsdWUgPSBwYXJhbXMubGFiZWxzLmJhcl9zY2FsZV9jb2woZC52YWx1ZSkvem9vbV94O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnN0X3ZhbHVlO1xuICAgICAgfSk7XG4gICAgfVxufTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHNyYy9hcHBseV90cmFuc2Zvcm1hdGlvbi5qc1xuICoqLyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUFGQTtBQUNBOztBQURBOzs7QUFjQTs7O0FBSEE7QUFPQTtBQURBO0FBQ0E7Ozs7QUFsQkE7O0FBMEJBO0FBQ0E7Ozs7QUFIQTs7O0FBVUE7QUFDQTs7QUFKQTs7O0FBU0E7O0FBSEE7OztBQUFBOzs7QUFXQTs7QUFIQTs7O0FBQUE7OztBQVdBO0FBWEE7QUFyQkE7QUFDQTs7QUF6QkE7QUFDQTs7Ozs7O0FBREE7QUFDQTs7QUFEQTtBQUNBOzs7QUFEQTtBQUNBOzs7QUFEQTtBQUNBOztBQURBO0FBQ0E7O0FBREE7QUFDQTtBQWtHQTtBQUNBO0FBQ0E7Ozs7QUFyR0E7QUEyR0E7QUFFQTtBQUNBO0FBQ0E7QUFIQTtBQU1BO0FBQ0E7QUFDQTtBQUhBO0FBUEE7QUFDQTtBQWFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFEQTtBQUdBO0FBTEE7QUFGQTtBQXhIQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	eval("var utils = __webpack_require__(2);\nvar trim_text = __webpack_require__(16);\n\nmodule.exports = function (params, trans) {\n\n  var trans_time;\n\n  if (trans) {\n    trans_time = 700;\n  } else {\n    trans_time = 0;\n  }\n\n  var fraction_keep = {};\n\n  var keep_width = {};\n  keep_width.row = params.bounding_width_max.row * params.labels.row_keep * params.zoom_behavior.scale();\n  keep_width.col = params.bounding_width_max.col * params.labels.col_keep * params.zoom_behavior.scale() / params.viz.zoom_switch;\n\n  if (keep_width.row > params.norm_label.width.row) {\n\n    params.viz.zoom_scale_font.row = params.norm_label.width.row / keep_width.row;\n    // params.viz.zoom_scale_font.row = params.norm_label.width.row / keep_width.row;\n\n    d3.selectAll('.row_label_text').each(function () {\n      if (trans) {\n\n        d3.select(this).select('text').style('font-size', params.labels.default_fs_row * params.viz.zoom_scale_font.row + 'px').attr('y', params.matrix.rect_height * 0.5 + params.labels.default_fs_row * 0.35 * params.viz.zoom_scale_font.row).style('opacity', 0.20).transition().duration(700).style('opacity', 1);\n      } else {\n\n        d3.select(this).select('text').style('font-size', params.labels.default_fs_row * params.viz.zoom_scale_font.row + 'px').attr('y', params.matrix.rect_height * 0.5 + params.labels.default_fs_row * 0.35 * params.viz.zoom_scale_font.row);\n      }\n    });\n  } else {\n\n    d3.selectAll('.row_label_text').each(function () {\n      if (trans) {\n\n        d3.select(this).select('text').style('font-size', params.labels.default_fs_row + 'px')\n        // do not scale by params.viz.zoom_scale_font.row, since this is 1\n        .attr('y', params.matrix.rect_height * 0.5 + params.labels.default_fs_row * 0.35);\n\n        d3.select(this).select('text').text(function (d) {\n          return utils.normal_name(d, params.labels.max_label_char);\n        }).style('opacity', 0.20).transition().duration(700).style('opacity', 1);\n      } else {\n\n        d3.select(this).select('text').style('font-size', params.labels.default_fs_row + 'px').text(function (d) {\n          return utils.normal_name(d, params.labels.max_label_char);\n        });\n      }\n    });\n  }\n\n  if (keep_width.col > params.norm_label.width.col) {\n\n    params.viz.zoom_scale_font.col = params.norm_label.width.col / keep_width.col;\n\n    d3.selectAll('.col_label_click').each(function () {\n      if (trans) {\n        d3.select(this).select('text').style('font-size', params.labels.default_fs_col * params.viz.zoom_scale_font.col + 'px').style('opacity', 0.20).transition().duration(700).style('opacity', 1);\n      } else {\n        d3.select(this).select('text').style('font-size', params.labels.default_fs_col * params.viz.zoom_scale_font.col + 'px');\n      }\n    });\n  } else {\n    d3.selectAll('.col_label_click').each(function () {\n      if (trans) {\n        d3.select(this).select('text').style('font-size', params.labels.default_fs_col + 'px');\n        d3.select(this).select('text').text(function (d) {\n          return utils.normal_name(d, params.labels.max_label_char);\n        }).style('opacity', 0.20).transition().duration(700).style('opacity', 1);\n      } else {\n        d3.select(this).select('text').style('font-size', params.labels.default_fs_col + 'px').text(function (d) {\n          return utils.normal_name(d, params.labels.max_label_char);\n        });\n      }\n    });\n  }\n\n  var max_row_width = params.norm_label.width.row;\n  var max_col_width = params.norm_label.width.col;\n\n  // constrain text after zooming\n  if (params.labels.row_keep < 1) {\n    d3.selectAll('.row_label_text').each(function () {\n      trim_text(params, this, 'row');\n    });\n  }\n  if (params.labels.col_keep < 1) {\n    d3.selectAll('.col_label_click').each(function () {\n      trim_text(params, this, 'col');\n    });\n  }\n\n  // // constrain column text highlight bars\n  // // change the size of the highlighting rects\n  // d3.selectAll('.col_label_click')\n  //   .each(function(d) {\n  //     var bbox = d3.select(this)\n  //       .select('text')[0][0]\n  //       .getBBox();\n\n  //     d3.select(this)\n  //       .select('rect')\n  //       .attr('width', bbox.width * 1.1)\n  //       .attr('height', 0.67*params.matrix.rect_width);\n  //       // .style('fill', function(d){\n  //       //   var inst_color = 'white';\n  //       //   if (params.labels.show_categories){\n  //       //     inst_color = params.labels.class_colors.col[d.cl];\n  //       //   }\n  //       //   return inst_color\n  //       // })\n  //       // .style('opacity', 0.25);\n\n  //   });\n};undefined\n//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NvbnN0cmFpbl9mb250X3NpemUuanM/ZjM0NSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgdHJpbV90ZXh0ID0gcmVxdWlyZSgnLi90cmltX3RleHQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihwYXJhbXMsIHRyYW5zKSB7XG5cbiAgdmFyIHRyYW5zX3RpbWU7XG5cbiAgaWYgKHRyYW5zKSB7XG4gICAgdHJhbnNfdGltZSA9IDcwMDtcbiAgfSBlbHNlIHtcbiAgICB0cmFuc190aW1lID0gMDtcbiAgfVxuXG4gIHZhciBmcmFjdGlvbl9rZWVwID0ge307XG5cbiAgdmFyIGtlZXBfd2lkdGggPSB7fTtcbiAga2VlcF93aWR0aC5yb3cgPSBwYXJhbXMuYm91bmRpbmdfd2lkdGhfbWF4LnJvdyAqIHBhcmFtcy5sYWJlbHMucm93X2tlZXBcbiAgICAqIHBhcmFtcy56b29tX2JlaGF2aW9yLnNjYWxlKCk7XG4gIGtlZXBfd2lkdGguY29sID0gcGFyYW1zLmJvdW5kaW5nX3dpZHRoX21heC5jb2wgKiBwYXJhbXMubGFiZWxzLmNvbF9rZWVwXG4gICAgKiBwYXJhbXMuem9vbV9iZWhhdmlvci5zY2FsZSgpIC8gcGFyYW1zLnZpei56b29tX3N3aXRjaDtcblxuXG5cbiAgaWYgKGtlZXBfd2lkdGgucm93ID4gcGFyYW1zLm5vcm1fbGFiZWwud2lkdGgucm93KSB7XG5cbiAgICBwYXJhbXMudml6Lnpvb21fc2NhbGVfZm9udC5yb3cgPSBwYXJhbXMubm9ybV9sYWJlbC53aWR0aC5yb3cgLyBrZWVwX3dpZHRoLnJvdztcbiAgICAvLyBwYXJhbXMudml6Lnpvb21fc2NhbGVfZm9udC5yb3cgPSBwYXJhbXMubm9ybV9sYWJlbC53aWR0aC5yb3cgLyBrZWVwX3dpZHRoLnJvdztcblxuICAgIGQzLnNlbGVjdEFsbCgnLnJvd19sYWJlbF90ZXh0JykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0cmFucyl7XG5cbiAgICAgICAgZDMuc2VsZWN0KHRoaXMpLnNlbGVjdCgndGV4dCcpXG4gICAgICAgICAgLnN0eWxlKCdmb250LXNpemUnLCBwYXJhbXMubGFiZWxzLmRlZmF1bHRfZnNfcm93ICogcGFyYW1zLnZpei56b29tX3NjYWxlX2ZvbnQucm93ICsgJ3B4JylcbiAgICAgICAgICAuYXR0cigneScsIHBhcmFtcy5tYXRyaXgucmVjdF9oZWlnaHQgKiAwLjUgKyBwYXJhbXMubGFiZWxzLmRlZmF1bHRfZnNfcm93KjAuMzUqcGFyYW1zLnZpei56b29tX3NjYWxlX2ZvbnQucm93IClcbiAgICAgICAgICAuc3R5bGUoJ29wYWNpdHknLDAuMjApLnRyYW5zaXRpb24oKS5kdXJhdGlvbig3MDApXG4gICAgICAgICAgLnN0eWxlKCdvcGFjaXR5JywxKTtcblxuICAgICAgfSBlbHNlIHtcblxuICAgICAgICBkMy5zZWxlY3QodGhpcykuc2VsZWN0KCd0ZXh0JylcbiAgICAgICAgICAuc3R5bGUoJ2ZvbnQtc2l6ZScsIHBhcmFtcy5sYWJlbHMuZGVmYXVsdF9mc19yb3cgKiBwYXJhbXMudml6Lnpvb21fc2NhbGVfZm9udC5yb3cgKyAncHgnKVxuICAgICAgICAgIC5hdHRyKCd5JywgcGFyYW1zLm1hdHJpeC5yZWN0X2hlaWdodCAqIDAuNSArIHBhcmFtcy5sYWJlbHMuZGVmYXVsdF9mc19yb3cqMC4zNSpwYXJhbXMudml6Lnpvb21fc2NhbGVfZm9udC5yb3cgKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBlbHNlIHtcblxuICAgIGQzLnNlbGVjdEFsbCgnLnJvd19sYWJlbF90ZXh0JykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0cmFucyl7XG5cbiAgICAgICAgZDMuc2VsZWN0KHRoaXMpLnNlbGVjdCgndGV4dCcpXG4gICAgICAgICAgLnN0eWxlKCdmb250LXNpemUnLCBwYXJhbXMubGFiZWxzLmRlZmF1bHRfZnNfcm93ICsgJ3B4JylcbiAgICAgICAgICAvLyBkbyBub3Qgc2NhbGUgYnkgcGFyYW1zLnZpei56b29tX3NjYWxlX2ZvbnQucm93LCBzaW5jZSB0aGlzIGlzIDFcbiAgICAgICAgICAuYXR0cigneScsIHBhcmFtcy5tYXRyaXgucmVjdF9oZWlnaHQgKiAwLjUgKyBwYXJhbXMubGFiZWxzLmRlZmF1bHRfZnNfcm93KjAuMzUgKTtcblxuICAgICAgICBkMy5zZWxlY3QodGhpcykuc2VsZWN0KCd0ZXh0JylcbiAgICAgICAgICAudGV4dChmdW5jdGlvbihkKXsgcmV0dXJuIHV0aWxzLm5vcm1hbF9uYW1lKGQsIHBhcmFtcy5sYWJlbHMubWF4X2xhYmVsX2NoYXIpO30pXG4gICAgICAgICAgLnN0eWxlKCdvcGFjaXR5JywwLjIwKS50cmFuc2l0aW9uKCkuZHVyYXRpb24oNzAwKVxuICAgICAgICAgIC5zdHlsZSgnb3BhY2l0eScsMSk7XG5cbiAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgZDMuc2VsZWN0KHRoaXMpLnNlbGVjdCgndGV4dCcpXG4gICAgICAgICAgLnN0eWxlKCdmb250LXNpemUnLCBwYXJhbXMubGFiZWxzLmRlZmF1bHRfZnNfcm93ICsgJ3B4JylcbiAgICAgICAgICAudGV4dChmdW5jdGlvbihkKXsgcmV0dXJuIHV0aWxzLm5vcm1hbF9uYW1lKGQsIHBhcmFtcy5sYWJlbHMubWF4X2xhYmVsX2NoYXIpO30pO1xuXG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuXG4gIGlmIChrZWVwX3dpZHRoLmNvbCA+IHBhcmFtcy5ub3JtX2xhYmVsLndpZHRoLmNvbCkge1xuXG4gICAgcGFyYW1zLnZpei56b29tX3NjYWxlX2ZvbnQuY29sID0gcGFyYW1zLm5vcm1fbGFiZWwud2lkdGguY29sIC8ga2VlcF93aWR0aC5jb2w7XG5cbiAgICBkMy5zZWxlY3RBbGwoJy5jb2xfbGFiZWxfY2xpY2snKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRyYW5zKXtcbiAgICAgICAgZDMuc2VsZWN0KHRoaXMpLnNlbGVjdCgndGV4dCcpXG4gICAgICAgICAgLnN0eWxlKCdmb250LXNpemUnLCBwYXJhbXMubGFiZWxzLmRlZmF1bHRfZnNfY29sICpcbiAgICAgICAgICAgIHBhcmFtcy52aXouem9vbV9zY2FsZV9mb250LmNvbCArICdweCcpXG4gICAgICAgICAgLnN0eWxlKCdvcGFjaXR5JywwLjIwKS50cmFuc2l0aW9uKCkuZHVyYXRpb24oNzAwKVxuICAgICAgICAgIC5zdHlsZSgnb3BhY2l0eScsMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkMy5zZWxlY3QodGhpcykuc2VsZWN0KCd0ZXh0JylcbiAgICAgICAgICAuc3R5bGUoJ2ZvbnQtc2l6ZScsIHBhcmFtcy5sYWJlbHMuZGVmYXVsdF9mc19jb2wgKlxuICAgICAgICAgICAgcGFyYW1zLnZpei56b29tX3NjYWxlX2ZvbnQuY29sICsgJ3B4Jyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgZDMuc2VsZWN0QWxsKCcuY29sX2xhYmVsX2NsaWNrJykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0cmFucyl7XG4gICAgICAgIGQzLnNlbGVjdCh0aGlzKS5zZWxlY3QoJ3RleHQnKVxuICAgICAgICAgIC5zdHlsZSgnZm9udC1zaXplJywgcGFyYW1zLmxhYmVscy5kZWZhdWx0X2ZzX2NvbCArICdweCcpO1xuICAgICAgICBkMy5zZWxlY3QodGhpcykuc2VsZWN0KCd0ZXh0JylcbiAgICAgICAgICAudGV4dChmdW5jdGlvbihkKXsgcmV0dXJuIHV0aWxzLm5vcm1hbF9uYW1lKGQsIHBhcmFtcy5sYWJlbHMubWF4X2xhYmVsX2NoYXIpO30pXG4gICAgICAgICAgLnN0eWxlKCdvcGFjaXR5JywwLjIwKS50cmFuc2l0aW9uKCkuZHVyYXRpb24oNzAwKVxuICAgICAgICAgIC5zdHlsZSgnb3BhY2l0eScsMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkMy5zZWxlY3QodGhpcykuc2VsZWN0KCd0ZXh0JylcbiAgICAgICAgICAuc3R5bGUoJ2ZvbnQtc2l6ZScsIHBhcmFtcy5sYWJlbHMuZGVmYXVsdF9mc19jb2wgKyAncHgnKVxuICAgICAgICAgIC50ZXh0KGZ1bmN0aW9uKGQpeyByZXR1cm4gdXRpbHMubm9ybWFsX25hbWUoZCwgcGFyYW1zLmxhYmVscy5tYXhfbGFiZWxfY2hhcik7fSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuXG4gIHZhciBtYXhfcm93X3dpZHRoID0gcGFyYW1zLm5vcm1fbGFiZWwud2lkdGgucm93O1xuICB2YXIgbWF4X2NvbF93aWR0aCA9IHBhcmFtcy5ub3JtX2xhYmVsLndpZHRoLmNvbDtcblxuICAvLyBjb25zdHJhaW4gdGV4dCBhZnRlciB6b29taW5nXG4gIGlmIChwYXJhbXMubGFiZWxzLnJvd19rZWVwIDwgMSl7XG4gICAgZDMuc2VsZWN0QWxsKCcucm93X2xhYmVsX3RleHQnICkuZWFjaChmdW5jdGlvbigpIHsgdHJpbV90ZXh0KHBhcmFtcywgdGhpcywgJ3JvdycpOyB9KTtcbiAgfVxuICBpZiAocGFyYW1zLmxhYmVscy5jb2xfa2VlcCA8IDEpe1xuICAgIGQzLnNlbGVjdEFsbCgnLmNvbF9sYWJlbF9jbGljaycpLmVhY2goZnVuY3Rpb24oKSB7IHRyaW1fdGV4dChwYXJhbXMsIHRoaXMsICdjb2wnKTsgfSk7XG4gIH1cblxuICAvLyAvLyBjb25zdHJhaW4gY29sdW1uIHRleHQgaGlnaGxpZ2h0IGJhcnNcbiAgLy8gLy8gY2hhbmdlIHRoZSBzaXplIG9mIHRoZSBoaWdobGlnaHRpbmcgcmVjdHNcbiAgLy8gZDMuc2VsZWN0QWxsKCcuY29sX2xhYmVsX2NsaWNrJylcbiAgLy8gICAuZWFjaChmdW5jdGlvbihkKSB7XG4gIC8vICAgICB2YXIgYmJveCA9IGQzLnNlbGVjdCh0aGlzKVxuICAvLyAgICAgICAuc2VsZWN0KCd0ZXh0JylbMF1bMF1cbiAgLy8gICAgICAgLmdldEJCb3goKTtcblxuICAvLyAgICAgZDMuc2VsZWN0KHRoaXMpXG4gIC8vICAgICAgIC5zZWxlY3QoJ3JlY3QnKVxuICAvLyAgICAgICAuYXR0cignd2lkdGgnLCBiYm94LndpZHRoICogMS4xKVxuICAvLyAgICAgICAuYXR0cignaGVpZ2h0JywgMC42NypwYXJhbXMubWF0cml4LnJlY3Rfd2lkdGgpO1xuICAvLyAgICAgICAvLyAuc3R5bGUoJ2ZpbGwnLCBmdW5jdGlvbihkKXtcbiAgLy8gICAgICAgLy8gICB2YXIgaW5zdF9jb2xvciA9ICd3aGl0ZSc7XG4gIC8vICAgICAgIC8vICAgaWYgKHBhcmFtcy5sYWJlbHMuc2hvd19jYXRlZ29yaWVzKXtcbiAgLy8gICAgICAgLy8gICAgIGluc3RfY29sb3IgPSBwYXJhbXMubGFiZWxzLmNsYXNzX2NvbG9ycy5jb2xbZC5jbF07XG4gIC8vICAgICAgIC8vICAgfVxuICAvLyAgICAgICAvLyAgIHJldHVybiBpbnN0X2NvbG9yXG4gIC8vICAgICAgIC8vIH0pXG4gIC8vICAgICAgIC8vIC5zdHlsZSgnb3BhY2l0eScsIDAuMjUpO1xuXG4gIC8vICAgfSk7XG5cbn07XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBzcmMvY29uc3RyYWluX2ZvbnRfc2l6ZS5qc1xuICoqLyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUhBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7OztBQUZBO0FBTUE7QUFDQTtBQUNBO0FBRkE7QUFDQTtBQVNBO0FBVkE7QUFEQTtBQUxBO0FBQ0E7QUFzQkE7QUFDQTtBQUNBO0FBQ0E7O0FBQUE7QUFDQTtBQUlBO0FBQ0E7QUFBQTtBQVJBO0FBQ0E7QUFhQTtBQUVBO0FBQUE7QUFoQkE7QUFEQTtBQXZCQTtBQUNBO0FBOENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFPQTtBQVBBO0FBREE7QUFKQTtBQWtCQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFKQTtBQVFBO0FBRUE7QUFBQTtBQVZBO0FBREE7QUFsQkE7QUFDQTtBQWtDQTtBQUNBO0FBQ0E7O0FBeEdBO0FBMkdBO0FBQUE7QUFBQTtBQURBO0FBR0E7QUFDQTtBQUFBO0FBQUE7QUFEQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTlHQUFBQUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 16 */
/***/ function(module, exports) {

	eval("\nmodule.exports = function (params, inst_selection, inst_rc) {\n\n  var max_width, inst_zoom;\n\n  var safe_row_trim_text = 0.9;\n\n  if (inst_rc === 'row') {\n    max_width = params.norm_label.width.row * safe_row_trim_text;\n    inst_zoom = params.zoom_behavior.scale();\n  } else {\n    // the column label has extra length since its rotated\n    max_width = params.norm_label.width.col;\n    inst_zoom = params.zoom_behavior.scale() / params.viz.zoom_switch;\n  }\n\n  var tmp_width = d3.select(inst_selection).select('text').node().getBBox().width;\n  var inst_text = d3.select(inst_selection).select('text').text();\n  var actual_width = tmp_width * inst_zoom;\n\n  if (actual_width > max_width) {\n\n    var trim_fraction = max_width / actual_width;\n    var keep_num_char = Math.floor(inst_text.length * trim_fraction) - 3;\n    var trimmed_text = inst_text.substring(0, keep_num_char) + '..';\n    d3.select(inst_selection).select('text').text(trimmed_text);\n  }\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL3RyaW1fdGV4dC5qcz9mMmJlIl0sInNvdXJjZXNDb250ZW50IjpbIlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihwYXJhbXMsIGluc3Rfc2VsZWN0aW9uLCBpbnN0X3JjKSB7XG5cbiAgdmFyIG1heF93aWR0aCxcbiAgICAgIGluc3Rfem9vbTtcblxuICB2YXIgc2FmZV9yb3dfdHJpbV90ZXh0ID0gMC45O1xuXG4gIGlmIChpbnN0X3JjID09PSAncm93Jyl7XG4gICAgbWF4X3dpZHRoID0gcGFyYW1zLm5vcm1fbGFiZWwud2lkdGgucm93ICogc2FmZV9yb3dfdHJpbV90ZXh0O1xuICAgIGluc3Rfem9vbSA9IHBhcmFtcy56b29tX2JlaGF2aW9yLnNjYWxlKCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gdGhlIGNvbHVtbiBsYWJlbCBoYXMgZXh0cmEgbGVuZ3RoIHNpbmNlIGl0cyByb3RhdGVkXG4gICAgbWF4X3dpZHRoID0gcGFyYW1zLm5vcm1fbGFiZWwud2lkdGguY29sO1xuICAgIGluc3Rfem9vbSA9IHBhcmFtcy56b29tX2JlaGF2aW9yLnNjYWxlKCkvcGFyYW1zLnZpei56b29tX3N3aXRjaDtcbiAgfVxuXG4gIHZhciB0bXBfd2lkdGggPSBkMy5zZWxlY3QoaW5zdF9zZWxlY3Rpb24pLnNlbGVjdCgndGV4dCcpLm5vZGUoKS5nZXRCQm94KCkud2lkdGg7XG4gIHZhciBpbnN0X3RleHQgPSBkMy5zZWxlY3QoaW5zdF9zZWxlY3Rpb24pLnNlbGVjdCgndGV4dCcpLnRleHQoKTtcbiAgdmFyIGFjdHVhbF93aWR0aCA9IHRtcF93aWR0aCppbnN0X3pvb207XG5cbiAgaWYgKGFjdHVhbF93aWR0aD5tYXhfd2lkdGgpe1xuXG4gICAgdmFyIHRyaW1fZnJhY3Rpb24gPSBtYXhfd2lkdGgvYWN0dWFsX3dpZHRoO1xuICAgIHZhciBrZWVwX251bV9jaGFyID0gTWF0aC5mbG9vcihpbnN0X3RleHQubGVuZ3RoKnRyaW1fZnJhY3Rpb24pLTM7XG4gICAgdmFyIHRyaW1tZWRfdGV4dCA9IGluc3RfdGV4dC5zdWJzdHJpbmcoMCxrZWVwX251bV9jaGFyKSsnLi4nO1xuICAgIGQzLnNlbGVjdChpbnN0X3NlbGVjdGlvbikuc2VsZWN0KCd0ZXh0JylcbiAgICAgIC50ZXh0KHRyaW1tZWRfdGV4dCk7XG4gIH1cblxufTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHNyYy90cmltX3RleHQuanNcbiAqKi8iXSwibWFwcGluZ3MiOiI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTs7QUFLQTtBQUNBO0FBTkE7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTEE7QUFwQkEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	eval("var generate_matrix = __webpack_require__(18);\nvar generate_dendro = __webpack_require__(21);\nvar make_rows = __webpack_require__(26);\nvar make_cols = __webpack_require__(31);\nvar generate_super_labels = __webpack_require__(34);\nvar run_spillover = __webpack_require__(35);\nvar run_search = __webpack_require__(36);\nvar two_translate_zoom = __webpack_require__(37);\nvar initialize_resizing = __webpack_require__(38);\nvar ini_doubleclick = __webpack_require__(41);\n\nmodule.exports = function (params) {\n  var svg_group = d3.select(params.viz.viz_wrapper).append('svg').attr('class', 'viz_svg').attr('width', params.viz.svg_dim.width).attr('height', params.viz.svg_dim.height);\n\n  svg_group.append('rect').attr('class', 'super_background').style('width', params.viz.svg_dim.width).style('height', params.viz.svg_dim.height).style('fill', 'white');\n\n  var matrix = generate_matrix(params, svg_group);\n\n  // var labels = generate_labels(params);\n\n  var delay_text = 0;\n  make_rows(params, delay_text);\n  var container_all_col = make_cols(params, delay_text);\n\n  if (params.viz.show_dendrogram) {\n\n    var row_dendrogram = generate_dendro(params, 'row');\n\n    container_all_col.append('g').attr('class', 'col_viz_outer_container').attr('transform', function () {\n      var inst_offset = params.norm_label.width.col + 2;\n      return 'translate(0,' + inst_offset + ')';\n    }).append('g').attr('class', 'col_viz_zoom_container');\n\n    var col_dendrogram = generate_dendro(params, 'col');\n  }\n\n  run_spillover(params, container_all_col);\n\n  if (params.labels.super_labels) {\n    generate_super_labels(params);\n  }\n\n  function border_colors() {\n    var inst_color = params.viz.super_border_color;\n    if (params.viz.expand) {\n      inst_color = 'white';\n    }\n    return inst_color;\n  }\n\n  // left border\n  d3.select(params.viz.viz_svg).append('rect').classed('left_border', true).classed('borders', true).attr('fill', border_colors).attr('width', params.viz.grey_border_width).attr('height', params.viz.svg_dim.height).attr('transform', 'translate(0,0)');\n\n  // right border\n  d3.select(params.viz.viz_svg).append('rect').classed('right_border', true).classed('borders', true).attr('fill', border_colors).attr('width', params.viz.grey_border_width).attr('height', params.viz.svg_dim.height).attr('transform', function () {\n    var inst_offset = params.viz.svg_dim.width - params.viz.grey_border_width;\n    return 'translate(' + inst_offset + ',0)';\n  });\n\n  // top border\n  d3.select(params.viz.viz_svg).append('rect').classed('top_border', true).classed('borders', true).attr('fill', border_colors).attr('width', params.viz.svg_dim.width).attr('height', params.viz.grey_border_width).attr('transform', function () {\n    var inst_offset = 0;\n    return 'translate(' + inst_offset + ',0)';\n  });\n\n  // bottom border\n  d3.select(params.viz.viz_svg).append('rect').classed('bottom_border', true).classed('borders', true).attr('fill', border_colors).attr('width', params.viz.svg_dim.width).attr('height', params.viz.grey_border_width).attr('transform', function () {\n    var inst_offset = params.viz.svg_dim.height - params.viz.grey_border_width;\n    return 'translate(0,' + inst_offset + ')';\n  });\n\n  initialize_resizing(params);\n\n  ini_doubleclick(params);\n\n  if (params.viz.do_zoom) {\n    svg_group.call(params.zoom_behavior);\n  }\n\n  d3.select(params.viz.viz_svg).on('dblclick.zoom', null);\n\n  var gene_search = run_search(params, params.network_data.row_nodes, 'name');\n\n  var opacity_slider = function (inst_slider) {\n\n    // var max_link = params.matrix.max_link;\n    var slider_scale = d3.scale.linear().domain([0, 1]).range([1, 0.1]);\n\n    var slider_factor = slider_scale(inst_slider);\n\n    if (params.matrix.opacity_function === 'linear') {\n      params.matrix.opacity_scale = d3.scale.linear().domain([0, slider_factor * Math.abs(params.matrix.max_link)]).clamp(true).range([0.0, 1.0]);\n    } else if (params.matrix.opacity_function === 'log') {\n      params.matrix.opacity_scale = d3.scale.log().domain([0.0001, slider_factor * Math.abs(params.matrix.max_link)]).clamp(true).range([0.0, 1.0]);\n    }\n\n    d3.selectAll('.tile').style('fill-opacity', function (d) {\n      return params.matrix.opacity_scale(Math.abs(d.value));\n    });\n  };\n\n  function reset_zoom(inst_scale) {\n    two_translate_zoom(params, 0, 0, inst_scale);\n  }\n\n  return {\n    change_groups: function (inst_rc, inst_index) {\n      if (inst_rc === 'row') {\n        row_dendrogram.change_groups(inst_rc, inst_index);\n      } else {\n        col_dendrogram.change_groups(inst_rc, inst_index);\n      }\n    },\n    get_clust_group: function () {\n      return matrix.get_clust_group();\n    },\n    get_matrix: function () {\n      return matrix.get_matrix();\n    },\n    get_nodes: function (type) {\n      return matrix.get_nodes(type);\n    },\n    reorder: __webpack_require__(42),\n    search: gene_search,\n    opacity_slider: opacity_slider,\n    run_reset_visualization_size: __webpack_require__(40),\n    update_network: __webpack_require__(43),\n    draw_gridlines: matrix.draw_gridlines,\n    reset_zoom: reset_zoom\n  };\n};//@ sourceMappingURL=data:application/json;base64,");

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	eval("var utils = __webpack_require__(2);\nvar draw_gridlines = __webpack_require__(19);\n// var make_simple_rows = require('./make_simple_rows');\nvar add_click_hlight = __webpack_require__(20);\n\nmodule.exports = function (params, svg_elem) {\n  var network_data = params.network_data;\n\n  var matrix = [],\n      row_nodes = network_data.row_nodes,\n      col_nodes = network_data.col_nodes,\n      clust_group;\n\n  var row_nodes_names = _.pluck(row_nodes, 'name');\n  var col_nodes_names = _.pluck(col_nodes, 'name');\n\n  // append a group that will hold clust_group and position it once\n  clust_group = svg_elem.append('g').attr('class', 'clust_container').attr('transform', 'translate(' + params.viz.clust.margin.left + ',' + params.viz.clust.margin.top + ')').append('g').attr('class', 'clust_group');\n\n  if (params.matrix.show_tile_tooltips) {\n    // d3-tooltip - for tiles\n    var tip = d3.tip().attr('class', 'd3-tip').direction('n').offset([0, 0]).html(params.matrix.make_tile_tooltip);\n    d3.select(params.root + ' .clust_group').call(tip);\n  }\n\n  // clustergram background rect\n  clust_group.append('rect').classed('background', true).classed('grey_background', true).style('fill', '#eee').attr('width', params.viz.clust.dim.width).attr('height', params.viz.clust.dim.height);\n\n  function make_simple_rows(ini_inp_row_data) {\n    var inp_row_data = ini_inp_row_data.row_data;\n\n    // value: remove zero values to make visualization faster\n    var row_values = _.filter(inp_row_data, function (num) {\n      return num.value !== 0;\n    });\n\n    // generate tiles in the current row\n    var tile = d3.select(this).selectAll('rect').data(row_values, function (d) {\n      return d.col_name;\n    }).enter().append('rect').attr('class', 'tile row_tile').attr('width', params.matrix.rect_width).attr('height', params.matrix.rect_height)\n    // switch the color based on up/dn value\n    .style('fill', function (d) {\n      return d.value > 0 ? params.matrix.tile_colors[0] : params.matrix.tile_colors[1];\n    }).on('mouseover', function (p) {\n\n      // highlight row - set text to active if\n      d3.selectAll('.row_label_text text').classed('active', function (d) {\n        return p.row_name.replace(/_/g, ' ') === d.name;\n      });\n\n      d3.selectAll('.col_label_text text').classed('active', function (d) {\n        return p.col_name === d.name;\n      });\n\n      if (params.matrix.show_tile_tooltips) {\n        tip.show(p);\n      }\n    }).on('mouseout', function (d) {\n      d3.selectAll('text').classed('active', false);\n      if (params.matrix.show_tile_tooltips) {\n        tip.hide();\n      }\n    }).attr('title', function (d) {\n      return d.value;\n    }).style('fill-opacity', function (d) {\n      // calculate output opacity using the opacity scale\n      var output_opacity = params.matrix.opacity_scale(Math.abs(d.value));\n      return output_opacity;\n    }).attr('transform', function (d) {\n      var x_pos = params.matrix.x_scale(d.pos_x) + 0.5 * params.viz.border_width;\n      var y_pos = 0.5 * params.viz.border_width / params.viz.zoom_switch;\n      return 'translate(' + x_pos + ',' + y_pos + ')';\n    });\n\n    if (params.matrix.tile_type == 'updn') {\n\n      // value split\n      var row_split_data = _.filter(inp_row_data, function (num) {\n        return num.value_up != 0 || num.value_dn != 0;\n      });\n\n      // tile_up\n      d3.select(this).selectAll('.tile_up').data(row_split_data, function (d) {\n        return d.col_name;\n      }).enter().append('path').attr('class', 'tile_up').attr('d', function (d) {\n\n        // up triangle\n        var start_x = 0;\n        var final_x = params.matrix.x_scale.rangeBand();\n        var start_y = 0;\n        var final_y = params.matrix.y_scale.rangeBand() - params.matrix.y_scale.rangeBand() / 60;\n\n        var output_string = 'M' + start_x + ',' + start_y + ', L' + start_x + ', ' + final_y + ', L' + final_x + ',0 Z';\n\n        return output_string;\n      }).attr('transform', function (d) {\n        var x_pos = params.matrix.x_scale(d.pos_x) + 0.5 * params.viz.border_width;\n        var y_pos = 0.5 * params.viz.border_width / params.viz.zoom_switch;\n        return 'translate(' + x_pos + ',' + y_pos + ')';\n      }).style('fill', function () {\n        return params.matrix.tile_colors[0];\n      }).style('fill-opacity', function (d) {\n        var inst_opacity = 0;\n        if (Math.abs(d.value_dn) > 0) {\n          inst_opacity = params.matrix.opacity_scale(Math.abs(d.value_up));\n        }\n        return inst_opacity;\n      }).on('mouseover', function (p) {\n        // highlight row - set text to active if\n        d3.selectAll('.row_label_text text').classed('active', function (d) {\n          return p.row_name.replace(/_/g, ' ') === d.name;\n        });\n\n        d3.selectAll('.col_label_text text').classed('active', function (d) {\n          return p.col_name === d.name;\n        });\n        if (params.matrix.show_tile_tooltips) {\n          tip.show(p);\n        }\n      }).on('mouseout', function (d) {\n        d3.selectAll('text').classed('active', false);\n        if (params.matrix.show_tile_tooltips) {\n          tip.hide();\n        }\n      });\n\n      // tile_dn\n      d3.select(this).selectAll('.tile_dn').data(row_split_data, function (d) {\n        return d.col_name;\n      }).enter().append('path').attr('class', 'tile_dn').attr('d', function (d) {\n\n        // dn triangle\n        var start_x = 0;\n        var final_x = params.matrix.x_scale.rangeBand();\n        var start_y = params.matrix.y_scale.rangeBand() - params.matrix.y_scale.rangeBand() / 60;\n        var final_y = params.matrix.y_scale.rangeBand() - params.matrix.y_scale.rangeBand() / 60;\n\n        var output_string = 'M' + start_x + ', ' + start_y + ' ,   L' + final_x + ', ' + final_y + ',  L' + final_x + ',0 Z';\n\n        return output_string;\n      }).attr('transform', function (d) {\n        var x_pos = params.matrix.x_scale(d.pos_x) + 0.5 * params.viz.border_width;\n        var y_pos = 0.5 * params.viz.border_width / params.viz.zoom_switch;\n        return 'translate(' + x_pos + ',' + y_pos + ')';\n      }).style('fill', function () {\n        return params.matrix.tile_colors[1];\n      }).style('fill-opacity', function (d) {\n        var inst_opacity = 0;\n        if (Math.abs(d.value_up) > 0) {\n          inst_opacity = params.matrix.opacity_scale(Math.abs(d.value_dn));\n        }\n        return inst_opacity;\n      }).on('mouseover', function (p) {\n        // highlight row - set text to active if\n        d3.selectAll('.row_label_text text').classed('active', function (d) {\n          return p.row_name.replace(/_/g, ' ') === d.name;\n        });\n\n        d3.selectAll('.col_label_text text').classed('active', function (d) {\n          return p.col_name === d.name;\n        });\n        if (params.matrix.show_tile_tooltips) {\n          tip.show(p);\n        }\n      }).on('mouseout', function (d) {\n        d3.selectAll('text').classed('active', false);\n        if (params.matrix.show_tile_tooltips) {\n          tip.hide();\n        }\n      });\n\n      // remove tiles when splitting is done\n      tile.each(function (d) {\n        if (Math.abs(d.value_up) > 0 && Math.abs(d.value_dn) > 0) {\n          d3.select(this).remove();\n        }\n      });\n    }\n\n    // append title to group\n    if (params.matrix.tile_title) {\n      tile.append('title').text(function (d) {\n        var inst_string = 'value: ' + d.value;\n        return inst_string;\n      });\n    }\n  };\n\n  // make row matrix - add key names to rows in matrix\n  var row_groups = clust_group.selectAll('.row').data(params.matrix.matrix, function (d) {\n    return d.name;\n  }).enter().append('g').attr('class', 'row').attr('transform', function (d) {\n    var tmp_index = _.indexOf(row_nodes_names, d.name);\n    return 'translate(0,' + params.matrix.y_scale(tmp_index) + ')';\n  }).each(make_simple_rows);\n\n  // add callback function to tile group - if one is supplied by the user\n  if (typeof params.click_tile === 'function') {\n    d3.selectAll('.tile').on('click', function (d) {\n\n      // export row/col name and value from tile\n      var tile_info = {};\n      tile_info.row = params.network_data.row_nodes[d.pos_y].name;\n      tile_info.col = params.network_data.col_nodes[d.pos_x].name;\n      tile_info.value = d.value;\n\n      if (utils.has(d, 'value_up')) {\n        tile_info.value_up = d.value_up;\n      }\n      if (utils.has(d, 'value_dn')) {\n        tile_info.value_dn = d.value_dn;\n      }\n      if (utils.has(d, 'info')) {\n        tile_info.info = d.info;\n      }\n      // run the user supplied callback function\n      params.click_tile(tile_info);\n      add_click_hlight(params, this);\n    });\n  } else {\n\n    // highlight clicked tile\n    if (params.tile_click_hlight) {\n      d3.selectAll('.tile').on('click', function () {\n        add_click_hlight(params, this);\n      });\n    }\n  }\n\n  // draw grid lines after drawing tiles\n  draw_gridlines(params, row_nodes, col_nodes);\n\n  // Matrix API\n  return {\n    get_clust_group: function () {\n      return clust_group;\n    },\n    get_matrix: function () {\n      return matrix;\n    },\n    get_nodes: function (type) {\n      if (type === 'row') {\n        return network_data.row_nodes;\n      }\n      return network_data.col_nodes;\n    }\n  };\n};//@ sourceMappingURL=data:application/json;base64,");

/***/ },
/* 19 */
/***/ function(module, exports) {

	eval("\nmodule.exports = function (params, row_nodes, col_nodes) {\n  var row_nodes_names = params.network_data.row_nodes_names;\n  var col_nodes_names = params.network_data.col_nodes_names;\n\n  d3.selectAll('.horz_lines').remove();\n\n  d3.selectAll('.vert_lines').remove();\n\n  // append horizontal lines\n  d3.select(params.root + ' .clust_group').selectAll('.horz_lines').data(row_nodes, function (d) {\n    return d.name;\n  }).enter().append('g').attr('class', 'horz_lines').attr('transform', function (d) {\n    var inst_index = _.indexOf(row_nodes_names, d.name);\n    return 'translate(0,' + params.matrix.y_scale(inst_index) + ') rotate(0)';\n  }).append('line').attr('x1', 0).attr('x2', params.viz.clust.dim.width).style('stroke-width', params.viz.border_width / params.viz.zoom_switch + 'px').style('stroke', 'white');\n\n  // append vertical line groups\n  d3.select(params.root + ' .clust_group').selectAll('.vert_lines').data(col_nodes).enter().append('g').attr('class', 'vert_lines').attr('transform', function (d) {\n    var inst_index = _.indexOf(col_nodes_names, d.name);\n    return 'translate(' + params.matrix.x_scale(inst_index) + ') rotate(-90)';\n  }).append('line').attr('x1', 0).attr('x2', -params.viz.clust.dim.height).style('stroke-width', params.viz.border_width + 'px').style('stroke', 'white');\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2RyYXdfZ3JpZGxpbmVzLmpzPzYzMTYiXSwic291cmNlc0NvbnRlbnQiOlsiXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHBhcmFtcywgcm93X25vZGVzLCBjb2xfbm9kZXMpIHtcbiAgdmFyIHJvd19ub2Rlc19uYW1lcyA9IHBhcmFtcy5uZXR3b3JrX2RhdGEucm93X25vZGVzX25hbWVzO1xuICB2YXIgY29sX25vZGVzX25hbWVzID0gcGFyYW1zLm5ldHdvcmtfZGF0YS5jb2xfbm9kZXNfbmFtZXM7XG5cbiAgZDMuc2VsZWN0QWxsKCcuaG9yel9saW5lcycpXG4gICAgLnJlbW92ZSgpO1xuXG4gIGQzLnNlbGVjdEFsbCgnLnZlcnRfbGluZXMnKVxuICAgIC5yZW1vdmUoKTtcblxuICAvLyBhcHBlbmQgaG9yaXpvbnRhbCBsaW5lc1xuICBkMy5zZWxlY3QocGFyYW1zLnJvb3QrJyAuY2x1c3RfZ3JvdXAnKVxuICAgIC5zZWxlY3RBbGwoJy5ob3J6X2xpbmVzJylcbiAgICAuZGF0YShyb3dfbm9kZXMsIGZ1bmN0aW9uKGQpe3JldHVybiBkLm5hbWU7fSlcbiAgICAuZW50ZXIoKVxuICAgIC5hcHBlbmQoJ2cnKVxuICAgIC5hdHRyKCdjbGFzcycsJ2hvcnpfbGluZXMnKVxuICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbihkKSB7XG4gICAgICB2YXIgaW5zdF9pbmRleCA9IF8uaW5kZXhPZihyb3dfbm9kZXNfbmFtZXMsIGQubmFtZSk7XG4gICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgwLCcgKyBwYXJhbXMubWF0cml4Lnlfc2NhbGUoaW5zdF9pbmRleCkgKyAnKSByb3RhdGUoMCknO1xuICAgIH0pXG4gICAgLmFwcGVuZCgnbGluZScpXG4gICAgLmF0dHIoJ3gxJywwKVxuICAgIC5hdHRyKCd4MicscGFyYW1zLnZpei5jbHVzdC5kaW0ud2lkdGgpXG4gICAgLnN0eWxlKCdzdHJva2Utd2lkdGgnLCBwYXJhbXMudml6LmJvcmRlcl93aWR0aC9wYXJhbXMudml6Lnpvb21fc3dpdGNoKydweCcpXG4gICAgLnN0eWxlKCdzdHJva2UnLCd3aGl0ZScpO1xuXG4gIC8vIGFwcGVuZCB2ZXJ0aWNhbCBsaW5lIGdyb3Vwc1xuICBkMy5zZWxlY3QocGFyYW1zLnJvb3QrJyAuY2x1c3RfZ3JvdXAnKVxuICAgIC5zZWxlY3RBbGwoJy52ZXJ0X2xpbmVzJylcbiAgICAuZGF0YShjb2xfbm9kZXMpXG4gICAgLmVudGVyKClcbiAgICAuYXBwZW5kKCdnJylcbiAgICAuYXR0cignY2xhc3MnLCAndmVydF9saW5lcycpXG4gICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKGQpIHtcbiAgICAgIHZhciBpbnN0X2luZGV4ID0gXy5pbmRleE9mKGNvbF9ub2Rlc19uYW1lcywgZC5uYW1lKTtcbiAgICAgIHJldHVybiAndHJhbnNsYXRlKCcgKyBwYXJhbXMubWF0cml4Lnhfc2NhbGUoaW5zdF9pbmRleCkgKyAnKSByb3RhdGUoLTkwKSc7XG4gICAgfSlcbiAgICAuYXBwZW5kKCdsaW5lJylcbiAgICAuYXR0cigneDEnLCAwKVxuICAgIC5hdHRyKCd4MicsIC1wYXJhbXMudml6LmNsdXN0LmRpbS5oZWlnaHQpXG4gICAgLnN0eWxlKCdzdHJva2Utd2lkdGgnLCBwYXJhbXMudml6LmJvcmRlcl93aWR0aCArICdweCcpXG4gICAgLnN0eWxlKCdzdHJva2UnLCAnd2hpdGUnKTtcbn07XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBzcmMvZHJhd19ncmlkbGluZXMuanNcbiAqKi8iXSwibWFwcGluZ3MiOiI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOztBQVJBO0FBYUE7QUFBQTtBQUtBO0FBQ0E7QUFGQTtBQUNBOztBQWxCQTtBQW1DQTtBQUNBO0FBRkE7QUFsQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 20 */
/***/ function(module, exports) {

	eval("module.exports = function (params, clicked_rect) {\n\n  // get x position of rectangle\n  d3.select(clicked_rect).each(function (d) {\n    var pos_x = d.pos_x;\n    var pos_y = d.pos_y;\n\n    d3.selectAll('.click_hlight').remove();\n\n    if (pos_x != params.matrix.click_hlight_x || pos_y != params.matrix.click_hlight_y) {\n\n      // save pos_x to params.viz.click_hlight_x\n      params.matrix.click_hlight_x = pos_x;\n      params.matrix.click_hlight_y = pos_y;\n\n      // draw the highlighting rectangle as four rectangles\n      // so that the width and height can be controlled\n      // separately\n\n      var rel_width_hlight = 6;\n      var opacity_hlight = 0.85;\n\n      var hlight_width = rel_width_hlight * params.viz.border_width;\n      var hlight_height = rel_width_hlight * params.viz.border_width / params.viz.zoom_switch;\n\n      // top highlight\n      d3.select(clicked_rect.parentNode).append('rect').classed('click_hlight', true).classed('top_hlight', true).attr('width', params.matrix.x_scale.rangeBand()).attr('height', hlight_height).attr('fill', params.matrix.hlight_color).attr('transform', function () {\n        return 'translate(' + params.matrix.x_scale(pos_x) + ',0)';\n      }).attr('opacity', opacity_hlight);\n\n      // left highlight\n      d3.select(clicked_rect.parentNode).append('rect').classed('click_hlight', true).classed('left_hlight', true).attr('width', hlight_width).attr('height', params.matrix.y_scale.rangeBand() - hlight_height * 0.99).attr('fill', params.matrix.hlight_color).attr('transform', function () {\n        return 'translate(' + params.matrix.x_scale(pos_x) + ',' + hlight_height * 0.99 + ')';\n      }).attr('opacity', opacity_hlight);\n\n      // right highlight\n      d3.select(clicked_rect.parentNode).append('rect').classed('click_hlight', true).classed('right_hlight', true).attr('width', hlight_width).attr('height', params.matrix.y_scale.rangeBand() - hlight_height * 0.99).attr('fill', params.matrix.hlight_color).attr('transform', function () {\n        var tmp_translate = params.matrix.x_scale(pos_x) + params.matrix.x_scale.rangeBand() - hlight_width;\n        return 'translate(' + tmp_translate + ',' + hlight_height * 0.99 + ')';\n      }).attr('opacity', opacity_hlight);\n\n      // bottom highlight\n      d3.select(clicked_rect.parentNode).append('rect').classed('click_hlight', true).classed('bottom_hlight', true).attr('width', function () {\n        return params.matrix.x_scale.rangeBand() - 1.98 * hlight_width;\n      }).attr('height', hlight_height).attr('fill', params.matrix.hlight_color).attr('transform', function () {\n        var tmp_translate_x = params.matrix.x_scale(pos_x) + hlight_width * 0.99;\n        var tmp_translate_y = params.matrix.y_scale.rangeBand() - hlight_height;\n        return 'translate(' + tmp_translate_x + ',' + tmp_translate_y + ')';\n      }).attr('opacity', opacity_hlight);\n    } else {\n      params.matrix.click_hlight_x = -666;\n      params.matrix.click_hlight_y = -666;\n    }\n  });\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL21hdHJpeC9hZGRfY2xpY2tfaGxpZ2h0LmpzP2NiY2QiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihwYXJhbXMsIGNsaWNrZWRfcmVjdCl7XG5cbiAgLy8gZ2V0IHggcG9zaXRpb24gb2YgcmVjdGFuZ2xlXG4gIGQzLnNlbGVjdChjbGlja2VkX3JlY3QpLmVhY2goZnVuY3Rpb24oZCl7XG4gICAgdmFyIHBvc194ID0gZC5wb3NfeDtcbiAgICB2YXIgcG9zX3kgPSBkLnBvc195O1xuXG4gICAgZDMuc2VsZWN0QWxsKCcuY2xpY2tfaGxpZ2h0JylcbiAgICAgIC5yZW1vdmUoKTtcblxuICAgIGlmIChwb3NfeCE9cGFyYW1zLm1hdHJpeC5jbGlja19obGlnaHRfeCB8fCBwb3NfeSE9cGFyYW1zLm1hdHJpeC5jbGlja19obGlnaHRfeSl7XG5cbiAgICAgIC8vIHNhdmUgcG9zX3ggdG8gcGFyYW1zLnZpei5jbGlja19obGlnaHRfeFxuICAgICAgcGFyYW1zLm1hdHJpeC5jbGlja19obGlnaHRfeCA9IHBvc194O1xuICAgICAgcGFyYW1zLm1hdHJpeC5jbGlja19obGlnaHRfeSA9IHBvc195O1xuXG4gICAgICAvLyBkcmF3IHRoZSBoaWdobGlnaHRpbmcgcmVjdGFuZ2xlIGFzIGZvdXIgcmVjdGFuZ2xlc1xuICAgICAgLy8gc28gdGhhdCB0aGUgd2lkdGggYW5kIGhlaWdodCBjYW4gYmUgY29udHJvbGxlZFxuICAgICAgLy8gc2VwYXJhdGVseVxuXG4gICAgICB2YXIgcmVsX3dpZHRoX2hsaWdodCA9IDY7XG4gICAgICB2YXIgb3BhY2l0eV9obGlnaHQgPSAwLjg1O1xuXG4gICAgICB2YXIgaGxpZ2h0X3dpZHRoICA9IHJlbF93aWR0aF9obGlnaHQqcGFyYW1zLnZpei5ib3JkZXJfd2lkdGg7XG4gICAgICB2YXIgaGxpZ2h0X2hlaWdodCA9IHJlbF93aWR0aF9obGlnaHQqcGFyYW1zLnZpei5ib3JkZXJfd2lkdGgvcGFyYW1zLnZpei56b29tX3N3aXRjaDtcblxuICAgICAgLy8gdG9wIGhpZ2hsaWdodFxuICAgICAgZDMuc2VsZWN0KGNsaWNrZWRfcmVjdC5wYXJlbnROb2RlKVxuICAgICAgICAuYXBwZW5kKCdyZWN0JylcbiAgICAgICAgLmNsYXNzZWQoJ2NsaWNrX2hsaWdodCcsdHJ1ZSlcbiAgICAgICAgLmNsYXNzZWQoJ3RvcF9obGlnaHQnLHRydWUpXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIHBhcmFtcy5tYXRyaXgueF9zY2FsZS5yYW5nZUJhbmQoKSlcbiAgICAgICAgLmF0dHIoJ2hlaWdodCcsIGhsaWdodF9oZWlnaHQpXG4gICAgICAgIC5hdHRyKCdmaWxsJyxwYXJhbXMubWF0cml4LmhsaWdodF9jb2xvcilcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiAndHJhbnNsYXRlKCcgKyBwYXJhbXMubWF0cml4Lnhfc2NhbGUocG9zX3gpICsgJywwKSc7XG4gICAgICAgIH0pXG4gICAgICAgIC5hdHRyKCdvcGFjaXR5JyxvcGFjaXR5X2hsaWdodCk7XG5cbiAgICAgIC8vIGxlZnQgaGlnaGxpZ2h0XG4gICAgICBkMy5zZWxlY3QoY2xpY2tlZF9yZWN0LnBhcmVudE5vZGUpXG4gICAgICAgIC5hcHBlbmQoJ3JlY3QnKVxuICAgICAgICAuY2xhc3NlZCgnY2xpY2tfaGxpZ2h0Jyx0cnVlKVxuICAgICAgICAuY2xhc3NlZCgnbGVmdF9obGlnaHQnLHRydWUpXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIGhsaWdodF93aWR0aClcbiAgICAgICAgLmF0dHIoJ2hlaWdodCcsIHBhcmFtcy5tYXRyaXgueV9zY2FsZS5yYW5nZUJhbmQoKSAtIGhsaWdodF9oZWlnaHQqMC45OSApXG4gICAgICAgIC5hdHRyKCdmaWxsJyxwYXJhbXMubWF0cml4LmhsaWdodF9jb2xvcilcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiAndHJhbnNsYXRlKCcgKyBwYXJhbXMubWF0cml4Lnhfc2NhbGUocG9zX3gpICsgJywnK1xuICAgICAgICAgICAgaGxpZ2h0X2hlaWdodCowLjk5KycpJztcbiAgICAgICAgfSlcbiAgICAgICAgLmF0dHIoJ29wYWNpdHknLG9wYWNpdHlfaGxpZ2h0KTtcblxuICAgICAgLy8gcmlnaHQgaGlnaGxpZ2h0XG4gICAgICBkMy5zZWxlY3QoY2xpY2tlZF9yZWN0LnBhcmVudE5vZGUpXG4gICAgICAgIC5hcHBlbmQoJ3JlY3QnKVxuICAgICAgICAuY2xhc3NlZCgnY2xpY2tfaGxpZ2h0Jyx0cnVlKVxuICAgICAgICAuY2xhc3NlZCgncmlnaHRfaGxpZ2h0Jyx0cnVlKVxuICAgICAgICAuYXR0cignd2lkdGgnLCBobGlnaHRfd2lkdGgpXG4gICAgICAgIC5hdHRyKCdoZWlnaHQnLCBwYXJhbXMubWF0cml4Lnlfc2NhbGUucmFuZ2VCYW5kKCkgLSBobGlnaHRfaGVpZ2h0KjAuOTkgKVxuICAgICAgICAuYXR0cignZmlsbCcscGFyYW1zLm1hdHJpeC5obGlnaHRfY29sb3IpXG4gICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgdG1wX3RyYW5zbGF0ZSA9IHBhcmFtcy5tYXRyaXgueF9zY2FsZShwb3NfeCkgKyBwYXJhbXMubWF0cml4Lnhfc2NhbGUucmFuZ2VCYW5kKCkgLSBobGlnaHRfd2lkdGg7XG4gICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIHRtcF90cmFuc2xhdGUgKyAnLCcrXG4gICAgICAgICAgICBobGlnaHRfaGVpZ2h0KjAuOTkrJyknO1xuICAgICAgICB9KVxuICAgICAgICAuYXR0cignb3BhY2l0eScsb3BhY2l0eV9obGlnaHQpO1xuXG4gICAgICAvLyBib3R0b20gaGlnaGxpZ2h0XG4gICAgICBkMy5zZWxlY3QoY2xpY2tlZF9yZWN0LnBhcmVudE5vZGUpXG4gICAgICAgIC5hcHBlbmQoJ3JlY3QnKVxuICAgICAgICAuY2xhc3NlZCgnY2xpY2tfaGxpZ2h0Jyx0cnVlKVxuICAgICAgICAuY2xhc3NlZCgnYm90dG9tX2hsaWdodCcsdHJ1ZSlcbiAgICAgICAgLmF0dHIoJ3dpZHRoJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICByZXR1cm4gcGFyYW1zLm1hdHJpeC54X3NjYWxlLnJhbmdlQmFuZCgpIC0gMS45OCpobGlnaHRfd2lkdGg7fSlcbiAgICAgICAgLmF0dHIoJ2hlaWdodCcsIGhsaWdodF9oZWlnaHQpXG4gICAgICAgIC5hdHRyKCdmaWxsJyxwYXJhbXMubWF0cml4LmhsaWdodF9jb2xvcilcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciB0bXBfdHJhbnNsYXRlX3ggPSBwYXJhbXMubWF0cml4Lnhfc2NhbGUocG9zX3gpICsgaGxpZ2h0X3dpZHRoKjAuOTk7XG4gICAgICAgICAgdmFyIHRtcF90cmFuc2xhdGVfeSA9IHBhcmFtcy5tYXRyaXgueV9zY2FsZS5yYW5nZUJhbmQoKSAtIGhsaWdodF9oZWlnaHQ7XG4gICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIHRtcF90cmFuc2xhdGVfeCArICcsJytcbiAgICAgICAgICAgIHRtcF90cmFuc2xhdGVfeSsnKSc7XG4gICAgICAgIH0pXG4gICAgICAgIC5hdHRyKCdvcGFjaXR5JyxvcGFjaXR5X2hsaWdodCk7XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmFtcy5tYXRyaXguY2xpY2tfaGxpZ2h0X3ggPSAtNjY2O1xuICAgICAgICBwYXJhbXMubWF0cml4LmNsaWNrX2hsaWdodF95ID0gLTY2NjtcbiAgICAgIH1cblxuXG4gIH0pO1xufTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHNyYy9tYXRyaXgvYWRkX2NsaWNrX2hsaWdodC5qc1xuICoqLyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7Ozs7QUFMQTtBQVdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBZkE7QUF5QkE7QUFEQTtBQUNBOztBQXpCQTtBQXNDQTtBQURBO0FBQ0E7O0FBdENBO0FBb0RBO0FBQ0E7QUFGQTtBQUNBOztBQXBEQTtBQWdFQTtBQURBO0FBS0E7QUFDQTtBQUNBO0FBSEE7QUFuRUE7QUE0RUE7QUFDQTtBQTdFQTtBQVBBO0FBSEEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	eval("var build_row_dendro = __webpack_require__(22);\nvar build_col_dendro = __webpack_require__(25);\nvar build_color_groups = __webpack_require__(24);\n\n/* Dendrogram color bar.\n */\nmodule.exports = function (params, type) {\n  var dom_class;\n\n  if (type === 'row') {\n    dom_class = 'row_class_rect';\n    build_row_dendro(params, dom_class);\n  } else {\n    dom_class = 'col_class_rect';\n    build_col_dendro(params, dom_class);\n  }\n\n  var group_colors = build_color_groups(params);\n\n  function color_group(index) {\n    return group_colors[index];\n  }\n\n  function get_group_color(index) {\n    return group_colors[index];\n  }\n\n  /* Changes the groupings (x- and y-axis color bars).\n   */\n  function change_groups(inst_rc, inst_index) {\n    d3.selectAll('.' + dom_class).style('fill', function (d) {\n      return get_group_color(d.group[inst_index]);\n    });\n\n    if (inst_rc === 'row') {\n      params.group_level.row = inst_index;\n    } else if (inst_rc === 'col') {\n      params.group_level.col = inst_index;\n    }\n  }\n\n  return {\n    color_group: color_group,\n    get_group_color: get_group_color,\n    change_groups: change_groups\n  };\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2RlbmRyb2dyYW0vaW5kZXguanM/ZGMwOSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYnVpbGRfcm93X2RlbmRybyA9IHJlcXVpcmUoJy4vYnVpbGRfcm93X2RlbmRybycpO1xudmFyIGJ1aWxkX2NvbF9kZW5kcm8gPSByZXF1aXJlKCcuL2J1aWxkX2NvbF9kZW5kcm8nKTtcbnZhciBidWlsZF9jb2xvcl9ncm91cHMgPSByZXF1aXJlKCcuL2J1aWxkX2NvbG9yX2dyb3VwcycpO1xuXG4vKiBEZW5kcm9ncmFtIGNvbG9yIGJhci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihwYXJhbXMsIHR5cGUpIHtcbiAgdmFyIGRvbV9jbGFzcztcblxuICBpZiAodHlwZSA9PT0gJ3JvdycpIHtcbiAgICBkb21fY2xhc3MgPSAncm93X2NsYXNzX3JlY3QnO1xuICAgIGJ1aWxkX3Jvd19kZW5kcm8ocGFyYW1zLCBkb21fY2xhc3MpO1xuICB9IGVsc2Uge1xuICAgIGRvbV9jbGFzcyA9ICdjb2xfY2xhc3NfcmVjdCc7XG4gICAgYnVpbGRfY29sX2RlbmRybyhwYXJhbXMsIGRvbV9jbGFzcyk7XG4gIH1cblxuICB2YXIgZ3JvdXBfY29sb3JzID0gYnVpbGRfY29sb3JfZ3JvdXBzKHBhcmFtcyk7XG5cbiAgZnVuY3Rpb24gY29sb3JfZ3JvdXAoaW5kZXgpIHtcbiAgICByZXR1cm4gZ3JvdXBfY29sb3JzW2luZGV4XTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldF9ncm91cF9jb2xvcihpbmRleCkge1xuICAgIHJldHVybiBncm91cF9jb2xvcnNbaW5kZXhdO1xuICB9XG5cbiAgLyogQ2hhbmdlcyB0aGUgZ3JvdXBpbmdzICh4LSBhbmQgeS1heGlzIGNvbG9yIGJhcnMpLlxuICAgKi9cbiAgZnVuY3Rpb24gY2hhbmdlX2dyb3VwcyhpbnN0X3JjLCBpbnN0X2luZGV4KSB7XG4gICAgZDMuc2VsZWN0QWxsKCcuJyArIGRvbV9jbGFzcylcbiAgICAgIC5zdHlsZSgnZmlsbCcsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgcmV0dXJuIGdldF9ncm91cF9jb2xvcihkLmdyb3VwW2luc3RfaW5kZXhdKTtcbiAgICAgIH0pO1xuXG4gICAgaWYgKGluc3RfcmM9PT0ncm93Jyl7XG4gICAgICBwYXJhbXMuZ3JvdXBfbGV2ZWwucm93ID0gaW5zdF9pbmRleDtcbiAgICB9IGVsc2UgaWYgKGluc3RfcmM9PT0nY29sJyl7XG4gICAgICBwYXJhbXMuZ3JvdXBfbGV2ZWwuY29sID0gaW5zdF9pbmRleDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGNvbG9yX2dyb3VwOiBjb2xvcl9ncm91cCxcbiAgICBnZXRfZ3JvdXBfY29sb3I6IGdldF9ncm91cF9jb2xvcixcbiAgICBjaGFuZ2VfZ3JvdXBzOiBjaGFuZ2VfZ3JvdXBzXG4gIH07XG59O1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogc3JjL2RlbmRyb2dyYW0vaW5kZXguanNcbiAqKi8iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFMQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUNBO0FBR0E7QUFDQTtBQURBO0FBQ0E7OztBQWxCQTtBQXdCQTtBQUVBO0FBREE7QUFDQTtBQUdBO0FBQ0E7QUFEQTtBQUdBO0FBREE7QUFSQTtBQUNBO0FBWUE7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQXBDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	eval("var utils = __webpack_require__(2);\nvar get_inst_group = __webpack_require__(23);\nvar build_color_groups = __webpack_require__(24);\n\nmodule.exports = function (params, dom_class) {\n\n  d3.selectAll('.row_viz_group').each(function () {\n\n    var inst_level = params.group_level.row;\n\n    var dendro_rect = d3.select(this).append('rect').attr('class', dom_class).attr('width', function () {\n      var inst_width = params.class_room.symbol_width - 1;\n      return inst_width + 'px';\n    }).attr('height', params.matrix.y_scale.rangeBand()).style('fill', function (d) {\n      if (utils.has(d, 'group')) {\n        var group_colors = build_color_groups(params);\n        var inst_color = group_colors[d.group[inst_level]];\n      } else {\n        inst_color = '#eee';\n      }\n\n      return inst_color;\n    }).attr('x', function () {\n      var inst_offset = params.class_room.symbol_width + 1;\n      return inst_offset + 'px';\n    });\n\n    // show group in modal\n    if (typeof params.click_group === 'function') {\n      dendro_rect.on('click', function (d) {\n        var group_nodes_list = get_inst_group(params, 'row', d);\n        params.click_group('row', group_nodes_list);\n      });\n    }\n  });\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2RlbmRyb2dyYW0vYnVpbGRfcm93X2RlbmRyby5qcz9hZTQ4Il0sInNvdXJjZXNDb250ZW50IjpbInZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgZ2V0X2luc3RfZ3JvdXAgPSByZXF1aXJlKCcuL2dldF9pbnN0X2dyb3VwJyk7XG52YXIgYnVpbGRfY29sb3JfZ3JvdXBzID0gcmVxdWlyZSgnLi9idWlsZF9jb2xvcl9ncm91cHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihwYXJhbXMsIGRvbV9jbGFzcykge1xuXG4gIGQzLnNlbGVjdEFsbCgnLnJvd192aXpfZ3JvdXAnKVxuICAgIC5lYWNoKGZ1bmN0aW9uKCkge1xuXG4gICAgICB2YXIgaW5zdF9sZXZlbCA9IHBhcmFtcy5ncm91cF9sZXZlbC5yb3c7XG5cbiAgICAgIHZhciBkZW5kcm9fcmVjdCA9IGQzLnNlbGVjdCh0aGlzKVxuICAgICAgICAuYXBwZW5kKCdyZWN0JylcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgZG9tX2NsYXNzKVxuICAgICAgICAuYXR0cignd2lkdGgnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgaW5zdF93aWR0aCA9IHBhcmFtcy5jbGFzc19yb29tLnN5bWJvbF93aWR0aCAtIDE7XG4gICAgICAgICAgcmV0dXJuIGluc3Rfd2lkdGggKyAncHgnO1xuICAgICAgICB9KVxuICAgICAgICAuYXR0cignaGVpZ2h0JywgcGFyYW1zLm1hdHJpeC55X3NjYWxlLnJhbmdlQmFuZCgpKVxuICAgICAgICAuc3R5bGUoJ2ZpbGwnLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgaWYgKHV0aWxzLmhhcyhkLCdncm91cCcpKXtcbiAgICAgICAgICAgIHZhciBncm91cF9jb2xvcnMgPSBidWlsZF9jb2xvcl9ncm91cHMocGFyYW1zKTtcbiAgICAgICAgICAgIHZhciBpbnN0X2NvbG9yID0gZ3JvdXBfY29sb3JzW2QuZ3JvdXBbaW5zdF9sZXZlbF1dO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbnN0X2NvbG9yID0gJyNlZWUnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBpbnN0X2NvbG9yO1xuICAgICAgICB9KVxuICAgICAgICAuYXR0cigneCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBpbnN0X29mZnNldCA9IHBhcmFtcy5jbGFzc19yb29tLnN5bWJvbF93aWR0aCArIDE7XG4gICAgICAgICAgcmV0dXJuIGluc3Rfb2Zmc2V0ICsgJ3B4JztcbiAgICAgICAgfSk7XG5cbiAgICAgIC8vIHNob3cgZ3JvdXAgaW4gbW9kYWxcbiAgICAgIGlmICh0eXBlb2YgcGFyYW1zLmNsaWNrX2dyb3VwID09PSAnZnVuY3Rpb24nKXtcbiAgICAgICAgZGVuZHJvX3JlY3RcbiAgICAgICAgICAub24oJ2NsaWNrJywgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICB2YXIgZ3JvdXBfbm9kZXNfbGlzdCA9IGdldF9pbnN0X2dyb3VwKHBhcmFtcywgJ3JvdycsIGQpO1xuICAgICAgICAgICAgcGFyYW1zLmNsaWNrX2dyb3VwKCdyb3cnLCBncm91cF9ub2Rlc19saXN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgIH0pO1xuXG59O1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogc3JjL2RlbmRyb2dyYW0vYnVpbGRfcm93X2RlbmRyby5qc1xuICoqLyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFGQTtBQU1BO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFKQTtBQUNBO0FBTUE7QUFSQTtBQVdBO0FBQ0E7QUFGQTtBQUNBOztBQXZCQTtBQTZCQTtBQUVBO0FBQ0E7QUFGQTtBQUZBO0FBNUJBO0FBSEEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 23 */
/***/ function(module, exports) {

	eval("module.exports = function (params, inst_rc, d) {\n  var inst_level;\n  var inst_nodes;\n\n  if (inst_rc === 'col') {\n    inst_level = params.group_level.col;\n    inst_nodes = params.network_data.col_nodes;\n  } else if (inst_rc === 'row') {\n    inst_level = params.group_level.row;\n    inst_nodes = params.network_data.row_nodes;\n  }\n\n  var inst_group = d.group[inst_level];\n  var group_nodes_list = [];\n\n  inst_nodes.forEach(function (node) {\n    if (node.group[inst_level] === inst_group) {\n      group_nodes_list.push(node.name);\n    }\n  });\n\n  return group_nodes_list;\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2RlbmRyb2dyYW0vZ2V0X2luc3RfZ3JvdXAuanM/NDM3YiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHBhcmFtcywgaW5zdF9yYywgZCkge1xuICB2YXIgaW5zdF9sZXZlbDtcbiAgdmFyIGluc3Rfbm9kZXM7XG5cbiAgaWYgKGluc3RfcmMgPT09ICdjb2wnKSB7XG4gICAgaW5zdF9sZXZlbCA9IHBhcmFtcy5ncm91cF9sZXZlbC5jb2w7XG4gICAgaW5zdF9ub2RlcyA9IHBhcmFtcy5uZXR3b3JrX2RhdGEuY29sX25vZGVzO1xuICB9IGVsc2UgaWYgKGluc3RfcmMgPT09ICdyb3cnKSB7XG4gICAgaW5zdF9sZXZlbCA9IHBhcmFtcy5ncm91cF9sZXZlbC5yb3c7XG4gICAgaW5zdF9ub2RlcyA9IHBhcmFtcy5uZXR3b3JrX2RhdGEucm93X25vZGVzO1xuICB9XG5cbiAgdmFyIGluc3RfZ3JvdXAgPSBkLmdyb3VwW2luc3RfbGV2ZWxdO1xuICB2YXIgZ3JvdXBfbm9kZXNfbGlzdCA9IFtdO1xuXG4gIGluc3Rfbm9kZXMuZm9yRWFjaChmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKG5vZGUuZ3JvdXBbaW5zdF9sZXZlbF0gPT09IGluc3RfZ3JvdXApe1xuICAgICAgZ3JvdXBfbm9kZXNfbGlzdC5wdXNoKG5vZGUubmFtZSk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gZ3JvdXBfbm9kZXNfbGlzdDtcbn07XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBzcmMvZGVuZHJvZ3JhbS9nZXRfaW5zdF9ncm91cC5qc1xuICoqLyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFGQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFEQTtBQUNBO0FBS0E7QUFyQkEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	eval("var colors = __webpack_require__(3);\n\nmodule.exports = function (params) {\n  var group_colors = [];\n  // var max_groups;\n  //\n  // if (params.network_data.row_nodes.length > params.network_data.col_nodes.length) {\n  //   max_groups = params.network_data.row_nodes;\n  // } else {\n  //   max_groups = params.network_data.col_nodes;\n  // }\n\n  for (var i = 0; i < params.network_data.row_nodes.length; i++) {\n    // grab colors from the list\n    if (i === 1) {\n      group_colors[i] = colors.get_default_color();\n    } else {\n      group_colors[i] = colors.get_random_color(i);\n    }\n  }\n\n  return group_colors;\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2RlbmRyb2dyYW0vYnVpbGRfY29sb3JfZ3JvdXBzLmpzPzYyZTUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGNvbG9ycyA9IHJlcXVpcmUoJy4uL2NvbG9ycycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHBhcmFtcykge1xuICB2YXIgZ3JvdXBfY29sb3JzID0gW107XG4gIC8vIHZhciBtYXhfZ3JvdXBzO1xuICAvL1xuICAvLyBpZiAocGFyYW1zLm5ldHdvcmtfZGF0YS5yb3dfbm9kZXMubGVuZ3RoID4gcGFyYW1zLm5ldHdvcmtfZGF0YS5jb2xfbm9kZXMubGVuZ3RoKSB7XG4gIC8vICAgbWF4X2dyb3VwcyA9IHBhcmFtcy5uZXR3b3JrX2RhdGEucm93X25vZGVzO1xuICAvLyB9IGVsc2Uge1xuICAvLyAgIG1heF9ncm91cHMgPSBwYXJhbXMubmV0d29ya19kYXRhLmNvbF9ub2RlcztcbiAgLy8gfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyYW1zLm5ldHdvcmtfZGF0YS5yb3dfbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAvLyBncmFiIGNvbG9ycyBmcm9tIHRoZSBsaXN0XG4gICAgaWYgKGkgPT09IDEpIHtcbiAgICAgIGdyb3VwX2NvbG9yc1tpXSA9IGNvbG9ycy5nZXRfZGVmYXVsdF9jb2xvcigpO1xuICAgIH0gZWxzZSB7XG4gICAgICBncm91cF9jb2xvcnNbaV0gPSBjb2xvcnMuZ2V0X3JhbmRvbV9jb2xvcihpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZ3JvdXBfY29sb3JzO1xufTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHNyYy9kZW5kcm9ncmFtL2J1aWxkX2NvbG9yX2dyb3Vwcy5qc1xuICoqLyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQURBOztBQVlBO0FBQ0E7QUFEQTtBQUdBO0FBSEE7QUFGQTtBQUNBO0FBUUE7QUFuQkEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	eval("var utils = __webpack_require__(2);\nvar get_inst_group = __webpack_require__(23);\nvar build_color_groups = __webpack_require__(24);\n\nmodule.exports = function (params, dom_class) {\n  var col_nodes = params.network_data.col_nodes;\n  var col_nodes_names = _.pluck(col_nodes, 'name');\n\n  // append groups - each will hold a classification rect\n  d3.select('.col_viz_zoom_container').selectAll('g').data(col_nodes, function (d) {\n    return d.name;\n  }).enter().append('g').attr('class', 'col_viz_group').attr('transform', function (d) {\n    var inst_index = _.indexOf(col_nodes_names, d.name);\n    return 'translate(' + params.matrix.x_scale(inst_index) + ',0)';\n  });\n\n  d3.selectAll('.col_viz_group').each(function () {\n\n    var inst_level = params.group_level.col;\n\n    var dendro_rect = d3.select(this).append('rect').attr('class', dom_class).attr('width', params.matrix.x_scale.rangeBand()).attr('height', function () {\n      var inst_height = params.class_room.col - 1;\n      return inst_height;\n    }).style('fill', function (d) {\n      if (utils.has(d, 'group')) {\n        var group_colors = build_color_groups(params);\n        var inst_color = group_colors[d.group[inst_level]];\n      } else {\n        inst_color = '#eee';\n      }\n      return inst_color;\n    });\n\n    if (typeof params.click_group === 'function') {\n      dendro_rect.on('click', function (d) {\n        var group_nodes_list = get_inst_group(params, 'col', d);\n        params.click_group('col', group_nodes_list);\n      });\n    }\n  });\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2RlbmRyb2dyYW0vYnVpbGRfY29sX2RlbmRyby5qcz85Y2Y3Il0sInNvdXJjZXNDb250ZW50IjpbInZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgZ2V0X2luc3RfZ3JvdXAgPSByZXF1aXJlKCcuL2dldF9pbnN0X2dyb3VwJyk7XG52YXIgYnVpbGRfY29sb3JfZ3JvdXBzID0gcmVxdWlyZSgnLi9idWlsZF9jb2xvcl9ncm91cHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocGFyYW1zLCBkb21fY2xhc3MpIHtcbiAgdmFyIGNvbF9ub2RlcyA9IHBhcmFtcy5uZXR3b3JrX2RhdGEuY29sX25vZGVzO1xuICB2YXIgY29sX25vZGVzX25hbWVzID0gXy5wbHVjayhjb2xfbm9kZXMsICduYW1lJyk7XG5cbiAgLy8gYXBwZW5kIGdyb3VwcyAtIGVhY2ggd2lsbCBob2xkIGEgY2xhc3NpZmljYXRpb24gcmVjdFxuICBkMy5zZWxlY3QoJy5jb2xfdml6X3pvb21fY29udGFpbmVyJylcbiAgICAuc2VsZWN0QWxsKCdnJylcbiAgICAuZGF0YShjb2xfbm9kZXMsIGZ1bmN0aW9uKGQpeyByZXR1cm4gZC5uYW1lOyB9KVxuICAgIC5lbnRlcigpXG4gICAgLmFwcGVuZCgnZycpXG4gICAgLmF0dHIoJ2NsYXNzJywgJ2NvbF92aXpfZ3JvdXAnKVxuICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbihkKSB7XG4gICAgICB2YXIgaW5zdF9pbmRleCA9IF8uaW5kZXhPZihjb2xfbm9kZXNfbmFtZXMsIGQubmFtZSk7XG4gICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgcGFyYW1zLm1hdHJpeC54X3NjYWxlKGluc3RfaW5kZXgpICsgJywwKSc7XG4gICAgfSk7XG5cbiAgZDMuc2VsZWN0QWxsKCcuY29sX3Zpel9ncm91cCcpXG4gICAgLmVhY2goZnVuY3Rpb24oKSB7XG5cbiAgICAgIHZhciBpbnN0X2xldmVsID0gcGFyYW1zLmdyb3VwX2xldmVsLmNvbDtcblxuICAgICAgdmFyIGRlbmRyb19yZWN0ID0gZDMuc2VsZWN0KHRoaXMpXG4gICAgICAgIC5hcHBlbmQoJ3JlY3QnKVxuICAgICAgICAuYXR0cignY2xhc3MnLCBkb21fY2xhc3MpXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIHBhcmFtcy5tYXRyaXgueF9zY2FsZS5yYW5nZUJhbmQoKSlcbiAgICAgICAgLmF0dHIoJ2hlaWdodCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBpbnN0X2hlaWdodCA9IHBhcmFtcy5jbGFzc19yb29tLmNvbCAtIDE7XG4gICAgICAgICAgcmV0dXJuIGluc3RfaGVpZ2h0O1xuICAgICAgICB9KVxuICAgICAgICAuc3R5bGUoJ2ZpbGwnLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgaWYgKHV0aWxzLmhhcyhkLCdncm91cCcpKXtcbiAgICAgICAgICAgIHZhciBncm91cF9jb2xvcnMgPSBidWlsZF9jb2xvcl9ncm91cHMocGFyYW1zKTtcbiAgICAgICAgICAgIHZhciBpbnN0X2NvbG9yID0gZ3JvdXBfY29sb3JzW2QuZ3JvdXBbaW5zdF9sZXZlbF1dO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbnN0X2NvbG9yID0gJyNlZWUnO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gaW5zdF9jb2xvcjtcbiAgICAgICAgfSk7XG5cbiAgICAgIGlmICh0eXBlb2YgcGFyYW1zLmNsaWNrX2dyb3VwID09PSAnZnVuY3Rpb24nKXtcbiAgICAgICAgZGVuZHJvX3JlY3RcbiAgICAgICAgICAub24oJ2NsaWNrJyxmdW5jdGlvbihkKXtcbiAgICAgICAgICAgIHZhciBncm91cF9ub2Rlc19saXN0ID0gZ2V0X2luc3RfZ3JvdXAocGFyYW1zLCAnY29sJywgZCk7XG4gICAgICAgICAgICBwYXJhbXMuY2xpY2tfZ3JvdXAoJ2NvbCcsIGdyb3VwX25vZGVzX2xpc3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuXG4gIH0pO1xufTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHNyYy9kZW5kcm9ncmFtL2J1aWxkX2NvbF9kZW5kcm8uanNcbiAqKi8iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBSEE7QUFPQTtBQUFBO0FBS0E7QUFDQTtBQUZBO0FBQ0E7QUFJQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBS0E7QUFDQTtBQUZBO0FBS0E7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUpBO0FBTUE7QUFQQTtBQUNBO0FBU0E7QUFDQTtBQUVBO0FBQ0E7QUFGQTtBQUZBO0FBdEJBO0FBakJBIiwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	eval("var utils = __webpack_require__(2);\nvar add_row_click_hlight = __webpack_require__(27);\nvar row_reorder = __webpack_require__(28);\n\nmodule.exports = function (params, text_delay) {\n  var row_nodes = params.network_data.row_nodes;\n\n  var row_nodes_names = params.network_data.row_nodes_names;\n\n  // row container holds all row text and row visualizations (triangles rects)\n  if (d3.select(params.viz.vis_svg + ' .row_container').empty()) {\n    var row_container = d3.select(params.viz.viz_svg).append('g').attr('class', 'row_container').attr('transform', 'translate(' + params.norm_label.margin.left + ',' + params.viz.clust.margin.top + ')');\n  } else {\n    var row_container = d3.select(params.viz.viz_svg).select('.row_container').attr('transform', 'translate(' + params.norm_label.margin.left + ',' + params.viz.clust.margin.top + ')');\n  }\n\n  if (d3.select(params.root + ' .row_white_background').empty()) {\n    row_container.append('rect').classed('row_white_background', true).classed('white_bars', true).attr('fill', params.viz.background_color).attr('width', params.norm_label.background.row).attr('height', 30 * params.viz.clust.dim.height + 'px');\n  }\n\n  // container to hold text row labels\n  row_container.append('g').attr('class', 'row_label_container').attr('transform', 'translate(' + params.norm_label.width.row + ',0)').append('g').attr('class', 'row_label_zoom_container');\n\n  var row_labels = d3.select(params.root + ' .row_label_zoom_container').selectAll('g').data(row_nodes, function (d) {\n    return d.name;\n  }).enter().append('g').attr('class', 'row_label_text').attr('transform', function (d) {\n    var inst_index = _.indexOf(row_nodes_names, d.name);\n    return 'translate(0,' + params.matrix.y_scale(inst_index) + ')';\n  });\n\n  d3.select(params.root + ' .row_label_zoom_container').selectAll('.row_label_text').on('dblclick', function (d) {\n    console.log('double clicking row');\n    row_reorder.call(this);\n    if (params.tile_click_hlight) {\n      add_row_click_hlight(this, d.ini);\n    }\n  });\n\n  if (params.labels.show_label_tooltips) {\n\n    // d3-tooltip\n    var tip = d3.tip().attr('class', 'd3-tip').direction('e').offset([0, 10]).html(function (d) {\n      var inst_name = d.name.replace(/_/g, ' ').split('#')[0];\n      return \"<span>\" + inst_name + \"</span>\";\n    });\n\n    d3.select(params.viz.viz_wrapper).select(params.root + ' .row_container').call(tip);\n\n    row_labels.on('mouseover', function (d) {\n      d3.select(this).select('text').classed('active', true);\n      tip.show(d);\n    }).on('mouseout', function mouseout(d) {\n      d3.select(this).select('text').classed('active', false);\n      tip.hide(d);\n    });\n  } else {\n    row_labels.on('mouseover', function (d) {\n      d3.select(this).select('text').classed('active', true);\n    }).on('mouseout', function mouseout(d) {\n      d3.select(this).select('text').classed('active', false);\n    });\n  }\n\n  // append rectangle behind text\n  row_labels.insert('rect').style('opacity', 0);\n\n  // append row label text\n  row_labels.append('text').attr('y', params.matrix.rect_height * 0.5 + params.labels.default_fs_row * 0.35).attr('text-anchor', 'end').style('font-size', params.labels.default_fs_row + 'px').text(function (d) {\n    return utils.normal_name(d, params.labels.max_label_char);\n  }).attr('pointer-events', 'none').style('opacity', 0).transition().delay(text_delay).duration(text_delay).style('opacity', 1);\n\n  // change the size of the highlighting rects\n  row_labels.each(function () {\n    var bbox = d3.select(this).select('text')[0][0].getBBox();\n    d3.select(this).select('rect').attr('x', bbox.x).attr('y', 0).attr('width', bbox.width).attr('height', params.matrix.y_scale.rangeBand()).style('fill', function () {\n      var inst_hl = 'yellow';\n      return inst_hl;\n    }).style('opacity', function (d) {\n      var inst_opacity = 0;\n      // highlight target genes\n      if (d.target === 1) {\n        inst_opacity = 1;\n      }\n      return inst_opacity;\n    });\n  });\n\n  // label the widest row and col labels\n  params.bounding_width_max = {};\n  params.bounding_width_max.row = 0;\n\n  d3.selectAll('.row_label_text').each(function () {\n    var tmp_width = d3.select(this).select('text').node().getBBox().width;\n    if (tmp_width > params.bounding_width_max.row) {\n      params.bounding_width_max.row = tmp_width;\n    }\n  });\n\n  // row visualizations - classification triangles and colorbar rects\n  var row_viz_container = row_container.append('g').attr('class', 'row_viz_container').attr('transform', 'translate(' + params.norm_label.width.row + ',0)').append('g').attr('class', 'row_zoom_container');\n\n  // white background for triangle\n  if (d3.select(params.root + ' .row_zoom_container').select('.white_bars').empty()) {\n    row_viz_container.append('rect').attr('class', 'white_bars').attr('fill', params.viz.background_color).attr('width', params.class_room.row + 'px').attr('height', function () {\n      var inst_height = params.viz.clust.dim.height;\n      return inst_height;\n    });\n  } else {\n    row_viz_container.select('class', 'white_bars').attr('fill', params.viz.background_color).attr('width', params.class_room.row + 'px').attr('height', function () {\n      var inst_height = params.viz.clust.dim.height;\n      return inst_height;\n    });\n  }\n\n  // groups that hold classification triangle and colorbar rect\n  var row_viz_group = d3.select(params.root + ' .row_zoom_container').selectAll('g').data(row_nodes, function (d) {\n    return d.name;\n  }).enter().append('g').attr('class', 'row_viz_group').attr('transform', function (d) {\n    var inst_index = _.indexOf(row_nodes_names, d.name);\n    return 'translate(0, ' + params.matrix.y_scale(inst_index) + ')';\n  });\n\n  // add triangles\n  row_viz_group.append('path').attr('d', function () {\n    var origin_x = params.class_room.symbol_width - 1;\n    var origin_y = 0;\n    var mid_x = 1;\n    var mid_y = params.matrix.y_scale.rangeBand() / 2;\n    var final_x = params.class_room.symbol_width - 1;\n    var final_y = params.matrix.y_scale.rangeBand();\n    var output_string = 'M ' + origin_x + ',' + origin_y + ' L ' + mid_x + ',' + mid_y + ', L ' + final_x + ',' + final_y + ' Z';\n    return output_string;\n  }).attr('fill', function (d) {\n    // initailize color\n    var inst_color = '#eee';\n    if (params.labels.show_categories) {\n      inst_color = params.labels.class_colors.row[d.cl];\n    }\n    return inst_color;\n  }).style('opacity', 0).transition().delay(text_delay).duration(text_delay).style('opacity', 1);\n\n  if (utils.has(params.network_data.row_nodes[0], 'value')) {\n\n    row_labels.append('rect').attr('class', 'row_bars').attr('width', function (d) {\n      var inst_value = 0;\n      inst_value = params.labels.bar_scale_row(Math.abs(d.value));\n      return inst_value;\n    }).attr('x', function (d) {\n      var inst_value = 0;\n      inst_value = -params.labels.bar_scale_row(Math.abs(d.value));\n      return inst_value;\n    }).attr('height', params.matrix.y_scale.rangeBand()).attr('fill', function (d) {\n      return d.value > 0 ? params.matrix.bar_colors[0] : params.matrix.bar_colors[1];\n    }).attr('opacity', 0.4);\n  }\n\n  // add row callback function\n  d3.selectAll('.row_label_text').on('click', function (d) {\n    if (typeof params.click_label == 'function') {\n      params.click_label(d.name, 'row');\n      add_row_click_hlight(params, this, d.ini);\n    } else {\n      if (params.tile_click_hlight) {\n        add_row_click_hlight(params, this, d.ini);\n      }\n    }\n  });\n\n  // row label text will not spillover initially since\n  // the font-size is set up to not allow spillover\n  // it can spillover during zooming and must be constrained\n\n  // return row_viz_group so that the dendrogram can be made\n  return row_viz_group;\n};//@ sourceMappingURL=data:application/json;base64,");

/***/ },
/* 27 */
/***/ function(module, exports) {

	eval("module.exports = function (params, clicked_row, id_clicked_row) {\n  if (id_clicked_row != params.click_hlight_row) {\n\n    var rel_width_hlight = 6;\n    var opacity_hlight = 0.85;\n    var hlight_width = rel_width_hlight * params.viz.border_width;\n    var hlight_height = rel_width_hlight * params.viz.border_width / params.viz.zoom_switch;\n\n    d3.selectAll('.click_hlight').remove();\n\n    // // highlight selected row\n    // d3.selectAll('.row_label_text')\n    //   .select('rect')\n    // d3.select(this)\n    //   .select('rect')\n    //   .style('opacity', 1);\n\n    d3.select(clicked_row).append('rect').classed('click_hlight', true).classed('row_top_hlight', true).attr('width', params.viz.svg_dim.width).attr('height', hlight_height).attr('fill', params.matrix.hlight_color).attr('opacity', opacity_hlight);\n\n    d3.select(clicked_row).append('rect').classed('click_hlight', true).classed('row_bottom_hlight', true).attr('width', params.viz.svg_dim.width).attr('height', hlight_height).attr('fill', params.matrix.hlight_color).attr('opacity', opacity_hlight).attr('transform', function () {\n      var tmp_translate_y = params.matrix.y_scale.rangeBand() - hlight_height;\n      return 'translate(0,' + tmp_translate_y + ')';\n    });\n  } else {\n    d3.selectAll('.click_hlight').remove();\n    params.click_hlight_row = -666;\n  }\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2xhYmVscy9hZGRfcm93X2NsaWNrX2hsaWdodC5qcz9jMjUxIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ocGFyYW1zLCBjbGlja2VkX3JvdywgaWRfY2xpY2tlZF9yb3cpIHtcbiAgaWYgKGlkX2NsaWNrZWRfcm93ICE9IHBhcmFtcy5jbGlja19obGlnaHRfcm93KXtcblxuICAgIHZhciByZWxfd2lkdGhfaGxpZ2h0ID0gNjtcbiAgICB2YXIgb3BhY2l0eV9obGlnaHQgPSAwLjg1O1xuICAgIHZhciBobGlnaHRfd2lkdGggID0gcmVsX3dpZHRoX2hsaWdodCpwYXJhbXMudml6LmJvcmRlcl93aWR0aDtcbiAgICB2YXIgaGxpZ2h0X2hlaWdodCA9IHJlbF93aWR0aF9obGlnaHQqcGFyYW1zLnZpei5ib3JkZXJfd2lkdGgvcGFyYW1zLnZpei56b29tX3N3aXRjaDtcblxuICAgIGQzLnNlbGVjdEFsbCgnLmNsaWNrX2hsaWdodCcpXG4gICAgICAucmVtb3ZlKCk7XG5cbiAgICAvLyAvLyBoaWdobGlnaHQgc2VsZWN0ZWQgcm93XG4gICAgLy8gZDMuc2VsZWN0QWxsKCcucm93X2xhYmVsX3RleHQnKVxuICAgIC8vICAgLnNlbGVjdCgncmVjdCcpXG4gICAgLy8gZDMuc2VsZWN0KHRoaXMpXG4gICAgLy8gICAuc2VsZWN0KCdyZWN0JylcbiAgICAvLyAgIC5zdHlsZSgnb3BhY2l0eScsIDEpO1xuXG4gICAgZDMuc2VsZWN0KGNsaWNrZWRfcm93KVxuICAgICAgLmFwcGVuZCgncmVjdCcpXG4gICAgICAuY2xhc3NlZCgnY2xpY2tfaGxpZ2h0Jyx0cnVlKVxuICAgICAgLmNsYXNzZWQoJ3Jvd190b3BfaGxpZ2h0Jyx0cnVlKVxuICAgICAgLmF0dHIoJ3dpZHRoJyxwYXJhbXMudml6LnN2Z19kaW0ud2lkdGgpXG4gICAgICAuYXR0cignaGVpZ2h0JyxobGlnaHRfaGVpZ2h0KVxuICAgICAgLmF0dHIoJ2ZpbGwnLHBhcmFtcy5tYXRyaXguaGxpZ2h0X2NvbG9yKVxuICAgICAgLmF0dHIoJ29wYWNpdHknLG9wYWNpdHlfaGxpZ2h0KTtcblxuICAgIGQzLnNlbGVjdChjbGlja2VkX3JvdylcbiAgICAgIC5hcHBlbmQoJ3JlY3QnKVxuICAgICAgLmNsYXNzZWQoJ2NsaWNrX2hsaWdodCcsdHJ1ZSlcbiAgICAgIC5jbGFzc2VkKCdyb3dfYm90dG9tX2hsaWdodCcsdHJ1ZSlcbiAgICAgIC5hdHRyKCd3aWR0aCcscGFyYW1zLnZpei5zdmdfZGltLndpZHRoKVxuICAgICAgLmF0dHIoJ2hlaWdodCcsaGxpZ2h0X2hlaWdodClcbiAgICAgIC5hdHRyKCdmaWxsJyxwYXJhbXMubWF0cml4LmhsaWdodF9jb2xvcilcbiAgICAgIC5hdHRyKCdvcGFjaXR5JyxvcGFjaXR5X2hsaWdodClcbiAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbigpe1xuICAgICAgICB2YXIgdG1wX3RyYW5zbGF0ZV95ID0gcGFyYW1zLm1hdHJpeC55X3NjYWxlLnJhbmdlQmFuZCgpIC0gaGxpZ2h0X2hlaWdodDtcbiAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoMCwnK3RtcF90cmFuc2xhdGVfeSsnKSc7XG4gICAgICB9KTtcbiAgfSBlbHNle1xuICAgIGQzLnNlbGVjdEFsbCgnLmNsaWNrX2hsaWdodCcpXG4gICAgLnJlbW92ZSgpO1xuICAgIHBhcmFtcy5jbGlja19obGlnaHRfcm93ID0gLTY2NjtcbiAgfVxuXG59O1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogc3JjL2xhYmVscy9hZGRfcm93X2NsaWNrX2hsaWdodC5qc1xuICoqLyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FBUkE7QUFDQTtBQXlCQTtBQVNBO0FBQ0E7QUFGQTtBQWxDQTtBQXVDQTtBQUVBO0FBekNBO0FBREEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	eval("var crossfilter = __webpack_require__(6);\nvar end_reorder = __webpack_require__(29);\nvar reposition_tile_highlight = __webpack_require__(30);\n\nmodule.exports = function (params) {\n\n  // get inst row (gene)\n  var inst_row = d3.select(this).select('text').text();\n\n  // get row and col nodes\n  params.viz.run_trans = true;\n\n  var mat = params.matrix.matrix;\n  var row_nodes = params.network_data.row_nodes;\n  var col_nodes = params.network_data.col_nodes;\n\n  var col_nodes_names = _.pluck(col_nodes, 'name');\n\n  // find the index of the row\n  var tmp_arr = [];\n  row_nodes.forEach(function (node) {\n    tmp_arr.push(node.name);\n  });\n\n  // find index\n  var inst_row = _.indexOf(tmp_arr, inst_row);\n\n  // gather the values of the input genes\n  tmp_arr = [];\n  col_nodes.forEach(function (node, index) {\n    tmp_arr.push(mat[inst_row].row_data[index].value);\n  });\n\n  // sort the rows\n  var tmp_sort = d3.range(tmp_arr.length).sort(function (a, b) {\n    return tmp_arr[b] - tmp_arr[a];\n  });\n\n  // resort cols\n  params.matrix.x_scale.domain(tmp_sort);\n\n  // reorder matrix\n  ////////////////////\n  if (params.network_data.links.length > params.matrix.def_large_matrix) {\n\n    // define the t variable as the transition function\n    var t = d3.select(params.root + ' .clust_group');\n\n    // Move Col Labels\n    d3.select(params.root + ' .col_zoom_container').selectAll('.col_label_text').attr('transform', function (d) {\n      var inst_index = _.indexOf(col_nodes_names, d.name);\n      return 'translate(' + params.matrix.x_scale(inst_index) + ')rotate(-90)';\n    });\n\n    // reorder col_class groups\n    d3.selectAll('.col_viz_group').attr('transform', function (d) {\n      var inst_index = _.indexOf(col_nodes_names, d.name);\n      return 'translate(' + params.matrix.x_scale(inst_index) + ',0)';\n    });\n\n    setTimeout(end_reorder, 250);\n  } else {\n\n    // define the t variable as the transition function\n    var t = d3.select(params.root + ' .clust_group').transition().duration(2500);\n\n    // Move Col Labels\n    d3.select(params.root + ' .col_zoom_container').selectAll('.col_label_text').transition().duration(2500).attr('transform', function (d) {\n      var inst_index = _.indexOf(col_nodes_names, d.name);\n      return 'translate(' + params.matrix.x_scale(inst_index) + ')rotate(-90)';\n    });\n\n    // reorder col_class groups\n    d3.selectAll('.col_viz_group').transition().duration(2500).attr('transform', function (d) {\n      var inst_index = _.indexOf(col_nodes_names, d.name);\n      return 'translate(' + params.matrix.x_scale(inst_index) + ',0)';\n    }).each('end', function () {\n      // set running transition to 0\n      params.viz.run_trans = false;\n    });\n  }\n\n  // reorder matrix\n  t.selectAll('.tile').attr('transform', function (d) {\n    return 'translate(' + params.matrix.x_scale(d.pos_x) + ',0)';\n  });\n\n  t.selectAll('.tile_up').attr('transform', function (d) {\n    return 'translate(' + params.matrix.x_scale(d.pos_x) + ',0)';\n  });\n\n  t.selectAll('.tile_dn').attr('transform', function (d) {\n    return 'translate(' + params.matrix.x_scale(d.pos_x) + ',0)';\n  });\n\n  // highlight selected column\n  ///////////////////////////////\n  // unhilight and unbold all columns (already unbolded earlier)\n  d3.selectAll('.row_label_text').select('rect').style('opacity', 0);\n  // highlight column name\n  d3.select(this).select('rect').style('opacity', 1);\n\n  reposition_tile_highlight(params);\n\n  // redefine x and y positions\n  params.network_data.links.forEach(function (d) {\n    d.x = params.matrix.x_scale(d.target);\n    d.y = params.matrix.y_scale(d.source);\n  });\n\n  // rename crossfilter\n  params.cf = {};\n  params.cf.links = crossfilter(params.network_data.links);\n  params.cf.dim_x = params.cf.links.dimension(function (d) {\n    return d.x;\n  });\n  params.cf.dim_y = params.cf.links.dimension(function (d) {\n    return d.y;\n  });\n\n  // backup allow programmatic zoom\n  setTimeout(end_reorder, 2500);\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL3Jlb3JkZXIvcm93X3Jlb3JkZXIuanM/ZDA4MSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY3Jvc3NmaWx0ZXIgPSByZXF1aXJlKCdjcm9zc2ZpbHRlcicpO1xudmFyIGVuZF9yZW9yZGVyID0gcmVxdWlyZSgnLi9lbmRfcmVvcmRlcicpO1xudmFyIHJlcG9zaXRpb25fdGlsZV9oaWdobGlnaHQgPSByZXF1aXJlKCcuL3JlcG9zaXRpb25fdGlsZV9oaWdobGlnaHQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihwYXJhbXMpIHtcblxuICAvLyBnZXQgaW5zdCByb3cgKGdlbmUpXG4gIHZhciBpbnN0X3JvdyA9IGQzLnNlbGVjdCh0aGlzKS5zZWxlY3QoJ3RleHQnKS50ZXh0KCk7XG5cbiAgLy8gZ2V0IHJvdyBhbmQgY29sIG5vZGVzXG4gIHBhcmFtcy52aXoucnVuX3RyYW5zID0gdHJ1ZTtcblxuICB2YXIgbWF0ICAgICAgID0gcGFyYW1zLm1hdHJpeC5tYXRyaXg7XG4gIHZhciByb3dfbm9kZXMgPSBwYXJhbXMubmV0d29ya19kYXRhLnJvd19ub2RlcztcbiAgdmFyIGNvbF9ub2RlcyA9IHBhcmFtcy5uZXR3b3JrX2RhdGEuY29sX25vZGVzO1xuXG4gIHZhciBjb2xfbm9kZXNfbmFtZXMgPSBfLnBsdWNrKGNvbF9ub2RlcywgJ25hbWUnKTtcblxuICAvLyBmaW5kIHRoZSBpbmRleCBvZiB0aGUgcm93XG4gIHZhciB0bXBfYXJyID0gW107XG4gIHJvd19ub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICB0bXBfYXJyLnB1c2gobm9kZS5uYW1lKTtcbiAgfSk7XG5cbiAgLy8gZmluZCBpbmRleFxuICB2YXIgaW5zdF9yb3cgPSBfLmluZGV4T2YodG1wX2FyciwgaW5zdF9yb3cpO1xuXG4gIC8vIGdhdGhlciB0aGUgdmFsdWVzIG9mIHRoZSBpbnB1dCBnZW5lc1xuICB0bXBfYXJyID0gW107XG4gIGNvbF9ub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKG5vZGUsIGluZGV4KSB7XG4gICAgdG1wX2Fyci5wdXNoKCBtYXRbaW5zdF9yb3ddLnJvd19kYXRhW2luZGV4XS52YWx1ZSk7XG4gIH0pO1xuXG4gIC8vIHNvcnQgdGhlIHJvd3NcbiAgdmFyIHRtcF9zb3J0ID0gZDMucmFuZ2UodG1wX2Fyci5sZW5ndGgpLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiB0bXBfYXJyW2JdIC0gdG1wX2FyclthXTtcbiAgfSk7XG5cbiAgLy8gcmVzb3J0IGNvbHNcbiAgcGFyYW1zLm1hdHJpeC54X3NjYWxlLmRvbWFpbih0bXBfc29ydCk7XG5cbiAgLy8gcmVvcmRlciBtYXRyaXhcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgaWYgKHBhcmFtcy5uZXR3b3JrX2RhdGEubGlua3MubGVuZ3RoID4gcGFyYW1zLm1hdHJpeC5kZWZfbGFyZ2VfbWF0cml4KXtcblxuICAgIC8vIGRlZmluZSB0aGUgdCB2YXJpYWJsZSBhcyB0aGUgdHJhbnNpdGlvbiBmdW5jdGlvblxuICAgIHZhciB0ID0gZDMuc2VsZWN0KHBhcmFtcy5yb290ICsgJyAuY2x1c3RfZ3JvdXAnKTtcblxuICAgIC8vIE1vdmUgQ29sIExhYmVsc1xuICAgIGQzLnNlbGVjdChwYXJhbXMucm9vdCsnIC5jb2xfem9vbV9jb250YWluZXInKVxuICAgICAgLnNlbGVjdEFsbCgnLmNvbF9sYWJlbF90ZXh0JylcbiAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbihkKSB7XG4gICAgICAgIHZhciBpbnN0X2luZGV4ID0gXy5pbmRleE9mKGNvbF9ub2Rlc19uYW1lcywgZC5uYW1lKTtcbiAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIHBhcmFtcy5tYXRyaXgueF9zY2FsZShpbnN0X2luZGV4KSArICcpcm90YXRlKC05MCknO1xuICAgICAgfSk7XG5cbiAgICAvLyByZW9yZGVyIGNvbF9jbGFzcyBncm91cHNcbiAgICBkMy5zZWxlY3RBbGwoJy5jb2xfdml6X2dyb3VwJylcbiAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbihkKSB7XG4gICAgICAgIHZhciBpbnN0X2luZGV4ID0gXy5pbmRleE9mKGNvbF9ub2Rlc19uYW1lcywgZC5uYW1lKTtcbiAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIHBhcmFtcy5tYXRyaXgueF9zY2FsZShpbnN0X2luZGV4KSArICcsMCknO1xuICAgICAgfSk7XG5cbiAgICBzZXRUaW1lb3V0KGVuZF9yZW9yZGVyLCAyNTApO1xuXG4gIH0gZWxzZSB7XG5cbiAgICAvLyBkZWZpbmUgdGhlIHQgdmFyaWFibGUgYXMgdGhlIHRyYW5zaXRpb24gZnVuY3Rpb25cbiAgICB2YXIgdCA9IGQzLnNlbGVjdChwYXJhbXMucm9vdCArICcgLmNsdXN0X2dyb3VwJykudHJhbnNpdGlvbigpLmR1cmF0aW9uKDI1MDApO1xuXG4gICAgLy8gTW92ZSBDb2wgTGFiZWxzXG4gICAgZDMuc2VsZWN0KHBhcmFtcy5yb290KycgLmNvbF96b29tX2NvbnRhaW5lcicpXG4gICAgICAuc2VsZWN0QWxsKCcuY29sX2xhYmVsX3RleHQnKVxuICAgICAgLnRyYW5zaXRpb24oKS5kdXJhdGlvbigyNTAwKVxuICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgdmFyIGluc3RfaW5kZXggPSBfLmluZGV4T2YoY29sX25vZGVzX25hbWVzLCBkLm5hbWUpO1xuICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgcGFyYW1zLm1hdHJpeC54X3NjYWxlKGluc3RfaW5kZXgpICsgJylyb3RhdGUoLTkwKSc7XG4gICAgICB9KTtcblxuICAgIC8vIHJlb3JkZXIgY29sX2NsYXNzIGdyb3Vwc1xuICAgIGQzLnNlbGVjdEFsbCgnLmNvbF92aXpfZ3JvdXAnKVxuICAgICAgLnRyYW5zaXRpb24oKS5kdXJhdGlvbigyNTAwKVxuICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgdmFyIGluc3RfaW5kZXggPSBfLmluZGV4T2YoY29sX25vZGVzX25hbWVzLCBkLm5hbWUpO1xuICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgcGFyYW1zLm1hdHJpeC54X3NjYWxlKGluc3RfaW5kZXgpICsgJywwKSc7XG4gICAgICB9KVxuICAgICAgLmVhY2goJ2VuZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBzZXQgcnVubmluZyB0cmFuc2l0aW9uIHRvIDBcbiAgICAgICAgcGFyYW1zLnZpei5ydW5fdHJhbnMgPSBmYWxzZTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLy8gcmVvcmRlciBtYXRyaXhcbiAgdC5zZWxlY3RBbGwoJy50aWxlJylcbiAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oZCkge1xuICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIHBhcmFtcy5tYXRyaXgueF9zY2FsZShkLnBvc194KSArICcsMCknO1xuICAgIH0pO1xuXG4gIHQuc2VsZWN0QWxsKCcudGlsZV91cCcpXG4gICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKGQpIHtcbiAgICAgIHJldHVybiAndHJhbnNsYXRlKCcgKyBwYXJhbXMubWF0cml4Lnhfc2NhbGUoZC5wb3NfeCkgKyAnLDApJztcbiAgICB9KTtcblxuICB0LnNlbGVjdEFsbCgnLnRpbGVfZG4nKVxuICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbihkKSB7XG4gICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgcGFyYW1zLm1hdHJpeC54X3NjYWxlKGQucG9zX3gpICsgJywwKSc7XG4gICAgfSk7XG5cblxuICAvLyBoaWdobGlnaHQgc2VsZWN0ZWQgY29sdW1uXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gdW5oaWxpZ2h0IGFuZCB1bmJvbGQgYWxsIGNvbHVtbnMgKGFscmVhZHkgdW5ib2xkZWQgZWFybGllcilcbiAgZDMuc2VsZWN0QWxsKCcucm93X2xhYmVsX3RleHQnKVxuICAgIC5zZWxlY3QoJ3JlY3QnKVxuICAgIC5zdHlsZSgnb3BhY2l0eScsIDApO1xuICAvLyBoaWdobGlnaHQgY29sdW1uIG5hbWVcbiAgZDMuc2VsZWN0KHRoaXMpXG4gICAgLnNlbGVjdCgncmVjdCcpXG4gICAgLnN0eWxlKCdvcGFjaXR5JywgMSk7XG5cbiAgcmVwb3NpdGlvbl90aWxlX2hpZ2hsaWdodChwYXJhbXMpO1xuXG4gIC8vIHJlZGVmaW5lIHggYW5kIHkgcG9zaXRpb25zXG4gIHBhcmFtcy5uZXR3b3JrX2RhdGEubGlua3MuZm9yRWFjaChmdW5jdGlvbihkKXtcbiAgICBkLnggPSBwYXJhbXMubWF0cml4Lnhfc2NhbGUoZC50YXJnZXQpO1xuICAgIGQueSA9IHBhcmFtcy5tYXRyaXgueV9zY2FsZShkLnNvdXJjZSk7XG4gIH0pO1xuXG4gIC8vIHJlbmFtZSBjcm9zc2ZpbHRlclxuICBwYXJhbXMuY2YgPSB7fTtcbiAgcGFyYW1zLmNmLmxpbmtzID0gY3Jvc3NmaWx0ZXIocGFyYW1zLm5ldHdvcmtfZGF0YS5saW5rcyk7XG4gIHBhcmFtcy5jZi5kaW1feCA9IHBhcmFtcy5jZi5saW5rcy5kaW1lbnNpb24oZnVuY3Rpb24oZCl7cmV0dXJuIGQueDt9KTtcbiAgcGFyYW1zLmNmLmRpbV95ID0gcGFyYW1zLmNmLmxpbmtzLmRpbWVuc2lvbihmdW5jdGlvbihkKXtyZXR1cm4gZC55O30pO1xuXG4gIC8vIGJhY2t1cCBhbGxvdyBwcm9ncmFtbWF0aWMgem9vbVxuICBzZXRUaW1lb3V0KGVuZF9yZW9yZGVyLCAyNTAwKTtcbn07XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBzcmMvcmVvcmRlci9yb3dfcmVvcmRlci5qc1xuICoqLyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBSkE7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFiQTtBQWdCQTtBQUNBO0FBREE7QUFDQTs7QUFqQkE7QUFDQTs7QUFEQTtBQXlCQTtBQUNBO0FBREE7QUFDQTs7QUExQkE7QUErQkE7QUFEQTtBQUNBOztBQS9CQTtBQUNBOzs7QUFEQTtBQUNBOztBQXlDQTtBQUNBOztBQUpBO0FBU0E7QUFDQTtBQUZBO0FBQ0E7O0FBVEE7QUFnQkE7QUFDQTtBQUZBO0FBQ0E7QUFJQTtBQXBCQTtBQUNBOztBQXdCQTtBQUNBOztBQUpBO0FBVUE7QUFDQTtBQUZBO0FBQ0E7O0FBVkE7QUFrQkE7QUFDQTtBQUZBOztBQU1BO0FBRkE7QUEzQ0E7QUFDQTs7QUF4Q0E7QUEyRkE7QUFEQTtBQUNBO0FBR0E7QUFFQTtBQURBO0FBQ0E7QUFHQTtBQUVBO0FBREE7QUFDQTs7OztBQXJHQTs7QUFBQTtBQUNBO0FBbUhBO0FBQ0E7O0FBckhBO0FBd0hBO0FBQ0E7QUFGQTtBQUNBOztBQXhIQTtBQThIQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBOztBQWpJQTtBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 29 */
/***/ function(module, exports) {

	eval("module.exports = function (params) {\n  params.viz.run_trans = false;\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL3Jlb3JkZXIvZW5kX3Jlb3JkZXIuanM/NzUyMCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHBhcmFtcykge1xuICBwYXJhbXMudml6LnJ1bl90cmFucyA9IGZhbHNlO1xufTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHNyYy9yZW9yZGVyL2VuZF9yZW9yZGVyLmpzXG4gKiovIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBREEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 30 */
/***/ function(module, exports) {

	eval("module.exports = function (params) {\n\n  // resize click hlight\n  var rel_width_hlight = 6;\n  var opacity_hlight = 0.85;\n\n  var hlight_width = rel_width_hlight * params.viz.border_width;\n  var hlight_height = rel_width_hlight * params.viz.border_width / params.viz.zoom_switch;\n  // reposition tile highlight\n  ////////////////////////////////\n\n  // top highlight\n  d3.select(params.root + ' .top_hlight').attr('width', params.matrix.x_scale.rangeBand()).attr('height', hlight_height).transition().duration(2500).attr('transform', function () {\n    return 'translate(' + params.matrix.x_scale(params.matrix.click_hlight_x) + ',0)';\n  });\n\n  // left highlight\n  d3.select(params.root + ' .left_hlight').attr('width', hlight_width).attr('height', params.matrix.y_scale.rangeBand() - hlight_height * 0.99).transition().duration(2500).attr('transform', function () {\n    return 'translate(' + params.matrix.x_scale(params.matrix.click_hlight_x) + ',' + hlight_height * 0.99 + ')';\n  });\n\n  // right highlight\n  d3.select(params.root + ' .right_hlight').attr('width', hlight_width).attr('height', params.matrix.y_scale.rangeBand() - hlight_height * 0.99).transition().duration(2500).attr('transform', function () {\n    var tmp_translate = params.matrix.x_scale(params.matrix.click_hlight_x) + params.matrix.x_scale.rangeBand() - hlight_width;\n    return 'translate(' + tmp_translate + ',' + hlight_height * 0.99 + ')';\n  });\n\n  // bottom highlight\n  d3.select(params.root + ' .bottom_hlight').attr('width', function () {\n    return params.matrix.x_scale.rangeBand() - 1.98 * hlight_width;\n  }).attr('height', hlight_height).transition().duration(2500).attr('transform', function () {\n    var tmp_translate_x = params.matrix.x_scale(params.matrix.click_hlight_x) + hlight_width * 0.99;\n    var tmp_translate_y = params.matrix.y_scale.rangeBand() - hlight_height;\n    return 'translate(' + tmp_translate_x + ',' + tmp_translate_y + ')';\n  });\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL3Jlb3JkZXIvcmVwb3NpdGlvbl90aWxlX2hpZ2hsaWdodC5qcz85ZjA2Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ocGFyYW1zKSB7XG5cbiAgLy8gcmVzaXplIGNsaWNrIGhsaWdodFxuICB2YXIgcmVsX3dpZHRoX2hsaWdodCA9IDY7XG4gIHZhciBvcGFjaXR5X2hsaWdodCA9IDAuODU7XG5cbiAgdmFyIGhsaWdodF93aWR0aCA9IHJlbF93aWR0aF9obGlnaHQqcGFyYW1zLnZpei5ib3JkZXJfd2lkdGg7XG4gIHZhciBobGlnaHRfaGVpZ2h0ID0gcmVsX3dpZHRoX2hsaWdodCpwYXJhbXMudml6LmJvcmRlcl93aWR0aC9wYXJhbXMudml6Lnpvb21fc3dpdGNoO1xuICAvLyByZXBvc2l0aW9uIHRpbGUgaGlnaGxpZ2h0XG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgLy8gdG9wIGhpZ2hsaWdodFxuICBkMy5zZWxlY3QocGFyYW1zLnJvb3QrJyAudG9wX2hsaWdodCcpXG4gICAgLmF0dHIoJ3dpZHRoJywgcGFyYW1zLm1hdHJpeC54X3NjYWxlLnJhbmdlQmFuZCgpKVxuICAgIC5hdHRyKCdoZWlnaHQnLCBobGlnaHRfaGVpZ2h0KVxuICAgIC50cmFuc2l0aW9uKCkuZHVyYXRpb24oMjUwMClcbiAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgcGFyYW1zLm1hdHJpeC54X3NjYWxlKHBhcmFtcy5tYXRyaXguY2xpY2tfaGxpZ2h0X3gpICsgJywwKSc7XG4gICAgfSk7XG5cbiAgLy8gbGVmdCBoaWdobGlnaHRcbiAgZDMuc2VsZWN0KHBhcmFtcy5yb290KycgLmxlZnRfaGxpZ2h0JylcbiAgICAuYXR0cignd2lkdGgnLCBobGlnaHRfd2lkdGgpXG4gICAgLmF0dHIoJ2hlaWdodCcsIHBhcmFtcy5tYXRyaXgueV9zY2FsZS5yYW5nZUJhbmQoKSAtIGhsaWdodF9oZWlnaHQqMC45OSApXG4gICAgLnRyYW5zaXRpb24oKS5kdXJhdGlvbigyNTAwKVxuICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAndHJhbnNsYXRlKCcgKyBwYXJhbXMubWF0cml4Lnhfc2NhbGUocGFyYW1zLm1hdHJpeC5jbGlja19obGlnaHRfeCkgKyAnLCcrXG4gICAgICAgIGhsaWdodF9oZWlnaHQqMC45OSsnKSc7XG4gICAgfSk7XG5cbiAgLy8gcmlnaHQgaGlnaGxpZ2h0XG4gIGQzLnNlbGVjdChwYXJhbXMucm9vdCsnIC5yaWdodF9obGlnaHQnKVxuICAgIC5hdHRyKCd3aWR0aCcsIGhsaWdodF93aWR0aClcbiAgICAuYXR0cignaGVpZ2h0JywgcGFyYW1zLm1hdHJpeC55X3NjYWxlLnJhbmdlQmFuZCgpIC0gaGxpZ2h0X2hlaWdodCowLjk5IClcbiAgICAudHJhbnNpdGlvbigpLmR1cmF0aW9uKDI1MDApXG4gICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHRtcF90cmFuc2xhdGUgPSBwYXJhbXMubWF0cml4Lnhfc2NhbGUocGFyYW1zLm1hdHJpeC5jbGlja19obGlnaHRfeCkgKyBwYXJhbXMubWF0cml4Lnhfc2NhbGUucmFuZ2VCYW5kKCkgLSBobGlnaHRfd2lkdGg7XG4gICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgdG1wX3RyYW5zbGF0ZSArICcsJytcbiAgICAgICAgaGxpZ2h0X2hlaWdodCowLjk5KycpJztcbiAgICB9KTtcblxuICAvLyBib3R0b20gaGlnaGxpZ2h0XG4gIGQzLnNlbGVjdChwYXJhbXMucm9vdCsnIC5ib3R0b21faGxpZ2h0JylcbiAgICAuYXR0cignd2lkdGgnLCBmdW5jdGlvbigpe1xuICAgICAgcmV0dXJuIHBhcmFtcy5tYXRyaXgueF9zY2FsZS5yYW5nZUJhbmQoKSAtIDEuOTgqaGxpZ2h0X3dpZHRoO30pXG4gICAgLmF0dHIoJ2hlaWdodCcsIGhsaWdodF9oZWlnaHQpXG4gICAgLnRyYW5zaXRpb24oKS5kdXJhdGlvbigyNTAwKVxuICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB0bXBfdHJhbnNsYXRlX3ggPSBwYXJhbXMubWF0cml4Lnhfc2NhbGUocGFyYW1zLm1hdHJpeC5jbGlja19obGlnaHRfeCkgKyBobGlnaHRfd2lkdGgqMC45OTtcbiAgICAgIHZhciB0bXBfdHJhbnNsYXRlX3kgPSBwYXJhbXMubWF0cml4Lnlfc2NhbGUucmFuZ2VCYW5kKCkgLSBobGlnaHRfaGVpZ2h0O1xuICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIHRtcF90cmFuc2xhdGVfeCArICcsJytcbiAgICAgICAgdG1wX3RyYW5zbGF0ZV95KycpJztcbiAgICB9KTtcblxufTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHNyYy9yZW9yZGVyL3JlcG9zaXRpb25fdGlsZV9oaWdobGlnaHQuanNcbiAqKi8iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFQQTtBQWlCQTtBQURBO0FBQ0E7O0FBakJBO0FBMEJBO0FBREE7QUFDQTs7QUExQkE7QUFvQ0E7QUFDQTtBQUZBO0FBQ0E7O0FBcENBO0FBNENBO0FBREE7QUFLQTtBQUNBO0FBQ0E7QUFIQTtBQS9DQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	eval("var utils = __webpack_require__(2);\nvar trim_text = __webpack_require__(16);\nvar add_col_click_hlight = __webpack_require__(32);\nvar col_reorder = __webpack_require__(33);\n\nmodule.exports = function (params, text_delay) {\n\n  var col_nodes = params.network_data.col_nodes;\n  var col_nodes_names = params.network_data.col_nodes_names;\n\n  // offset click group column label\n  var x_offset_click = params.matrix.x_scale.rangeBand() / 2 + params.viz.border_width;\n  // reduce width of rotated rects\n  var reduce_rect_width = params.matrix.x_scale.rangeBand() * 0.36;\n\n  // make container to pre-position zoomable elements\n  if (d3.select(params.root + ' .col_container').empty()) {\n\n    var container_all_col = d3.select(params.viz.viz_svg).append('g').attr('class', 'col_container').attr('transform', 'translate(' + params.viz.clust.margin.left + ',' + params.norm_label.margin.top + ')');\n\n    // white background rect for col labels\n    container_all_col.append('rect').attr('fill', params.viz.background_color) //!! prog_colors\n    .attr('width', 30 * params.viz.clust.dim.width + 'px').attr('height', params.norm_label.background.col).attr('class', 'white_bars');\n\n    // col labels\n    container_all_col.append('g').attr('class', 'col_label_outer_container')\n    // position the outer col label group\n    .attr('transform', 'translate(0,' + params.norm_label.width.col + ')').append('g').attr('class', 'col_zoom_container');\n  } else {\n\n    var container_all_col = d3.select(params.root + ' .col_container').attr('transform', 'translate(' + params.viz.clust.margin.left + ',' + params.norm_label.margin.top + ')');\n\n    // white background rect for col labels\n    container_all_col.select('.white_bars').attr('fill', params.viz.background_color) //!! prog_colors\n    .attr('width', 30 * params.viz.clust.dim.width + 'px').attr('height', params.norm_label.background.col);\n\n    // col labels\n    container_all_col.select(params.root + ' .col_label_outer_container');\n  }\n\n  // add main column label group\n  var col_label_obj = d3.select(params.root + ' .col_zoom_container').selectAll('.col_label_text').data(col_nodes, function (d) {\n    return d.name;\n  }).enter().append('g').attr('class', 'col_label_text').attr('transform', function (d) {\n    var inst_index = _.indexOf(col_nodes_names, d.name);\n    return 'translate(' + params.matrix.x_scale(inst_index) + ') rotate(-90)';\n  });\n\n  // append group for individual column label\n  var col_label_click = col_label_obj\n  // append new group for rect and label (not white lines)\n  .append('g').attr('class', 'col_label_click')\n  // rotate column labels\n  .attr('transform', 'translate(' + params.matrix.x_scale.rangeBand() / 2 + ',' + x_offset_click + ') rotate(45)').on('mouseover', function (d) {\n    d3.select(this).select('text').classed('active', true);\n  }).on('mouseout', function (d) {\n    d3.select(this).select('text').classed('active', false);\n  });\n\n  // append column value bars\n  if (utils.has(params.network_data.col_nodes[0], 'value')) {\n\n    d3.selectAll('col_bars').remove();\n\n    col_label_click.append('rect').attr('class', 'col_bars').attr('width', function (d) {\n      var inst_value = 0;\n      if (d.value > 0) {\n        inst_value = params.labels.bar_scale_col(d.value);\n      }\n      return inst_value;\n    })\n    // rotate labels - reduce width if rotating\n    .attr('height', params.matrix.x_scale.rangeBand() * 0.66).style('fill', function (d) {\n      return d.value > 0 ? params.matrix.bar_colors[0] : params.matrix.bar_colors[1];\n    }).attr('opacity', 0.4);\n  }\n\n  // add column label\n  col_label_click.append('text').attr('x', 0)\n  // manually tuned\n  .attr('y', params.matrix.x_scale.rangeBand() * 0.64).attr('dx', params.viz.border_width).attr('text-anchor', 'start').attr('full_name', function (d) {\n    return d.name;\n  })\n  // original font size\n  .style('font-size', params.labels.default_fs_col + 'px').text(function (d) {\n    return utils.normal_name(d, params.labels.max_label_char);\n  })\n  // .attr('pointer-events','none')\n  .style('opacity', 0).transition().delay(text_delay).duration(text_delay).style('opacity', 1);\n\n  if (params.labels.show_label_tooltips) {\n\n    // d3-tooltip\n    var tip = d3.tip().attr('class', 'd3-tip').direction('s').offset([20, 0]).html(function (d) {\n      var inst_name = d.name.replace(/_/g, ' ').split('#')[0];\n\n      if (params.show_categories) {\n        inst_name = inst_name + ': ' + String(d.cl);\n      }\n\n      return \"<span>\" + inst_name + \"</span>\";\n    });\n\n    d3.select(params.viz.viz_wrapper).select('svg').select(params.root + ' .col_container').call(tip);\n\n    col_label_obj\n    // .select('text')\n    .on('mouseover', tip.show).on('mouseout', tip.hide);\n  }\n\n  // bounding font size\n  /////////////////////////////\n\n  params.bounding_width_max.col = 0;\n  d3.selectAll('.col_label_click').each(function () {\n    var tmp_width = d3.select(this).select('text').node().getBBox().width;\n    if (tmp_width > params.bounding_width_max.col) {\n      // increase the apparent width of the column label since its rotated\n      // this will give more room for text\n      params.bounding_width_max.col = tmp_width;\n    }\n  });\n\n  // check if widest row or col are wider than the allowed label width\n  ////////////////////////////////////////////////////////////////////////\n  params.ini_scale_font = {};\n  params.ini_scale_font.row = 1;\n  params.ini_scale_font.col = 1;\n\n  if (params.bounding_width_max.row > params.norm_label.width.row) {\n\n    // calc reduction in font size\n    params.ini_scale_font.row = params.norm_label.width.row / params.bounding_width_max.row;\n    // redefine bounding_width_max.row\n    params.bounding_width_max.row = params.ini_scale_font.row * params.bounding_width_max.row;\n\n    // redefine default fs !! increase to make more readable\n    params.labels.default_fs_row = params.labels.default_fs_row * params.ini_scale_font.row;\n\n    // reduce font size\n    d3.selectAll('.row_label_text').each(function () {\n      d3.select(this).select('text').style('font-size', params.labels.default_fs_row + 'px');\n    });\n  }\n\n  // debugger;\n\n  if (params.bounding_width_max.col > params.norm_label.width.col) {\n\n    // calc reduction in font size\n    params.ini_scale_font.col = params.norm_label.width.col / params.bounding_width_max.col;\n    // redefine bounding_width_max.col\n    params.bounding_width_max.col = params.ini_scale_font.col * params.bounding_width_max.col;\n    // redefine default fs, !! increase to make more readable\n    params.labels.default_fs_col = params.labels.default_fs_col * params.ini_scale_font.col;\n\n    // reduce font size\n    d3.selectAll('.col_label_click').each(function () {\n      d3.select(this).select('text').style('font-size', params.labels.default_fs_col + 'px');\n    });\n  }\n\n  // constrain text after zooming\n  if (params.labels.row_keep < 1) {\n    d3.selectAll('.row_label_text').each(function () {\n      trim_text(params, this, 'row');\n    });\n  }\n  if (params.labels.col_keep < 1) {\n    d3.selectAll('.col_label_click').each(function () {\n      trim_text(params, this, 'col');\n    });\n  }\n\n  // append rectangle behind text\n  col_label_click.insert('rect').attr('class', '.highlight_rect').attr('x', 0).attr('y', 0).attr('width', 10 * params.matrix.rect_height).attr('height', 0.67 * params.matrix.rect_width).style('opacity', 0);\n\n  // // only run this if there are col categories\n  // if (params.labels.show_categories){\n  //   // change the size of the highlighting rects\n  //   col_label_click\n  //     .each(function(d) {\n  //       var bbox = d3.select(this)\n  //         .select('text')[0][0]\n  //         .getBBox();\n\n  //       d3.select(this)\n  //         .select('rect')\n  //         .attr('width', bbox.width * 1.1)\n  //         .attr('height', 0.67*params.matrix.rect_width)\n  //         .style('fill', function(d){\n  //           var inst_color = 'white';\n  //           inst_color = params.labels.class_colors.col[d.cl];\n  //           return inst_color\n  //         })\n  //         .style('opacity', 0.30);\n  //     });\n  // }\n\n  // add triangle under rotated labels\n  col_label_click.append('path').style('stroke-width', 0).attr('d', function () {\n    // x and y are flipped since its rotated\n    var origin_y = -params.viz.border_width;\n    var start_x = 0;\n    var final_x = params.matrix.x_scale.rangeBand() - reduce_rect_width;\n    var start_y = -(params.matrix.x_scale.rangeBand() - reduce_rect_width + params.viz.border_width);\n    var final_y = -params.viz.border_width;\n    var output_string = 'M ' + origin_y + ',0 L ' + start_y + ',' + start_x + ', L ' + final_y + ',' + final_x + ' Z';\n    return output_string;\n  }).attr('fill', function (d) {\n    var inst_color = '#eee';\n    if (params.labels.show_categories) {\n      inst_color = params.labels.class_colors.col[d.cl];\n    }\n    return inst_color;\n  }).style('opacity', 0).transition().delay(text_delay).duration(text_delay).style('opacity', 1);\n\n  // add col callback function\n  d3.selectAll('.col_label_text').on('click', function (d) {\n\n    if (typeof params.click_label == 'function') {\n      params.click_label(d.name, 'col');\n      add_col_click_hlight(params, this, d.ini);\n    } else {\n\n      if (params.tile_click_hlight) {\n        add_col_click_hlight(params, this, d.ini);\n      }\n    }\n  }).on('dblclick', function (d) {\n    console.log('double clicking col');\n    col_reorder.call(this);\n    if (params.tile_click_hlight) {\n      add_col_click_hlight(params, this, d.ini);\n    }\n  });\n\n  return container_all_col;\n};//@ sourceMappingURL=data:application/json;base64,");

/***/ },
/* 32 */
/***/ function(module, exports) {

	eval("module.exports = function (params, clicked_col, id_clicked_col) {\n\n  if (id_clicked_col != params.click_hlight_col) {\n\n    params.click_hlight_col = id_clicked_col;\n\n    var rel_width_hlight = 6;\n    var opacity_hlight = 0.85;\n    var hlight_width = rel_width_hlight * params.viz.border_width;\n    var hlight_height = rel_width_hlight * params.viz.border_width / params.viz.zoom_switch;\n\n    d3.selectAll('.click_hlight').remove();\n\n    // // highlight selected column\n    // ///////////////////////////////\n    // // unhilight and unbold all columns (already unbolded earlier)\n    // d3.selectAll('.col_label_text')\n    //   .select('rect')\n    //   .style('opacity', 0);\n    // // highlight column name\n    // d3.select(clicked_col)\n    //   .select('rect')\n    //   .style('opacity', 1);\n\n    d3.select(clicked_col).append('rect').classed('click_hlight', true).classed('col_top_hlight', true).attr('width', params.viz.clust.dim.height).attr('height', hlight_width).attr('fill', params.matrix.hlight_color).attr('opacity', opacity_hlight).attr('transform', function () {\n      var tmp_translate_y = 0;\n      var tmp_translate_x = -(params.viz.clust.dim.height + params.class_room.col + params.viz.uni_margin);\n      return 'translate(' + tmp_translate_x + ',' + tmp_translate_y + ')';\n    });\n\n    d3.select(clicked_col).append('rect').classed('click_hlight', true).classed('col_bottom_hlight', true).attr('width', params.viz.clust.dim.height).attr('height', hlight_width).attr('fill', params.matrix.hlight_color).attr('opacity', opacity_hlight).attr('transform', function () {\n      // reverse x and y since rotated\n      var tmp_translate_y = params.matrix.x_scale.rangeBand() - hlight_width;\n      var tmp_translate_x = -(params.viz.clust.dim.height + params.class_room.col + params.viz.uni_margin);\n      return 'translate(' + tmp_translate_x + ',' + tmp_translate_y + ')';\n    });\n  } else {\n    d3.selectAll('.click_hlight').remove();\n    params.click_hlight_col = -666;\n  }\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2xhYmVscy9hZGRfY29sX2NsaWNrX2hsaWdodC5qcz83MGFiIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ocGFyYW1zLCBjbGlja2VkX2NvbCwgaWRfY2xpY2tlZF9jb2wpIHtcblxuICBpZiAoaWRfY2xpY2tlZF9jb2wgIT0gcGFyYW1zLmNsaWNrX2hsaWdodF9jb2wpe1xuXG4gICAgcGFyYW1zLmNsaWNrX2hsaWdodF9jb2wgPSBpZF9jbGlja2VkX2NvbDtcblxuICAgIHZhciByZWxfd2lkdGhfaGxpZ2h0ID0gNjtcbiAgICB2YXIgb3BhY2l0eV9obGlnaHQgPSAwLjg1O1xuICAgIHZhciBobGlnaHRfd2lkdGggID0gcmVsX3dpZHRoX2hsaWdodCpwYXJhbXMudml6LmJvcmRlcl93aWR0aDtcbiAgICB2YXIgaGxpZ2h0X2hlaWdodCA9IHJlbF93aWR0aF9obGlnaHQqcGFyYW1zLnZpei5ib3JkZXJfd2lkdGgvcGFyYW1zLnZpei56b29tX3N3aXRjaDtcblxuICAgIGQzLnNlbGVjdEFsbCgnLmNsaWNrX2hsaWdodCcpXG4gICAgICAucmVtb3ZlKCk7XG5cbiAgICAvLyAvLyBoaWdobGlnaHQgc2VsZWN0ZWQgY29sdW1uXG4gICAgLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIC8vIHVuaGlsaWdodCBhbmQgdW5ib2xkIGFsbCBjb2x1bW5zIChhbHJlYWR5IHVuYm9sZGVkIGVhcmxpZXIpXG4gICAgLy8gZDMuc2VsZWN0QWxsKCcuY29sX2xhYmVsX3RleHQnKVxuICAgIC8vICAgLnNlbGVjdCgncmVjdCcpXG4gICAgLy8gICAuc3R5bGUoJ29wYWNpdHknLCAwKTtcbiAgICAvLyAvLyBoaWdobGlnaHQgY29sdW1uIG5hbWVcbiAgICAvLyBkMy5zZWxlY3QoY2xpY2tlZF9jb2wpXG4gICAgLy8gICAuc2VsZWN0KCdyZWN0JylcbiAgICAvLyAgIC5zdHlsZSgnb3BhY2l0eScsIDEpO1xuXG4gICAgZDMuc2VsZWN0KGNsaWNrZWRfY29sKVxuICAgICAgLmFwcGVuZCgncmVjdCcpXG4gICAgICAuY2xhc3NlZCgnY2xpY2tfaGxpZ2h0Jyx0cnVlKVxuICAgICAgLmNsYXNzZWQoJ2NvbF90b3BfaGxpZ2h0Jyx0cnVlKVxuICAgICAgLmF0dHIoJ3dpZHRoJyxwYXJhbXMudml6LmNsdXN0LmRpbS5oZWlnaHQpXG4gICAgICAuYXR0cignaGVpZ2h0JyxobGlnaHRfd2lkdGgpXG4gICAgICAuYXR0cignZmlsbCcscGFyYW1zLm1hdHJpeC5obGlnaHRfY29sb3IpXG4gICAgICAuYXR0cignb3BhY2l0eScsb3BhY2l0eV9obGlnaHQpXG4gICAgICAuYXR0cigndHJhbnNmb3JtJyxmdW5jdGlvbigpe1xuICAgICAgICB2YXIgdG1wX3RyYW5zbGF0ZV95ID0gMDtcbiAgICAgICAgdmFyIHRtcF90cmFuc2xhdGVfeCA9IC0ocGFyYW1zLnZpei5jbHVzdC5kaW0uaGVpZ2h0K1xuICAgICAgICAgIHBhcmFtcy5jbGFzc19yb29tLmNvbCtwYXJhbXMudml6LnVuaV9tYXJnaW4pO1xuICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnK3RtcF90cmFuc2xhdGVfeCsnLCcrdG1wX3RyYW5zbGF0ZV95KycpJztcbiAgICAgIH0pO1xuXG4gICAgZDMuc2VsZWN0KGNsaWNrZWRfY29sKVxuICAgICAgLmFwcGVuZCgncmVjdCcpXG4gICAgICAuY2xhc3NlZCgnY2xpY2tfaGxpZ2h0Jyx0cnVlKVxuICAgICAgLmNsYXNzZWQoJ2NvbF9ib3R0b21faGxpZ2h0Jyx0cnVlKVxuICAgICAgLmF0dHIoJ3dpZHRoJyxwYXJhbXMudml6LmNsdXN0LmRpbS5oZWlnaHQpXG4gICAgICAuYXR0cignaGVpZ2h0JyxobGlnaHRfd2lkdGgpXG4gICAgICAuYXR0cignZmlsbCcscGFyYW1zLm1hdHJpeC5obGlnaHRfY29sb3IpXG4gICAgICAuYXR0cignb3BhY2l0eScsb3BhY2l0eV9obGlnaHQpXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oKXtcbiAgICAgICAgLy8gcmV2ZXJzZSB4IGFuZCB5IHNpbmNlIHJvdGF0ZWRcbiAgICAgICAgdmFyIHRtcF90cmFuc2xhdGVfeSA9IHBhcmFtcy5tYXRyaXgueF9zY2FsZS5yYW5nZUJhbmQoKSAtIGhsaWdodF93aWR0aDtcbiAgICAgICAgdmFyIHRtcF90cmFuc2xhdGVfeCA9IC0ocGFyYW1zLnZpei5jbHVzdC5kaW0uaGVpZ2h0ICtcbiAgICAgICAgICBwYXJhbXMuY2xhc3Nfcm9vbS5jb2wrcGFyYW1zLnZpei51bmlfbWFyZ2luKTtcbiAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyt0bXBfdHJhbnNsYXRlX3grJywnK3RtcF90cmFuc2xhdGVfeSsnKSc7XG4gICAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBkMy5zZWxlY3RBbGwoJy5jbGlja19obGlnaHQnKVxuICAgICAgLnJlbW92ZSgpO1xuICAgIHBhcmFtcy5jbGlja19obGlnaHRfY29sID0gLTY2NjtcbiAgfVxuXG59O1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogc3JjL2xhYmVscy9hZGRfY29sX2NsaWNrX2hsaWdodC5qc1xuICoqLyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7OztBQVZBO0FBZ0NBO0FBQ0E7QUFFQTtBQUpBO0FBQ0E7QUFNQTs7QUFVQTtBQUNBO0FBRUE7QUFMQTtBQTlDQTtBQXNEQTtBQUVBO0FBeERBO0FBRkEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	eval("var crossfilter = __webpack_require__(6);\nvar end_reorder = __webpack_require__(29);\nvar reposition_tile_highlight = __webpack_require__(30);\n\nmodule.exports = function (params) {\n\n  // set running transition value\n  params.viz.run_trans = true;\n\n  var mat = params.matrix.matrix;\n  var row_nodes = params.network_data.row_nodes;\n  var col_nodes = params.network_data.col_nodes;\n\n  var row_nodes_names = _.pluck(row_nodes, 'name');\n\n  // get inst col (term)\n  var inst_term = d3.select(this).select('text').attr('full_name');\n\n  // find the column number of this term from col_nodes\n  // gather column node names\n  var tmp_arr = [];\n  col_nodes.forEach(function (node) {\n    tmp_arr.push(node.name);\n  });\n\n  // find index\n  var inst_col = _.indexOf(tmp_arr, inst_term);\n\n  // gather the values of the input genes\n  tmp_arr = [];\n  row_nodes.forEach(function (node, index) {\n    tmp_arr.push(mat[index].row_data[inst_col].value);\n  });\n\n  // sort the cols\n  var tmp_sort = d3.range(tmp_arr.length).sort(function (a, b) {\n    return tmp_arr[b] - tmp_arr[a];\n  });\n\n  // resort cols\n  ////////////////////////////\n  params.matrix.y_scale.domain(tmp_sort);\n\n  // reorder\n  if (params.network_data.links.length > params.matrix.def_large_matrix) {\n    var t = this.viz.get_clust_group();\n\n    // reorder row_label_triangle groups\n    d3.selectAll('.row_viz_group').attr('transform', function (d) {\n      var inst_index = _.indexOf(row_nodes_names, d.name);\n      return 'translate(0,' + params.matrix.y_scale(inst_index) + ')';\n    });\n\n    // Move Row Labels\n    d3.select(params.root + ' .row_label_zoom_container').selectAll('.row_label_text').attr('transform', function (d) {\n      var inst_index = _.indexOf(row_nodes_names, d.name);\n      return 'translate(0,' + params.matrix.y_scale(inst_index) + ')';\n    });\n  } else {\n\n    var t = this.viz.get_clust_group().transition().duration(2500);\n\n    // reorder row_label_triangle groups\n    d3.selectAll('.row_viz_group').transition().duration(2500).attr('transform', function (d) {\n      var inst_index = _.indexOf(row_nodes_names, d.name);\n      return 'translate(0,' + params.matrix.y_scale(inst_index) + ')';\n    });\n\n    // Move Row Labels\n    d3.select(params.root + ' .row_label_zoom_container').selectAll('.row_label_text').transition().duration(2500).attr('transform', function (d) {\n      var inst_index = _.indexOf(row_nodes_names, d.name);\n      return 'translate(0,' + params.matrix.y_scale(inst_index) + ')';\n    });\n  }\n\n  // reorder matrix rows\n  t.selectAll('.row').attr('transform', function (d) {\n    var inst_index = _.indexOf(row_nodes_names, d.name);\n    return 'translate(0,' + params.matrix.y_scale(inst_index) + ')';\n  });\n\n  // highlight selected column\n  ///////////////////////////////\n  // unhilight and unbold all columns (already unbolded earlier)\n  d3.selectAll('.col_label_text').select('.highlight_rect').style('opacity', 0);\n  // highlight column name\n  d3.select(this).select('.highlight_rect').style('opacity', 1);\n\n  // redefine x and y positions\n  params.network_data.links.forEach(function (d) {\n    d.x = params.matrix.x_scale(d.target);\n    d.y = params.matrix.y_scale(d.source);\n  });\n\n  // rename crossfilter\n  params.cf = {};\n  params.cf.links = crossfilter(params.network_data.links);\n  params.cf.dim_x = params.cf.links.dimension(function (d) {\n    return d.x;\n  });\n  params.cf.dim_y = params.cf.links.dimension(function (d) {\n    return d.y;\n  });\n\n  reposition_tile_highlight(params);\n\n  // backup allow programmatic zoom\n  setTimeout(end_reorder, 2500);\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL3Jlb3JkZXIvY29sX3Jlb3JkZXIuanM/NWFlNiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY3Jvc3NmaWx0ZXIgPSByZXF1aXJlKCdjcm9zc2ZpbHRlcicpO1xudmFyIGVuZF9yZW9yZGVyID0gcmVxdWlyZSgnLi9lbmRfcmVvcmRlcicpO1xudmFyIHJlcG9zaXRpb25fdGlsZV9oaWdobGlnaHQgPSByZXF1aXJlKCcuL3JlcG9zaXRpb25fdGlsZV9oaWdobGlnaHQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihwYXJhbXMpIHtcblxuICAvLyBzZXQgcnVubmluZyB0cmFuc2l0aW9uIHZhbHVlXG4gIHBhcmFtcy52aXoucnVuX3RyYW5zID0gdHJ1ZTtcblxuICB2YXIgbWF0ICAgICAgID0gcGFyYW1zLm1hdHJpeC5tYXRyaXg7XG4gIHZhciByb3dfbm9kZXMgPSBwYXJhbXMubmV0d29ya19kYXRhLnJvd19ub2RlcztcbiAgdmFyIGNvbF9ub2RlcyA9IHBhcmFtcy5uZXR3b3JrX2RhdGEuY29sX25vZGVzO1xuXG4gIHZhciByb3dfbm9kZXNfbmFtZXMgPSBfLnBsdWNrKHJvd19ub2RlcywgJ25hbWUnKTtcblxuICAvLyBnZXQgaW5zdCBjb2wgKHRlcm0pXG4gIHZhciBpbnN0X3Rlcm0gPSBkMy5zZWxlY3QodGhpcykuc2VsZWN0KCd0ZXh0JykuYXR0cignZnVsbF9uYW1lJyk7XG5cbiAgLy8gZmluZCB0aGUgY29sdW1uIG51bWJlciBvZiB0aGlzIHRlcm0gZnJvbSBjb2xfbm9kZXNcbiAgLy8gZ2F0aGVyIGNvbHVtbiBub2RlIG5hbWVzXG4gIHZhciB0bXBfYXJyID0gW107XG4gIGNvbF9ub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICB0bXBfYXJyLnB1c2gobm9kZS5uYW1lKTtcbiAgfSk7XG5cbiAgLy8gZmluZCBpbmRleFxuICB2YXIgaW5zdF9jb2wgPSBfLmluZGV4T2YodG1wX2FyciwgaW5zdF90ZXJtKTtcblxuICAvLyBnYXRoZXIgdGhlIHZhbHVlcyBvZiB0aGUgaW5wdXQgZ2VuZXNcbiAgdG1wX2FyciA9IFtdO1xuICByb3dfbm9kZXMuZm9yRWFjaChmdW5jdGlvbihub2RlLCBpbmRleCkge1xuICAgIHRtcF9hcnIucHVzaCggbWF0W2luZGV4XS5yb3dfZGF0YVtpbnN0X2NvbF0udmFsdWUpO1xuICB9KTtcblxuICAvLyBzb3J0IHRoZSBjb2xzXG4gIHZhciB0bXBfc29ydCA9IGQzLnJhbmdlKHRtcF9hcnIubGVuZ3RoKS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gdG1wX2FycltiXSAtIHRtcF9hcnJbYV07XG4gIH0pO1xuXG5cbiAgLy8gcmVzb3J0IGNvbHNcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICBwYXJhbXMubWF0cml4Lnlfc2NhbGUuZG9tYWluKHRtcF9zb3J0KTtcblxuICAvLyByZW9yZGVyXG4gIGlmIChwYXJhbXMubmV0d29ya19kYXRhLmxpbmtzLmxlbmd0aCA+IHBhcmFtcy5tYXRyaXguZGVmX2xhcmdlX21hdHJpeCl7XG4gICAgdmFyIHQgPSB0aGlzLnZpei5nZXRfY2x1c3RfZ3JvdXAoKTtcblxuICAgIC8vIHJlb3JkZXIgcm93X2xhYmVsX3RyaWFuZ2xlIGdyb3Vwc1xuICAgIGQzLnNlbGVjdEFsbCgnLnJvd192aXpfZ3JvdXAnKVxuICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgdmFyIGluc3RfaW5kZXggPSBfLmluZGV4T2Yocm93X25vZGVzX25hbWVzLCBkLm5hbWUpO1xuICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgwLCcgKyBwYXJhbXMubWF0cml4Lnlfc2NhbGUoaW5zdF9pbmRleCkgKyAnKSc7XG4gICAgICB9KTtcblxuICAgIC8vIE1vdmUgUm93IExhYmVsc1xuICAgIGQzLnNlbGVjdChwYXJhbXMucm9vdCsnIC5yb3dfbGFiZWxfem9vbV9jb250YWluZXInKVxuICAgICAgLnNlbGVjdEFsbCgnLnJvd19sYWJlbF90ZXh0JylcbiAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbihkKSB7XG4gICAgICAgIHZhciBpbnN0X2luZGV4ID0gXy5pbmRleE9mKHJvd19ub2Rlc19uYW1lcywgZC5uYW1lKTtcbiAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoMCwnICsgcGFyYW1zLm1hdHJpeC55X3NjYWxlKGluc3RfaW5kZXgpICsgJyknO1xuICAgICAgfSk7XG5cbiAgfSBlbHNlIHtcblxuICAgIHZhciB0ID0gdGhpcy52aXouZ2V0X2NsdXN0X2dyb3VwKCkudHJhbnNpdGlvbigpLmR1cmF0aW9uKDI1MDApO1xuXG4gICAgLy8gcmVvcmRlciByb3dfbGFiZWxfdHJpYW5nbGUgZ3JvdXBzXG4gICAgZDMuc2VsZWN0QWxsKCcucm93X3Zpel9ncm91cCcpXG4gICAgICAudHJhbnNpdGlvbigpLmR1cmF0aW9uKDI1MDApXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oZCkge1xuICAgICAgICB2YXIgaW5zdF9pbmRleCA9IF8uaW5kZXhPZihyb3dfbm9kZXNfbmFtZXMsIGQubmFtZSk7XG4gICAgICAgIHJldHVybiAndHJhbnNsYXRlKDAsJyArIHBhcmFtcy5tYXRyaXgueV9zY2FsZShpbnN0X2luZGV4KSArICcpJztcbiAgICAgIH0pO1xuXG4gICAgLy8gTW92ZSBSb3cgTGFiZWxzXG4gICAgZDMuc2VsZWN0KHBhcmFtcy5yb290KycgLnJvd19sYWJlbF96b29tX2NvbnRhaW5lcicpXG4gICAgICAuc2VsZWN0QWxsKCcucm93X2xhYmVsX3RleHQnKVxuICAgICAgLnRyYW5zaXRpb24oKS5kdXJhdGlvbigyNTAwKVxuICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgdmFyIGluc3RfaW5kZXggPSBfLmluZGV4T2Yocm93X25vZGVzX25hbWVzLCBkLm5hbWUpO1xuICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgwLCcgKyBwYXJhbXMubWF0cml4Lnlfc2NhbGUoaW5zdF9pbmRleCkgKyAnKSc7XG4gICAgICB9KTtcbiAgfVxuXG4gIC8vIHJlb3JkZXIgbWF0cml4IHJvd3NcbiAgdC5zZWxlY3RBbGwoJy5yb3cnKVxuICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbihkKSB7XG4gICAgICB2YXIgaW5zdF9pbmRleCA9IF8uaW5kZXhPZihyb3dfbm9kZXNfbmFtZXMsIGQubmFtZSk7XG4gICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgwLCcgKyBwYXJhbXMubWF0cml4Lnlfc2NhbGUoaW5zdF9pbmRleCkgKyAnKSc7XG4gICAgfSk7XG5cblxuICAvLyBoaWdobGlnaHQgc2VsZWN0ZWQgY29sdW1uXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gdW5oaWxpZ2h0IGFuZCB1bmJvbGQgYWxsIGNvbHVtbnMgKGFscmVhZHkgdW5ib2xkZWQgZWFybGllcilcbiAgZDMuc2VsZWN0QWxsKCcuY29sX2xhYmVsX3RleHQnKVxuICAgIC5zZWxlY3QoJy5oaWdobGlnaHRfcmVjdCcpXG4gICAgLnN0eWxlKCdvcGFjaXR5JywgMCk7XG4gIC8vIGhpZ2hsaWdodCBjb2x1bW4gbmFtZVxuICBkMy5zZWxlY3QodGhpcylcbiAgICAuc2VsZWN0KCcuaGlnaGxpZ2h0X3JlY3QnKVxuICAgIC5zdHlsZSgnb3BhY2l0eScsIDEpO1xuXG4gIC8vIHJlZGVmaW5lIHggYW5kIHkgcG9zaXRpb25zXG4gIHBhcmFtcy5uZXR3b3JrX2RhdGEubGlua3MuZm9yRWFjaChmdW5jdGlvbihkKXtcbiAgICBkLnggPSBwYXJhbXMubWF0cml4Lnhfc2NhbGUoZC50YXJnZXQpO1xuICAgIGQueSA9IHBhcmFtcy5tYXRyaXgueV9zY2FsZShkLnNvdXJjZSk7XG4gIH0pO1xuXG4gIC8vIHJlbmFtZSBjcm9zc2ZpbHRlclxuICBwYXJhbXMuY2YgPSB7fTtcbiAgcGFyYW1zLmNmLmxpbmtzID0gY3Jvc3NmaWx0ZXIocGFyYW1zLm5ldHdvcmtfZGF0YS5saW5rcyk7XG4gIHBhcmFtcy5jZi5kaW1feCA9IHBhcmFtcy5jZi5saW5rcy5kaW1lbnNpb24oZnVuY3Rpb24oZCl7cmV0dXJuIGQueDt9KTtcbiAgcGFyYW1zLmNmLmRpbV95ID0gcGFyYW1zLmNmLmxpbmtzLmRpbWVuc2lvbihmdW5jdGlvbihkKXtyZXR1cm4gZC55O30pO1xuXG4gIHJlcG9zaXRpb25fdGlsZV9oaWdobGlnaHQocGFyYW1zKTtcblxuICAvLyBiYWNrdXAgYWxsb3cgcHJvZ3JhbW1hdGljIHpvb21cbiAgc2V0VGltZW91dChlbmRfcmVvcmRlciwgMjUwMCk7XG59O1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogc3JjL3Jlb3JkZXIvY29sX3Jlb3JkZXIuanNcbiAqKi8iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQVZBO0FBQ0E7OztBQURBO0FBaUJBO0FBQ0E7QUFEQTtBQUNBOztBQWxCQTtBQUNBOztBQURBO0FBMEJBO0FBQ0E7QUFEQTtBQUNBOztBQTNCQTtBQWdDQTtBQURBO0FBQ0E7OztBQWhDQTtBQUNBOztBQURBO0FBMENBO0FBQ0E7O0FBRkE7QUFNQTtBQUNBO0FBRkE7QUFDQTs7QUFOQTtBQWNBO0FBQ0E7QUFGQTtBQWJBO0FBQ0E7QUFtQkE7QUFDQTs7QUFIQTtBQVFBO0FBQ0E7QUFGQTtBQUNBOztBQVJBO0FBaUJBO0FBQ0E7QUFGQTtBQWxDQTtBQUNBOztBQTFDQTtBQW9GQTtBQUNBO0FBRkE7QUFDQTs7OztBQXBGQTs7QUFBQTtBQUNBOztBQURBO0FBc0dBO0FBQ0E7QUFGQTtBQUNBOztBQXRHQTtBQTRHQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFqSEE7QUFBQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 34 */
/***/ function(module, exports) {

	eval("module.exports = function (params) {\n\n  // super col title\n  /////////////////////////////////////\n  // add super column title background\n  d3.select(params.viz.viz_svg).append('rect').attr('fill', params.viz.background_color).attr('height', params.labels.super_label_width + 'px').attr('width', '3000px').classed('super_col_bkg', true).classed('white_bars', true).attr('transform', 'translate(0,' + params.viz.grey_border_width + ')');\n\n  // super col title\n  d3.select(params.viz.viz_svg).append('text').attr('class', 'super_col').text(params.labels.super.col).attr('text-anchor', 'center').attr('transform', function () {\n\n    var inst_text_width = d3.select(this)[0][0].getBBox().width;\n\n    var inst_x = params.viz.clust.dim.width / 2 + params.norm_label.width.row - inst_text_width / 2;\n    var inst_y = params.labels.super_label_width - params.viz.uni_margin;\n    return 'translate(' + inst_x + ',' + inst_y + ')';\n  }).style('font-size', function () {\n    var inst_font_size = 14 * params.labels.super_label_scale;\n    return inst_font_size + 'px';\n  }).style('font-weight', 300);\n\n  // super row title\n  /////////////////////////////////////\n  d3.select(params.viz.viz_svg).append('rect').attr('fill', params.viz.background_color).attr('width', params.labels.super_label_width + 'px').attr('height', '3000px').classed('super_row_bkg', true).classed('white_bars', true).attr('transform', 'translate(' + params.viz.grey_border_width + ',0)');\n\n  // append super title row group\n  // this is used to separate translation from rotation\n  d3.select(params.viz.viz_svg).append('g').classed('super_row', true).attr('transform', function () {\n    // position in the middle of the clustergram\n    var inst_x = params.labels.super_label_width - params.viz.uni_margin;\n    var inst_y = params.viz.clust.dim.height / 2 + params.norm_label.width.col;\n    return 'translate(' + inst_x + ',' + inst_y + ')';\n  });\n\n  // super row label (rotate the already translated title )\n  d3.select(params.root + ' .super_row').append('text').text(params.labels.super.row).attr('text-anchor', 'center').attr('transform', function () {\n    var inst_text_width = d3.select(this)[0][0].getBBox().width;\n    var inst_x_offset = inst_text_width / 2 + params.norm_label.width.col;\n    var inst_offset = 'translate(0,' + inst_x_offset + '), rotate(-90)';\n    return inst_offset;\n  }).style('font-size', function () {\n    var inst_font_size = 14 * params.labels.super_label_scale;\n    return inst_font_size + 'px';\n  }).style('font-weight', 300);\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2xhYmVscy9zdXBlcl9sYWJlbHMuanM/YjgxNyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHBhcmFtcykge1xuXG4gIC8vIHN1cGVyIGNvbCB0aXRsZVxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIGFkZCBzdXBlciBjb2x1bW4gdGl0bGUgYmFja2dyb3VuZFxuICBkMy5zZWxlY3QocGFyYW1zLnZpei52aXpfc3ZnKVxuICAgIC5hcHBlbmQoJ3JlY3QnKVxuICAgIC5hdHRyKCdmaWxsJywgcGFyYW1zLnZpei5iYWNrZ3JvdW5kX2NvbG9yKVxuICAgIC5hdHRyKCdoZWlnaHQnLCBwYXJhbXMubGFiZWxzLnN1cGVyX2xhYmVsX3dpZHRoICsgJ3B4JylcbiAgICAuYXR0cignd2lkdGgnLCAnMzAwMHB4JylcbiAgICAuY2xhc3NlZCgnc3VwZXJfY29sX2JrZycsdHJ1ZSlcbiAgICAuY2xhc3NlZCgnd2hpdGVfYmFycycsdHJ1ZSlcbiAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgwLCcgKyBwYXJhbXMudml6LmdyZXlfYm9yZGVyX3dpZHRoICsgJyknKTtcblxuICAvLyBzdXBlciBjb2wgdGl0bGVcbiAgZDMuc2VsZWN0KHBhcmFtcy52aXoudml6X3N2ZylcbiAgICAuYXBwZW5kKCd0ZXh0JylcbiAgICAuYXR0cignY2xhc3MnLCAnc3VwZXJfY29sJylcbiAgICAudGV4dChwYXJhbXMubGFiZWxzLnN1cGVyLmNvbClcbiAgICAuYXR0cigndGV4dC1hbmNob3InLCAnY2VudGVyJylcbiAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24gKCkge1xuXG4gICAgICB2YXIgaW5zdF90ZXh0X3dpZHRoID0gZDMuc2VsZWN0KHRoaXMpWzBdWzBdXG4gICAgICAgIC5nZXRCQm94KCkud2lkdGg7XG5cbiAgICAgIHZhciBpbnN0X3ggPSBwYXJhbXMudml6LmNsdXN0LmRpbS53aWR0aCAvIDIgKyBwYXJhbXMubm9ybV9sYWJlbC53aWR0aFxuICAgICAgICAgIC5yb3cgLSBpbnN0X3RleHRfd2lkdGggLyAyO1xuICAgICAgdmFyIGluc3RfeSA9IHBhcmFtcy5sYWJlbHMuc3VwZXJfbGFiZWxfd2lkdGggLSBwYXJhbXMudml6LnVuaV9tYXJnaW47XG4gICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgaW5zdF94ICsgJywnICsgaW5zdF95ICsgJyknO1xuICAgIH0pXG4gICAgLnN0eWxlKCdmb250LXNpemUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgaW5zdF9mb250X3NpemUgPSAxNCAqIHBhcmFtcy5sYWJlbHMuc3VwZXJfbGFiZWxfc2NhbGU7XG4gICAgICByZXR1cm4gaW5zdF9mb250X3NpemUgKyAncHgnO1xuICAgIH0pXG4gICAgLnN0eWxlKCdmb250LXdlaWdodCcsIDMwMCk7XG5cbiAgLy8gc3VwZXIgcm93IHRpdGxlXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgZDMuc2VsZWN0KHBhcmFtcy52aXoudml6X3N2ZylcbiAgICAuYXBwZW5kKCdyZWN0JylcbiAgICAuYXR0cignZmlsbCcsIHBhcmFtcy52aXouYmFja2dyb3VuZF9jb2xvcilcbiAgICAuYXR0cignd2lkdGgnLCBwYXJhbXMubGFiZWxzLnN1cGVyX2xhYmVsX3dpZHRoICsgJ3B4JylcbiAgICAuYXR0cignaGVpZ2h0JywgJzMwMDBweCcpXG4gICAgLmNsYXNzZWQoJ3N1cGVyX3Jvd19ia2cnLHRydWUpXG4gICAgLmNsYXNzZWQoJ3doaXRlX2JhcnMnLHRydWUpXG4gICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJyArIHBhcmFtcy52aXouZ3JleV9ib3JkZXJfd2lkdGggKyAnLDApJyk7XG5cbiAgLy8gYXBwZW5kIHN1cGVyIHRpdGxlIHJvdyBncm91cFxuICAvLyB0aGlzIGlzIHVzZWQgdG8gc2VwYXJhdGUgdHJhbnNsYXRpb24gZnJvbSByb3RhdGlvblxuICBkMy5zZWxlY3QocGFyYW1zLnZpei52aXpfc3ZnKVxuICAgIC5hcHBlbmQoJ2cnKVxuICAgIC5jbGFzc2VkKCdzdXBlcl9yb3cnLHRydWUpXG4gICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHBvc2l0aW9uIGluIHRoZSBtaWRkbGUgb2YgdGhlIGNsdXN0ZXJncmFtXG4gICAgICB2YXIgaW5zdF94ID0gcGFyYW1zLmxhYmVscy5zdXBlcl9sYWJlbF93aWR0aCAtIHBhcmFtcy52aXoudW5pX21hcmdpbjtcbiAgICAgIHZhciBpbnN0X3kgPSBwYXJhbXMudml6LmNsdXN0LmRpbS5oZWlnaHQgLyAyICsgcGFyYW1zLm5vcm1fbGFiZWwud2lkdGhcbiAgICAgICAgICAuY29sO1xuICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIGluc3RfeCArICcsJyArIGluc3RfeSArICcpJztcbiAgICB9KTtcblxuICAvLyBzdXBlciByb3cgbGFiZWwgKHJvdGF0ZSB0aGUgYWxyZWFkeSB0cmFuc2xhdGVkIHRpdGxlIClcbiAgZDMuc2VsZWN0KHBhcmFtcy5yb290KycgLnN1cGVyX3JvdycpXG4gICAgLmFwcGVuZCgndGV4dCcpXG4gICAgLnRleHQocGFyYW1zLmxhYmVscy5zdXBlci5yb3cpXG4gICAgLmF0dHIoJ3RleHQtYW5jaG9yJywgJ2NlbnRlcicpXG4gICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBpbnN0X3RleHRfd2lkdGggPSBkMy5zZWxlY3QodGhpcylbMF1bMF0uZ2V0QkJveCgpLndpZHRoO1xuICAgICAgdmFyIGluc3RfeF9vZmZzZXQgPSBpbnN0X3RleHRfd2lkdGggLyAyICsgcGFyYW1zLm5vcm1fbGFiZWwud2lkdGguY29sO1xuICAgICAgdmFyIGluc3Rfb2Zmc2V0ID0gJ3RyYW5zbGF0ZSgwLCcgKyBpbnN0X3hfb2Zmc2V0ICsgJyksIHJvdGF0ZSgtOTApJztcbiAgICAgIHJldHVybiBpbnN0X29mZnNldDtcbiAgICB9KVxuICAgIC5zdHlsZSgnZm9udC1zaXplJywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGluc3RfZm9udF9zaXplID0gMTQgKiBwYXJhbXMubGFiZWxzLnN1cGVyX2xhYmVsX3NjYWxlO1xuICAgICAgcmV0dXJuIGluc3RfZm9udF9zaXplICsgJ3B4JztcbiAgICB9KVxuICAgIC5zdHlsZSgnZm9udC13ZWlnaHQnLCAzMDApO1xufTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHNyYy9sYWJlbHMvc3VwZXJfbGFiZWxzLmpzXG4gKiovIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOzs7O0FBSUE7QUFDQTs7QUFOQTtBQUNBO0FBcUJBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFSQTtBQVdBO0FBQ0E7QUFGQTtBQUNBOzs7QUEvQkE7QUFDQTs7O0FBREE7O0FBc0RBO0FBQ0E7QUFFQTtBQUxBO0FBQ0E7O0FBckRBO0FBa0VBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFPQTtBQUNBO0FBRkE7QUF2RUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 35 */
/***/ function(module, exports) {

	eval("/* Spillover Module\n*/\nmodule.exports = function (params, container_all_col) {\n  // make spillover protection divs\n  make(params, container_all_col);\n\n  function make(params, container_all_col) {\n    // Spillover Protection\n    //////////////////////////\n\n    // hide spillover from slanted column labels on right side\n    container_all_col.append('path').style('stroke-width', '0')\n    // mini-language for drawing path in d3, used to draw triangle\n    .attr('d', 'M 0,0 L 500,-500, L 500,0 Z').attr('fill', params.viz.background_color) //!! prog_colors\n    .attr('class', 'right_slant_triangle').attr('transform', 'translate(' + params.viz.clust.dim.width + ',' + params.norm_label.width.col + ')');\n\n    // hide spillover from slanted column labels on left side\n    container_all_col.append('path').style('stroke-width', '0')\n    // mini-language for drawing path in d3, used to draw triangle\n    .attr('d', 'M 0,0 L 500,-500, L 0,-500 Z').attr('fill', params.viz.background_color).attr('class', 'left_slant_triangle')\n    // shift left by 1 px to prevent cutting off labels\n    .attr('transform', 'translate(-1,' + params.norm_label.width.col + ')');\n\n    // top corner rect\n    ///////////////////////////////\n    // white rect to cover excess labels\n    d3.select(params.viz.viz_svg).append('rect').attr('fill', params.viz.background_color) //!! prog_colors\n    .attr('width', params.viz.clust.margin.left).attr('height', params.viz.clust.margin.top).attr('class', 'top_left_white');\n\n    // hide spillover from right\n    d3.select(params.viz.viz_svg).append('rect').attr('fill', params.viz.background_color) //!! prog_colors\n    .attr('width', '300px').attr('height', '3000px').attr('transform', function () {\n      var tmp_left = params.viz.clust.margin.left + params.viz.clust.dim.width;\n      var tmp_top = params.norm_label.margin.top + params.norm_label.width.col;\n      return 'translate(' + tmp_left + ',' + tmp_top + ')';\n    }).attr('class', 'white_bars').attr('class', 'right_spillover');\n\n    // white border bottom - prevent clustergram from hitting border\n    ///////////////////////////////////////////////////////////////////\n    d3.select(params.viz.viz_svg).append('rect').attr('class', 'bottom_spillover').attr('fill', params.viz.background_color) //!! prog_colors\n    .attr('width', params.viz.svg_dim.width)\n    // make this border twice the width of the grey border\n    .attr('height', 2 * params.viz.grey_border_width).attr('transform', function () {\n      // shift up enough to show the entire border width\n      var inst_offset = params.viz.svg_dim.height - 3 * params.viz.grey_border_width;\n      return 'translate(0,' + inst_offset + ')';\n    });\n  }\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL3NwaWxsb3Zlci5qcz9mNTBhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIFNwaWxsb3ZlciBNb2R1bGVcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHBhcmFtcywgY29udGFpbmVyX2FsbF9jb2wpIHtcbiAgLy8gbWFrZSBzcGlsbG92ZXIgcHJvdGVjdGlvbiBkaXZzXG4gIG1ha2UocGFyYW1zLCBjb250YWluZXJfYWxsX2NvbCk7XG5cbiAgZnVuY3Rpb24gbWFrZShwYXJhbXMsIGNvbnRhaW5lcl9hbGxfY29sICl7XG4gICAgLy8gU3BpbGxvdmVyIFByb3RlY3Rpb25cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgLy8gaGlkZSBzcGlsbG92ZXIgZnJvbSBzbGFudGVkIGNvbHVtbiBsYWJlbHMgb24gcmlnaHQgc2lkZVxuICAgIGNvbnRhaW5lcl9hbGxfY29sXG4gICAgICAuYXBwZW5kKCdwYXRoJylcbiAgICAgIC5zdHlsZSgnc3Ryb2tlLXdpZHRoJywgJzAnKVxuICAgICAgLy8gbWluaS1sYW5ndWFnZSBmb3IgZHJhd2luZyBwYXRoIGluIGQzLCB1c2VkIHRvIGRyYXcgdHJpYW5nbGVcbiAgICAgIC5hdHRyKCdkJywgJ00gMCwwIEwgNTAwLC01MDAsIEwgNTAwLDAgWicpXG4gICAgICAuYXR0cignZmlsbCcsIHBhcmFtcy52aXouYmFja2dyb3VuZF9jb2xvcikgLy8hISBwcm9nX2NvbG9yc1xuICAgICAgLmF0dHIoJ2NsYXNzJywgJ3JpZ2h0X3NsYW50X3RyaWFuZ2xlJylcbiAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyBwYXJhbXMudml6LmNsdXN0LmRpbS53aWR0aCArICcsJyArXG4gICAgICBwYXJhbXMubm9ybV9sYWJlbC53aWR0aC5jb2wgKyAnKScpO1xuXG4gICAgLy8gaGlkZSBzcGlsbG92ZXIgZnJvbSBzbGFudGVkIGNvbHVtbiBsYWJlbHMgb24gbGVmdCBzaWRlXG4gICAgY29udGFpbmVyX2FsbF9jb2xcbiAgICAgIC5hcHBlbmQoJ3BhdGgnKVxuICAgICAgLnN0eWxlKCdzdHJva2Utd2lkdGgnLCAnMCcpXG4gICAgICAvLyBtaW5pLWxhbmd1YWdlIGZvciBkcmF3aW5nIHBhdGggaW4gZDMsIHVzZWQgdG8gZHJhdyB0cmlhbmdsZVxuICAgICAgLmF0dHIoJ2QnLCAnTSAwLDAgTCA1MDAsLTUwMCwgTCAwLC01MDAgWicpXG4gICAgICAuYXR0cignZmlsbCcsIHBhcmFtcy52aXouYmFja2dyb3VuZF9jb2xvcilcbiAgICAgIC5hdHRyKCdjbGFzcycsICdsZWZ0X3NsYW50X3RyaWFuZ2xlJylcbiAgICAgIC8vIHNoaWZ0IGxlZnQgYnkgMSBweCB0byBwcmV2ZW50IGN1dHRpbmcgb2ZmIGxhYmVsc1xuICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoLTEsJyArIHBhcmFtcy5ub3JtX2xhYmVsLndpZHRoLmNvbCArXG4gICAgICAnKScpO1xuXG4gICAgLy8gdG9wIGNvcm5lciByZWN0XG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIHdoaXRlIHJlY3QgdG8gY292ZXIgZXhjZXNzIGxhYmVsc1xuICAgIGQzLnNlbGVjdChwYXJhbXMudml6LnZpel9zdmcpXG4gICAgICAuYXBwZW5kKCdyZWN0JylcbiAgICAgIC5hdHRyKCdmaWxsJywgcGFyYW1zLnZpei5iYWNrZ3JvdW5kX2NvbG9yKSAvLyEhIHByb2dfY29sb3JzXG4gICAgICAuYXR0cignd2lkdGgnLCBwYXJhbXMudml6LmNsdXN0Lm1hcmdpbi5sZWZ0KVxuICAgICAgLmF0dHIoJ2hlaWdodCcsIHBhcmFtcy52aXouY2x1c3QubWFyZ2luLnRvcClcbiAgICAgIC5hdHRyKCdjbGFzcycsICd0b3BfbGVmdF93aGl0ZScpO1xuXG4gICAgLy8gaGlkZSBzcGlsbG92ZXIgZnJvbSByaWdodFxuICAgIGQzLnNlbGVjdChwYXJhbXMudml6LnZpel9zdmcpXG4gICAgICAuYXBwZW5kKCdyZWN0JylcbiAgICAgIC5hdHRyKCdmaWxsJywgcGFyYW1zLnZpei5iYWNrZ3JvdW5kX2NvbG9yKSAvLyEhIHByb2dfY29sb3JzXG4gICAgICAuYXR0cignd2lkdGgnLCAnMzAwcHgnKVxuICAgICAgLmF0dHIoJ2hlaWdodCcsICczMDAwcHgnKVxuICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdG1wX2xlZnQgPSBwYXJhbXMudml6LmNsdXN0Lm1hcmdpbi5sZWZ0ICsgcGFyYW1zLnZpei5jbHVzdC5kaW0ud2lkdGg7XG4gICAgICAgIHZhciB0bXBfdG9wID0gcGFyYW1zLm5vcm1fbGFiZWwubWFyZ2luLnRvcCArIHBhcmFtcy5ub3JtX2xhYmVsLndpZHRoXG4gICAgICAgICAgLmNvbDtcbiAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIHRtcF9sZWZ0ICsgJywnICsgdG1wX3RvcCArICcpJztcbiAgICAgIH0pXG4gICAgICAuYXR0cignY2xhc3MnLCAnd2hpdGVfYmFycycpXG4gICAgICAuYXR0cignY2xhc3MnLCdyaWdodF9zcGlsbG92ZXInKTtcblxuICAgIC8vIHdoaXRlIGJvcmRlciBib3R0b20gLSBwcmV2ZW50IGNsdXN0ZXJncmFtIGZyb20gaGl0dGluZyBib3JkZXJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgZDMuc2VsZWN0KHBhcmFtcy52aXoudml6X3N2ZylcbiAgICAgIC5hcHBlbmQoJ3JlY3QnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywnYm90dG9tX3NwaWxsb3ZlcicpXG4gICAgICAuYXR0cignZmlsbCcsIHBhcmFtcy52aXouYmFja2dyb3VuZF9jb2xvcikgLy8hISBwcm9nX2NvbG9yc1xuICAgICAgLmF0dHIoJ3dpZHRoJywgcGFyYW1zLnZpei5zdmdfZGltLndpZHRoKVxuICAgICAgLy8gbWFrZSB0aGlzIGJvcmRlciB0d2ljZSB0aGUgd2lkdGggb2YgdGhlIGdyZXkgYm9yZGVyXG4gICAgICAuYXR0cignaGVpZ2h0JywgMiAqIHBhcmFtcy52aXouZ3JleV9ib3JkZXJfd2lkdGgpXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIHNoaWZ0IHVwIGVub3VnaCB0byBzaG93IHRoZSBlbnRpcmUgYm9yZGVyIHdpZHRoXG4gICAgICAgIHZhciBpbnN0X29mZnNldCA9IHBhcmFtcy52aXouc3ZnX2RpbS5oZWlnaHQgLSAzICogcGFyYW1zLnZpei5ncmV5X2JvcmRlcl93aWR0aDtcbiAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoMCwnICsgaW5zdF9vZmZzZXQgKyAnKSc7XG4gICAgICB9KTtcbiAgfVxufTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHNyYy9zcGlsbG92ZXIuanNcbiAqKi8iXSwibWFwcGluZ3MiOiI7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOzs7OztBQUtBOztBQUlBO0FBSkE7QUFDQTs7QUFOQTs7QUFvQkE7O0FBSUE7QUFDQTs7OztBQXpCQTtBQThCQTtBQUNBOztBQS9CQTtBQXNDQTtBQU1BO0FBQ0E7QUFFQTtBQUpBO0FBQ0E7OztBQTVDQTtBQXNEQTs7QUFBQTs7QUFTQTtBQUNBO0FBSEE7QUE3REE7QUFKQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	eval("var two_translate_zoom = __webpack_require__(37);\n/* Handles searching rows or columns.\n !! need to generalize to column and row\n * ----------------------------------------------------------------------- */\nmodule.exports = function (params, nodes, prop) {\n\n  /* Collect entities from row or columns.\n   */\n  var entities = [],\n      i;\n\n  for (i = 0; i < nodes.length; i++) {\n    entities.push(nodes[i][prop]);\n  }\n\n  /* Find a gene (row) in the clustergram.\n   */\n  function find_entities(search_term) {\n    if (entities.indexOf(search_term) !== -1) {\n      un_highlight_entities();\n      zoom_and_highlight_found_entity(search_term);\n      highlight_entity(search_term);\n    }\n  }\n\n  /* Zoom into and highlight the found the gene\n   */\n  function zoom_and_highlight_found_entity(search_term) {\n    var idx = _.indexOf(entities, search_term),\n        inst_y_pos = params.matrix.y_scale(idx),\n        pan_dy = params.viz.clust.dim.height / 2 - inst_y_pos;\n\n    two_translate_zoom(params, 0, pan_dy, params.viz.zoom_switch);\n  }\n\n  function un_highlight_entities() {\n    d3.selectAll('.row_label_text').select('rect').style('opacity', 0);\n  }\n\n  function highlight_entity(search_term) {\n\n    d3.selectAll('.row_label_text').filter(function (d) {\n      return d[prop] === search_term;\n    }).select('rect').style('opacity', 1);\n  }\n\n  /* Returns all the genes in the clustergram.\n   */\n  function get_entities() {\n    return entities;\n  }\n\n  return {\n    find_entities: find_entities,\n    get_entities: get_entities\n  };\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL3NlYXJjaC5qcz9mOWQwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB0d29fdHJhbnNsYXRlX3pvb20gPSByZXF1aXJlKCcuL3R3b190cmFuc2xhdGVfem9vbScpO1xuLyogSGFuZGxlcyBzZWFyY2hpbmcgcm93cyBvciBjb2x1bW5zLlxuICEhIG5lZWQgdG8gZ2VuZXJhbGl6ZSB0byBjb2x1bW4gYW5kIHJvd1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ocGFyYW1zLCBub2RlcywgcHJvcCkge1xuXG4gIC8qIENvbGxlY3QgZW50aXRpZXMgZnJvbSByb3cgb3IgY29sdW1ucy5cbiAgICovXG4gIHZhciBlbnRpdGllcyA9IFtdLFxuICAgIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgZW50aXRpZXMucHVzaChub2Rlc1tpXVtwcm9wXSk7XG4gIH1cblxuICAvKiBGaW5kIGEgZ2VuZSAocm93KSBpbiB0aGUgY2x1c3RlcmdyYW0uXG4gICAqL1xuICBmdW5jdGlvbiBmaW5kX2VudGl0aWVzKHNlYXJjaF90ZXJtKSB7XG4gICAgaWYgKGVudGl0aWVzLmluZGV4T2Yoc2VhcmNoX3Rlcm0pICE9PSAtMSkge1xuICAgICAgdW5faGlnaGxpZ2h0X2VudGl0aWVzKCk7XG4gICAgICB6b29tX2FuZF9oaWdobGlnaHRfZm91bmRfZW50aXR5KHNlYXJjaF90ZXJtKTtcbiAgICAgIGhpZ2hsaWdodF9lbnRpdHkoc2VhcmNoX3Rlcm0pO1xuICAgIH1cbiAgfVxuXG4gIC8qIFpvb20gaW50byBhbmQgaGlnaGxpZ2h0IHRoZSBmb3VuZCB0aGUgZ2VuZVxuICAgKi9cbiAgZnVuY3Rpb24gem9vbV9hbmRfaGlnaGxpZ2h0X2ZvdW5kX2VudGl0eShzZWFyY2hfdGVybSkge1xuICAgIHZhciBpZHggPSBfLmluZGV4T2YoZW50aXRpZXMsIHNlYXJjaF90ZXJtKSxcbiAgICAgIGluc3RfeV9wb3MgPSBwYXJhbXMubWF0cml4Lnlfc2NhbGUoaWR4KSxcbiAgICAgIHBhbl9keSA9IHBhcmFtcy52aXouY2x1c3QuZGltLmhlaWdodCAvIDIgLSBpbnN0X3lfcG9zO1xuXG4gICAgdHdvX3RyYW5zbGF0ZV96b29tKHBhcmFtcywgMCwgcGFuX2R5LCBwYXJhbXMudml6Lnpvb21fc3dpdGNoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVuX2hpZ2hsaWdodF9lbnRpdGllcygpIHtcbiAgICBkMy5zZWxlY3RBbGwoJy5yb3dfbGFiZWxfdGV4dCcpLnNlbGVjdCgncmVjdCcpLnN0eWxlKCdvcGFjaXR5JywgMCk7XG4gIH1cblxuICBmdW5jdGlvbiBoaWdobGlnaHRfZW50aXR5KHNlYXJjaF90ZXJtKSB7XG5cbiAgICBkMy5zZWxlY3RBbGwoJy5yb3dfbGFiZWxfdGV4dCcpXG4gICAgICAuZmlsdGVyKGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgcmV0dXJuIGRbcHJvcF0gPT09IHNlYXJjaF90ZXJtO1xuICAgICAgfSlcbiAgICAgIC5zZWxlY3QoJ3JlY3QnKVxuICAgICAgLnN0eWxlKCdvcGFjaXR5JywgMSk7XG4gIH1cblxuICAvKiBSZXR1cm5zIGFsbCB0aGUgZ2VuZXMgaW4gdGhlIGNsdXN0ZXJncmFtLlxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0X2VudGl0aWVzKCkge1xuICAgIHJldHVybiBlbnRpdGllcztcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZmluZF9lbnRpdGllczogZmluZF9lbnRpdGllcyxcbiAgICBnZXRfZW50aXRpZXM6IGdldF9lbnRpdGllc1xuICB9O1xufTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHNyYy9zZWFyY2guanNcbiAqKi8iXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBSUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBQ0E7OztBQVJBO0FBY0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQURBO0FBQ0E7OztBQWRBO0FBd0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMQTtBQUNBO0FBT0E7QUFDQTtBQURBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFFQTtBQURBO0FBSEE7QUFDQTs7O0FBcENBO0FBZ0RBO0FBREE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUZBO0FBbkRBIiwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	eval("var utils = __webpack_require__(2);\nvar constrain_font_size = __webpack_require__(15);\n\nmodule.exports = function (params, pan_dx, pan_dy, fin_zoom) {\n  // get parameters\n  if (!params.viz.run_trans) {\n\n    // define the commonly used variable half_height\n    var half_height = params.viz.clust.dim.height / 2;\n\n    // y pan room, the pan room has to be less than half_height since\n    // zooming in on a gene that is near the top of the clustergram also causes\n    // panning out of the visible region\n    var y_pan_room = half_height / params.viz.zoom_switch;\n\n    // prevent visualization from panning down too much\n    // when zooming into genes near the top of the clustergram\n    if (pan_dy >= half_height - y_pan_room) {\n\n      // explanation of panning rules\n      /////////////////////////////////\n      // prevent the clustergram from panning down too much\n      // if the amount of panning is equal to the half_height then it needs to be reduced\n      // effectively, the the visualization needs to be moved up (negative) by some factor\n      // of the half-width-of-the-visualization.\n      //\n      // If there was no zooming involved, then the\n      // visualization would be centered first, then panned to center the top term\n      // this would require a\n      // correction to re-center it. However, because of the zooming the offset is\n      // reduced by the zoom factor (this is because the panning is occurring on something\n      // that will be zoomed into - this is why the pan_dy value is not scaled in the two\n      // translate transformations, but it has to be scaled afterwards to set the translate\n      // vector)\n      // pan_dy = half_height - (half_height)/params.viz.zoom_switch\n\n      // if pan_dy is greater than the pan room, then panning has to be restricted\n      // start by shifting back up (negative) by half_height/params.viz.zoom_switch then shift back down\n      // by the difference between half_height and pan_dy (so that the top of the clustergram is\n      // visible)\n      var shift_top_viz = half_height - pan_dy;\n      var shift_up_viz = -half_height / params.viz.zoom_switch + shift_top_viz;\n\n      // reduce pan_dy so that the visualization does not get panned to far down\n      pan_dy = pan_dy + shift_up_viz;\n    }\n\n    // prevent visualization from panning up too much\n    // when zooming into genes at the bottom of the clustergram\n    if (pan_dy < -(half_height - y_pan_room)) {\n\n      shift_top_viz = half_height + pan_dy;\n\n      shift_up_viz = half_height / params.viz.zoom_switch - shift_top_viz; //- move_up_one_row;\n\n      // reduce pan_dy so that the visualization does not get panned to far down\n      pan_dy = pan_dy + shift_up_viz;\n    }\n\n    // will improve this !!\n    var zoom_y = fin_zoom;\n    var zoom_x;\n    if (fin_zoom <= params.viz.zoom_switch) {\n      var zoom_x = 1;\n    } else {\n      var zoom_x = fin_zoom / params.viz.zoom_switch;\n    }\n\n    // search duration - the duration of zooming and panning\n    var search_duration = 700;\n\n    // center_y\n    var center_y = -(zoom_y - 1) * half_height;\n\n    // transform clust group\n    ////////////////////////////\n    d3.select('.clust_group').transition().duration(search_duration)\n    // first apply the margin transformation\n    // then zoom, then apply the final transformation\n    .attr('transform', 'translate(' + [0, 0 + center_y] + ')' + ' scale(' + zoom_x + ',' + zoom_y + ')' + 'translate(' + [pan_dx, pan_dy] + ')');\n\n    // transform row labels\n    d3.select(params.root + ' .row_label_zoom_container').transition().duration(search_duration).attr('transform', 'translate(' + [0, center_y] + ')' + ' scale(' + zoom_y + ',' + zoom_y + ')' + 'translate(' + [0, pan_dy] + ')');\n\n    // transform row_zoom_container\n    // use the offset saved in params, only zoom in the y direction\n    d3.select(params.root + ' .row_zoom_container').transition().duration(search_duration).attr('transform', 'translate(' + [0, center_y] + ')' + ' scale(' + 1 + ',' + zoom_y + ')' + 'translate(' + [0, pan_dy] + ')');\n\n    // transform col labels\n    d3.select(params.root + ' .col_zoom_container').transition().duration(search_duration).attr('transform', ' scale(' + zoom_x + ',' + zoom_x + ')' + 'translate(' + [pan_dx, 0] + ')');\n\n    // transform col_class\n    d3.select('.col_viz_zoom_container').transition().duration(search_duration).attr('transform', ' scale(' + zoom_x + ',' + 1 + ')' + 'translate(' + [pan_dx, 0] + ')');\n\n    // set y translate: center_y is positive, positive moves the visualization down\n    // the translate vector has the initial margin, the first y centering, and pan_dy\n    // times the scaling zoom_y\n    var net_y_offset = params.viz.clust.margin.top + center_y + pan_dy * zoom_y;\n\n    // reset the zoom translate and zoom\n    params.zoom_behavior.scale(zoom_y);\n\n    var trans = true;\n    constrain_font_size(params, trans);\n\n    // re-size of the highlighting rects\n    /////////////////////////////////////////\n    d3.select(params.root + ' .row_label_zoom_container').each(function () {\n      // get the bounding box of the row label text\n      var bbox = d3.select(this).select('text')[0][0].getBBox();\n\n      // use the bounding box to set the size of the rect\n      d3.select(this).select('rect').attr('x', bbox.x * 0.5).attr('y', 0).attr('width', bbox.width * 0.5).attr('height', params.matrix.y_scale.rangeBand()).style('fill', 'yellow');\n    });\n\n    // column value bars\n    ///////////////////////\n    // reduce the height of the column value bars based on the zoom applied\n    // recalculate the height and divide by the zooming scale\n    // col_label_obj.select('rect')\n    if (utils.has(params.network_data.col_nodes[0], 'value')) {\n\n      d3.selectAll('.col_bars')\n      // .transition()\n      // .duration(search_duration)\n      .attr('width', function (d) {\n        var inst_value = 0;\n        if (d.value > 0) {\n          inst_value = params.labels.bar_scale_col(d.value) / zoom_x;\n        }\n        return inst_value;\n      });\n    }\n\n    if (utils.has(params.network_data.row_nodes[0], 'value')) {\n\n      d3.selectAll('.row_bars').transition().duration(search_duration).attr('width', function (d) {\n        var inst_value = 0;\n        inst_value = params.labels.bar_scale_row(Math.abs(d.value)) / zoom_y;\n        return inst_value;\n      }).attr('x', function (d) {\n        var inst_value = 0;\n        inst_value = -params.labels.bar_scale_row(Math.abs(d.value)) / zoom_y;\n        return inst_value;\n      });\n    }\n  }\n};//@ sourceMappingURL=data:application/json;base64,");

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	eval("var parent_div_size = __webpack_require__(11);\nvar reset_visualization_size = __webpack_require__(39);\n\nmodule.exports = function (params) {\n\n  d3.select(window).on('resize', null);\n\n  // resize window\n  if (params.viz.resize) {\n    d3.select(window).on('resize', function () {\n      d3.select(params.viz.viz_svg).style('opacity', 0.5);\n      var wait_time = 500;\n      if (params.viz.run_trans == true) {\n        wait_time = 2500;\n      }\n      setTimeout(reset_visualization_size, wait_time, params);\n    });\n  }\n\n  if (params.viz.expand_button) {\n\n    d3.select(params.root + ' .expand_button').on('click', null);\n    var expand_opacity = 0.4;\n\n    if (d3.select(params.root + ' .expand_button').empty()) {\n      var exp_button = d3.select(params.viz.viz_svg).append('text').attr('class', 'expand_button');\n    } else {\n      var exp_button = d3.select(params.root + ' .expand_button');\n    }\n\n    exp_button.attr('text-anchor', 'middle').attr('dominant-baseline', 'central').attr('font-family', 'FontAwesome').attr('font-size', '30px').text(function () {\n      if (params.viz.expand === false) {\n        // expand button\n        return '\\uf0b2';\n      } else {\n        // menu button\n        return '\\uf0c9';\n      }\n    }).attr('y', '25px').attr('x', '25px').style('cursor', 'pointer').style('opacity', expand_opacity).on('mouseover', function () {\n      d3.select(this).style('opacity', 0.75);\n    }).on('mouseout', function () {\n      d3.select(this).style('opacity', expand_opacity);\n    }).on('click', function () {\n\n      // expand view\n      if (params.viz.expand === false) {\n\n        d3.select(this).text(function (d) {\n          // menu button\n          return '\\uf0c9';\n        });\n        params.viz.expand = true;\n\n        d3.selectAll('.borders').style('fill', 'white');\n        d3.select('.footer_section').style('display', 'none');\n\n        // contract view\n      } else {\n\n          d3.select(this).text(function (d) {\n            // expand button\n            return '\\uf0b2';\n          });\n          params.viz.expand = false;\n\n          d3.selectAll('.borders').style('fill', '#eee');\n          d3.select('.footer_section').style('display', 'block');\n        }\n\n      // resize parent div\n      parent_div_size(params);\n\n      d3.select(params.viz.viz_svg).style('opacity', 0.5);\n      var wait_time = 500;\n      if (params.viz.run_trans == true) {\n        wait_time = 2500;\n      }\n      setTimeout(reset_visualization_size, wait_time, params);\n    });\n  }\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2luaXRpYWxpemVfcmVzaXppbmcuanM/MDM5NCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcGFyZW50X2Rpdl9zaXplID0gcmVxdWlyZSgnLi9wYXJlbnRfZGl2X3NpemUnKTsgXG52YXIgcmVzZXRfdmlzdWFsaXphdGlvbl9zaXplID0gcmVxdWlyZSgnLi9yZXNldF9zaXplL3Jlc2V0X3Zpc3VhbGl6YXRpb25fc2l6ZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHBhcmFtcykge1xuXG4gIGQzLnNlbGVjdCh3aW5kb3cpLm9uKCdyZXNpemUnLCBudWxsKTtcblxuICAvLyByZXNpemUgd2luZG93XG4gIGlmIChwYXJhbXMudml6LnJlc2l6ZSkge1xuICAgIGQzLnNlbGVjdCh3aW5kb3cpLm9uKCdyZXNpemUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBkMy5zZWxlY3QocGFyYW1zLnZpei52aXpfc3ZnKS5zdHlsZSgnb3BhY2l0eScsIDAuNSk7XG4gICAgICB2YXIgd2FpdF90aW1lID0gNTAwO1xuICAgICAgaWYgKHBhcmFtcy52aXoucnVuX3RyYW5zID09IHRydWUpIHtcbiAgICAgICAgd2FpdF90aW1lID0gMjUwMDtcbiAgICAgIH1cbiAgICAgIHNldFRpbWVvdXQocmVzZXRfdmlzdWFsaXphdGlvbl9zaXplLCB3YWl0X3RpbWUsIHBhcmFtcyk7XG4gICAgfSk7XG4gIH1cblxuICBpZiAocGFyYW1zLnZpei5leHBhbmRfYnV0dG9uKSB7XG5cbiAgICBkMy5zZWxlY3QocGFyYW1zLnJvb3QgKyAnIC5leHBhbmRfYnV0dG9uJykub24oJ2NsaWNrJywgbnVsbCk7XG4gICAgdmFyIGV4cGFuZF9vcGFjaXR5ID0gMC40O1xuXG4gICAgaWYgKGQzLnNlbGVjdChwYXJhbXMucm9vdCArICcgLmV4cGFuZF9idXR0b24nKS5lbXB0eSgpKSB7XG4gICAgICB2YXIgZXhwX2J1dHRvbiA9IGQzLnNlbGVjdChwYXJhbXMudml6LnZpel9zdmcpXG4gICAgICAgIC5hcHBlbmQoJ3RleHQnKVxuICAgICAgICAuYXR0cignY2xhc3MnLCAnZXhwYW5kX2J1dHRvbicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZXhwX2J1dHRvbiA9IGQzLnNlbGVjdChwYXJhbXMucm9vdCArICcgLmV4cGFuZF9idXR0b24nKTtcbiAgICB9XG5cbiAgICBleHBfYnV0dG9uXG4gICAgICAuYXR0cigndGV4dC1hbmNob3InLCAnbWlkZGxlJylcbiAgICAgIC5hdHRyKCdkb21pbmFudC1iYXNlbGluZScsICdjZW50cmFsJylcbiAgICAgIC5hdHRyKCdmb250LWZhbWlseScsICdGb250QXdlc29tZScpXG4gICAgICAuYXR0cignZm9udC1zaXplJywgJzMwcHgnKVxuICAgICAgLnRleHQoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAocGFyYW1zLnZpei5leHBhbmQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgLy8gZXhwYW5kIGJ1dHRvblxuICAgICAgICAgIHJldHVybiAnXFx1ZjBiMic7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gbWVudSBidXR0b25cbiAgICAgICAgICByZXR1cm4gJ1xcdWYwYzknO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLmF0dHIoJ3knLCAnMjVweCcpXG4gICAgICAuYXR0cigneCcsICcyNXB4JylcbiAgICAgIC5zdHlsZSgnY3Vyc29yJywgJ3BvaW50ZXInKVxuICAgICAgLnN0eWxlKCdvcGFjaXR5JywgZXhwYW5kX29wYWNpdHkpXG4gICAgICAub24oJ21vdXNlb3ZlcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZDMuc2VsZWN0KHRoaXMpLnN0eWxlKCdvcGFjaXR5JywgMC43NSk7XG4gICAgICB9KVxuICAgICAgLm9uKCdtb3VzZW91dCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZDMuc2VsZWN0KHRoaXMpLnN0eWxlKCdvcGFjaXR5JywgZXhwYW5kX29wYWNpdHkpO1xuICAgICAgfSlcbiAgICAgIC5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgLy8gZXhwYW5kIHZpZXdcbiAgICAgICAgaWYgKHBhcmFtcy52aXouZXhwYW5kID09PSBmYWxzZSkge1xuXG4gICAgICAgICAgZDMuc2VsZWN0KHRoaXMpXG4gICAgICAgICAgICAudGV4dChmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAvLyBtZW51IGJ1dHRvblxuICAgICAgICAgICAgICByZXR1cm4gJ1xcdWYwYzknO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgcGFyYW1zLnZpei5leHBhbmQgPSB0cnVlO1xuXG4gICAgICAgICAgZDMuc2VsZWN0QWxsKCcuYm9yZGVycycpLnN0eWxlKCdmaWxsJywgJ3doaXRlJyk7XG4gICAgICAgICAgZDMuc2VsZWN0KCcuZm9vdGVyX3NlY3Rpb24nKS5zdHlsZSgnZGlzcGxheScsICdub25lJyk7XG5cbiAgICAgICAgICAvLyBjb250cmFjdCB2aWV3XG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICBkMy5zZWxlY3QodGhpcylcbiAgICAgICAgICAgIC50ZXh0KGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgIC8vIGV4cGFuZCBidXR0b25cbiAgICAgICAgICAgICAgcmV0dXJuICdcXHVmMGIyJztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIHBhcmFtcy52aXouZXhwYW5kID0gZmFsc2U7XG5cbiAgICAgICAgICBkMy5zZWxlY3RBbGwoJy5ib3JkZXJzJykuc3R5bGUoJ2ZpbGwnLCAnI2VlZScpO1xuICAgICAgICAgIGQzLnNlbGVjdCgnLmZvb3Rlcl9zZWN0aW9uJykuc3R5bGUoJ2Rpc3BsYXknLCAnYmxvY2snKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlc2l6ZSBwYXJlbnQgZGl2XG4gICAgICAgIHBhcmVudF9kaXZfc2l6ZShwYXJhbXMpO1xuXG4gICAgICAgIGQzLnNlbGVjdChwYXJhbXMudml6LnZpel9zdmcpLnN0eWxlKCdvcGFjaXR5JywgMC41KTtcbiAgICAgICAgdmFyIHdhaXRfdGltZSA9IDUwMDtcbiAgICAgICAgaWYgKHBhcmFtcy52aXoucnVuX3RyYW5zID09IHRydWUpIHtcbiAgICAgICAgICB3YWl0X3RpbWUgPSAyNTAwO1xuICAgICAgICB9XG4gICAgICAgIHNldFRpbWVvdXQocmVzZXRfdmlzdWFsaXphdGlvbl9zaXplLCB3YWl0X3RpbWUsIHBhcmFtcyk7XG4gICAgICB9KTtcbiAgfVxufTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHNyYy9pbml0aWFsaXplX3Jlc2l6aW5nLmpzXG4gKiovIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFIQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUdBO0FBTkE7QUFEQTtBQUNBO0FBVUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUtBO0FBTEE7QUFDQTtBQU9BO0FBTUE7O0FBRUE7QUFGQTs7QUFLQTtBQUxBO0FBREE7QUFjQTtBQURBO0FBSUE7QUFEQTtBQUNBOztBQUtBO0FBQ0E7QUFDQTs7QUFHQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFYQTtBQUNBO0FBY0E7O0FBR0E7QUFGQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBdkJBO0FBQ0E7O0FBSkE7QUFDQTtBQStCQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBR0E7QUFyQ0E7QUFyQ0E7QUFoQkEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	eval("var run_reset_visualization_size = __webpack_require__(40);\n\nmodule.exports = function (params) {\n\n  // get outer_margins\n  var outer_margins = params.viz.expand ? params.viz.outer_margins_expand : params.viz.outer_margins;\n\n  // get the size of the window\n  var screen_width = window.innerWidth;\n  var screen_height = window.innerHeight;\n\n  // define width and height of clustergram container\n  var cont_dim = {};\n  cont_dim.width = screen_width - outer_margins.left - outer_margins.right;\n  cont_dim.height = screen_height - outer_margins.top - outer_margins.bottom;\n\n  run_reset_visualization_size(params, cont_dim.width, cont_dim.height, outer_margins.left, outer_margins.top);\n\n  // get dimensions of the viz_svg\n  var dim = {};\n  dim.viz_svg = {};\n  dim.viz_svg.w = d3.select(params.viz.viz_svg).style('width').replace('px', '');\n  dim.viz_svg.h = d3.select(params.viz.viz_svg).style('height').replace('px', '');\n\n  // reposition the play button\n  d3.select('.play_button').attr('transform', function () {\n    var pos_x = dim.viz_svg.w / 2;\n    var pos_y = dim.viz_svg.h / 2;\n    return 'translate(' + pos_x + ',' + pos_y + ')';\n  });\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL3Jlc2V0X3NpemUvcmVzZXRfdmlzdWFsaXphdGlvbl9zaXplLmpzP2E1YTQiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHJ1bl9yZXNldF92aXN1YWxpemF0aW9uX3NpemUgPSByZXF1aXJlKCcuL3J1bl9yZXNldF92aXN1YWxpemF0aW9uX3NpemUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihwYXJhbXMpIHtcblxuICAvLyBnZXQgb3V0ZXJfbWFyZ2luc1xuICB2YXIgb3V0ZXJfbWFyZ2lucyA9IHBhcmFtcy52aXouZXhwYW5kID8gcGFyYW1zLnZpei5vdXRlcl9tYXJnaW5zX2V4cGFuZCA6IHBhcmFtcy52aXoub3V0ZXJfbWFyZ2lucztcblxuICAvLyBnZXQgdGhlIHNpemUgb2YgdGhlIHdpbmRvd1xuICB2YXIgc2NyZWVuX3dpZHRoICA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICB2YXIgc2NyZWVuX2hlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcblxuICAvLyBkZWZpbmUgd2lkdGggYW5kIGhlaWdodCBvZiBjbHVzdGVyZ3JhbSBjb250YWluZXJcbiAgdmFyIGNvbnRfZGltID0ge307XG4gIGNvbnRfZGltLndpZHRoICA9IHNjcmVlbl93aWR0aCAgLSBvdXRlcl9tYXJnaW5zLmxlZnQgLSBvdXRlcl9tYXJnaW5zLnJpZ2h0O1xuICBjb250X2RpbS5oZWlnaHQgPSBzY3JlZW5faGVpZ2h0IC0gb3V0ZXJfbWFyZ2lucy50b3AgLSBvdXRlcl9tYXJnaW5zLmJvdHRvbTtcblxuICBydW5fcmVzZXRfdmlzdWFsaXphdGlvbl9zaXplKHBhcmFtcywgY29udF9kaW0ud2lkdGgsIGNvbnRfZGltLmhlaWdodCwgb3V0ZXJfbWFyZ2lucy5sZWZ0LCBvdXRlcl9tYXJnaW5zLnRvcCk7XG5cbiAgLy8gZ2V0IGRpbWVuc2lvbnMgb2YgdGhlIHZpel9zdmdcbiAgdmFyIGRpbSA9IHt9O1xuICBkaW0udml6X3N2ZyA9IHt9O1xuICBkaW0udml6X3N2Zy53ID0gZDMuc2VsZWN0KHBhcmFtcy52aXoudml6X3N2Zykuc3R5bGUoJ3dpZHRoJykucmVwbGFjZSgncHgnLCcnKTtcbiAgZGltLnZpel9zdmcuaCA9IGQzLnNlbGVjdChwYXJhbXMudml6LnZpel9zdmcpLnN0eWxlKCdoZWlnaHQnKS5yZXBsYWNlKCdweCcsJycpO1xuXG4gIC8vIHJlcG9zaXRpb24gdGhlIHBsYXkgYnV0dG9uXG4gIGQzLnNlbGVjdCgnLnBsYXlfYnV0dG9uJylcbiAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oKXtcbiAgICAgIHZhciBwb3NfeCA9IGRpbS52aXpfc3ZnLncvMjtcbiAgICAgIHZhciBwb3NfeSA9IGRpbS52aXpfc3ZnLmgvMjtcbiAgICAgIHJldHVybiAndHJhbnNsYXRlKCcrcG9zX3grJywnK3Bvc195KycpJztcbiAgICB9KTtcblxufTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHNyYy9yZXNldF9zaXplL3Jlc2V0X3Zpc3VhbGl6YXRpb25fc2l6ZS5qc1xuICoqLyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFKQTtBQU9BO0FBQ0E7O0FBUkE7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQWZBO0FBa0JBO0FBQ0E7QUFDQTtBQUNBOztBQXJCQTtBQXlCQTtBQUNBO0FBQ0E7QUFIQTtBQXhCQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	eval("var crossfilter = __webpack_require__(6);\nvar utils = __webpack_require__(2);\nvar zoomed = __webpack_require__(13);\nvar ini_doubleclick = __webpack_require__(41);\n\nmodule.exports = function (params, set_clust_width, set_clust_height, set_margin_left, set_margin_top) {\n\n  var row_nodes = params.network_data.row_nodes;\n  var col_nodes = params.network_data.col_nodes;\n  var row_nodes_names = _.pluck(row_nodes, 'name');\n  var col_nodes_names = _.pluck(col_nodes, 'name');\n\n  // reset zoom\n  //////////////////////////////\n  var zoom_y = 1;\n  var zoom_x = 1;\n  var pan_dx = 0;\n  var pan_dy = 0;\n\n  var half_height = params.viz.clust.dim.height / 2;\n  var center_y = -(zoom_y - 1) * half_height;\n\n  d3.select(params.root + ' .clust_group').attr('transform', 'translate(' + [0, 0 + center_y] + ')' + ' scale(' + 1 + ',' + zoom_y + ')' + 'translate(' + [pan_dx, pan_dy] + ')');\n\n  d3.select(params.root + ' .row_label_zoom_container').attr('transform', 'translate(' + [0, center_y] + ')' + ' scale(' + zoom_y + ',' + zoom_y + ')' + 'translate(' + [0, pan_dy] + ')');\n\n  d3.select(params.root + ' .row_zoom_container').attr('transform', 'translate(' + [0, center_y] + ')' + ' scale(' + 1 + ',' + zoom_y + ')' + 'translate(' + [0, pan_dy] + ')');\n\n  d3.select(params.root + ' .col_zoom_container').attr('transform', ' scale(' + 1 + ',' + 1 + ')' + 'translate(' + [pan_dx, 0] + ')');\n\n  d3.select('.col_viz_zoom_container').attr('transform', ' scale(' + 1 + ',' + 1 + ')' + 'translate(' + [pan_dx, 0] + ')');\n\n  // set y translate: center_y is positive, positive moves the visualization down\n  // the translate vector has the initial margin, the first y centering, and pan_dy\n  // times the scaling zoom_y\n  var net_y_offset = params.viz.clust.margin.top + center_y + pan_dy * zoom_y;\n\n  // size the svg container div - svg_div\n  d3.select(params.viz.viz_wrapper).style('float', 'right').style('margin-top', set_margin_top + 'px').style('width', set_clust_width + 'px').style('height', set_clust_height + 'px');\n\n  // Resetting some visualization parameters\n  ///////////////////////////////////////////////\n\n  // get height and width from parent div\n  params.viz.svg_dim = {};\n  params.viz.svg_dim.width = Number(d3.select(params.viz.viz_wrapper).style('width').replace('px', ''));\n  params.viz.svg_dim.height = Number(d3.select(params.viz.viz_wrapper).style('height').replace('px', ''));\n\n  // reduce width by row/col labels and by grey_border width (reduce width by less since this is less aparent with slanted col labels)\n  var ini_clust_width = params.viz.svg_dim.width - (params.labels.super_label_width + params.norm_label.width.row + params.class_room.row) - params.viz.grey_border_width - params.viz.spillover_x_offset;\n\n  // there is space between the clustergram and the border\n  var ini_clust_height = params.viz.svg_dim.height - (params.labels.super_label_width + params.norm_label.width.col + params.class_room.col) - 5 * params.viz.grey_border_width;\n\n  // reduce clustergram width if triangles are taller than the normal width\n  // of the columns\n  var tmp_x_scale = d3.scale.ordinal().rangeBands([0, ini_clust_width]);\n  tmp_x_scale.domain(params.matrix.orders.ini_row);\n  var triangle_height = tmp_x_scale.rangeBand() / 2;\n  if (triangle_height > params.norm_label.width.col) {\n    ini_clust_width = ini_clust_width * (params.norm_label.width.col / triangle_height);\n  }\n  params.viz.clust.dim.width = ini_clust_width;\n\n  // clustergram height\n  ////////////////////////\n  // ensure that rects are never taller than they are wide\n  // force square tiles\n  if (ini_clust_width / params.viz.num_col_nodes < ini_clust_height / params.viz.num_row_nodes) {\n\n    // scale the height\n    params.viz.clust.dim.height = ini_clust_width * (params.viz.num_row_nodes / params.viz.num_col_nodes);\n\n    // keep track of whether or not a force square has occurred\n    // so that I can adjust the font accordingly\n    params.viz.force_square = 1;\n\n    // make sure that force_square does not cause the entire visualization\n    // to be taller than the svg, if it does, then undo\n    if (params.viz.clust.dim.height > ini_clust_height) {\n      // make the height equal to the width\n      params.viz.clust.dim.height = ini_clust_height;\n      // keep track of whether or not a force square has occurred\n      params.viz.force_square = 0;\n    }\n  }\n  // do not force square tiles\n  else {\n      // the height will be calculated normally - leading to wide tiles\n      params.viz.clust.dim.height = ini_clust_height;\n      // keep track of whether or not a force square has occurred\n      params.viz.force_square = 0;\n    }\n\n  // zoom_switch from 1 to 2d zoom\n  params.viz.zoom_switch = params.viz.clust.dim.width / params.viz.num_col_nodes / (params.viz.clust.dim.height / params.viz.num_row_nodes);\n\n  // zoom_switch can not be less than 1\n  if (params.viz.zoom_switch < 1) {\n    params.viz.zoom_switch = 1;\n  }\n\n  // Begin resizing the visualization\n\n  // resize the svg\n  ///////////////////////\n  var svg_group = d3.select(params.viz.viz_svg).attr('width', params.viz.svg_dim.width).attr('height', params.viz.svg_dim.height);\n\n  // redefine x_scale and y_scale rangeBands\n  params.matrix.x_scale.rangeBands([0, params.viz.clust.dim.width]);\n  params.matrix.y_scale.rangeBands([0, params.viz.clust.dim.height]);\n\n  // redefine x and y positions\n  _.each(params.network_data.links, function (d) {\n    d.x = params.matrix.x_scale(d.target);\n    d.y = params.matrix.y_scale(d.source);\n  });\n\n  // precalc rect_width and height\n  // params.matrix.rect_width = params.matrix.x_scale.rangeBand() - params.viz.border_width;\n  // params.matrix.rect_height = params.matrix.y_scale.rangeBand() - params.viz.border_width/params.viz.zoom_switch;\n  params.matrix.rect_width = params.matrix.x_scale.rangeBand();\n  params.matrix.rect_height = params.matrix.y_scale.rangeBand();\n\n  // reset crossfilter\n  params.cf = {};\n  params.cf.links = crossfilter(params.network_data.links);\n  params.cf.dim_x = params.cf.links.dimension(function (d) {\n    return d.x;\n  });\n  params.cf.dim_y = params.cf.links.dimension(function (d) {\n    return d.y;\n  });\n\n  // reset all crossfilter filters\n  params.cf.dim_x.filterAll();\n  params.cf.dim_y.filterAll();\n\n  // redefine links - grab all links since filter is reset\n  var inst_links = params.cf.dim_x.top(Infinity);\n\n  // redefine zoom extent\n  params.viz.real_zoom = params.norm_label.width.col / (params.matrix.rect_width / 2);\n\n  // disable zoom while transitioning\n  svg_group.on('.zoom', null);\n\n  params.zoom_behavior.scaleExtent([1, params.viz.real_zoom * params.viz.zoom_switch]).on('zoom', function () {\n    zoomed(params);\n  });\n\n  // reenable zoom after transition\n  if (params.viz.do_zoom) {\n    svg_group.call(params.zoom_behavior);\n  }\n\n  // prevent normal double click zoom etc\n  ini_doubleclick(params);\n\n  // redefine border width\n  params.viz.border_width = params.matrix.rect_width / 55;\n\n  // the default font sizes are set here\n  params.labels.default_fs_row = params.matrix.rect_height * 1.07;\n  params.labels.default_fs_col = params.matrix.rect_width * 0.87;\n\n  svg_group.select('.super_background').style('width', params.viz.svg_dim.width).style('height', params.viz.svg_dim.height);\n\n  svg_group.select('.grey_background').attr('width', params.viz.clust.dim.width).attr('height', params.viz.clust.dim.height);\n\n  // resize rows and tiles within rows\n\n  svg_group.selectAll('.row').attr('transform', function (d) {\n    var tmp_index = _.indexOf(row_nodes_names, d.name);\n    return 'translate(0,' + params.matrix.y_scale(tmp_index) + ')';\n  });\n\n  // reset tiles\n  svg_group.selectAll('.row').selectAll('.tile').attr('transform', function (d) {\n    var x_pos = params.matrix.x_scale(d.pos_x) + 0.5 * params.viz.border_width;\n    var y_pos = 0.5 * params.viz.border_width / params.viz.zoom_switch;\n    return 'translate(' + x_pos + ',' + y_pos + ')';\n  }).attr('width', params.matrix.rect_width).attr('height', params.matrix.rect_height);\n\n  // reset tile_up\n  svg_group.selectAll('.row').selectAll('.tile_up').attr('d', function () {\n    // up triangle\n    var start_x = 0;\n    var final_x = params.matrix.x_scale.rangeBand();\n    var start_y = 0;\n    var final_y = params.matrix.y_scale.rangeBand() - params.matrix.y_scale.rangeBand() / 60;\n\n    var output_string = 'M' + start_x + ',' + start_y + ', L' + start_x + ', ' + final_y + ', L' + final_x + ',0 Z';\n\n    return output_string;\n  }).attr('transform', function (d) {\n    var x_pos = params.matrix.x_scale(d.pos_x) + 0.5 * params.viz.border_width;\n    var y_pos = 0.5 * params.viz.border_width / params.viz.zoom_switch;\n    return 'translate(' + x_pos + ',' + y_pos + ')';\n  });\n\n  svg_group.selectAll('.row').selectAll('.tile_dn').attr('d', function () {\n    // dn triangle\n    var start_x = 0;\n    var final_x = params.matrix.x_scale.rangeBand();\n    var start_y = params.matrix.y_scale.rangeBand() - params.matrix.y_scale.rangeBand() / 60;\n    var final_y = params.matrix.y_scale.rangeBand() - params.matrix.y_scale.rangeBand() / 60;\n\n    var output_string = 'M' + start_x + ', ' + start_y + ' ,   L' + final_x + ', ' + final_y + ',  L' + final_x + ',0 Z';\n\n    return output_string;\n  }).attr('transform', function (d) {\n    var x_pos = params.matrix.x_scale(d.pos_x) + 0.5 * params.viz.border_width;\n    var y_pos = 0.5 * params.viz.border_width / params.viz.zoom_switch;\n    return 'translate(' + x_pos + ',' + y_pos + ')';\n  });\n\n  svg_group.selectAll('.highlighting_rect').attr('width', params.matrix.x_scale.rangeBand() * 0.80).attr('height', params.matrix.y_scale.rangeBand() * 0.80);\n\n  svg_group.selectAll('.tile_split_up').attr('d', function () {\n    var start_x = 0;\n    var final_x = params.matrix.x_scale.rangeBand();\n    var start_y = 0;\n    var final_y = params.matrix.y_scale.rangeBand() - params.matrix.y_scale.rangeBand() / 60;\n    var output_string = 'M' + start_x + ',' + start_y + ', L' + start_x + ', ' + final_y + ', L' + final_x + ',0 Z';\n    return output_string;\n  });\n\n  svg_group.selectAll('.tile_split_dn').attr('d', function () {\n    var start_x = 0;\n    var final_x = params.matrix.x_scale.rangeBand();\n    var start_y = params.matrix.y_scale.rangeBand() - params.matrix.y_scale.rangeBand() / 60;\n    var final_y = params.matrix.y_scale.rangeBand() - params.matrix.y_scale.rangeBand() / 60;\n    var output_string = 'M' + start_x + ', ' + start_y + ' ,   L' + final_x + ', ' + final_y + ',  L' + final_x + ',0 Z';\n    return output_string;\n  });\n\n  // reposition tile highlight\n  ////////////////////////////////\n\n  var rel_width_hlight = 6;\n  var opacity_hlight = 0.85;\n  var hlight_width = rel_width_hlight * params.viz.border_width;\n  var hlight_height = rel_width_hlight * params.viz.border_width / params.viz.zoom_switch;\n\n  // top highlight\n  d3.select(params.root + ' .top_hlight').attr('width', params.matrix.rect_width).attr('height', hlight_height).attr('transform', function () {\n    return 'translate(' + params.matrix.x_scale(params.matrix.click_hlight_x) + ',0)';\n  });\n\n  // left highlight\n  d3.select(params.root + ' .left_hlight').attr('width', hlight_width).attr('height', params.matrix.rect_width - hlight_height * 0.99).attr('transform', function () {\n    return 'translate(' + params.matrix.x_scale(params.matrix.click_hlight_x) + ',' + hlight_height * 0.99 + ')';\n  });\n\n  // right highlight\n  d3.select(params.root + ' .right_hlight').attr('width', hlight_width).attr('height', params.matrix.rect_height - hlight_height * 0.99).attr('transform', function () {\n    var tmp_translate = params.matrix.x_scale(params.matrix.click_hlight_x) + params.matrix.rect_width - hlight_width;\n    return 'translate(' + tmp_translate + ',' + hlight_height * 0.99 + ')';\n  });\n\n  // bottom highlight\n  d3.select(params.root + ' .bottom_hlight').attr('width', function () {\n    return params.matrix.rect_width - 1.98 * hlight_width;\n  }).attr('height', hlight_height).attr('transform', function () {\n    var tmp_translate_x = params.matrix.x_scale(params.matrix.click_hlight_x) + hlight_width * 0.99;\n    var tmp_translate_y = params.matrix.rect_height - hlight_height;\n    return 'translate(' + tmp_translate_x + ',' + tmp_translate_y + ')';\n  });\n\n  // resize row highlight\n  /////////////////////////\n  d3.select(params.root + ' .row_top_hlight').attr('width', params.viz.svg_dim.width).attr('height', hlight_height);\n\n  d3.select(params.root + ' .row_bottom_hlight').attr('width', params.viz.svg_dim.width).attr('height', hlight_height).attr('transform', function () {\n    var tmp_translate_y = params.matrix.rect_height - hlight_height;\n    return 'translate(0,' + tmp_translate_y + ')';\n  });\n\n  // resize col highlight\n  /////////////////////////\n  d3.select(params.root + ' .col_top_hlight').attr('width', params.viz.clust.dim.height).attr('height', hlight_width).attr('transform', function () {\n    var tmp_translate_y = 0;\n    var tmp_translate_x = -(params.viz.clust.dim.height + params.class_room.col + params.viz.uni_margin);\n    return 'translate(' + tmp_translate_x + ',' + tmp_translate_y + ')';\n  });\n\n  d3.select(params.root + ' .col_bottom_hlight').attr('width', params.viz.clust.dim.height).attr('height', hlight_width).attr('transform', function () {\n    var tmp_translate_y = params.matrix.rect_width - hlight_width;\n    var tmp_translate_x = -(params.viz.clust.dim.height + params.class_room.col + params.viz.uni_margin);\n    return 'translate(' + tmp_translate_x + ',' + tmp_translate_y + ')';\n  });\n\n  // add text to row/col during resize\n  function normal_name(d) {\n    var inst_name = d.name.replace(/_/g, ' ').split('#')[0];\n    if (inst_name.length > params.labels.max_label_char) {\n      inst_name = inst_name.substring(0, params.labels.max_label_char) + '..';\n    }\n    return inst_name;\n  }\n\n  // resize row labels\n  ///////////////////////////\n\n  svg_group.select(params.root + ' row_container').attr('transform', 'translate(' + params.norm_label.margin.left + ',' + params.viz.clust.margin.top + ')');\n\n  svg_group.select(params.root + ' .row_container').select('.white_bars').attr('width', params.norm_label.background.row).attr('height', 30 * params.viz.clust.dim.height + 'px');\n\n  svg_group.select(params.root + ' .row_container').select('.row_label_container').attr('transform', 'translate(' + params.norm_label.width.row + ',0)');\n\n  svg_group.selectAll('.row_label_text').attr('transform', function (d) {\n    var inst_index = _.indexOf(row_nodes_names, d.name);\n    return 'translate(0,' + params.matrix.y_scale(inst_index) + ')';\n  });\n\n  svg_group.selectAll('.row_label_text').select('text').style('font-size', params.labels.default_fs_row + 'px').text(function (d) {\n    return normal_name(d);\n  });\n\n  // change the size of the highlighting rects\n  svg_group.selectAll('.row_label_text').each(function () {\n    var bbox = d3.select(this).select('text')[0][0].getBBox();\n    d3.select(this).select('rect').attr('x', bbox.x).attr('y', 0).attr('width', bbox.width).attr('height', params.matrix.rect_height).style('fill', 'yellow').style('opacity', function (d) {\n      var inst_opacity = 0;\n      // highlight target genes\n      if (d.target === 1) {\n        inst_opacity = 1;\n      }\n      return inst_opacity;\n    });\n  });\n\n  // label the widest row and col labels\n  params.bounding_width_max = {};\n  params.bounding_width_max.row = 0;\n  d3.selectAll('.row_label_text').each(function () {\n    var tmp_width = d3.select(this).select('text').node().getBBox().width;\n    if (tmp_width > params.bounding_width_max.row) {\n      params.bounding_width_max.row = tmp_width;\n    }\n  });\n\n  svg_group.select('.row_viz_container').attr('transform', 'translate(' + params.norm_label.width.row + ',0)');\n\n  svg_group.select('.row_viz_container').select('white_bars').attr('width', params.class_room.row + 'px').attr('height', function () {\n    var inst_height = params.viz.clust.dim.height;\n    return inst_height;\n  });\n\n  svg_group.selectAll('.row_viz_group').attr('transform', function (d) {\n    var inst_index = _.indexOf(row_nodes_names, d.name);\n    return 'translate(0, ' + params.matrix.y_scale(inst_index) + ')';\n  });\n\n  svg_group.selectAll('.row_viz_group').select('path').attr('d', function () {\n    var origin_x = params.class_room.symbol_width - 1;\n    var origin_y = 0;\n    var mid_x = 1;\n    var mid_y = params.matrix.rect_height / 2;\n    var final_x = params.class_room.symbol_width - 1;\n    var final_y = params.matrix.rect_height;\n    var output_string = 'M ' + origin_x + ',' + origin_y + ' L ' + mid_x + ',' + mid_y + ', L ' + final_x + ',' + final_y + ' Z';\n    return output_string;\n  });\n\n  if (utils.has(params.network_data.row_nodes[0], 'value')) {\n\n    // set bar scale\n    var enr_max = Math.abs(_.max(params.network_data.row_nodes, function (d) {\n      return Math.abs(d.value);\n    }).value);\n    params.labels.bar_scale_row = d3.scale.linear().domain([0, enr_max]).range([0, params.norm_label.width.row]);\n\n    svg_group.selectAll('.row_bars').attr('width', function (d) {\n      var inst_value = 0;\n      inst_value = params.labels.bar_scale_row(Math.abs(d.value));\n      return inst_value;\n    }).attr('x', function (d) {\n      var inst_value = 0;\n      inst_value = -params.labels.bar_scale_row(Math.abs(d.value));\n      return inst_value;\n    }).attr('height', params.matrix.rect_height);\n  }\n\n  // resize col labels\n  ///////////////////////\n  svg_group.select(params.root + ' .col_container').attr('transform', 'translate(' + params.viz.clust.margin.left + ',' + params.norm_label.margin.top + ')');\n\n  svg_group.select(params.root + ' .col_container').select('.white_bars').attr('width', 30 * params.viz.clust.dim.width + 'px').attr('height', params.norm_label.background.col);\n\n  svg_group.select(params.root + ' .col_container').select('.col_label_outer_container').attr('transform', 'translate(0,' + params.norm_label.width.col + ')');\n\n  // offset click group column label\n  var x_offset_click = params.matrix.rect_width / 2 + params.viz.border_width;\n  // reduce width of rotated rects\n  var reduce_rect_width = params.matrix.rect_width * 0.36;\n\n  svg_group.selectAll('.col_label_text').attr('transform', function (d) {\n    var inst_index = _.indexOf(col_nodes_names, d.name);\n    return 'translate(' + params.matrix.x_scale(inst_index) + ') rotate(-90)';\n  });\n\n  svg_group.selectAll('.col_label_click').attr('transform', 'translate(' + params.matrix.rect_width / 2 + ',' + x_offset_click + ') rotate(45)');\n\n  svg_group.selectAll('.col_label_click').select('text').attr('y', params.matrix.rect_width * 0.60).attr('dx', 2 * params.viz.border_width).style('font-size', params.labels.default_fs_col + 'px').text(function (d) {\n    return normal_name(d);\n  });\n\n  params.bounding_width_max.col = 0;\n  svg_group.selectAll('.col_label_click').each(function () {\n    var tmp_width = d3.select(this).select('text').node().getBBox().width;\n    if (tmp_width > params.bounding_width_max.col) {\n      params.bounding_width_max.col = tmp_width * 1.2;\n    }\n  });\n\n  // check if widest row or col are wider than the allowed label width\n  ////////////////////////////////////////////////////////////////////////\n  params.ini_scale_font = {};\n  params.ini_scale_font.row = 1;\n  params.ini_scale_font.col = 1;\n\n  if (params.bounding_width_max.row > params.norm_label.width.row) {\n\n    // calc reduction in font size\n    params.ini_scale_font.row = params.norm_label.width.row / params.bounding_width_max.row;\n    // redefine bounding_width_max.row\n    params.bounding_width_max.row = params.ini_scale_font.row * params.bounding_width_max.row;\n\n    // redefine default fs\n    params.labels.default_fs_row = params.labels.default_fs_row * params.ini_scale_font.row;\n    // reduce font size\n    d3.selectAll('.row_label_text').each(function () {\n      d3.select(this).select('text').style('font-size', params.labels.default_fs_row + 'px');\n    });\n  }\n\n  if (params.bounding_width_max.col > params.norm_label.width.col) {\n\n    // calc reduction in font size\n    params.ini_scale_font.col = params.norm_label.width.col / params.bounding_width_max.col;\n    // redefine bounding_width_max.col\n    params.bounding_width_max.col = params.ini_scale_font.col * params.bounding_width_max.col;\n    // redefine default fs\n    params.labels.default_fs_col = params.labels.default_fs_col * params.ini_scale_font.col;\n    // reduce font size\n    d3.selectAll('.col_label_click').each(function () {\n      d3.select(this).select('text').style('font-size', params.labels.default_fs_col + 'px');\n    });\n  }\n\n  svg_group.selectAll('.row_label_text').select('text').attr('y', params.matrix.rect_height * 0.5 + params.labels.default_fs_row * 0.35);\n\n  svg_group.selectAll('.col_label_click').each(function () {\n    d3.select(this).select('text')[0][0].getBBox();\n\n    // d3.select(this)\n    //   .select('rect')\n    //   .attr('x', bbox.x * 1.25)\n    //   .attr('y', 0)\n    //   .attr('width', bbox.width * 1.25)\n    //   .attr('height', params.matrix.rect_width * 0.6)\n    //   .style('fill', 'yellow')\n    //   .style('opacity', 0);\n  });\n\n  // resize column triangle\n  svg_group.selectAll('.col_label_click').select('path').attr('d', function () {\n    // x and y are flipped since its rotated\n    var origin_y = -params.viz.border_width;\n    var start_x = 0;\n    var final_x = params.matrix.rect_width - reduce_rect_width;\n    var start_y = -(params.matrix.rect_width - reduce_rect_width + params.viz.border_width);\n    var final_y = -params.viz.border_width;\n    var output_string = 'M ' + origin_y + ',0 L ' + start_y + ',' + start_x + ', L ' + final_y + ',' + final_x + ' Z';\n    return output_string;\n  }).attr('fill', function (d) {\n    var inst_color = '#eee';\n    if (params.labels.show_categories) {\n      inst_color = params.labels.class_colors.col[d.cl];\n    }\n    return inst_color;\n  });\n\n  // // append column value bars\n  // if (utils.has( params.network_data.col_nodes[0], 'value')) {\n\n  svg_group.selectAll('.col_bars').attr('width', function (d) {\n    var inst_value = 0;\n    if (d.value > 0) {\n      inst_value = params.labels.bar_scale_col(d.value);\n    }\n    return inst_value;\n  })\n  // rotate labels - reduce width if rotating\n  .attr('height', params.matrix.rect_width * 0.66);\n  // }\n\n  if (params.labels.show_categories) {\n    // change the size of the highlighting rects\n    d3.selectAll('.col_label_click').each(function () {\n      var bbox = d3.select(this).select('text')[0][0].getBBox();\n\n      d3.select(this).select('rect').attr('width', bbox.width * 1.1).attr('height', 0.67 * params.matrix.rect_width).style('fill', function (d) {\n        var inst_color = 'white';\n        if (params.labels.show_categories) {\n          inst_color = params.labels.class_colors.col[d.cl];\n        }\n        return inst_color;\n      }).style('opacity', 0.30);\n    });\n  }\n\n  // resize dendrogram\n  ///////////////////\n  svg_group.selectAll('.row_class_rect').attr('width', function () {\n    var inst_width = params.class_room.symbol_width - 1;\n    return inst_width + 'px';\n  }).attr('height', params.matrix.y_scale.rangeBand()).attr('x', function () {\n    var inst_offset = params.class_room.symbol_width + 1;\n    return inst_offset + 'px';\n  });\n\n  svg_group.selectAll('.col_class_rect').attr('width', params.matrix.x_scale.rangeBand()).attr('height', function () {\n    var inst_height = params.class_room.col - 1;\n    return inst_height;\n  });\n\n  svg_group.selectAll('.col_viz_group').attr('transform', function (d) {\n    var inst_index = _.indexOf(col_nodes_names, d.name);\n    return 'translate(' + params.matrix.x_scale(inst_index) + ',0)';\n  });\n\n  // reposition grid lines\n  ////////////////////////////\n  svg_group.selectAll('.horz_lines').attr('transform', function (d) {\n    var inst_index = _.indexOf(row_nodes_names, d.name);\n    return 'translate(0,' + params.matrix.y_scale(inst_index) + ') rotate(0)';\n  });\n\n  svg_group.selectAll('.horz_lines').select('line').attr('x2', params.viz.clust.dim.width).style('stroke-width', params.viz.border_width / params.viz.zoom_switch + 'px');\n\n  svg_group.selectAll('.vert_lines').attr('transform', function (d) {\n    var inst_index = _.indexOf(col_nodes_names, d.name);\n    return 'translate(' + params.matrix.x_scale(inst_index) + ') rotate(-90)';\n  });\n\n  svg_group.selectAll('.vert_lines').select('line').attr('x2', -params.viz.clust.dim.height).style('stroke-width', params.viz.border_width + 'px');\n\n  // var row_nodes = params.network_data.row_nodes;\n  // var col_nodes = params.network_data.col_nodes;\n\n  // draw_grid_lines(row_nodes, col_nodes);\n\n  // resize superlabels\n  /////////////////////////////////////\n  svg_group.select('.super_col_bkg').attr('height', params.labels.super_label_width + 'px').attr('transform', 'translate(0,' + params.viz.grey_border_width + ')');\n\n  // super col title\n  svg_group.select('.super_col').attr('transform', function () {\n    var inst_x = params.viz.clust.dim.width / 2 + params.norm_label.width.row;\n    var inst_y = params.labels.super_label_width - params.viz.uni_margin;\n    return 'translate(' + inst_x + ',' + inst_y + ')';\n  });\n\n  // super row title\n  svg_group.select('.super_row_bkg').attr('width', params.labels.super_label_width + 'px').attr('transform', 'translate(' + params.viz.grey_border_width + ',0)');\n\n  // append super title row group\n  svg_group.select('.super_row').attr('transform', function () {\n    var inst_x = params.labels.super_label_width - params.viz.uni_margin;\n    var inst_y = params.viz.clust.dim.height / 2 + params.norm_label.width.col;\n    return 'translate(' + inst_x + ',' + inst_y + ')';\n  });\n\n  // resize spillover\n  //////////////////////////\n  // hide spillover from slanted column labels on right side\n  svg_group.select('.right_slant_triangle').attr('transform', 'translate(' + params.viz.clust.dim.width + ',' + params.norm_label.width.col + ')');\n\n  svg_group.select('.left_slant_triangle').attr('transform', 'translate(-1,' + params.norm_label.width.col + ')');\n\n  svg_group.select('.top_left_white').attr('width', params.viz.clust.margin.left).attr('height', params.viz.clust.margin.top);\n\n  svg_group.select('.right_spillover').attr('transform', function () {\n    var tmp_left = params.viz.clust.margin.left + params.viz.clust.dim.width;\n    var tmp_top = params.norm_label.margin.top + params.norm_label.width.col;\n    return 'translate(' + tmp_left + ',' + tmp_top + ')';\n  });\n\n  // white border bottom - prevent clustergram from hitting border\n  svg_group.select('.bottom_spillover').attr('width', params.viz.svg_dim.width).attr('height', 2 * params.viz.grey_border_width).attr('transform', function () {\n    // shift up enough to show the entire border width\n    var inst_offset = params.viz.svg_dim.height - 3 * params.viz.grey_border_width;\n    return 'translate(0,' + inst_offset + ')';\n  });\n\n  // add border to svg in four separate lines - to not interfere with clicking anything\n  ///////////////////////////////////////////////////////////////////////////////////////\n  // left border\n  svg_group.select('.left_border').attr('width', params.viz.grey_border_width).attr('height', params.viz.svg_dim.height).attr('transform', 'translate(0,0)');\n\n  // right border\n  svg_group.select('.right_border').attr('width', params.viz.grey_border_width).attr('height', params.viz.svg_dim.height).attr('transform', function () {\n    var inst_offset = params.viz.svg_dim.width - params.viz.grey_border_width;\n    return 'translate(' + inst_offset + ',0)';\n  });\n\n  // top border\n  svg_group.select('.top_border').attr('width', params.viz.svg_dim.width).attr('height', params.viz.grey_border_width).attr('transform', function () {\n    var inst_offset = 0;\n    return 'translate(' + inst_offset + ',0)';\n  });\n\n  // bottom border\n  svg_group.select('.bottom_border').attr('width', params.viz.svg_dim.width).attr('height', params.viz.grey_border_width).attr('transform', function () {\n    var inst_offset = params.viz.svg_dim.height - params.viz.grey_border_width;\n    return 'translate(0,' + inst_offset + ')';\n  });\n\n  // reset zoom and translate\n  //////////////////////////////\n  params.zoom_behavior.scale(1).translate([params.viz.clust.margin.left, params.viz.clust.margin.top]);\n\n  d3.select(params.viz.viz_svg).style('opacity', 1);\n};//@ sourceMappingURL=data:application/json;base64,");

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	eval("var two_translate_zoom = __webpack_require__(37);\n\nmodule.exports = function (params) {\n  // disable double-click zoom\n  d3.selectAll(params.viz.viz_svg).on('dblclick.zoom', null);\n\n  d3.select(params.viz.viz_svg).on('dblclick', function () {\n    two_translate_zoom(params, 0, 0, 1);\n  });\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2luaV9kb3VibGVjbGljay5qcz9iOTAwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB0d29fdHJhbnNsYXRlX3pvb20gPSByZXF1aXJlKCcuL3R3b190cmFuc2xhdGVfem9vbScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHBhcmFtcykge1xuICAvLyBkaXNhYmxlIGRvdWJsZS1jbGljayB6b29tXG4gIGQzLnNlbGVjdEFsbChwYXJhbXMudml6LnZpel9zdmcpLm9uKCdkYmxjbGljay56b29tJywgbnVsbCk7XG5cbiAgZDMuc2VsZWN0KHBhcmFtcy52aXoudml6X3N2ZylcbiAgICAub24oJ2RibGNsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICB0d29fdHJhbnNsYXRlX3pvb20ocGFyYW1zLCAwLCAwLCAxKTtcbiAgICB9KTtcbn07XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBzcmMvaW5pX2RvdWJsZWNsaWNrLmpzXG4gKiovIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFEQTtBQUxBIiwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	eval("var crossfilter = __webpack_require__(6);\nvar end_reorder = __webpack_require__(29);\n\nmodule.exports = function (params, inst_order, row_col) {\n\n  // params.viz.run_trans = true;\n\n  // save order state\n  if (row_col === 'row') {\n    params.viz.inst_order.row = inst_order;\n  } else if (row_col === 'col') {\n    params.viz.inst_order.col = inst_order;\n  }\n\n  var row_nodes_obj = params.network_data.row_nodes;\n  var row_nodes_names = _.pluck(row_nodes_obj, 'name');\n\n  var col_nodes_obj = params.network_data.col_nodes;\n  var col_nodes_names = _.pluck(col_nodes_obj, 'name');\n\n  if (row_col === 'row') {\n    // load orders\n    if (inst_order === 'ini') {\n      params.matrix.x_scale.domain(params.matrix.orders.ini_row);\n    } else if (inst_order === 'clust') {\n      params.matrix.x_scale.domain(params.matrix.orders.clust_row);\n    } else if (inst_order === 'rank') {\n      params.matrix.x_scale.domain(params.matrix.orders.rank_row);\n    } else if (inst_order === 'class') {\n      params.matrix.x_scale.domain(params.matrix.orders.class_row);\n    }\n  } else if (row_col == 'col') {\n    // load orders\n    if (inst_order === 'ini') {\n      params.matrix.y_scale.domain(params.matrix.orders.ini_col);\n    } else if (inst_order === 'clust') {\n      params.matrix.y_scale.domain(params.matrix.orders.clust_col);\n    } else if (inst_order === 'rank') {\n      params.matrix.y_scale.domain(params.matrix.orders.rank_col);\n    } else if (inst_order === 'class') {\n      // params.matrix.x_scale.domain(params.matrix.orders.class_row);\n      params.matrix.y_scale.domain(params.matrix.orders.class_col);\n    }\n  }\n\n  // only animate transition if there are a small number of tiles\n  if (d3.selectAll('.tile')[0].length < params.matrix.def_large_matrix) {\n\n    // define the t variable as the transition function\n    var t = d3.select(params.root + ' .clust_group').transition().duration(2500);\n\n    t.selectAll('.row').attr('transform', function (d) {\n      var tmp_index = _.indexOf(row_nodes_names, d.name);\n      return 'translate(0,' + params.matrix.y_scale(tmp_index) + ')';\n    }).selectAll('.tile').attr('transform', function (d) {\n      return 'translate(' + params.matrix.x_scale(d.pos_x) + ' , 0)';\n    });\n\n    t.selectAll('.tile_up').attr('transform', function (d) {\n      return 'translate(' + params.matrix.x_scale(d.pos_x) + ' , 0)';\n    });\n\n    t.selectAll('.tile_dn').attr('transform', function (d) {\n      return 'translate(' + params.matrix.x_scale(d.pos_x) + ' , 0)';\n    });\n\n    // Move Row Labels\n    d3.select(params.root + ' .row_label_zoom_container').selectAll('.row_label_text').transition().duration(2500).attr('transform', function (d) {\n      var inst_index = _.indexOf(row_nodes_names, d.name);\n      return 'translate(0,' + params.matrix.y_scale(inst_index) + ')';\n    });\n\n    // t.selectAll('.column')\n    d3.select(params.root + ' .col_zoom_container').selectAll('.col_label_text').transition().duration(2500).attr('transform', function (d) {\n      var inst_index = _.indexOf(col_nodes_names, d.name);\n      return 'translate(' + params.matrix.x_scale(inst_index) + ') rotate(-90)';\n    });\n\n    // reorder row_label_triangle groups\n    d3.selectAll('.row_viz_group').transition().duration(2500).attr('transform', function (d) {\n      var inst_index = _.indexOf(row_nodes_names, d.name);\n      return 'translate(0,' + params.matrix.y_scale(inst_index) + ')';\n    });\n\n    // reorder col_class groups\n    d3.selectAll('.col_viz_group').transition().duration(2500).attr('transform', function (d) {\n      var inst_index = _.indexOf(col_nodes_names, d.name);\n      return 'translate(' + params.matrix.x_scale(inst_index) + ',0)';\n    });\n  } else {\n\n    // define the t variable as the transition function\n    var t = d3.select(params.root + ' .clust_group');\n\n    // reorder matrix\n    t.selectAll('.row').attr('transform', function (d) {\n      var tmp_index = _.indexOf(row_nodes_names, d.name);\n      return 'translate(0,' + params.matrix.y_scale(tmp_index) + ')';\n    }).selectAll('.tile').attr('transform', function (d) {\n      return 'translate(' + params.matrix.x_scale(d.pos_x) + ' , 0)';\n    });\n\n    t.selectAll('.tile_up').attr('transform', function (d) {\n      return 'translate(' + params.matrix.x_scale(d.pos_x) + ' , 0)';\n    });\n\n    t.selectAll('.tile_dn').attr('transform', function (d) {\n      return 'translate(' + params.matrix.x_scale(d.pos_x) + ' , 0)';\n    });\n\n    // Move Row Labels\n    d3.select(params.root + ' .row_label_zoom_container').selectAll('.row_label_text').attr('transform', function (d) {\n      var inst_index = _.indexOf(row_nodes_names, d.name);\n      return 'translate(0,' + params.matrix.y_scale(inst_index) + ')';\n    });\n\n    // t.selectAll('.column')\n    d3.select(params.root + ' .col_zoom_container').selectAll('.col_label_text').attr('transform', function (d) {\n      var inst_index = _.indexOf(col_nodes_names, d.name);\n      return 'translate(' + params.matrix.x_scale(inst_index) + ') rotate(-90)';\n    });\n\n    // reorder row_label_triangle groups\n    d3.selectAll('.row_viz_group').attr('transform', function (d) {\n      var inst_index = _.indexOf(row_nodes_names, d.name);\n      return 'translate(0,' + params.matrix.y_scale(inst_index) + ')';\n    });\n\n    // reorder col_class groups\n    d3.selectAll('.col_viz_group').attr('transform', function (d) {\n      var inst_index = _.indexOf(col_nodes_names, d.name);\n      return 'translate(' + params.matrix.x_scale(inst_index) + ',0)';\n    });\n  }\n\n  // redefine x and y positions\n  params.network_data.links.forEach(function (d) {\n    d.x = params.matrix.x_scale(d.target);\n    d.y = params.matrix.y_scale(d.source);\n  });\n\n  // rename crossfilter\n  params.cf = {};\n  params.cf.links = crossfilter(params.network_data.links);\n  params.cf.dim_x = params.cf.links.dimension(function (d) {\n    return d.x;\n  });\n  params.cf.dim_y = params.cf.links.dimension(function (d) {\n    return d.y;\n  });\n\n  // backup allow programmatic zoom\n  setTimeout(end_reorder, 2500);\n};//@ sourceMappingURL=data:application/json;base64,");

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	eval("var make_params = __webpack_require__(5);\nvar change_network_view = __webpack_require__(9);\nvar build_col_dendro = __webpack_require__(25);\nvar build_row_dendro = __webpack_require__(22);\nvar generate_dendro = __webpack_require__(21);\nvar initialize_resizing = __webpack_require__(38);\nvar ini_doubleclick = __webpack_require__(41);\nvar enter_exit_update = __webpack_require__(44);\nvar define_enter_exit_delays = __webpack_require__(47);\nvar search = __webpack_require__(36);\nvar all_reorder = __webpack_require__(42);\n\nmodule.exports = function (old_params, change_view) {\n\n  /*\n  This is being run by the cgm object, and has access to config. \n  */\n\n  // make new_network_data by filtering the original network data\n  var config_copy = jQuery.extend(true, {}, this.config);\n\n  var new_network_data = change_network_view(old_params, config_copy.network_data, change_view);\n\n  // make Deep copy of this.config object\n  var new_config = jQuery.extend(true, {}, this.config);\n\n  new_config.network_data = new_network_data;\n  new_config.inst_order = old_params.viz.inst_order;\n  // never switch to expand when updating the matrix\n  new_config.ini_expand = false;\n  new_config.ini_view = null;\n  new_config.current_col_cat = old_params.current_col_cat;\n\n  var params = make_params(new_config);\n  var delays = define_enter_exit_delays(old_params, params);\n\n  // ordering - necessary for reordering the function called on button click\n  this.reorder = all_reorder;\n\n  enter_exit_update(params, new_network_data, delays);\n\n  // update network data in params\n  this.params = params;\n\n  // search functions\n  var gene_search = search(params, params.network_data.row_nodes, 'name');\n  this.get_genes = gene_search.get_entities;\n  this.find_gene = gene_search.find_entities;\n\n  // TODO reenable dendrogram updating\n  // redefine change_group function\n  if (params.viz.show_dendrogram) {\n    var row_dendrogram = generate_dendro(params, 'row');\n    var col_dendrogram = generate_dendro(params, 'col');\n  }\n\n  function new_change_groups(inst_rc, inst_index) {\n    if (inst_rc === 'row') {\n      row_dendrogram.change_groups(inst_rc, inst_index);\n    } else {\n      col_dendrogram.change_groups(inst_rc, inst_index);\n    }\n  }\n\n  this.change_groups = new_change_groups;\n\n  // initialize screen resizing - necessary for resizing with new params\n  initialize_resizing(params);\n\n  // necessary to have zoom behavior updated on updating clustergram\n  d3.select(params.viz.viz_svg).call(params.zoom_behavior);\n\n  // re-initialize the double click behavior\n  ini_doubleclick(params);\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL25ldHdvcmsvdXBkYXRlX25ldHdvcmsuanM/YmVmNSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbWFrZV9wYXJhbXMgPSByZXF1aXJlKCcuLi9wYXJhbXMnKTtcbnZhciBjaGFuZ2VfbmV0d29ya192aWV3ID0gcmVxdWlyZSgnLi9jaGFuZ2VfbmV0d29ya192aWV3Jyk7XG52YXIgYnVpbGRfY29sX2RlbmRybyA9IHJlcXVpcmUoJy4uL2RlbmRyb2dyYW0vYnVpbGRfY29sX2RlbmRybycpO1xudmFyIGJ1aWxkX3Jvd19kZW5kcm8gPSByZXF1aXJlKCcuLi9kZW5kcm9ncmFtL2J1aWxkX3Jvd19kZW5kcm8nKTtcbnZhciBnZW5lcmF0ZV9kZW5kcm8gPSByZXF1aXJlKCcuLi9kZW5kcm9ncmFtJyk7XG52YXIgaW5pdGlhbGl6ZV9yZXNpemluZyA9IHJlcXVpcmUoJy4uL2luaXRpYWxpemVfcmVzaXppbmcnKTtcbnZhciBpbmlfZG91YmxlY2xpY2sgPSByZXF1aXJlKCcuLi9pbmlfZG91YmxlY2xpY2snKTtcbnZhciBlbnRlcl9leGl0X3VwZGF0ZSA9IHJlcXVpcmUoJy4vZW50ZXJfZXhpdF91cGRhdGUnKTtcbnZhciBkZWZpbmVfZW50ZXJfZXhpdF9kZWxheXMgPSByZXF1aXJlKCcuL2RlZmluZV9lbnRlcl9leGl0X2RlbGF5cycpO1xudmFyIHNlYXJjaCA9IHJlcXVpcmUoJy4uL3NlYXJjaCcpO1xudmFyIGFsbF9yZW9yZGVyID0gcmVxdWlyZSgnLi4vcmVvcmRlci9hbGxfcmVvcmRlcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9sZF9wYXJhbXMsIGNoYW5nZV92aWV3KSB7XG5cbiAgLypcbiAgVGhpcyBpcyBiZWluZyBydW4gYnkgdGhlIGNnbSBvYmplY3QsIGFuZCBoYXMgYWNjZXNzIHRvIGNvbmZpZy4gXG4gICovXG5cbiAgLy8gbWFrZSBuZXdfbmV0d29ya19kYXRhIGJ5IGZpbHRlcmluZyB0aGUgb3JpZ2luYWwgbmV0d29yayBkYXRhXG4gIHZhciBjb25maWdfY29weSA9IGpRdWVyeS5leHRlbmQodHJ1ZSwge30sIHRoaXMuY29uZmlnKTtcblxuICB2YXIgbmV3X25ldHdvcmtfZGF0YSA9IGNoYW5nZV9uZXR3b3JrX3ZpZXcob2xkX3BhcmFtcywgY29uZmlnX2NvcHkubmV0d29ya19kYXRhLCBjaGFuZ2Vfdmlldyk7XG5cbiAgLy8gbWFrZSBEZWVwIGNvcHkgb2YgdGhpcy5jb25maWcgb2JqZWN0XG4gIHZhciBuZXdfY29uZmlnID0galF1ZXJ5LmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5jb25maWcpO1xuXG4gIG5ld19jb25maWcubmV0d29ya19kYXRhID0gbmV3X25ldHdvcmtfZGF0YTtcbiAgbmV3X2NvbmZpZy5pbnN0X29yZGVyID0gb2xkX3BhcmFtcy52aXouaW5zdF9vcmRlcjtcbiAgLy8gbmV2ZXIgc3dpdGNoIHRvIGV4cGFuZCB3aGVuIHVwZGF0aW5nIHRoZSBtYXRyaXhcbiAgbmV3X2NvbmZpZy5pbmlfZXhwYW5kID0gZmFsc2U7XG4gIG5ld19jb25maWcuaW5pX3ZpZXcgPSBudWxsO1xuICBuZXdfY29uZmlnLmN1cnJlbnRfY29sX2NhdCA9IG9sZF9wYXJhbXMuY3VycmVudF9jb2xfY2F0O1xuXG4gIHZhciBwYXJhbXMgPSBtYWtlX3BhcmFtcyhuZXdfY29uZmlnKTtcbiAgdmFyIGRlbGF5cyA9IGRlZmluZV9lbnRlcl9leGl0X2RlbGF5cyhvbGRfcGFyYW1zLCBwYXJhbXMpO1xuXG4gIC8vIG9yZGVyaW5nIC0gbmVjZXNzYXJ5IGZvciByZW9yZGVyaW5nIHRoZSBmdW5jdGlvbiBjYWxsZWQgb24gYnV0dG9uIGNsaWNrXG4gIHRoaXMucmVvcmRlciA9IGFsbF9yZW9yZGVyO1xuXG4gIGVudGVyX2V4aXRfdXBkYXRlKHBhcmFtcywgbmV3X25ldHdvcmtfZGF0YSwgZGVsYXlzKTtcblxuICAvLyB1cGRhdGUgbmV0d29yayBkYXRhIGluIHBhcmFtc1xuICB0aGlzLnBhcmFtcyA9IHBhcmFtcztcblxuICAvLyBzZWFyY2ggZnVuY3Rpb25zXG4gIHZhciBnZW5lX3NlYXJjaCA9IHNlYXJjaChwYXJhbXMsIHBhcmFtcy5uZXR3b3JrX2RhdGEucm93X25vZGVzLCAnbmFtZScpO1xuICB0aGlzLmdldF9nZW5lcyA9IGdlbmVfc2VhcmNoLmdldF9lbnRpdGllcztcbiAgdGhpcy5maW5kX2dlbmUgPSBnZW5lX3NlYXJjaC5maW5kX2VudGl0aWVzO1xuXG4gIC8vIFRPRE8gcmVlbmFibGUgZGVuZHJvZ3JhbSB1cGRhdGluZ1xuICAvLyByZWRlZmluZSBjaGFuZ2VfZ3JvdXAgZnVuY3Rpb25cbiAgaWYgKHBhcmFtcy52aXouc2hvd19kZW5kcm9ncmFtKXtcbiAgICB2YXIgcm93X2RlbmRyb2dyYW0gPSBnZW5lcmF0ZV9kZW5kcm8ocGFyYW1zLCAncm93Jyk7XG4gICAgdmFyIGNvbF9kZW5kcm9ncmFtID0gZ2VuZXJhdGVfZGVuZHJvKHBhcmFtcywgJ2NvbCcpO1xuICB9XG5cbiAgZnVuY3Rpb24gbmV3X2NoYW5nZV9ncm91cHMoaW5zdF9yYywgaW5zdF9pbmRleCkge1xuICAgIGlmIChpbnN0X3JjID09PSAncm93Jykge1xuICAgICAgcm93X2RlbmRyb2dyYW0uY2hhbmdlX2dyb3VwcyhpbnN0X3JjLGluc3RfaW5kZXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb2xfZGVuZHJvZ3JhbS5jaGFuZ2VfZ3JvdXBzKGluc3RfcmMsaW5zdF9pbmRleCk7XG4gICAgfVxuICB9XG5cbiAgdGhpcy5jaGFuZ2VfZ3JvdXBzID0gbmV3X2NoYW5nZV9ncm91cHM7XG5cbiAgLy8gaW5pdGlhbGl6ZSBzY3JlZW4gcmVzaXppbmcgLSBuZWNlc3NhcnkgZm9yIHJlc2l6aW5nIHdpdGggbmV3IHBhcmFtc1xuICBpbml0aWFsaXplX3Jlc2l6aW5nKHBhcmFtcyk7XG5cbiAgLy8gbmVjZXNzYXJ5IHRvIGhhdmUgem9vbSBiZWhhdmlvciB1cGRhdGVkIG9uIHVwZGF0aW5nIGNsdXN0ZXJncmFtXG4gIGQzLnNlbGVjdChwYXJhbXMudml6LnZpel9zdmcpLmNhbGwocGFyYW1zLnpvb21fYmVoYXZpb3IpO1xuXG4gIC8vIHJlLWluaXRpYWxpemUgdGhlIGRvdWJsZSBjbGljayBiZWhhdmlvclxuICBpbmlfZG91YmxlY2xpY2socGFyYW1zKTtcblxufTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHNyYy9uZXR3b3JrL3VwZGF0ZV9uZXR3b3JrLmpzXG4gKiovIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFDQTs7QUFWQTtBQUNBO0FBYUE7QUFDQTs7QUFmQTtBQWtCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBdkJBO0FBQ0E7QUEwQkE7QUFDQTs7QUE1QkE7QUFDQTs7QUFEQTtBQWtDQTtBQUNBO0FBQ0E7OztBQXBDQTtBQXdDQTtBQUNBO0FBRkE7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQURBO0FBR0E7QUFIQTtBQURBO0FBQ0E7QUFPQTtBQUNBOztBQXJEQTtBQUNBOztBQURBO0FBQ0E7O0FBREE7QUFBQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	eval("var resize_after_update = __webpack_require__(45);\nvar make_rows = __webpack_require__(26);\nvar make_cols = __webpack_require__(31);\nvar eeu_existing_row = __webpack_require__(46);\n\nmodule.exports = function (params, network_data, delays) {\n\n  if (params.matrix.show_tile_tooltips) {\n    // d3-tooltip - for tiles\n    var tip = d3.tip().attr('class', 'd3-tip').direction('n').offset([0, 0]).html(params.matrix.make_tile_tooltip);\n\n    d3.select(params.root + '.clust_group').call(tip);\n  }\n\n  // reposition matrix\n  d3.select('.clust_container').attr('transform', 'translate(' + params.viz.clust.margin.left + ',' + params.viz.clust.margin.top + ')');\n\n  // reposition row container\n  d3.select(params.root + ' .row_viz_container').attr('transform', 'translate(' + params.norm_label.width.row + ',0)');\n\n  // reposition col container\n  d3.select(params.root + ' .col_label_outer_container').attr('transform', 'translate(0,' + params.norm_label.width.col + ')');\n\n  // reposition col_viz container\n  d3.select('.col_viz_outer_container').attr('transform', function () {\n    var inst_offset = params.norm_label.width.col + 2;\n    return 'translate(0,' + inst_offset + ')';\n  });\n\n  // get row and col names\n  var row_nodes_names = params.network_data.row_nodes_names;\n  var col_nodes_names = params.network_data.col_nodes_names;\n\n  var duration = 1000;\n\n  // make global so that names can be accessed\n  var row_nodes = network_data.row_nodes;\n  var col_nodes = network_data.col_nodes;\n  var links = network_data.links;\n\n  //\n  var tile_data = links;\n\n  // add name to links for object constancy\n  for (var i = 0; i < tile_data.length; i++) {\n    var d = tile_data[i];\n    tile_data[i].name = row_nodes[d.source].name + '_' + col_nodes[d.target].name;\n  }\n\n  function get_key(d) {\n    return d.name;\n  }\n\n  // exit\n  ////////////\n\n  // remove entire rows\n  var exiting_rows = d3.select(params.root + ' .clust_group').selectAll('.row').data(params.matrix.matrix, function (d) {\n    return d.name;\n  }).exit();\n\n  if (delays.run_transition) {\n    exiting_rows.transition().duration(duration).style('opacity', 0).remove();\n  } else {\n    exiting_rows.style('opacity', 0).remove();\n  }\n\n  // move rows\n  var move_rows = d3.select(params.root + ' .clust_group').selectAll('.row').data(params.matrix.matrix, function (d) {\n    return d.name;\n  });\n\n  if (delays.run_transition) {\n    move_rows.transition().delay(delays.update).duration(duration).attr('transform', function (d) {\n      var tmp_index = _.indexOf(row_nodes_names, d.name);\n      return 'translate(0,' + params.matrix.y_scale(tmp_index) + ')';\n    });\n  } else {\n    move_rows.attr('transform', function (d) {\n      var tmp_index = _.indexOf(row_nodes_names, d.name);\n      return 'translate(0,' + params.matrix.y_scale(tmp_index) + ')';\n    });\n  }\n\n  // update existing rows - enter, exit, update tiles in existing row\n  d3.select(params.root + ' .clust_group').selectAll('.row').each(function (d) {\n    // TODO add tip back to arguments\n    tmp = this;\n    eeu_existing_row(params, d, delays, duration, tmp);\n  });\n\n  d3.selectAll('.horz_lines').remove();\n  d3.selectAll('.vert_lines').remove();\n\n  // remove row labels\n  d3.selectAll('.row_label_text').data(row_nodes, function (d) {\n    return d.name;\n  }).exit().transition().duration(duration).style('opacity', 0).remove();\n\n  // remove column labels\n  d3.selectAll('.col_label_click').data(col_nodes, function (d) {\n    return d.name;\n  }).exit().transition().duration(duration).style('opacity', 0).remove();\n\n  // remove row triangles and colorbars\n  d3.selectAll('.row_viz_group').data(row_nodes, function (d) {\n    return d.name;\n  }).exit().transition().duration(duration).style('opacity', 0).remove();\n\n  d3.selectAll('.col_label_text').data(col_nodes, function (d) {\n    return d.name;\n  }).exit().transition().duration(duration).style('opacity', 0).remove();\n\n  d3.selectAll('.horz_lines').data(row_nodes, function (d) {\n    return d.name;\n  }).exit().transition().duration(duration).style('opacity', 0).remove();\n\n  d3.selectAll('.vert_lines').data(col_nodes, function (d) {\n    return d.name;\n  }).exit().transition().duration(duration).style('opacity', 0).remove();\n\n  // remove dendrogram\n  d3.selectAll('.col_viz_group').data(col_nodes, function (d) {\n    return d.name;\n  }).exit().transition().duration(duration).style('opacity', 0).remove();\n\n  // resize clust components using appropriate delays\n  resize_after_update(params, row_nodes, col_nodes, links, duration, delays);\n\n  // enter new elements\n  //////////////////////////\n\n  // enter new rows\n  var new_row_groups = d3.select(params.root + ' .clust_group').selectAll('.row').data(params.matrix.matrix, function (d) {\n    return d.name;\n  }).enter().append('g').attr('class', 'row').attr('transform', function (d) {\n    var tmp_index = _.indexOf(row_nodes_names, d.name);\n    return 'translate(0,' + params.matrix.y_scale(tmp_index) + ')';\n  });\n\n  new_row_groups.each(enter_new_rows);\n\n  // make each row in the clustergrao\n  function enter_new_rows(ini_inp_row_data) {\n\n    var inp_row_data = ini_inp_row_data.row_data;\n\n    // remove zero values to make visualization faster\n    var row_data = _.filter(inp_row_data, function (num) {\n      return num.value !== 0;\n    });\n\n    // update tiles\n    ////////////////////////////////////////////\n    var tile = d3.select(this).selectAll('rect').data(row_data, function (d) {\n      return d.col_name;\n    }).enter().append('rect').attr('class', 'tile row_tile').attr('width', params.matrix.rect_width).attr('height', params.matrix.rect_height)\n    // switch the color based on up/dn value\n    .style('fill', function (d) {\n      return d.value > 0 ? params.matrix.tile_colors[0] : params.matrix.tile_colors[1];\n    }).on('mouseover', function (p) {\n      // highlight row - set text to active if\n      d3.selectAll('.row_label_text text').classed('active', function (d) {\n        return p.row_name === d.name;\n      });\n\n      d3.selectAll('.col_label_text text').classed('active', function (d) {\n        return p.col_name === d.name;\n      });\n    }).on('mouseout', function mouseout() {\n      d3.selectAll('text').classed('active', false);\n    });\n\n    tile.style('fill-opacity', 0).transition().delay(delays.enter).duration(duration).style('fill-opacity', function (d) {\n      // calculate output opacity using the opacity scale\n      var output_opacity = params.matrix.opacity_scale(Math.abs(d.value));\n      return output_opacity;\n    });\n\n    tile.attr('transform', function (d) {\n      var x_pos = params.matrix.x_scale(d.pos_x) + 0.5 * params.viz.border_width;\n      var y_pos = 0.5 * params.viz.border_width / params.viz.zoom_switch;\n      return 'translate(' + x_pos + ',' + y_pos + ')';\n    });\n\n    if (params.matrix.tile_type == 'updn') {\n\n      // value split\n      var row_split_data = _.filter(inp_row_data, function (num) {\n        return num.value_up != 0 || num.value_dn != 0;\n      });\n\n      // tile_up\n      var new_tiles_up = d3.select(this).selectAll('.tile_up').data(row_split_data, function (d) {\n        return d.col_name;\n      }).enter().append('path').attr('class', 'tile_up').attr('d', function () {\n\n        // up triangle\n        var start_x = 0;\n        var final_x = params.matrix.x_scale.rangeBand();\n        var start_y = 0;\n        var final_y = params.matrix.y_scale.rangeBand() - params.matrix.y_scale.rangeBand() / 60;\n\n        var output_string = 'M' + start_x + ',' + start_y + ', L' + start_x + ', ' + final_y + ', L' + final_x + ',0 Z';\n\n        return output_string;\n      }).attr('transform', function (d) {\n        var x_pos = params.matrix.x_scale(d.pos_x) + 0.5 * params.viz.border_width;\n        var y_pos = 0.5 * params.viz.border_width / params.viz.zoom_switch;\n        return 'translate(' + x_pos + ',' + y_pos + ')';\n      }).style('fill', function () {\n        return params.matrix.tile_colors[0];\n      }).on('mouseover', function (p) {\n        // highlight row - set text to active if\n        d3.selectAll('.row_label_text text').classed('active', function (d) {\n          return p.row_name === d.name;\n        });\n\n        d3.selectAll('.col_label_text text').classed('active', function (d) {\n          return p.col_name === d.name;\n        });\n        if (params.matrix.show_tile_tooltips) {\n          tip.show(p);\n        }\n      }).on('mouseout', function (d) {\n        d3.selectAll('text').classed('active', false);\n        if (params.matrix.show_tile_tooltips) {\n          tip.hide();\n        }\n      });\n\n      new_tiles_up.style('fill-opacity', 0).transition().delay(delays.enter).duration(duration).style('fill-opacity', function (d) {\n        var inst_opacity = 0;\n        if (Math.abs(d.value_dn) > 0) {\n          inst_opacity = params.matrix.opacity_scale(Math.abs(d.value_up));\n        }\n        return inst_opacity;\n      });\n\n      // tile_dn\n      var new_tiles_dn = d3.select(this).selectAll('.tile_dn').data(row_split_data, function (d) {\n        return d.col_name;\n      }).enter().append('path').attr('class', 'tile_dn').attr('d', function (d) {\n\n        // dn triangle\n        var start_x = 0;\n        var final_x = params.matrix.x_scale.rangeBand();\n        var start_y = params.matrix.y_scale.rangeBand() - params.matrix.y_scale.rangeBand() / 60;\n        var final_y = params.matrix.y_scale.rangeBand() - params.matrix.y_scale.rangeBand() / 60;\n\n        var output_string = 'M' + start_x + ', ' + start_y + ' ,   L' + final_x + ', ' + final_y + ',  L' + final_x + ',0 Z';\n\n        return output_string;\n      }).attr('transform', function (d) {\n        var x_pos = params.matrix.x_scale(d.pos_x) + 0.5 * params.viz.border_width;\n        var y_pos = 0.5 * params.viz.border_width / params.viz.zoom_switch;\n        return 'translate(' + x_pos + ',' + y_pos + ')';\n      }).style('fill', function () {\n        return params.matrix.tile_colors[1];\n      }).on('mouseover', function (p) {\n        // highlight row - set text to active if\n        d3.selectAll('.row_label_text text').classed('active', function (d) {\n          return p.row_name === d.name;\n        });\n\n        d3.selectAll('.col_label_text text').classed('active', function (d) {\n          return p.col_name === d.name;\n        });\n        if (params.matrix.show_tile_tooltips) {\n          tip.show(p);\n        }\n      }).on('mouseout', function (d) {\n        d3.selectAll('text').classed('active', false);\n        if (params.matrix.show_tile_tooltips) {\n          tip.hide();\n        }\n      });\n\n      new_tiles_dn.style('fill-opacity', 0).transition().delay(delays.enter).duration(duration).style('fill-opacity', function (d) {\n        var inst_opacity = 0;\n        if (Math.abs(d.value_up) > 0) {\n          inst_opacity = params.matrix.opacity_scale(Math.abs(d.value_dn));\n        }\n        return inst_opacity;\n      });\n\n      // remove tiles when splitting is done\n      tile.each(function (d) {\n        if (Math.abs(d.value_up) > 0 && Math.abs(d.value_dn) > 0) {\n          d3.select(this).remove();\n        }\n      });\n    }\n  }\n\n  // var labels = Labels(params);\n\n  var row_triangle_ini_group = make_rows(params, duration);\n  var container_all_col = make_cols(params, duration);\n\n  // Fade in new gridlines\n  ///////////////////////////\n  var row_nodes_names = params.network_data.row_nodes_names;\n  var col_nodes_names = params.network_data.col_nodes_names;\n\n  // append horizontal lines\n  d3.select(params.root + ' .clust_group').selectAll('.horz_lines').data(row_nodes, function (d) {\n    return d.name;\n  }).enter().append('g').attr('class', 'horz_lines').attr('transform', function (d) {\n    var inst_index = _.indexOf(row_nodes_names, d.name);\n    return 'translate(0,' + params.matrix.y_scale(inst_index) + ') rotate(0)';\n  }).append('line').attr('x1', 0).attr('x2', params.viz.clust.dim.width).style('stroke-width', params.viz.border_width / params.viz.zoom_switch + 'px').style('stroke', 'white').attr('opacity', 0).transition().delay(delays.enter).duration(2 * duration).attr('opacity', 1);\n\n  // append vertical line groups\n  d3.select(params.root + ' .clust_group').selectAll('.vert_lines').data(col_nodes).enter().append('g').attr('class', 'vert_lines').attr('transform', function (d) {\n    var inst_index = _.indexOf(col_nodes_names, d.name);\n    return 'translate(' + params.matrix.x_scale(inst_index) + ') rotate(-90)';\n  }).append('line').attr('x1', 0).attr('x2', -params.viz.clust.dim.height).style('stroke-width', params.viz.border_width + 'px').style('stroke', 'white').attr('opacity', 0).transition().delay(delays.enter).duration(2 * duration).attr('opacity', 1);\n};//@ sourceMappingURL=data:application/json;base64,");

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	eval("var utils = __webpack_require__(2);\n\nmodule.exports = function (params, row_nodes, col_nodes, links, duration, delays) {\n\n  var row_nodes_names = params.network_data.row_nodes_names;\n  var col_nodes_names = params.network_data.col_nodes_names;\n\n  // reset zoom\n  //////////////////////////////\n  var zoom_y = 1;\n  var zoom_x = 1;\n  var pan_dx = 0;\n  var pan_dy = 0;\n\n  var half_height = params.viz.clust.dim.height / 2;\n  var center_y = -(zoom_y - 1) * half_height;\n\n  d3.select(params.root + ' .clust_group').attr('transform', 'translate(' + [0, 0 + center_y] + ')' + ' scale(' + 1 + ',' + zoom_y + ')' + 'translate(' + [pan_dx, pan_dy] + ')');\n\n  d3.select(params.root + ' .row_label_zoom_container').attr('transform', 'translate(' + [0, center_y] + ')' + ' scale(' + zoom_y + ',' + zoom_y + ')' + 'translate(' + [0, pan_dy] + ')');\n\n  d3.select(params.root + ' .row_zoom_container').attr('transform', 'translate(' + [0, center_y] + ')' + ' scale(' + 1 + ',' + zoom_y + ')' + 'translate(' + [0, pan_dy] + ')');\n\n  d3.select(params.root + ' .col_zoom_container').attr('transform', ' scale(' + 1 + ',' + 1 + ')' + 'translate(' + [pan_dx, 0] + ')');\n\n  d3.select('.col_viz_zoom_container').attr('transform', ' scale(' + 1 + ',' + 1 + ')' + 'translate(' + [pan_dx, 0] + ')');\n\n  // set y translate: center_y is positive, positive moves the visualization down\n  // the translate vector has the initial margin, the first y centering, and pan_dy\n  // times the scaling zoom_y\n  var net_y_offset = params.viz.clust.margin.top + center_y + pan_dy * zoom_y;\n\n  // Resetting some visualization parameters\n  ///////////////////////////////////////////////\n\n  // get height and width from parent div\n  params.viz.svg_dim = {};\n  params.viz.svg_dim.width = Number(d3.select(params.viz.viz_wrapper).style('width').replace('px', ''));\n  params.viz.svg_dim.height = Number(d3.select(params.viz.viz_wrapper).style('height').replace('px', ''));\n\n  // reduce width by row/col labels and by grey_border width (reduce width by less since this is less aparent with slanted col labels)\n  var ini_clust_width = params.viz.svg_dim.width - (params.labels.super_label_width + params.norm_label.width.row + params.class_room.row) - params.viz.grey_border_width - params.viz.spillover_x_offset;\n\n  // there is space between the clustergram and the border\n  var ini_clust_height = params.viz.svg_dim.height - (params.labels.super_label_width + params.norm_label.width.col + params.class_room.col) - 5 * params.viz.grey_border_width;\n\n  // reduce clustergram width if triangles are taller than the normal width\n  // of the columns\n  var tmp_x_scale = d3.scale.ordinal().rangeBands([0, ini_clust_width]);\n  tmp_x_scale.domain(params.matrix.orders.ini_row);\n  var triangle_height = tmp_x_scale.rangeBand() / 2;\n  if (triangle_height > params.norm_label.width.col) {\n    ini_clust_width = ini_clust_width * (params.norm_label.width.col / triangle_height);\n  }\n  params.viz.clust.dim.width = ini_clust_width;\n\n  // clustergram height\n  ////////////////////////\n  // ensure that rects are never taller than they are wide\n  // force square tiles\n  if (ini_clust_width / params.viz.num_col_nodes < ini_clust_height / params.viz.num_row_nodes) {\n\n    // scale the height\n    params.viz.clust.dim.height = ini_clust_width * (params.viz.num_row_nodes / params.viz.num_col_nodes);\n\n    // keep track of whether or not a force square has occurred\n    // so that I can adjust the font accordingly\n    params.viz.force_square = 1;\n\n    // make sure that force_square does not cause the entire visualization\n    // to be taller than the svg, if it does, then undo\n    if (params.viz.clust.dim.height > ini_clust_height) {\n      // make the height equal to the width\n      params.viz.clust.dim.height = ini_clust_height;\n      // keep track of whether or not a force square has occurred\n      params.viz.force_square = 0;\n    }\n  }\n  // do not force square tiles\n  else {\n      // the height will be calculated normally - leading to wide tiles\n      params.viz.clust.dim.height = ini_clust_height;\n      // keep track of whether or not a force square has occurred\n      params.viz.force_square = 0;\n    }\n\n  // zoom_switch from 1 to 2d zoom\n  params.viz.zoom_switch = params.viz.clust.dim.width / params.viz.num_col_nodes / (params.viz.clust.dim.height / params.viz.num_row_nodes);\n\n  // zoom_switch can not be less than 1\n  if (params.viz.zoom_switch < 1) {\n    params.viz.zoom_switch = 1;\n  }\n\n  // redefine x_scale and y_scale rangeBands\n  params.matrix.x_scale.rangeBands([0, params.viz.clust.dim.width]);\n  params.matrix.y_scale.rangeBands([0, params.viz.clust.dim.height]);\n\n  // redefine zoom extent\n  params.viz.real_zoom = params.norm_label.width.col / (params.matrix.x_scale.rangeBand() / 2);\n  params.zoom_behavior.scaleExtent([1, params.viz.real_zoom * params.viz.zoom_switch]);\n\n  // redefine border width\n  params.viz.border_width = params.matrix.x_scale.rangeBand() / 40;\n\n  // the default font sizes are set here\n  params.labels.default_fs_row = params.matrix.y_scale.rangeBand() * 1.01;\n  params.labels.default_fs_col = params.matrix.x_scale.rangeBand() * 0.85;\n\n  // Begin resizing the visualization\n  /////////////////////////////////////////\n  /////////////////////////////////////////\n\n  // resize the svg\n  ///////////////////////\n  var svg_group = d3.select(params.viz.viz_wrapper).select('svg');\n\n  svg_group.select(params.root + ' .grey_background').transition().delay(delays.update).duration(duration).attr('width', params.viz.clust.dim.width).attr('height', params.viz.clust.dim.height);\n\n  //////////////////////\n  // set up later\n  //////////////////////\n  // svg_group.selectAll('.highlighting_rect')\n  //   // .transition().delay(delays.update).duration(duration)\n  //   .attr('width', params.matrix.x_scale.rangeBand() * 0.80)\n  //   .attr('height', params.matrix.y_scale.rangeBand() * 0.80);\n  // svg_group.selectAll('.tile_split_up')\n  //   // .transition().delay(delays.update).duration(duration)\n  //   .attr('d', function() {\n  //     var start_x = 0;\n  //     var final_x = params.matrix.x_scale.rangeBand();\n  //     var start_y = 0;\n  //     var final_y = params.matrix.y_scale.rangeBand() - params.matrix.y_scale.rangeBand()/60;\n  //     var output_string = 'M' + start_x + ',' + start_y + ', L' +\n  //       start_x + ', ' + final_y + ', L' + final_x + ',0 Z';\n  //     return output_string;\n  //   })\n  // svg_group.selectAll('.tile_split_dn')\n  //   // .transition().delay(delays.update).duration(duration)\n  //   .attr('d', function() {\n  //     var start_x = 0;\n  //     var final_x = params.matrix.x_scale.rangeBand();\n  //     var start_y = params.matrix.y_scale.rangeBand() - params.matrix.y_scale.rangeBand()/60;\n  //     var final_y = params.matrix.y_scale.rangeBand() - params.matrix.y_scale.rangeBand()/60;\n  //     var output_string = 'M' + start_x + ', ' + start_y + ' ,   L' +\n  //       final_x + ', ' + final_y + ',  L' + final_x + ',0 Z';\n  //     return output_string;\n  //   })\n\n  // add text to row/col during resize\n  function normal_name(d) {\n    var inst_name = d.name.replace(/_/g, ' ').split('#')[0];\n    if (inst_name.length > params.labels.max_label_char) {\n      inst_name = inst_name.substring(0, params.labels.max_label_char) + '..';\n    }\n    return inst_name;\n  }\n\n  // resize row labels\n  ///////////////////////////\n\n  if (delays.run_transition) {\n\n    svg_group.select(params.root + ' .row_container').transition().delay(delays.update).duration(duration).attr('transform', 'translate(' + params.norm_label.margin.left + ',' + params.viz.clust.margin.top + ')');\n\n    svg_group.select(params.root + ' .row_container').select('.white_bars').transition().delay(delays.update).duration(duration).attr('width', params.norm_label.background.row).attr('height', 30 * params.viz.clust.dim.height + 'px');\n\n    svg_group.select(params.root + ' .row_container').select('.row_label_container').transition().delay(delays.update).duration(duration).attr('transform', 'translate(' + params.norm_label.width.row + ',0)');\n\n    svg_group.selectAll('.row_label_text').data(row_nodes, function (d) {\n      return d.name;\n    }).transition().delay(delays.update).duration(duration).attr('transform', function (d) {\n      var inst_index = _.indexOf(row_nodes_names, d.name);\n      return 'translate(0,' + params.matrix.y_scale(inst_index) + ')';\n    }).attr('y', params.matrix.rect_height * 0.5 + params.labels.default_fs_row * 0.35);\n  } else {\n    svg_group.select(params.root + ' .row_container').attr('transform', 'translate(' + params.norm_label.margin.left + ',' + params.viz.clust.margin.top + ')');\n\n    svg_group.select(params.root + ' .row_container').select('.white_bars').attr('width', params.norm_label.background.row).attr('height', 30 * params.viz.clust.dim.height + 'px');\n\n    svg_group.select(params.root + ' .row_container').select('.row_label_container').attr('transform', 'translate(' + params.norm_label.width.row + ',0)');\n\n    svg_group.selectAll('.row_label_text').data(row_nodes, function (d) {\n      return d.name;\n    }).attr('transform', function (d) {\n      var inst_index = _.indexOf(row_nodes_names, d.name);\n      return 'translate(0,' + params.matrix.y_scale(inst_index) + ')';\n    }).attr('y', params.matrix.rect_height * 0.5 + params.labels.default_fs_row * 0.35);\n  }\n\n  // do not delay the font size change since this will break the bounding box calc\n  svg_group.selectAll('.row_label_text').select('text').style('font-size', params.labels.default_fs_row + 'px').text(function (d) {\n    return normal_name(d);\n  });\n\n  // change the size of the highlighting rects\n  svg_group.selectAll('.row_label_text').each(function () {\n    var bbox = d3.select(this).select('text')[0][0].getBBox();\n    d3.select(this).select('rect').attr('x', bbox.x).attr('y', 0).attr('width', bbox.width).attr('height', params.matrix.y_scale.rangeBand()).style('fill', 'yellow').style('opacity', function (d) {\n      var inst_opacity = 0;\n      // highlight target genes\n      if (d.target === 1) {\n        inst_opacity = 1;\n      }\n      return inst_opacity;\n    });\n  });\n\n  // label the widest row and col labels\n  params.bounding_width_max = {};\n  params.bounding_width_max.row = 0;\n  d3.selectAll('.row_label_text').each(function () {\n    var tmp_width = d3.select(this).select('text').node().getBBox().width;\n    if (tmp_width > params.bounding_width_max.row) {\n      params.bounding_width_max.row = tmp_width;\n    }\n  });\n\n  // check if widest row or col are wider than the allowed label width\n  ////////////////////////////////////////////////////////////////////////\n  params.ini_scale_font = {};\n  params.ini_scale_font.row = 1;\n  params.ini_scale_font.col = 1;\n\n  if (params.bounding_width_max.row > params.norm_label.width.row) {\n\n    // calc reduction in font size\n    params.ini_scale_font.row = params.norm_label.width.row / params.bounding_width_max.row;\n    // redefine bounding_width_max.row\n    params.bounding_width_max.row = params.ini_scale_font.row * params.bounding_width_max.row;\n\n    // redefine default fs\n    params.labels.default_fs_row = params.labels.default_fs_row * params.ini_scale_font.row;\n    // reduce font size\n    d3.selectAll('.row_label_text').each(function () {\n      d3.select(this).select('text').style('font-size', params.labels.default_fs_row + 'px');\n    });\n  }\n\n  if (delays.run_transition) {\n\n    // positioning row text after row text size may have been reduced\n    svg_group.selectAll('.row_label_text').select('text').transition().delay(delays.update).duration(duration).attr('y', params.matrix.rect_height * 0.5 + params.labels.default_fs_row * 0.35);\n\n    svg_group.select('.row_viz_container').transition().delay(delays.update).duration(duration).attr('transform', 'translate(' + params.norm_label.width.row + ',0)');\n\n    svg_group.select('.row_viz_container').transition().delay(delays.update).duration(duration).select('white_bars').attr('width', params.class_room.row + 'px').attr('height', function () {\n      var inst_height = params.viz.clust.dim.height;\n      return inst_height;\n    });\n\n    svg_group.selectAll('.row_viz_group').data(row_nodes, function (d) {\n      return d.name;\n    }).transition().delay(delays.update).duration(duration).attr('transform', function (d) {\n      var inst_index = _.indexOf(row_nodes_names, d.name);\n      return 'translate(0, ' + params.matrix.y_scale(inst_index) + ')';\n    });\n\n    svg_group.selectAll('.row_viz_group').select('path').transition().delay(delays.update).duration(duration).attr('d', function () {\n      var origin_x = params.class_room.symbol_width - 1;\n      var origin_y = 0;\n      var mid_x = 1;\n      var mid_y = params.matrix.y_scale.rangeBand() / 2;\n      var final_x = params.class_room.symbol_width - 1;\n      var final_y = params.matrix.y_scale.rangeBand();\n      var output_string = 'M ' + origin_x + ',' + origin_y + ' L ' + mid_x + ',' + mid_y + ', L ' + final_x + ',' + final_y + ' Z';\n      return output_string;\n    });\n  } else {\n\n    // positioning row text after row text size may have been reduced\n    svg_group.selectAll('.row_label_text').select('text').attr('y', params.matrix.rect_height * 0.5 + params.labels.default_fs_row * 0.35);\n\n    svg_group.select('.row_viz_container').attr('transform', 'translate(' + params.norm_label.width.row + ',0)');\n\n    svg_group.select('.row_viz_container').select('white_bars').attr('width', params.class_room.row + 'px').attr('height', function () {\n      var inst_height = params.viz.clust.dim.height;\n      return inst_height;\n    });\n\n    svg_group.selectAll('.row_viz_group').data(row_nodes, function (d) {\n      return d.name;\n    }).attr('transform', function (d) {\n      var inst_index = _.indexOf(row_nodes_names, d.name);\n      return 'translate(0, ' + params.matrix.y_scale(inst_index) + ')';\n    });\n\n    svg_group.selectAll('.row_viz_group').select('path').attr('d', function () {\n      var origin_x = params.class_room.symbol_width - 1;\n      var origin_y = 0;\n      var mid_x = 1;\n      var mid_y = params.matrix.y_scale.rangeBand() / 2;\n      var final_x = params.class_room.symbol_width - 1;\n      var final_y = params.matrix.y_scale.rangeBand();\n      var output_string = 'M ' + origin_x + ',' + origin_y + ' L ' + mid_x + ',' + mid_y + ', L ' + final_x + ',' + final_y + ' Z';\n      return output_string;\n    });\n  }\n\n  if (utils.has(params.network_data.row_nodes[0], 'value')) {\n\n    // set bar scale\n    var enr_max = Math.abs(_.max(params.network_data.row_nodes, function (d) {\n      return Math.abs(d.value);\n    }).value);\n    params.labels.bar_scale_row = d3.scale.linear().domain([0, enr_max]).range([0, params.norm_label.width.row]);\n\n    svg_group.selectAll('.row_bars')\n    // .transition().delay(delays.update).duration(duration)\n    .attr('width', function (d) {\n      var inst_value = 0;\n      inst_value = params.labels.bar_scale_row(Math.abs(d.value));\n      return inst_value;\n    }).attr('x', function (d) {\n      var inst_value = 0;\n      inst_value = -params.labels.bar_scale_row(Math.abs(d.value));\n      return inst_value;\n    }).attr('height', params.matrix.y_scale.rangeBand());\n  }\n\n  // resize col labels\n  ///////////////////////\n\n  if (delays.run_transition) {\n\n    svg_group.select(params.root + ' .col_container').transition().delay(delays.update).duration(duration).attr('transform', 'translate(' + params.viz.clust.margin.left + ',' + params.norm_label.margin.top + ')');\n\n    svg_group.select(params.root + ' .col_container').transition().delay(delays.update).duration(duration).select('.white_bars').attr('width', 30 * params.viz.clust.dim.width + 'px').attr('height', params.norm_label.background.col);\n\n    svg_group.select(params.root + ' .col_container').transition().delay(delays.update).duration(duration).select('.col_label_outer_container').attr('transform', 'translate(0,' + params.norm_label.width.col + ')');\n\n    // offset click group column label\n    var x_offset_click = params.matrix.x_scale.rangeBand() / 2 + params.viz.border_width;\n    // reduce width of rotated rects\n    var reduce_rect_width = params.matrix.x_scale.rangeBand() * 0.36;\n\n    svg_group.selectAll('.col_label_text').data(col_nodes, function (d) {\n      return d.name;\n    }).transition().delay(delays.update).duration(duration).attr('transform', function (d) {\n      var inst_index = _.indexOf(col_nodes_names, d.name);\n      return 'translate(' + params.matrix.x_scale(inst_index) + ') rotate(-90)';\n    });\n\n    svg_group.selectAll('.col_label_click').transition().delay(delays.update).duration(duration).attr('transform', 'translate(' + params.matrix.x_scale.rangeBand() / 2 + ',' + x_offset_click + ') rotate(45)');\n\n    svg_group.selectAll('.col_label_click').select('text').style('font-size', params.labels.default_fs_col + 'px').text(function (d) {\n      return normal_name(d);\n    });\n\n    svg_group.selectAll('.col_label_click').select('text').transition().delay(delays.update).duration(duration).attr('y', params.matrix.x_scale.rangeBand() * 0.60).attr('dx', 2 * params.viz.border_width);\n  } else {\n\n    svg_group.select(params.root + ' .col_container').attr('transform', 'translate(' + params.viz.clust.margin.left + ',' + params.norm_label.margin.top + ')');\n\n    svg_group.select(params.root + ' .col_container').select('.white_bars').attr('width', 30 * params.viz.clust.dim.width + 'px').attr('height', params.norm_label.background.col);\n\n    svg_group.select(params.root + ' .col_container').select('.col_label_outer_container').attr('transform', 'translate(0,' + params.norm_label.width.col + ')');\n\n    // offset click group column label\n    var x_offset_click = params.matrix.x_scale.rangeBand() / 2 + params.viz.border_width;\n    // reduce width of rotated rects\n    var reduce_rect_width = params.matrix.x_scale.rangeBand() * 0.36;\n\n    svg_group.selectAll('.col_label_text').data(col_nodes, function (d) {\n      return d.name;\n    }).attr('transform', function (d) {\n      var inst_index = _.indexOf(col_nodes_names, d.name);\n      return 'translate(' + params.matrix.x_scale(inst_index) + ') rotate(-90)';\n    });\n\n    svg_group.selectAll('.col_label_click').attr('transform', 'translate(' + params.matrix.x_scale.rangeBand() / 2 + ',' + x_offset_click + ') rotate(45)');\n\n    svg_group.selectAll('.col_label_click').select('text').style('font-size', params.labels.default_fs_col + 'px').text(function (d) {\n      return normal_name(d);\n    });\n\n    svg_group.selectAll('.col_label_click').select('text').attr('y', params.matrix.x_scale.rangeBand() * 0.60).attr('dx', 2 * params.viz.border_width);\n  }\n\n  params.bounding_width_max.col = 0;\n  svg_group.selectAll('.col_label_click').each(function () {\n    var tmp_width = d3.select(this).select('text').node().getBBox().width;\n    if (tmp_width > params.bounding_width_max.col) {\n      params.bounding_width_max.col = tmp_width;\n    }\n  });\n\n  if (params.bounding_width_max.col > params.norm_label.width.col) {\n\n    // calc reduction in font size\n    params.ini_scale_font.col = params.norm_label.width.col / params.bounding_width_max.col;\n    // redefine bounding_width_max.col\n    params.bounding_width_max.col = params.ini_scale_font.col * params.bounding_width_max.col;\n    // redefine default fs\n    params.labels.default_fs_col = params.labels.default_fs_col * params.ini_scale_font.col;\n    // reduce font size\n    d3.selectAll('.col_label_click').each(function () {\n      d3.select(this).select('text').style('font-size', params.labels.default_fs_col + 'px');\n    });\n    // .attr('y', params.matrix.rect_width * 0.5 + params.labels.default_fs_col*0.25 )\n  }\n\n  svg_group.selectAll('.col_label_click').each(function () {\n    d3.select(this).select('text')[0][0].getBBox();\n    // d3.select(this)\n    //   .select('rect')\n    //   .attr('x', bbox.x * 1.25)\n    //   .attr('y', 0)\n    //   .attr('width', bbox.width * 1.25)\n    //   .attr('height', params.matrix.x_scale.rangeBand() * 0.6)\n    //   .style('fill', 'yellow')\n    //   .style('opacity', 0);\n  });\n\n  if (delays.run_transition) {\n\n    // resize column triangle\n    svg_group.selectAll('.col_label_click').select('path').transition().delay(delays.update).duration(duration).attr('d', function () {\n      // x and y are flipped since its rotated\n      var origin_y = -params.viz.border_width;\n      var start_x = 0;\n      var final_x = params.matrix.x_scale.rangeBand() - reduce_rect_width;\n      var start_y = -(params.matrix.x_scale.rangeBand() - reduce_rect_width + params.viz.border_width);\n      var final_y = -params.viz.border_width;\n      var output_string = 'M ' + origin_y + ',0 L ' + start_y + ',' + start_x + ', L ' + final_y + ',' + final_x + ' Z';\n      return output_string;\n    }).attr('fill', function (d) {\n      var inst_color = '#eee';\n      if (params.labels.show_categories) {\n        inst_color = params.labels.class_colors.col[d.cl];\n      }\n      return inst_color;\n    });\n  } else {\n    // resize column triangle\n    svg_group.selectAll('.col_label_click').select('path').attr('d', function () {\n      // x and y are flipped since its rotated\n      var origin_y = -params.viz.border_width;\n      var start_x = 0;\n      var final_x = params.matrix.x_scale.rangeBand() - reduce_rect_width;\n      var start_y = -(params.matrix.x_scale.rangeBand() - reduce_rect_width + params.viz.border_width);\n      var final_y = -params.viz.border_width;\n      var output_string = 'M ' + origin_y + ',0 L ' + start_y + ',' + start_x + ', L ' + final_y + ',' + final_x + ' Z';\n      return output_string;\n    }).attr('fill', function (d) {\n      var inst_color = '#eee';\n      if (params.labels.show_categories) {\n        inst_color = params.labels.class_colors.col[d.cl];\n      }\n      return inst_color;\n    });\n  }\n\n  // append column value bars\n  if (utils.has(params.network_data.col_nodes[0], 'value')) {\n\n    console.log('resizing col bars');\n\n    svg_group.selectAll('.col_bars').data(col_nodes, function (d) {\n      return d.name;\n    }).transition().delay(delays.update).duration(duration).attr('width', function (d) {\n      var inst_value = 0;\n      if (d.value > 0) {\n\n        console.log(String(d.name) + ' ' + String(d.value) + '\\n\\n');\n        inst_value = params.labels.bar_scale_col(d.value);\n      }\n      return inst_value;\n    })\n    // rotate labels - reduce width if rotating\n    .attr('height', params.matrix.x_scale.rangeBand() * 0.66);\n  }\n\n  if (params.labels.show_categories) {\n    // change the size of the highlighting rects\n    d3.selectAll('.col_label_click').each(function (d) {\n      var bbox = d3.select(this).select('text')[0][0].getBBox();\n\n      d3.select(this).select('rect').transition().delay(delays.update).duration(duration).attr('width', bbox.width * 1.1).attr('height', 0.67 * params.matrix.rect_width).style('fill', function (d) {\n        var inst_color = 'white';\n        if (params.labels.show_categories) {\n          inst_color = params.labels.class_colors.col[d.cl];\n        }\n        return inst_color;\n      }).style('opacity', 0.30);\n    });\n  }\n\n  // resize dendrogram\n  ///////////////////\n\n  if (delays.run_transition) {\n\n    svg_group.selectAll('.row_class_rect').transition().delay(delays.update).duration(duration).attr('width', function () {\n      var inst_width = params.class_room.symbol_width - 1;\n      return inst_width + 'px';\n    }).attr('height', params.matrix.y_scale.rangeBand()).attr('x', function () {\n      var inst_offset = params.class_room.symbol_width + 1;\n      return inst_offset + 'px';\n    });\n\n    svg_group.selectAll('.col_class_rect').transition().delay(delays.update).duration(duration).attr('width', params.matrix.x_scale.rangeBand()).attr('height', function () {\n      var inst_height = params.class_room.col - 1;\n      return inst_height;\n    });\n\n    svg_group.selectAll('.col_viz_group').data(col_nodes, function (d) {\n      return d.name;\n    }).transition().delay(delays.update).duration(duration).attr('transform', function (d) {\n      var inst_index = _.indexOf(col_nodes_names, d.name);\n      return 'translate(' + params.matrix.x_scale(inst_index) + ',0)';\n    });\n  } else {\n\n    svg_group.selectAll('.row_class_rect').attr('width', function () {\n      var inst_width = params.class_room.symbol_width - 1;\n      return inst_width + 'px';\n    }).attr('height', params.matrix.y_scale.rangeBand()).attr('x', function () {\n      var inst_offset = params.class_room.symbol_width + 1;\n      return inst_offset + 'px';\n    });\n\n    svg_group.selectAll('.col_class_rect').attr('width', params.matrix.x_scale.rangeBand()).attr('height', function () {\n      var inst_height = params.class_room.col - 1;\n      return inst_height;\n    });\n\n    svg_group.selectAll('.col_viz_group').data(col_nodes, function (d) {\n      return d.name;\n    }).attr('transform', function (d) {\n      var inst_index = _.indexOf(col_nodes_names, d.name);\n      return 'translate(' + params.matrix.x_scale(inst_index) + ',0)';\n    });\n  }\n\n  // reposition grid lines\n  ////////////////////////////\n  svg_group.selectAll('.horz_lines').data(row_nodes, function (d) {\n    return d.name;\n  })\n  // .transition().delay(delays.update).duration(duration)\n  .attr('transform', function (d) {\n    var inst_index = _.indexOf(row_nodes_names, d.name);\n    return 'translate(0,' + params.matrix.y_scale(inst_index) + ') rotate(0)';\n  });\n\n  svg_group.selectAll('.horz_lines').select('line')\n  // .transition().delay(delays.update).duration(duration)\n  .attr('x2', params.viz.clust.dim.width).style('stroke-width', params.viz.border_width / params.viz.zoom_switch + 'px');\n\n  svg_group.selectAll('.vert_lines').data(col_nodes, function (d) {\n    return d.name;\n  })\n  // .transition().delay(delays.update).duration(duration)\n  .attr('transform', function (d) {\n    var inst_index = _.indexOf(col_nodes_names, d.name);\n    return 'translate(' + params.matrix.x_scale(inst_index) + ') rotate(-90)';\n  });\n\n  svg_group.selectAll('.vert_lines').select('line')\n  // .transition().delay(delays.update).duration(duration)\n  .attr('x2', -params.viz.clust.dim.height).style('stroke-width', params.viz.border_width + 'px');\n\n  // resize superlabels\n  /////////////////////////////////////\n  svg_group.select('.super_col_bk g')\n  // .transition().delay(delays.update).duration(duration)\n  .attr('height', params.labels.super_label_width + 'px').attr('transform', 'translate(0,' + params.viz.grey_border_width + ')');\n\n  // super col title\n  svg_group.select('.super_col')\n  // .transition().delay(delays.update).duration(duration)\n  .attr('transform', function () {\n    var inst_x = params.viz.clust.dim.width / 2 + params.norm_label.width.row;\n    var inst_y = params.labels.super_label_width - params.viz.uni_margin;\n    return 'translate(' + inst_x + ',' + inst_y + ')';\n  });\n\n  // super row title\n  svg_group.select('.super_row_bkg')\n  // .transition().delay(delays.update).duration(duration)\n  .attr('width', params.labels.super_label_width + 'px').attr('transform', 'translate(' + params.viz.grey_border_width + ',0)');\n\n  // append super title row group\n  svg_group.select('.super_row')\n  // .transition().delay(delays.update).duration(duration)\n  .attr('transform', function () {\n    var inst_x = params.labels.super_label_width - params.viz.uni_margin;\n    var inst_y = params.viz.clust.dim.height / 2 + params.norm_label.width.col;\n    return 'translate(' + inst_x + ',' + inst_y + ')';\n  });\n\n  // resize spillover\n  //////////////////////////\n  // hide spillover from slanted column labels on right side\n  svg_group.select('.right_slant_triangle').transition().delay(delays.update).duration(duration).attr('transform', 'translate(' + params.viz.clust.dim.width + ',' + params.norm_label.width.col + ')');\n\n  svg_group.select('.left_slant_triangle').transition().delay(delays.update).duration(duration).attr('transform', 'translate(-1,' + params.norm_label.width.col + ')');\n\n  svg_group.select('.top_left_white').transition().delay(delays.update).duration(duration).attr('width', params.viz.clust.margin.left).attr('height', params.viz.clust.margin.top);\n\n  svg_group.select('.right_spillover').transition().delay(delays.update).duration(duration).attr('transform', function () {\n    var tmp_left = params.viz.clust.margin.left + params.viz.clust.dim.width;\n    var tmp_top = params.norm_label.margin.top + params.norm_label.width.col;\n    return 'translate(' + tmp_left + ',' + tmp_top + ')';\n  });\n\n  // white border bottom - prevent clustergram from hitting border\n  svg_group.select('.bottom_spillover').transition().delay(delays.update).duration(duration).attr('width', params.viz.svg_dim.width).attr('height', 2 * params.viz.grey_border_width).attr('transform', function () {\n    // shift up enough to show the entire border width\n    var inst_offset = params.viz.svg_dim.height - 3 * params.viz.grey_border_width;\n    return 'translate(0,' + inst_offset + ')';\n  });\n\n  // reset zoom and translate\n  //////////////////////////////\n  params.zoom_behavior.scale(1).translate([params.viz.clust.margin.left, params.viz.clust.margin.top]);\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL3Jlc2V0X3NpemUvcmVzZXRfc2l6ZV9hZnRlcl91cGRhdGUuanM/NjNmYyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHBhcmFtcywgcm93X25vZGVzLCBjb2xfbm9kZXMsIGxpbmtzLCBkdXJhdGlvbiwgZGVsYXlzKSB7XG5cbiAgdmFyIHJvd19ub2Rlc19uYW1lcyA9IHBhcmFtcy5uZXR3b3JrX2RhdGEucm93X25vZGVzX25hbWVzO1xuICB2YXIgY29sX25vZGVzX25hbWVzID0gcGFyYW1zLm5ldHdvcmtfZGF0YS5jb2xfbm9kZXNfbmFtZXM7XG5cbiAgLy8gcmVzZXQgem9vbVxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgdmFyIHpvb21feSA9IDE7XG4gIHZhciB6b29tX3ggPSAxO1xuICB2YXIgcGFuX2R4ID0gMDtcbiAgdmFyIHBhbl9keSA9IDA7XG5cbiAgdmFyIGhhbGZfaGVpZ2h0ID0gcGFyYW1zLnZpei5jbHVzdC5kaW0uaGVpZ2h0IC8gMjtcbiAgdmFyIGNlbnRlcl95ID0gLSh6b29tX3kgLSAxKSAqIGhhbGZfaGVpZ2h0O1xuXG4gIGQzLnNlbGVjdChwYXJhbXMucm9vdCArICcgLmNsdXN0X2dyb3VwJylcbiAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgWzAsIDAgKyBjZW50ZXJfeV0gKyAnKScgK1xuICAgICcgc2NhbGUoJyArIDEgKyAnLCcgKyB6b29tX3kgKyAnKScgKyAndHJhbnNsYXRlKCcgKyBbcGFuX2R4LHBhbl9keV0gKyAnKScpO1xuXG4gIGQzLnNlbGVjdChwYXJhbXMucm9vdCsnIC5yb3dfbGFiZWxfem9vbV9jb250YWluZXInKVxuICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyBbMCwgY2VudGVyX3ldICsgJyknICsgJyBzY2FsZSgnICtcbiAgICB6b29tX3kgKyAnLCcgKyB6b29tX3kgKyAnKScgKyAndHJhbnNsYXRlKCcgKyBbMCwgcGFuX2R5XSArICcpJyk7XG5cbiAgZDMuc2VsZWN0KHBhcmFtcy5yb290KycgLnJvd196b29tX2NvbnRhaW5lcicpXG4gICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJyArIFswLCBjZW50ZXJfeV0gKyAnKScgKyAnIHNjYWxlKCcgK1xuICAgIDEgKyAnLCcgKyB6b29tX3kgKyAnKScgKyAndHJhbnNsYXRlKCcgKyBbMCwgcGFuX2R5XSArICcpJyk7XG5cbiAgZDMuc2VsZWN0KHBhcmFtcy5yb290KycgLmNvbF96b29tX2NvbnRhaW5lcicpXG4gICAgLmF0dHIoJ3RyYW5zZm9ybScsICcgc2NhbGUoJyArIDEgKyAnLCcgKyAxICsgJyknICsgJ3RyYW5zbGF0ZSgnICsgW3Bhbl9keCwgMF0gKyAnKScpO1xuXG4gIGQzLnNlbGVjdCgnLmNvbF92aXpfem9vbV9jb250YWluZXInKVxuICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAnIHNjYWxlKCcgKyAxICsgJywnICsgMSArICcpJyArICd0cmFuc2xhdGUoJyArIFtwYW5fZHgsIDBdICsgJyknKTtcblxuICAvLyBzZXQgeSB0cmFuc2xhdGU6IGNlbnRlcl95IGlzIHBvc2l0aXZlLCBwb3NpdGl2ZSBtb3ZlcyB0aGUgdmlzdWFsaXphdGlvbiBkb3duXG4gIC8vIHRoZSB0cmFuc2xhdGUgdmVjdG9yIGhhcyB0aGUgaW5pdGlhbCBtYXJnaW4sIHRoZSBmaXJzdCB5IGNlbnRlcmluZywgYW5kIHBhbl9keVxuICAvLyB0aW1lcyB0aGUgc2NhbGluZyB6b29tX3lcbiAgdmFyIG5ldF95X29mZnNldCA9IHBhcmFtcy52aXouY2x1c3QubWFyZ2luLnRvcCArIGNlbnRlcl95ICsgcGFuX2R5ICogem9vbV95O1xuXG5cbiAgLy8gUmVzZXR0aW5nIHNvbWUgdmlzdWFsaXphdGlvbiBwYXJhbWV0ZXJzXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgLy8gZ2V0IGhlaWdodCBhbmQgd2lkdGggZnJvbSBwYXJlbnQgZGl2XG4gIHBhcmFtcy52aXouc3ZnX2RpbSA9IHt9O1xuICBwYXJhbXMudml6LnN2Z19kaW0ud2lkdGggID0gTnVtYmVyKGQzLnNlbGVjdChwYXJhbXMudml6LnZpel93cmFwcGVyKS5zdHlsZSgnd2lkdGgnKS5yZXBsYWNlKCdweCcsICcnKSk7XG4gIHBhcmFtcy52aXouc3ZnX2RpbS5oZWlnaHQgPSBOdW1iZXIoZDMuc2VsZWN0KHBhcmFtcy52aXoudml6X3dyYXBwZXIpLnN0eWxlKCdoZWlnaHQnKS5yZXBsYWNlKCdweCcsICcnKSk7XG5cbiAgLy8gcmVkdWNlIHdpZHRoIGJ5IHJvdy9jb2wgbGFiZWxzIGFuZCBieSBncmV5X2JvcmRlciB3aWR0aCAocmVkdWNlIHdpZHRoIGJ5IGxlc3Mgc2luY2UgdGhpcyBpcyBsZXNzIGFwYXJlbnQgd2l0aCBzbGFudGVkIGNvbCBsYWJlbHMpXG4gIHZhciBpbmlfY2x1c3Rfd2lkdGggPSBwYXJhbXMudml6LnN2Z19kaW0ud2lkdGggLSAocGFyYW1zLmxhYmVscy5zdXBlcl9sYWJlbF93aWR0aCArXG4gICAgcGFyYW1zLm5vcm1fbGFiZWwud2lkdGgucm93ICsgcGFyYW1zLmNsYXNzX3Jvb20ucm93KSAtIHBhcmFtcy52aXouZ3JleV9ib3JkZXJfd2lkdGggLSBwYXJhbXMudml6LnNwaWxsb3Zlcl94X29mZnNldDtcblxuICAvLyB0aGVyZSBpcyBzcGFjZSBiZXR3ZWVuIHRoZSBjbHVzdGVyZ3JhbSBhbmQgdGhlIGJvcmRlclxuICB2YXIgaW5pX2NsdXN0X2hlaWdodCA9IHBhcmFtcy52aXouc3ZnX2RpbS5oZWlnaHQgLSAocGFyYW1zLmxhYmVscy5zdXBlcl9sYWJlbF93aWR0aCArXG4gICAgcGFyYW1zLm5vcm1fbGFiZWwud2lkdGguY29sICsgcGFyYW1zLmNsYXNzX3Jvb20uY29sKSAtIDUgKiBwYXJhbXMudml6LmdyZXlfYm9yZGVyX3dpZHRoO1xuXG4gIC8vIHJlZHVjZSBjbHVzdGVyZ3JhbSB3aWR0aCBpZiB0cmlhbmdsZXMgYXJlIHRhbGxlciB0aGFuIHRoZSBub3JtYWwgd2lkdGhcbiAgLy8gb2YgdGhlIGNvbHVtbnNcbiAgdmFyIHRtcF94X3NjYWxlID0gZDMuc2NhbGUub3JkaW5hbCgpLnJhbmdlQmFuZHMoWzAsIGluaV9jbHVzdF93aWR0aF0pO1xuICB0bXBfeF9zY2FsZS5kb21haW4ocGFyYW1zLm1hdHJpeC5vcmRlcnMuaW5pX3Jvdyk7XG4gIHZhciB0cmlhbmdsZV9oZWlnaHQgPSB0bXBfeF9zY2FsZS5yYW5nZUJhbmQoKS8yIDtcbiAgaWYgKHRyaWFuZ2xlX2hlaWdodCA+IHBhcmFtcy5ub3JtX2xhYmVsLndpZHRoLmNvbCl7XG4gICAgaW5pX2NsdXN0X3dpZHRoID0gaW5pX2NsdXN0X3dpZHRoICogKCBwYXJhbXMubm9ybV9sYWJlbC53aWR0aC5jb2wvdHJpYW5nbGVfaGVpZ2h0ICk7XG4gIH1cbiAgcGFyYW1zLnZpei5jbHVzdC5kaW0ud2lkdGggPSBpbmlfY2x1c3Rfd2lkdGggO1xuXG4gIC8vIGNsdXN0ZXJncmFtIGhlaWdodFxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gZW5zdXJlIHRoYXQgcmVjdHMgYXJlIG5ldmVyIHRhbGxlciB0aGFuIHRoZXkgYXJlIHdpZGVcbiAgLy8gZm9yY2Ugc3F1YXJlIHRpbGVzXG4gIGlmIChpbmlfY2x1c3Rfd2lkdGggLyBwYXJhbXMudml6Lm51bV9jb2xfbm9kZXMgPCBpbmlfY2x1c3RfaGVpZ2h0IC8gcGFyYW1zLnZpei5udW1fcm93X25vZGVzKSB7XG5cbiAgICAvLyBzY2FsZSB0aGUgaGVpZ2h0XG4gICAgcGFyYW1zLnZpei5jbHVzdC5kaW0uaGVpZ2h0ID0gaW5pX2NsdXN0X3dpZHRoICogKHBhcmFtcy52aXoubnVtX3Jvd19ub2RlcyAvIHBhcmFtcy52aXoubnVtX2NvbF9ub2Rlcyk7XG5cbiAgICAvLyBrZWVwIHRyYWNrIG9mIHdoZXRoZXIgb3Igbm90IGEgZm9yY2Ugc3F1YXJlIGhhcyBvY2N1cnJlZFxuICAgIC8vIHNvIHRoYXQgSSBjYW4gYWRqdXN0IHRoZSBmb250IGFjY29yZGluZ2x5XG4gICAgcGFyYW1zLnZpei5mb3JjZV9zcXVhcmUgPSAxO1xuXG4gICAgLy8gbWFrZSBzdXJlIHRoYXQgZm9yY2Vfc3F1YXJlIGRvZXMgbm90IGNhdXNlIHRoZSBlbnRpcmUgdmlzdWFsaXphdGlvblxuICAgIC8vIHRvIGJlIHRhbGxlciB0aGFuIHRoZSBzdmcsIGlmIGl0IGRvZXMsIHRoZW4gdW5kb1xuICAgIGlmIChwYXJhbXMudml6LmNsdXN0LmRpbS5oZWlnaHQgPiBpbmlfY2x1c3RfaGVpZ2h0KSB7XG4gICAgLy8gbWFrZSB0aGUgaGVpZ2h0IGVxdWFsIHRvIHRoZSB3aWR0aFxuICAgIHBhcmFtcy52aXouY2x1c3QuZGltLmhlaWdodCA9IGluaV9jbHVzdF9oZWlnaHQ7XG4gICAgLy8ga2VlcCB0cmFjayBvZiB3aGV0aGVyIG9yIG5vdCBhIGZvcmNlIHNxdWFyZSBoYXMgb2NjdXJyZWRcbiAgICBwYXJhbXMudml6LmZvcmNlX3NxdWFyZSA9IDA7XG4gICAgfVxuICB9XG4gIC8vIGRvIG5vdCBmb3JjZSBzcXVhcmUgdGlsZXNcbiAgZWxzZSB7XG4gICAgLy8gdGhlIGhlaWdodCB3aWxsIGJlIGNhbGN1bGF0ZWQgbm9ybWFsbHkgLSBsZWFkaW5nIHRvIHdpZGUgdGlsZXNcbiAgICBwYXJhbXMudml6LmNsdXN0LmRpbS5oZWlnaHQgPSBpbmlfY2x1c3RfaGVpZ2h0O1xuICAgIC8vIGtlZXAgdHJhY2sgb2Ygd2hldGhlciBvciBub3QgYSBmb3JjZSBzcXVhcmUgaGFzIG9jY3VycmVkXG4gICAgcGFyYW1zLnZpei5mb3JjZV9zcXVhcmUgPSAwO1xuICB9XG5cbiAgLy8gem9vbV9zd2l0Y2ggZnJvbSAxIHRvIDJkIHpvb21cbiAgcGFyYW1zLnZpei56b29tX3N3aXRjaCA9IChwYXJhbXMudml6LmNsdXN0LmRpbS53aWR0aCAvIHBhcmFtcy52aXoubnVtX2NvbF9ub2RlcykgLyAocGFyYW1zLnZpei5jbHVzdC5kaW0uaGVpZ2h0IC8gcGFyYW1zLnZpei5udW1fcm93X25vZGVzKTtcblxuICAvLyB6b29tX3N3aXRjaCBjYW4gbm90IGJlIGxlc3MgdGhhbiAxXG4gIGlmIChwYXJhbXMudml6Lnpvb21fc3dpdGNoIDwgMSkge1xuICAgIHBhcmFtcy52aXouem9vbV9zd2l0Y2ggPSAxO1xuICB9XG5cblxuICAvLyByZWRlZmluZSB4X3NjYWxlIGFuZCB5X3NjYWxlIHJhbmdlQmFuZHNcbiAgcGFyYW1zLm1hdHJpeC54X3NjYWxlLnJhbmdlQmFuZHMoWzAsIHBhcmFtcy52aXouY2x1c3QuZGltLndpZHRoXSk7XG4gIHBhcmFtcy5tYXRyaXgueV9zY2FsZS5yYW5nZUJhbmRzKFswLCBwYXJhbXMudml6LmNsdXN0LmRpbS5oZWlnaHRdKTtcblxuICAvLyByZWRlZmluZSB6b29tIGV4dGVudFxuICBwYXJhbXMudml6LnJlYWxfem9vbSA9IHBhcmFtcy5ub3JtX2xhYmVsLndpZHRoLmNvbCAvIChwYXJhbXMubWF0cml4Lnhfc2NhbGUucmFuZ2VCYW5kKCkvMik7XG4gIHBhcmFtcy56b29tX2JlaGF2aW9yXG4gICAgLnNjYWxlRXh0ZW50KFsxLCBwYXJhbXMudml6LnJlYWxfem9vbSAqIHBhcmFtcy52aXouem9vbV9zd2l0Y2hdKTtcblxuICAvLyByZWRlZmluZSBib3JkZXIgd2lkdGhcbiAgcGFyYW1zLnZpei5ib3JkZXJfd2lkdGggPSBwYXJhbXMubWF0cml4Lnhfc2NhbGUucmFuZ2VCYW5kKCkgLyA0MDtcblxuICAvLyB0aGUgZGVmYXVsdCBmb250IHNpemVzIGFyZSBzZXQgaGVyZVxuICBwYXJhbXMubGFiZWxzLmRlZmF1bHRfZnNfcm93ID0gcGFyYW1zLm1hdHJpeC55X3NjYWxlLnJhbmdlQmFuZCgpICogMS4wMTtcbiAgcGFyYW1zLmxhYmVscy5kZWZhdWx0X2ZzX2NvbCA9IHBhcmFtcy5tYXRyaXgueF9zY2FsZS5yYW5nZUJhbmQoKSAqIDAuODU7XG5cblxuXG4gIC8vIEJlZ2luIHJlc2l6aW5nIHRoZSB2aXN1YWxpemF0aW9uXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgLy8gcmVzaXplIHRoZSBzdmdcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgdmFyIHN2Z19ncm91cCA9IGQzLnNlbGVjdChwYXJhbXMudml6LnZpel93cmFwcGVyKVxuICAgIC5zZWxlY3QoJ3N2ZycpO1xuXG4gIHN2Z19ncm91cC5zZWxlY3QocGFyYW1zLnJvb3QrJyAuZ3JleV9iYWNrZ3JvdW5kJylcbiAgICAudHJhbnNpdGlvbigpLmRlbGF5KGRlbGF5cy51cGRhdGUpLmR1cmF0aW9uKGR1cmF0aW9uKVxuICAgIC5hdHRyKCd3aWR0aCcsIHBhcmFtcy52aXouY2x1c3QuZGltLndpZHRoKVxuICAgIC5hdHRyKCdoZWlnaHQnLCBwYXJhbXMudml6LmNsdXN0LmRpbS5oZWlnaHQpO1xuXG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBzZXQgdXAgbGF0ZXJcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBzdmdfZ3JvdXAuc2VsZWN0QWxsKCcuaGlnaGxpZ2h0aW5nX3JlY3QnKVxuICAvLyAgIC8vIC50cmFuc2l0aW9uKCkuZGVsYXkoZGVsYXlzLnVwZGF0ZSkuZHVyYXRpb24oZHVyYXRpb24pXG4gIC8vICAgLmF0dHIoJ3dpZHRoJywgcGFyYW1zLm1hdHJpeC54X3NjYWxlLnJhbmdlQmFuZCgpICogMC44MClcbiAgLy8gICAuYXR0cignaGVpZ2h0JywgcGFyYW1zLm1hdHJpeC55X3NjYWxlLnJhbmdlQmFuZCgpICogMC44MCk7XG4gIC8vIHN2Z19ncm91cC5zZWxlY3RBbGwoJy50aWxlX3NwbGl0X3VwJylcbiAgLy8gICAvLyAudHJhbnNpdGlvbigpLmRlbGF5KGRlbGF5cy51cGRhdGUpLmR1cmF0aW9uKGR1cmF0aW9uKVxuICAvLyAgIC5hdHRyKCdkJywgZnVuY3Rpb24oKSB7XG4gIC8vICAgICB2YXIgc3RhcnRfeCA9IDA7XG4gIC8vICAgICB2YXIgZmluYWxfeCA9IHBhcmFtcy5tYXRyaXgueF9zY2FsZS5yYW5nZUJhbmQoKTtcbiAgLy8gICAgIHZhciBzdGFydF95ID0gMDtcbiAgLy8gICAgIHZhciBmaW5hbF95ID0gcGFyYW1zLm1hdHJpeC55X3NjYWxlLnJhbmdlQmFuZCgpIC0gcGFyYW1zLm1hdHJpeC55X3NjYWxlLnJhbmdlQmFuZCgpLzYwO1xuICAvLyAgICAgdmFyIG91dHB1dF9zdHJpbmcgPSAnTScgKyBzdGFydF94ICsgJywnICsgc3RhcnRfeSArICcsIEwnICtcbiAgLy8gICAgICAgc3RhcnRfeCArICcsICcgKyBmaW5hbF95ICsgJywgTCcgKyBmaW5hbF94ICsgJywwIFonO1xuICAvLyAgICAgcmV0dXJuIG91dHB1dF9zdHJpbmc7XG4gIC8vICAgfSlcbiAgLy8gc3ZnX2dyb3VwLnNlbGVjdEFsbCgnLnRpbGVfc3BsaXRfZG4nKVxuICAvLyAgIC8vIC50cmFuc2l0aW9uKCkuZGVsYXkoZGVsYXlzLnVwZGF0ZSkuZHVyYXRpb24oZHVyYXRpb24pXG4gIC8vICAgLmF0dHIoJ2QnLCBmdW5jdGlvbigpIHtcbiAgLy8gICAgIHZhciBzdGFydF94ID0gMDtcbiAgLy8gICAgIHZhciBmaW5hbF94ID0gcGFyYW1zLm1hdHJpeC54X3NjYWxlLnJhbmdlQmFuZCgpO1xuICAvLyAgICAgdmFyIHN0YXJ0X3kgPSBwYXJhbXMubWF0cml4Lnlfc2NhbGUucmFuZ2VCYW5kKCkgLSBwYXJhbXMubWF0cml4Lnlfc2NhbGUucmFuZ2VCYW5kKCkvNjA7XG4gIC8vICAgICB2YXIgZmluYWxfeSA9IHBhcmFtcy5tYXRyaXgueV9zY2FsZS5yYW5nZUJhbmQoKSAtIHBhcmFtcy5tYXRyaXgueV9zY2FsZS5yYW5nZUJhbmQoKS82MDtcbiAgLy8gICAgIHZhciBvdXRwdXRfc3RyaW5nID0gJ00nICsgc3RhcnRfeCArICcsICcgKyBzdGFydF95ICsgJyAsICAgTCcgK1xuICAvLyAgICAgICBmaW5hbF94ICsgJywgJyArIGZpbmFsX3kgKyAnLCAgTCcgKyBmaW5hbF94ICsgJywwIFonO1xuICAvLyAgICAgcmV0dXJuIG91dHB1dF9zdHJpbmc7XG4gIC8vICAgfSlcblxuICAvLyBhZGQgdGV4dCB0byByb3cvY29sIGR1cmluZyByZXNpemVcbiAgZnVuY3Rpb24gbm9ybWFsX25hbWUoZCl7XG4gICAgdmFyIGluc3RfbmFtZSA9IGQubmFtZS5yZXBsYWNlKC9fL2csICcgJykuc3BsaXQoJyMnKVswXTtcbiAgICBpZiAoaW5zdF9uYW1lLmxlbmd0aCA+IHBhcmFtcy5sYWJlbHMubWF4X2xhYmVsX2NoYXIpe1xuICAgICAgaW5zdF9uYW1lID0gaW5zdF9uYW1lLnN1YnN0cmluZygwLHBhcmFtcy5sYWJlbHMubWF4X2xhYmVsX2NoYXIpKycuLic7XG4gICAgfVxuICAgIHJldHVybiBpbnN0X25hbWU7XG4gIH1cblxuICAvLyByZXNpemUgcm93IGxhYmVsc1xuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICBpZiAoZGVsYXlzLnJ1bl90cmFuc2l0aW9uKXtcblxuICAgIHN2Z19ncm91cC5zZWxlY3QocGFyYW1zLnJvb3QrJyAucm93X2NvbnRhaW5lcicpXG4gICAgICAudHJhbnNpdGlvbigpLmRlbGF5KGRlbGF5cy51cGRhdGUpLmR1cmF0aW9uKGR1cmF0aW9uKVxuICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJyArIHBhcmFtcy5ub3JtX2xhYmVsLm1hcmdpbi5sZWZ0ICsgJywnICtcbiAgICAgIHBhcmFtcy52aXouY2x1c3QubWFyZ2luLnRvcCArICcpJyk7XG5cbiAgICBzdmdfZ3JvdXAuc2VsZWN0KHBhcmFtcy5yb290KycgLnJvd19jb250YWluZXInKVxuICAgICAgLnNlbGVjdCgnLndoaXRlX2JhcnMnKVxuICAgICAgLnRyYW5zaXRpb24oKS5kZWxheShkZWxheXMudXBkYXRlKS5kdXJhdGlvbihkdXJhdGlvbilcbiAgICAgIC5hdHRyKCd3aWR0aCcsIHBhcmFtcy5ub3JtX2xhYmVsLmJhY2tncm91bmQucm93KVxuICAgICAgLmF0dHIoJ2hlaWdodCcsIDMwKnBhcmFtcy52aXouY2x1c3QuZGltLmhlaWdodCArICdweCcpO1xuXG4gICAgc3ZnX2dyb3VwLnNlbGVjdChwYXJhbXMucm9vdCsnIC5yb3dfY29udGFpbmVyJylcbiAgICAgIC5zZWxlY3QoJy5yb3dfbGFiZWxfY29udGFpbmVyJylcbiAgICAgIC50cmFuc2l0aW9uKCkuZGVsYXkoZGVsYXlzLnVwZGF0ZSkuZHVyYXRpb24oZHVyYXRpb24pXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgcGFyYW1zLm5vcm1fbGFiZWwud2lkdGgucm93ICsgJywwKScpO1xuXG4gICAgc3ZnX2dyb3VwLnNlbGVjdEFsbCgnLnJvd19sYWJlbF90ZXh0JylcbiAgICAgIC5kYXRhKHJvd19ub2RlcywgZnVuY3Rpb24oZCl7cmV0dXJuIGQubmFtZTt9KVxuICAgICAgLnRyYW5zaXRpb24oKS5kZWxheShkZWxheXMudXBkYXRlKS5kdXJhdGlvbihkdXJhdGlvbilcbiAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbihkKSB7XG4gICAgICAgIHZhciBpbnN0X2luZGV4ID0gXy5pbmRleE9mKHJvd19ub2Rlc19uYW1lcywgZC5uYW1lKTtcbiAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoMCwnICsgcGFyYW1zLm1hdHJpeC55X3NjYWxlKGluc3RfaW5kZXgpICsgJyknO1xuICAgICAgfSlcbiAgICAgIC5hdHRyKCd5JywgcGFyYW1zLm1hdHJpeC5yZWN0X2hlaWdodCAqIDAuNSArIHBhcmFtcy5sYWJlbHMuZGVmYXVsdF9mc19yb3cqMC4zNSApO1xuXG4gIH0gZWxzZSB7XG4gICAgICBzdmdfZ3JvdXAuc2VsZWN0KHBhcmFtcy5yb290KycgLnJvd19jb250YWluZXInKVxuICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJyArIHBhcmFtcy5ub3JtX2xhYmVsLm1hcmdpbi5sZWZ0ICsgJywnICtcbiAgICAgIHBhcmFtcy52aXouY2x1c3QubWFyZ2luLnRvcCArICcpJyk7XG5cbiAgICBzdmdfZ3JvdXAuc2VsZWN0KHBhcmFtcy5yb290KycgLnJvd19jb250YWluZXInKVxuICAgICAgLnNlbGVjdCgnLndoaXRlX2JhcnMnKVxuICAgICAgLmF0dHIoJ3dpZHRoJywgcGFyYW1zLm5vcm1fbGFiZWwuYmFja2dyb3VuZC5yb3cpXG4gICAgICAuYXR0cignaGVpZ2h0JywgMzAqcGFyYW1zLnZpei5jbHVzdC5kaW0uaGVpZ2h0ICsgJ3B4Jyk7XG5cbiAgICBzdmdfZ3JvdXAuc2VsZWN0KHBhcmFtcy5yb290ICsgJyAucm93X2NvbnRhaW5lcicpXG4gICAgICAuc2VsZWN0KCcucm93X2xhYmVsX2NvbnRhaW5lcicpXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgcGFyYW1zLm5vcm1fbGFiZWwud2lkdGgucm93ICsgJywwKScpO1xuXG4gICAgc3ZnX2dyb3VwLnNlbGVjdEFsbCgnLnJvd19sYWJlbF90ZXh0JylcbiAgICAgIC5kYXRhKHJvd19ub2RlcywgZnVuY3Rpb24oZCl7cmV0dXJuIGQubmFtZTt9KVxuICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgdmFyIGluc3RfaW5kZXggPSBfLmluZGV4T2Yocm93X25vZGVzX25hbWVzLCBkLm5hbWUpO1xuICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgwLCcgKyBwYXJhbXMubWF0cml4Lnlfc2NhbGUoaW5zdF9pbmRleCkgKyAnKSc7XG4gICAgICB9KVxuICAgICAgLmF0dHIoJ3knLCBwYXJhbXMubWF0cml4LnJlY3RfaGVpZ2h0ICogMC41ICsgcGFyYW1zLmxhYmVscy5kZWZhdWx0X2ZzX3JvdyowLjM1ICk7XG4gIH1cblxuICAgLy8gZG8gbm90IGRlbGF5IHRoZSBmb250IHNpemUgY2hhbmdlIHNpbmNlIHRoaXMgd2lsbCBicmVhayB0aGUgYm91bmRpbmcgYm94IGNhbGNcbiAgc3ZnX2dyb3VwLnNlbGVjdEFsbCgnLnJvd19sYWJlbF90ZXh0JylcbiAgICAuc2VsZWN0KCd0ZXh0JylcbiAgICAuc3R5bGUoJ2ZvbnQtc2l6ZScsIHBhcmFtcy5sYWJlbHMuZGVmYXVsdF9mc19yb3cgKyAncHgnKVxuICAgIC50ZXh0KGZ1bmN0aW9uKGQpeyByZXR1cm4gbm9ybWFsX25hbWUoZCk7fSk7XG5cbiAgLy8gY2hhbmdlIHRoZSBzaXplIG9mIHRoZSBoaWdobGlnaHRpbmcgcmVjdHNcbiAgc3ZnX2dyb3VwLnNlbGVjdEFsbCgnLnJvd19sYWJlbF90ZXh0JylcbiAgICAuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBiYm94ID0gZDMuc2VsZWN0KHRoaXMpLnNlbGVjdCgndGV4dCcpWzBdWzBdLmdldEJCb3goKTtcbiAgICAgIGQzLnNlbGVjdCh0aGlzKVxuICAgICAgICAuc2VsZWN0KCdyZWN0JylcbiAgICAgICAgLmF0dHIoJ3gnLCBiYm94LnggKVxuICAgICAgICAuYXR0cigneScsIDApXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIGJib3gud2lkdGggKVxuICAgICAgICAuYXR0cignaGVpZ2h0JywgcGFyYW1zLm1hdHJpeC55X3NjYWxlLnJhbmdlQmFuZCgpKVxuICAgICAgICAuc3R5bGUoJ2ZpbGwnLCAneWVsbG93JylcbiAgICAgICAgLnN0eWxlKCdvcGFjaXR5JywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgIHZhciBpbnN0X29wYWNpdHkgPSAwO1xuICAgICAgICAgIC8vIGhpZ2hsaWdodCB0YXJnZXQgZ2VuZXNcbiAgICAgICAgICBpZiAoZC50YXJnZXQgPT09IDEpIHtcbiAgICAgICAgICAgIGluc3Rfb3BhY2l0eSA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBpbnN0X29wYWNpdHk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gIC8vIGxhYmVsIHRoZSB3aWRlc3Qgcm93IGFuZCBjb2wgbGFiZWxzXG4gIHBhcmFtcy5ib3VuZGluZ193aWR0aF9tYXggPSB7fTtcbiAgcGFyYW1zLmJvdW5kaW5nX3dpZHRoX21heC5yb3cgPSAwO1xuICBkMy5zZWxlY3RBbGwoJy5yb3dfbGFiZWxfdGV4dCcpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRtcF93aWR0aCA9IGQzLnNlbGVjdCh0aGlzKS5zZWxlY3QoJ3RleHQnKS5ub2RlKCkuZ2V0QkJveCgpLndpZHRoO1xuICAgIGlmICh0bXBfd2lkdGggPiBwYXJhbXMuYm91bmRpbmdfd2lkdGhfbWF4LnJvdykge1xuICAgICAgcGFyYW1zLmJvdW5kaW5nX3dpZHRoX21heC5yb3cgPSB0bXBfd2lkdGg7XG4gICAgfVxuICB9KTtcblxuICAvLyBjaGVjayBpZiB3aWRlc3Qgcm93IG9yIGNvbCBhcmUgd2lkZXIgdGhhbiB0aGUgYWxsb3dlZCBsYWJlbCB3aWR0aFxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgcGFyYW1zLmluaV9zY2FsZV9mb250ID0ge307XG4gIHBhcmFtcy5pbmlfc2NhbGVfZm9udC5yb3cgPSAxO1xuICBwYXJhbXMuaW5pX3NjYWxlX2ZvbnQuY29sID0gMTtcblxuICBpZiAocGFyYW1zLmJvdW5kaW5nX3dpZHRoX21heC5yb3cgPiBwYXJhbXMubm9ybV9sYWJlbC53aWR0aC5yb3cpIHtcblxuICAgIC8vIGNhbGMgcmVkdWN0aW9uIGluIGZvbnQgc2l6ZVxuICAgIHBhcmFtcy5pbmlfc2NhbGVfZm9udC5yb3cgPSBwYXJhbXMubm9ybV9sYWJlbC53aWR0aC5yb3cgLyBwYXJhbXMuYm91bmRpbmdfd2lkdGhfbWF4LnJvdztcbiAgICAvLyByZWRlZmluZSBib3VuZGluZ193aWR0aF9tYXgucm93XG4gICAgcGFyYW1zLmJvdW5kaW5nX3dpZHRoX21heC5yb3cgPSBwYXJhbXMuaW5pX3NjYWxlX2ZvbnQucm93ICogcGFyYW1zLmJvdW5kaW5nX3dpZHRoX21heC5yb3c7XG5cbiAgICAvLyByZWRlZmluZSBkZWZhdWx0IGZzXG4gICAgcGFyYW1zLmxhYmVscy5kZWZhdWx0X2ZzX3JvdyA9IHBhcmFtcy5sYWJlbHMuZGVmYXVsdF9mc19yb3cgKiBwYXJhbXMuaW5pX3NjYWxlX2ZvbnQucm93O1xuICAgIC8vIHJlZHVjZSBmb250IHNpemVcbiAgICBkMy5zZWxlY3RBbGwoJy5yb3dfbGFiZWxfdGV4dCcpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICBkMy5zZWxlY3QodGhpcykuc2VsZWN0KCd0ZXh0JylcbiAgICAgICAgLnN0eWxlKCdmb250LXNpemUnLCBwYXJhbXMubGFiZWxzLmRlZmF1bHRfZnNfcm93ICsgJ3B4Jyk7XG4gICAgfSk7XG4gIH1cblxuICBpZiAoZGVsYXlzLnJ1bl90cmFuc2l0aW9uKXtcblxuICAgIC8vIHBvc2l0aW9uaW5nIHJvdyB0ZXh0IGFmdGVyIHJvdyB0ZXh0IHNpemUgbWF5IGhhdmUgYmVlbiByZWR1Y2VkXG4gICAgc3ZnX2dyb3VwLnNlbGVjdEFsbCgnLnJvd19sYWJlbF90ZXh0JylcbiAgICAgIC5zZWxlY3QoJ3RleHQnKVxuICAgICAgLnRyYW5zaXRpb24oKS5kZWxheShkZWxheXMudXBkYXRlKS5kdXJhdGlvbihkdXJhdGlvbilcbiAgICAgIC5hdHRyKCd5JywgcGFyYW1zLm1hdHJpeC5yZWN0X2hlaWdodCAqIDAuNSArIHBhcmFtcy5sYWJlbHMuZGVmYXVsdF9mc19yb3cqMC4zNSApO1xuXG4gICAgc3ZnX2dyb3VwLnNlbGVjdCgnLnJvd192aXpfY29udGFpbmVyJylcbiAgICAgIC50cmFuc2l0aW9uKCkuZGVsYXkoZGVsYXlzLnVwZGF0ZSkuZHVyYXRpb24oZHVyYXRpb24pXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgcGFyYW1zLm5vcm1fbGFiZWwud2lkdGgucm93ICsgJywwKScpO1xuXG4gICAgc3ZnX2dyb3VwLnNlbGVjdCgnLnJvd192aXpfY29udGFpbmVyJylcbiAgICAgIC50cmFuc2l0aW9uKCkuZGVsYXkoZGVsYXlzLnVwZGF0ZSkuZHVyYXRpb24oZHVyYXRpb24pXG4gICAgICAuc2VsZWN0KCd3aGl0ZV9iYXJzJylcbiAgICAgIC5hdHRyKCd3aWR0aCcsIHBhcmFtcy5jbGFzc19yb29tLnJvdyArICdweCcpXG4gICAgICAuYXR0cignaGVpZ2h0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBpbnN0X2hlaWdodCA9IHBhcmFtcy52aXouY2x1c3QuZGltLmhlaWdodDtcbiAgICAgICAgcmV0dXJuIGluc3RfaGVpZ2h0O1xuICAgICAgfSk7XG5cbiAgICBzdmdfZ3JvdXAuc2VsZWN0QWxsKCcucm93X3Zpel9ncm91cCcpXG4gICAgICAuZGF0YShyb3dfbm9kZXMsIGZ1bmN0aW9uKGQpe3JldHVybiBkLm5hbWU7fSlcbiAgICAgIC50cmFuc2l0aW9uKCkuZGVsYXkoZGVsYXlzLnVwZGF0ZSkuZHVyYXRpb24oZHVyYXRpb24pXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgIHZhciBpbnN0X2luZGV4ID0gXy5pbmRleE9mKHJvd19ub2Rlc19uYW1lcywgZC5uYW1lKTtcbiAgICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgwLCAnICsgcGFyYW1zLm1hdHJpeC55X3NjYWxlKGluc3RfaW5kZXgpICsgJyknO1xuICAgICAgICB9KTtcblxuICAgIHN2Z19ncm91cC5zZWxlY3RBbGwoJy5yb3dfdml6X2dyb3VwJylcbiAgICAgIC5zZWxlY3QoJ3BhdGgnKVxuICAgICAgLnRyYW5zaXRpb24oKS5kZWxheShkZWxheXMudXBkYXRlKS5kdXJhdGlvbihkdXJhdGlvbilcbiAgICAgIC5hdHRyKCdkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBvcmlnaW5feCA9IHBhcmFtcy5jbGFzc19yb29tLnN5bWJvbF93aWR0aCAtIDE7XG4gICAgICAgIHZhciBvcmlnaW5feSA9IDA7XG4gICAgICAgIHZhciBtaWRfeCA9IDE7XG4gICAgICAgIHZhciBtaWRfeSA9IHBhcmFtcy5tYXRyaXgueV9zY2FsZS5yYW5nZUJhbmQoKSAvIDI7XG4gICAgICAgIHZhciBmaW5hbF94ID0gcGFyYW1zLmNsYXNzX3Jvb20uc3ltYm9sX3dpZHRoIC0gMTtcbiAgICAgICAgdmFyIGZpbmFsX3kgPSBwYXJhbXMubWF0cml4Lnlfc2NhbGUucmFuZ2VCYW5kKCk7XG4gICAgICAgIHZhciBvdXRwdXRfc3RyaW5nID0gJ00gJyArIG9yaWdpbl94ICsgJywnICsgb3JpZ2luX3kgKyAnIEwgJyArXG4gICAgICAgICAgbWlkX3ggKyAnLCcgKyBtaWRfeSArICcsIEwgJyArIGZpbmFsX3ggKyAnLCcgKyBmaW5hbF95ICsgJyBaJztcbiAgICAgICAgcmV0dXJuIG91dHB1dF9zdHJpbmc7XG4gICAgICB9KTtcblxuICB9IGVsc2Uge1xuXG4gICAgLy8gcG9zaXRpb25pbmcgcm93IHRleHQgYWZ0ZXIgcm93IHRleHQgc2l6ZSBtYXkgaGF2ZSBiZWVuIHJlZHVjZWRcbiAgICBzdmdfZ3JvdXAuc2VsZWN0QWxsKCcucm93X2xhYmVsX3RleHQnKVxuICAgICAgLnNlbGVjdCgndGV4dCcpXG4gICAgICAuYXR0cigneScsIHBhcmFtcy5tYXRyaXgucmVjdF9oZWlnaHQgKiAwLjUgKyBwYXJhbXMubGFiZWxzLmRlZmF1bHRfZnNfcm93KjAuMzUgKTtcblxuICAgIHN2Z19ncm91cC5zZWxlY3QoJy5yb3dfdml6X2NvbnRhaW5lcicpXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgcGFyYW1zLm5vcm1fbGFiZWwud2lkdGgucm93ICsgJywwKScpO1xuXG4gICAgc3ZnX2dyb3VwLnNlbGVjdCgnLnJvd192aXpfY29udGFpbmVyJylcbiAgICAgIC5zZWxlY3QoJ3doaXRlX2JhcnMnKVxuICAgICAgLmF0dHIoJ3dpZHRoJywgcGFyYW1zLmNsYXNzX3Jvb20ucm93ICsgJ3B4JylcbiAgICAgIC5hdHRyKCdoZWlnaHQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGluc3RfaGVpZ2h0ID0gcGFyYW1zLnZpei5jbHVzdC5kaW0uaGVpZ2h0O1xuICAgICAgICByZXR1cm4gaW5zdF9oZWlnaHQ7XG4gICAgICB9KTtcblxuICAgIHN2Z19ncm91cC5zZWxlY3RBbGwoJy5yb3dfdml6X2dyb3VwJylcbiAgICAgIC5kYXRhKHJvd19ub2RlcywgZnVuY3Rpb24oZCl7cmV0dXJuIGQubmFtZTt9KVxuICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICB2YXIgaW5zdF9pbmRleCA9IF8uaW5kZXhPZihyb3dfbm9kZXNfbmFtZXMsIGQubmFtZSk7XG4gICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoMCwgJyArIHBhcmFtcy5tYXRyaXgueV9zY2FsZShpbnN0X2luZGV4KSArICcpJztcbiAgICAgICAgfSk7XG5cbiAgICBzdmdfZ3JvdXAuc2VsZWN0QWxsKCcucm93X3Zpel9ncm91cCcpXG4gICAgICAuc2VsZWN0KCdwYXRoJylcbiAgICAgIC5hdHRyKCdkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBvcmlnaW5feCA9IHBhcmFtcy5jbGFzc19yb29tLnN5bWJvbF93aWR0aCAtIDE7XG4gICAgICAgIHZhciBvcmlnaW5feSA9IDA7XG4gICAgICAgIHZhciBtaWRfeCA9IDE7XG4gICAgICAgIHZhciBtaWRfeSA9IHBhcmFtcy5tYXRyaXgueV9zY2FsZS5yYW5nZUJhbmQoKSAvIDI7XG4gICAgICAgIHZhciBmaW5hbF94ID0gcGFyYW1zLmNsYXNzX3Jvb20uc3ltYm9sX3dpZHRoIC0gMTtcbiAgICAgICAgdmFyIGZpbmFsX3kgPSBwYXJhbXMubWF0cml4Lnlfc2NhbGUucmFuZ2VCYW5kKCk7XG4gICAgICAgIHZhciBvdXRwdXRfc3RyaW5nID0gJ00gJyArIG9yaWdpbl94ICsgJywnICsgb3JpZ2luX3kgKyAnIEwgJyArXG4gICAgICAgICAgbWlkX3ggKyAnLCcgKyBtaWRfeSArICcsIEwgJyArIGZpbmFsX3ggKyAnLCcgKyBmaW5hbF95ICsgJyBaJztcbiAgICAgICAgcmV0dXJuIG91dHB1dF9zdHJpbmc7XG4gICAgICB9KTtcblxuICB9XG5cbiAgICBpZiAodXRpbHMuaGFzKCBwYXJhbXMubmV0d29ya19kYXRhLnJvd19ub2Rlc1swXSwgJ3ZhbHVlJykpIHtcblxuICAgICAgLy8gc2V0IGJhciBzY2FsZVxuICAgICAgdmFyIGVucl9tYXggPSBNYXRoLmFicyhfLm1heCggcGFyYW1zLm5ldHdvcmtfZGF0YS5yb3dfbm9kZXMsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIE1hdGguYWJzKGQudmFsdWUpOyB9ICkudmFsdWUpIDtcbiAgICAgIHBhcmFtcy5sYWJlbHMuYmFyX3NjYWxlX3JvdyA9IGQzLnNjYWxlXG4gICAgICAgIC5saW5lYXIoKVxuICAgICAgICAuZG9tYWluKFswLCBlbnJfbWF4XSlcbiAgICAgICAgLnJhbmdlKFswLCBwYXJhbXMubm9ybV9sYWJlbC53aWR0aC5yb3cgXSk7XG5cbiAgICAgIHN2Z19ncm91cC5zZWxlY3RBbGwoJy5yb3dfYmFycycpXG4gICAgICAgIC8vIC50cmFuc2l0aW9uKCkuZGVsYXkoZGVsYXlzLnVwZGF0ZSkuZHVyYXRpb24oZHVyYXRpb24pXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICB2YXIgaW5zdF92YWx1ZSA9IDA7XG4gICAgICAgICAgaW5zdF92YWx1ZSA9IHBhcmFtcy5sYWJlbHMuYmFyX3NjYWxlX3JvdyggTWF0aC5hYnMoZC52YWx1ZSkgKTtcbiAgICAgICAgICByZXR1cm4gaW5zdF92YWx1ZTtcbiAgICAgICAgfSlcbiAgICAgICAgLmF0dHIoJ3gnLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgdmFyIGluc3RfdmFsdWUgPSAwO1xuICAgICAgICAgIGluc3RfdmFsdWUgPSAtcGFyYW1zLmxhYmVscy5iYXJfc2NhbGVfcm93KCBNYXRoLmFicyhkLnZhbHVlKSApO1xuICAgICAgICAgIHJldHVybiBpbnN0X3ZhbHVlO1xuICAgICAgICB9KVxuICAgICAgICAuYXR0cignaGVpZ2h0JywgcGFyYW1zLm1hdHJpeC55X3NjYWxlLnJhbmdlQmFuZCgpICk7XG5cbiAgICB9XG5cblxuXG4gICAgLy8gcmVzaXplIGNvbCBsYWJlbHNcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgaWYgKGRlbGF5cy5ydW5fdHJhbnNpdGlvbil7XG5cbiAgICAgIHN2Z19ncm91cC5zZWxlY3QocGFyYW1zLnJvb3QrJyAuY29sX2NvbnRhaW5lcicpXG4gICAgICAgIC50cmFuc2l0aW9uKCkuZGVsYXkoZGVsYXlzLnVwZGF0ZSkuZHVyYXRpb24oZHVyYXRpb24pXG4gICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyBwYXJhbXMudml6LmNsdXN0Lm1hcmdpbi5sZWZ0ICsgJywnICtcbiAgICAgICAgcGFyYW1zLm5vcm1fbGFiZWwubWFyZ2luLnRvcCArICcpJyk7XG5cbiAgICAgIHN2Z19ncm91cC5zZWxlY3QocGFyYW1zLnJvb3QrJyAuY29sX2NvbnRhaW5lcicpXG4gICAgICAgIC50cmFuc2l0aW9uKCkuZGVsYXkoZGVsYXlzLnVwZGF0ZSkuZHVyYXRpb24oZHVyYXRpb24pXG4gICAgICAgIC5zZWxlY3QoJy53aGl0ZV9iYXJzJylcbiAgICAgICAgLmF0dHIoJ3dpZHRoJywgMzAgKiBwYXJhbXMudml6LmNsdXN0LmRpbS53aWR0aCArICdweCcpXG4gICAgICAgIC5hdHRyKCdoZWlnaHQnLCBwYXJhbXMubm9ybV9sYWJlbC5iYWNrZ3JvdW5kLmNvbCk7XG5cbiAgICAgIHN2Z19ncm91cC5zZWxlY3QocGFyYW1zLnJvb3QrJyAuY29sX2NvbnRhaW5lcicpXG4gICAgICAgIC50cmFuc2l0aW9uKCkuZGVsYXkoZGVsYXlzLnVwZGF0ZSkuZHVyYXRpb24oZHVyYXRpb24pXG4gICAgICAgIC5zZWxlY3QoJy5jb2xfbGFiZWxfb3V0ZXJfY29udGFpbmVyJylcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoMCwnICsgcGFyYW1zLm5vcm1fbGFiZWwud2lkdGguY29sICsgJyknKTtcblxuICAgICAgLy8gb2Zmc2V0IGNsaWNrIGdyb3VwIGNvbHVtbiBsYWJlbFxuICAgICAgdmFyIHhfb2Zmc2V0X2NsaWNrID0gcGFyYW1zLm1hdHJpeC54X3NjYWxlLnJhbmdlQmFuZCgpIC8gMiArIHBhcmFtcy52aXouYm9yZGVyX3dpZHRoO1xuICAgICAgLy8gcmVkdWNlIHdpZHRoIG9mIHJvdGF0ZWQgcmVjdHNcbiAgICAgIHZhciByZWR1Y2VfcmVjdF93aWR0aCA9IHBhcmFtcy5tYXRyaXgueF9zY2FsZS5yYW5nZUJhbmQoKSAqIDAuMzY7XG5cbiAgICAgIHN2Z19ncm91cC5zZWxlY3RBbGwoJy5jb2xfbGFiZWxfdGV4dCcpXG4gICAgICAgIC5kYXRhKGNvbF9ub2RlcywgZnVuY3Rpb24oZCl7cmV0dXJuIGQubmFtZTt9KVxuICAgICAgICAudHJhbnNpdGlvbigpLmRlbGF5KGRlbGF5cy51cGRhdGUpLmR1cmF0aW9uKGR1cmF0aW9uKVxuICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgIHZhciBpbnN0X2luZGV4ID0gXy5pbmRleE9mKGNvbF9ub2Rlc19uYW1lcywgZC5uYW1lKTtcbiAgICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgcGFyYW1zLm1hdHJpeC54X3NjYWxlKGluc3RfaW5kZXgpICsgJykgcm90YXRlKC05MCknO1xuICAgICAgICB9KTtcblxuICAgICAgc3ZnX2dyb3VwLnNlbGVjdEFsbCgnLmNvbF9sYWJlbF9jbGljaycpXG4gICAgICAgIC50cmFuc2l0aW9uKCkuZGVsYXkoZGVsYXlzLnVwZGF0ZSkuZHVyYXRpb24oZHVyYXRpb24pXG4gICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyBwYXJhbXMubWF0cml4Lnhfc2NhbGUucmFuZ2VCYW5kKCkgLyAyICsgJywnICsgeF9vZmZzZXRfY2xpY2sgKyAnKSByb3RhdGUoNDUpJyk7XG5cbiAgICAgIHN2Z19ncm91cC5zZWxlY3RBbGwoJy5jb2xfbGFiZWxfY2xpY2snKVxuICAgICAgICAuc2VsZWN0KCd0ZXh0JylcbiAgICAgICAgLnN0eWxlKCdmb250LXNpemUnLCBwYXJhbXMubGFiZWxzLmRlZmF1bHRfZnNfY29sICsgJ3B4JylcbiAgICAgICAgLnRleHQoZnVuY3Rpb24oZCl7IHJldHVybiBub3JtYWxfbmFtZShkKTt9KTtcblxuICAgICAgc3ZnX2dyb3VwLnNlbGVjdEFsbCgnLmNvbF9sYWJlbF9jbGljaycpXG4gICAgICAgIC5zZWxlY3QoJ3RleHQnKVxuICAgICAgICAudHJhbnNpdGlvbigpLmRlbGF5KGRlbGF5cy51cGRhdGUpLmR1cmF0aW9uKGR1cmF0aW9uKVxuICAgICAgICAuYXR0cigneScsIHBhcmFtcy5tYXRyaXgueF9zY2FsZS5yYW5nZUJhbmQoKSAqIDAuNjApXG4gICAgICAgIC5hdHRyKCdkeCcsIDIgKiBwYXJhbXMudml6LmJvcmRlcl93aWR0aCk7XG5cbiAgICB9IGVsc2Uge1xuXG4gICAgICBzdmdfZ3JvdXAuc2VsZWN0KHBhcmFtcy5yb290KycgLmNvbF9jb250YWluZXInKVxuICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgcGFyYW1zLnZpei5jbHVzdC5tYXJnaW4ubGVmdCArICcsJyArXG4gICAgICAgIHBhcmFtcy5ub3JtX2xhYmVsLm1hcmdpbi50b3AgKyAnKScpO1xuXG4gICAgICBzdmdfZ3JvdXAuc2VsZWN0KHBhcmFtcy5yb290KycgLmNvbF9jb250YWluZXInKVxuICAgICAgICAuc2VsZWN0KCcud2hpdGVfYmFycycpXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIDMwICogcGFyYW1zLnZpei5jbHVzdC5kaW0ud2lkdGggKyAncHgnKVxuICAgICAgICAuYXR0cignaGVpZ2h0JywgcGFyYW1zLm5vcm1fbGFiZWwuYmFja2dyb3VuZC5jb2wpO1xuXG4gICAgICBzdmdfZ3JvdXAuc2VsZWN0KHBhcmFtcy5yb290KycgLmNvbF9jb250YWluZXInKVxuICAgICAgICAuc2VsZWN0KCcuY29sX2xhYmVsX291dGVyX2NvbnRhaW5lcicpXG4gICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKDAsJyArIHBhcmFtcy5ub3JtX2xhYmVsLndpZHRoLmNvbCArICcpJyk7XG5cbiAgICAgIC8vIG9mZnNldCBjbGljayBncm91cCBjb2x1bW4gbGFiZWxcbiAgICAgIHZhciB4X29mZnNldF9jbGljayA9IHBhcmFtcy5tYXRyaXgueF9zY2FsZS5yYW5nZUJhbmQoKSAvIDIgKyBwYXJhbXMudml6LmJvcmRlcl93aWR0aDtcbiAgICAgIC8vIHJlZHVjZSB3aWR0aCBvZiByb3RhdGVkIHJlY3RzXG4gICAgICB2YXIgcmVkdWNlX3JlY3Rfd2lkdGggPSBwYXJhbXMubWF0cml4Lnhfc2NhbGUucmFuZ2VCYW5kKCkgKiAwLjM2O1xuXG4gICAgICBzdmdfZ3JvdXAuc2VsZWN0QWxsKCcuY29sX2xhYmVsX3RleHQnKVxuICAgICAgICAuZGF0YShjb2xfbm9kZXMsIGZ1bmN0aW9uKGQpe3JldHVybiBkLm5hbWU7fSlcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICB2YXIgaW5zdF9pbmRleCA9IF8uaW5kZXhPZihjb2xfbm9kZXNfbmFtZXMsIGQubmFtZSk7XG4gICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIHBhcmFtcy5tYXRyaXgueF9zY2FsZShpbnN0X2luZGV4KSArICcpIHJvdGF0ZSgtOTApJztcbiAgICAgICAgfSk7XG5cbiAgICAgIHN2Z19ncm91cC5zZWxlY3RBbGwoJy5jb2xfbGFiZWxfY2xpY2snKVxuICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgcGFyYW1zLm1hdHJpeC54X3NjYWxlLnJhbmdlQmFuZCgpIC8gMiArICcsJyArIHhfb2Zmc2V0X2NsaWNrICsgJykgcm90YXRlKDQ1KScpO1xuXG4gICAgICBzdmdfZ3JvdXAuc2VsZWN0QWxsKCcuY29sX2xhYmVsX2NsaWNrJylcbiAgICAgICAgLnNlbGVjdCgndGV4dCcpXG4gICAgICAgIC5zdHlsZSgnZm9udC1zaXplJywgcGFyYW1zLmxhYmVscy5kZWZhdWx0X2ZzX2NvbCArICdweCcpXG4gICAgICAgIC50ZXh0KGZ1bmN0aW9uKGQpeyByZXR1cm4gbm9ybWFsX25hbWUoZCk7fSk7XG5cbiAgICAgIHN2Z19ncm91cC5zZWxlY3RBbGwoJy5jb2xfbGFiZWxfY2xpY2snKVxuICAgICAgICAuc2VsZWN0KCd0ZXh0JylcbiAgICAgICAgLmF0dHIoJ3knLCBwYXJhbXMubWF0cml4Lnhfc2NhbGUucmFuZ2VCYW5kKCkgKiAwLjYwKVxuICAgICAgICAuYXR0cignZHgnLCAyICogcGFyYW1zLnZpei5ib3JkZXJfd2lkdGgpO1xuXG4gICAgfVxuXG5cblxuICAgIHBhcmFtcy5ib3VuZGluZ193aWR0aF9tYXguY29sID0gMDtcbiAgICBzdmdfZ3JvdXAuc2VsZWN0QWxsKCcuY29sX2xhYmVsX2NsaWNrJykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHZhciB0bXBfd2lkdGggPSBkMy5zZWxlY3QodGhpcykuc2VsZWN0KCd0ZXh0Jykubm9kZSgpLmdldEJCb3goKS53aWR0aDtcbiAgICAgIGlmICh0bXBfd2lkdGggPiBwYXJhbXMuYm91bmRpbmdfd2lkdGhfbWF4LmNvbCkge1xuICAgICAgICBwYXJhbXMuYm91bmRpbmdfd2lkdGhfbWF4LmNvbCA9IHRtcF93aWR0aDtcbiAgICAgIH1cbiAgICB9KTtcblxuXG4gICAgaWYgKHBhcmFtcy5ib3VuZGluZ193aWR0aF9tYXguY29sID4gcGFyYW1zLm5vcm1fbGFiZWwud2lkdGguY29sKSB7XG5cbiAgICAgIC8vIGNhbGMgcmVkdWN0aW9uIGluIGZvbnQgc2l6ZVxuICAgICAgcGFyYW1zLmluaV9zY2FsZV9mb250LmNvbCA9IHBhcmFtcy5ub3JtX2xhYmVsLndpZHRoLmNvbCAvIHBhcmFtcy5ib3VuZGluZ193aWR0aF9tYXguY29sO1xuICAgICAgLy8gcmVkZWZpbmUgYm91bmRpbmdfd2lkdGhfbWF4LmNvbFxuICAgICAgcGFyYW1zLmJvdW5kaW5nX3dpZHRoX21heC5jb2wgPSBwYXJhbXMuaW5pX3NjYWxlX2ZvbnQuY29sICogcGFyYW1zLmJvdW5kaW5nX3dpZHRoX21heC5jb2w7XG4gICAgICAvLyByZWRlZmluZSBkZWZhdWx0IGZzXG4gICAgICBwYXJhbXMubGFiZWxzLmRlZmF1bHRfZnNfY29sID0gcGFyYW1zLmxhYmVscy5kZWZhdWx0X2ZzX2NvbCAqIHBhcmFtcy5pbmlfc2NhbGVfZm9udC5jb2w7XG4gICAgICAvLyByZWR1Y2UgZm9udCBzaXplXG4gICAgICBkMy5zZWxlY3RBbGwoJy5jb2xfbGFiZWxfY2xpY2snKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgZDMuc2VsZWN0KHRoaXMpLnNlbGVjdCgndGV4dCcpXG4gICAgICAgIC5zdHlsZSgnZm9udC1zaXplJywgcGFyYW1zLmxhYmVscy5kZWZhdWx0X2ZzX2NvbCArICdweCcpO1xuICAgICAgfSk7XG4gICAgICAvLyAuYXR0cigneScsIHBhcmFtcy5tYXRyaXgucmVjdF93aWR0aCAqIDAuNSArIHBhcmFtcy5sYWJlbHMuZGVmYXVsdF9mc19jb2wqMC4yNSApXG4gICAgfVxuXG4gICAgc3ZnX2dyb3VwLnNlbGVjdEFsbCgnLmNvbF9sYWJlbF9jbGljaycpXG4gICAgICAuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgZDMuc2VsZWN0KHRoaXMpXG4gICAgICAgICAgLnNlbGVjdCgndGV4dCcpWzBdWzBdXG4gICAgICAgICAgLmdldEJCb3goKTtcbiAgICAgICAgLy8gZDMuc2VsZWN0KHRoaXMpXG4gICAgICAgIC8vICAgLnNlbGVjdCgncmVjdCcpXG4gICAgICAgIC8vICAgLmF0dHIoJ3gnLCBiYm94LnggKiAxLjI1KVxuICAgICAgICAvLyAgIC5hdHRyKCd5JywgMClcbiAgICAgICAgLy8gICAuYXR0cignd2lkdGgnLCBiYm94LndpZHRoICogMS4yNSlcbiAgICAgICAgLy8gICAuYXR0cignaGVpZ2h0JywgcGFyYW1zLm1hdHJpeC54X3NjYWxlLnJhbmdlQmFuZCgpICogMC42KVxuICAgICAgICAvLyAgIC5zdHlsZSgnZmlsbCcsICd5ZWxsb3cnKVxuICAgICAgICAvLyAgIC5zdHlsZSgnb3BhY2l0eScsIDApO1xuICAgICAgfSk7XG5cblxuXG4gICAgaWYgKGRlbGF5cy5ydW5fdHJhbnNpdGlvbil7XG5cbiAgICAgIC8vIHJlc2l6ZSBjb2x1bW4gdHJpYW5nbGVcbiAgICAgIHN2Z19ncm91cC5zZWxlY3RBbGwoJy5jb2xfbGFiZWxfY2xpY2snKVxuICAgICAgICAuc2VsZWN0KCdwYXRoJylcbiAgICAgICAgLnRyYW5zaXRpb24oKS5kZWxheShkZWxheXMudXBkYXRlKS5kdXJhdGlvbihkdXJhdGlvbilcbiAgICAgICAgLmF0dHIoJ2QnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAvLyB4IGFuZCB5IGFyZSBmbGlwcGVkIHNpbmNlIGl0cyByb3RhdGVkXG4gICAgICAgICAgdmFyIG9yaWdpbl95ID0gLXBhcmFtcy52aXouYm9yZGVyX3dpZHRoO1xuICAgICAgICAgIHZhciBzdGFydF94ID0gMDtcbiAgICAgICAgICB2YXIgZmluYWxfeCA9IHBhcmFtcy5tYXRyaXgueF9zY2FsZS5yYW5nZUJhbmQoKSAtIHJlZHVjZV9yZWN0X3dpZHRoO1xuICAgICAgICAgIHZhciBzdGFydF95ID0gLShwYXJhbXMubWF0cml4Lnhfc2NhbGUucmFuZ2VCYW5kKCkgLSByZWR1Y2VfcmVjdF93aWR0aCArXG4gICAgICAgICAgcGFyYW1zLnZpei5ib3JkZXJfd2lkdGgpO1xuICAgICAgICAgIHZhciBmaW5hbF95ID0gLXBhcmFtcy52aXouYm9yZGVyX3dpZHRoO1xuICAgICAgICAgIHZhciBvdXRwdXRfc3RyaW5nID0gJ00gJyArIG9yaWdpbl95ICsgJywwIEwgJyArIHN0YXJ0X3kgKyAnLCcgK1xuICAgICAgICAgICAgc3RhcnRfeCArICcsIEwgJyArIGZpbmFsX3kgKyAnLCcgKyBmaW5hbF94ICsgJyBaJztcbiAgICAgICAgICByZXR1cm4gb3V0cHV0X3N0cmluZztcbiAgICAgICAgfSlcbiAgICAgICAgLmF0dHIoJ2ZpbGwnLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgdmFyIGluc3RfY29sb3IgPSAnI2VlZSc7XG4gICAgICAgICAgaWYgKHBhcmFtcy5sYWJlbHMuc2hvd19jYXRlZ29yaWVzKSB7XG4gICAgICAgICAgICBpbnN0X2NvbG9yID0gcGFyYW1zLmxhYmVscy5jbGFzc19jb2xvcnMuY29sW2QuY2xdO1xuXG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBpbnN0X2NvbG9yO1xuICAgICAgICB9KTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyByZXNpemUgY29sdW1uIHRyaWFuZ2xlXG4gICAgICBzdmdfZ3JvdXAuc2VsZWN0QWxsKCcuY29sX2xhYmVsX2NsaWNrJylcbiAgICAgICAgLnNlbGVjdCgncGF0aCcpXG4gICAgICAgIC5hdHRyKCdkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgLy8geCBhbmQgeSBhcmUgZmxpcHBlZCBzaW5jZSBpdHMgcm90YXRlZFxuICAgICAgICAgIHZhciBvcmlnaW5feSA9IC1wYXJhbXMudml6LmJvcmRlcl93aWR0aDtcbiAgICAgICAgICB2YXIgc3RhcnRfeCA9IDA7XG4gICAgICAgICAgdmFyIGZpbmFsX3ggPSBwYXJhbXMubWF0cml4Lnhfc2NhbGUucmFuZ2VCYW5kKCkgLSByZWR1Y2VfcmVjdF93aWR0aDtcbiAgICAgICAgICB2YXIgc3RhcnRfeSA9IC0ocGFyYW1zLm1hdHJpeC54X3NjYWxlLnJhbmdlQmFuZCgpIC0gcmVkdWNlX3JlY3Rfd2lkdGggK1xuICAgICAgICAgIHBhcmFtcy52aXouYm9yZGVyX3dpZHRoKTtcbiAgICAgICAgICB2YXIgZmluYWxfeSA9IC1wYXJhbXMudml6LmJvcmRlcl93aWR0aDtcbiAgICAgICAgICB2YXIgb3V0cHV0X3N0cmluZyA9ICdNICcgKyBvcmlnaW5feSArICcsMCBMICcgKyBzdGFydF95ICsgJywnICtcbiAgICAgICAgICAgIHN0YXJ0X3ggKyAnLCBMICcgKyBmaW5hbF95ICsgJywnICsgZmluYWxfeCArICcgWic7XG4gICAgICAgICAgcmV0dXJuIG91dHB1dF9zdHJpbmc7XG4gICAgICAgIH0pXG4gICAgICAgIC5hdHRyKCdmaWxsJywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgIHZhciBpbnN0X2NvbG9yID0gJyNlZWUnO1xuICAgICAgICAgIGlmIChwYXJhbXMubGFiZWxzLnNob3dfY2F0ZWdvcmllcykge1xuICAgICAgICAgICAgaW5zdF9jb2xvciA9IHBhcmFtcy5sYWJlbHMuY2xhc3NfY29sb3JzLmNvbFtkLmNsXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGluc3RfY29sb3I7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIGFwcGVuZCBjb2x1bW4gdmFsdWUgYmFyc1xuICAgIGlmICh1dGlscy5oYXMoIHBhcmFtcy5uZXR3b3JrX2RhdGEuY29sX25vZGVzWzBdLCAndmFsdWUnKSkge1xuXG4gICAgICBjb25zb2xlLmxvZygncmVzaXppbmcgY29sIGJhcnMnKTtcblxuICAgICAgc3ZnX2dyb3VwLnNlbGVjdEFsbCgnLmNvbF9iYXJzJylcbiAgICAgICAgLmRhdGEoY29sX25vZGVzLCBmdW5jdGlvbihkKXtyZXR1cm4gZC5uYW1lO30pXG4gICAgICAgIC50cmFuc2l0aW9uKCkuZGVsYXkoZGVsYXlzLnVwZGF0ZSkuZHVyYXRpb24oZHVyYXRpb24pXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICB2YXIgaW5zdF92YWx1ZSA9IDA7XG4gICAgICAgICAgaWYgKGQudmFsdWUgPiAwKXtcblxuICAgICAgICAgICAgY29uc29sZS5sb2coIFN0cmluZyhkLm5hbWUpICsnICcrIFN0cmluZyhkLnZhbHVlKSArJ1xcblxcbicpO1xuICAgICAgICAgICAgaW5zdF92YWx1ZSA9IHBhcmFtcy5sYWJlbHMuYmFyX3NjYWxlX2NvbChkLnZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGluc3RfdmFsdWU7XG4gICAgICAgIH0pXG4gICAgICAgIC8vIHJvdGF0ZSBsYWJlbHMgLSByZWR1Y2Ugd2lkdGggaWYgcm90YXRpbmdcbiAgICAgICAgLmF0dHIoJ2hlaWdodCcsIHBhcmFtcy5tYXRyaXgueF9zY2FsZS5yYW5nZUJhbmQoKSAqIDAuNjYpO1xuICAgIH1cblxuICBpZiAocGFyYW1zLmxhYmVscy5zaG93X2NhdGVnb3JpZXMpe1xuICAgIC8vIGNoYW5nZSB0aGUgc2l6ZSBvZiB0aGUgaGlnaGxpZ2h0aW5nIHJlY3RzXG4gICAgZDMuc2VsZWN0QWxsKCcuY29sX2xhYmVsX2NsaWNrJylcbiAgICAgIC5lYWNoKGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgdmFyIGJib3ggPSBkMy5zZWxlY3QodGhpcylcbiAgICAgICAgICAuc2VsZWN0KCd0ZXh0JylbMF1bMF1cbiAgICAgICAgICAuZ2V0QkJveCgpO1xuXG4gICAgICAgIGQzLnNlbGVjdCh0aGlzKVxuICAgICAgICAgIC5zZWxlY3QoJ3JlY3QnKVxuICAgICAgICAgIC50cmFuc2l0aW9uKCkuZGVsYXkoZGVsYXlzLnVwZGF0ZSkuZHVyYXRpb24oZHVyYXRpb24pXG4gICAgICAgICAgLmF0dHIoJ3dpZHRoJywgYmJveC53aWR0aCAqIDEuMSlcbiAgICAgICAgICAuYXR0cignaGVpZ2h0JywgMC42NypwYXJhbXMubWF0cml4LnJlY3Rfd2lkdGgpXG4gICAgICAgICAgLnN0eWxlKCdmaWxsJywgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICB2YXIgaW5zdF9jb2xvciA9ICd3aGl0ZSc7XG4gICAgICAgICAgICBpZiAocGFyYW1zLmxhYmVscy5zaG93X2NhdGVnb3JpZXMpe1xuICAgICAgICAgICAgICBpbnN0X2NvbG9yID0gcGFyYW1zLmxhYmVscy5jbGFzc19jb2xvcnMuY29sW2QuY2xdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGluc3RfY29sb3I7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuc3R5bGUoJ29wYWNpdHknLCAwLjMwKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLy8gcmVzaXplIGRlbmRyb2dyYW1cbiAgLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gIGlmIChkZWxheXMucnVuX3RyYW5zaXRpb24pe1xuXG4gICAgc3ZnX2dyb3VwLnNlbGVjdEFsbCgnLnJvd19jbGFzc19yZWN0JylcbiAgICAgIC50cmFuc2l0aW9uKCkuZGVsYXkoZGVsYXlzLnVwZGF0ZSkuZHVyYXRpb24oZHVyYXRpb24pXG4gICAgICAuYXR0cignd2lkdGgnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGluc3Rfd2lkdGggPSBwYXJhbXMuY2xhc3Nfcm9vbS5zeW1ib2xfd2lkdGggLSAxO1xuICAgICAgICByZXR1cm4gaW5zdF93aWR0aCArICdweCc7XG4gICAgICB9KVxuICAgICAgLmF0dHIoJ2hlaWdodCcsIHBhcmFtcy5tYXRyaXgueV9zY2FsZS5yYW5nZUJhbmQoKSlcbiAgICAgIC5hdHRyKCd4JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBpbnN0X29mZnNldCA9IHBhcmFtcy5jbGFzc19yb29tLnN5bWJvbF93aWR0aCArIDE7XG4gICAgICAgIHJldHVybiBpbnN0X29mZnNldCArICdweCc7XG4gICAgICB9KTtcblxuICAgIHN2Z19ncm91cC5zZWxlY3RBbGwoJy5jb2xfY2xhc3NfcmVjdCcpXG4gICAgICAudHJhbnNpdGlvbigpLmRlbGF5KGRlbGF5cy51cGRhdGUpLmR1cmF0aW9uKGR1cmF0aW9uKVxuICAgICAgLmF0dHIoJ3dpZHRoJywgcGFyYW1zLm1hdHJpeC54X3NjYWxlLnJhbmdlQmFuZCgpKVxuICAgICAgLmF0dHIoJ2hlaWdodCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaW5zdF9oZWlnaHQgPSBwYXJhbXMuY2xhc3Nfcm9vbS5jb2wgLSAxO1xuICAgICAgICByZXR1cm4gaW5zdF9oZWlnaHQ7XG4gICAgICB9KTtcblxuICAgIHN2Z19ncm91cC5zZWxlY3RBbGwoJy5jb2xfdml6X2dyb3VwJylcbiAgICAgIC5kYXRhKGNvbF9ub2RlcywgZnVuY3Rpb24oZCl7cmV0dXJuIGQubmFtZTt9KVxuICAgICAgLnRyYW5zaXRpb24oKS5kZWxheShkZWxheXMudXBkYXRlKS5kdXJhdGlvbihkdXJhdGlvbilcbiAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbihkKSB7XG4gICAgICAgIHZhciBpbnN0X2luZGV4ID0gXy5pbmRleE9mKGNvbF9ub2Rlc19uYW1lcywgZC5uYW1lKTtcbiAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIHBhcmFtcy5tYXRyaXgueF9zY2FsZShpbnN0X2luZGV4KSArICcsMCknO1xuICAgICAgfSk7XG5cbiAgICB9IGVsc2Uge1xuXG4gICAgICBzdmdfZ3JvdXAuc2VsZWN0QWxsKCcucm93X2NsYXNzX3JlY3QnKVxuICAgICAgLmF0dHIoJ3dpZHRoJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBpbnN0X3dpZHRoID0gcGFyYW1zLmNsYXNzX3Jvb20uc3ltYm9sX3dpZHRoIC0gMTtcbiAgICAgICAgcmV0dXJuIGluc3Rfd2lkdGggKyAncHgnO1xuICAgICAgfSlcbiAgICAgIC5hdHRyKCdoZWlnaHQnLCBwYXJhbXMubWF0cml4Lnlfc2NhbGUucmFuZ2VCYW5kKCkpXG4gICAgICAuYXR0cigneCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaW5zdF9vZmZzZXQgPSBwYXJhbXMuY2xhc3Nfcm9vbS5zeW1ib2xfd2lkdGggKyAxO1xuICAgICAgICByZXR1cm4gaW5zdF9vZmZzZXQgKyAncHgnO1xuICAgICAgfSk7XG5cbiAgICBzdmdfZ3JvdXAuc2VsZWN0QWxsKCcuY29sX2NsYXNzX3JlY3QnKVxuICAgICAgLmF0dHIoJ3dpZHRoJywgcGFyYW1zLm1hdHJpeC54X3NjYWxlLnJhbmdlQmFuZCgpKVxuICAgICAgLmF0dHIoJ2hlaWdodCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaW5zdF9oZWlnaHQgPSBwYXJhbXMuY2xhc3Nfcm9vbS5jb2wgLSAxO1xuICAgICAgICByZXR1cm4gaW5zdF9oZWlnaHQ7XG4gICAgICB9KTtcblxuICAgIHN2Z19ncm91cC5zZWxlY3RBbGwoJy5jb2xfdml6X2dyb3VwJylcbiAgICAgIC5kYXRhKGNvbF9ub2RlcywgZnVuY3Rpb24oZCl7cmV0dXJuIGQubmFtZTt9KVxuICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgdmFyIGluc3RfaW5kZXggPSBfLmluZGV4T2YoY29sX25vZGVzX25hbWVzLCBkLm5hbWUpO1xuICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgcGFyYW1zLm1hdHJpeC54X3NjYWxlKGluc3RfaW5kZXgpICsgJywwKSc7XG4gICAgICB9KTtcblxuICAgIH1cblxuICAvLyByZXBvc2l0aW9uIGdyaWQgbGluZXNcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICBzdmdfZ3JvdXAuc2VsZWN0QWxsKCcuaG9yel9saW5lcycpXG4gICAgLmRhdGEocm93X25vZGVzLCBmdW5jdGlvbihkKXtyZXR1cm4gZC5uYW1lO30pXG4gICAgLy8gLnRyYW5zaXRpb24oKS5kZWxheShkZWxheXMudXBkYXRlKS5kdXJhdGlvbihkdXJhdGlvbilcbiAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oZCkge1xuICAgICAgdmFyIGluc3RfaW5kZXggPSBfLmluZGV4T2Yocm93X25vZGVzX25hbWVzLCBkLm5hbWUpO1xuICAgICAgcmV0dXJuICd0cmFuc2xhdGUoMCwnICsgcGFyYW1zLm1hdHJpeC55X3NjYWxlKGluc3RfaW5kZXgpICsgJykgcm90YXRlKDApJztcbiAgICB9KTtcblxuICBzdmdfZ3JvdXAuc2VsZWN0QWxsKCcuaG9yel9saW5lcycpXG4gICAgLnNlbGVjdCgnbGluZScpXG4gICAgLy8gLnRyYW5zaXRpb24oKS5kZWxheShkZWxheXMudXBkYXRlKS5kdXJhdGlvbihkdXJhdGlvbilcbiAgICAuYXR0cigneDInLHBhcmFtcy52aXouY2x1c3QuZGltLndpZHRoKVxuICAgIC5zdHlsZSgnc3Ryb2tlLXdpZHRoJywgcGFyYW1zLnZpei5ib3JkZXJfd2lkdGgvcGFyYW1zLnZpei56b29tX3N3aXRjaCsncHgnKTtcblxuICBzdmdfZ3JvdXAuc2VsZWN0QWxsKCcudmVydF9saW5lcycpXG4gICAgLmRhdGEoY29sX25vZGVzLCBmdW5jdGlvbihkKXtyZXR1cm4gZC5uYW1lO30pXG4gICAgLy8gLnRyYW5zaXRpb24oKS5kZWxheShkZWxheXMudXBkYXRlKS5kdXJhdGlvbihkdXJhdGlvbilcbiAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oZCkge1xuICAgICAgICB2YXIgaW5zdF9pbmRleCA9IF8uaW5kZXhPZihjb2xfbm9kZXNfbmFtZXMsIGQubmFtZSk7XG4gICAgICAgIHJldHVybiAndHJhbnNsYXRlKCcgKyBwYXJhbXMubWF0cml4Lnhfc2NhbGUoaW5zdF9pbmRleCkgKyAnKSByb3RhdGUoLTkwKSc7XG4gICAgfSk7XG5cbiAgc3ZnX2dyb3VwLnNlbGVjdEFsbCgnLnZlcnRfbGluZXMnKVxuICAgIC5zZWxlY3QoJ2xpbmUnKVxuICAgIC8vIC50cmFuc2l0aW9uKCkuZGVsYXkoZGVsYXlzLnVwZGF0ZSkuZHVyYXRpb24oZHVyYXRpb24pXG4gICAgLmF0dHIoJ3gyJywgLXBhcmFtcy52aXouY2x1c3QuZGltLmhlaWdodClcbiAgICAuc3R5bGUoJ3N0cm9rZS13aWR0aCcsIHBhcmFtcy52aXouYm9yZGVyX3dpZHRoICsgJ3B4Jyk7XG5cbiAgLy8gcmVzaXplIHN1cGVybGFiZWxzXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgc3ZnX2dyb3VwLnNlbGVjdCgnLnN1cGVyX2NvbF9iayBnJylcbiAgICAvLyAudHJhbnNpdGlvbigpLmRlbGF5KGRlbGF5cy51cGRhdGUpLmR1cmF0aW9uKGR1cmF0aW9uKVxuICAgIC5hdHRyKCdoZWlnaHQnLCBwYXJhbXMubGFiZWxzLnN1cGVyX2xhYmVsX3dpZHRoICsgJ3B4JylcbiAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgwLCcgKyBwYXJhbXMudml6LmdyZXlfYm9yZGVyX3dpZHRoICsgJyknKTtcblxuICAvLyBzdXBlciBjb2wgdGl0bGVcbiAgc3ZnX2dyb3VwLnNlbGVjdCgnLnN1cGVyX2NvbCcpXG4gICAgLy8gLnRyYW5zaXRpb24oKS5kZWxheShkZWxheXMudXBkYXRlKS5kdXJhdGlvbihkdXJhdGlvbilcbiAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaW5zdF94ID0gcGFyYW1zLnZpei5jbHVzdC5kaW0ud2lkdGggLyAyICsgcGFyYW1zLm5vcm1fbGFiZWwud2lkdGhcbiAgICAgICAgLnJvdztcbiAgICAgIHZhciBpbnN0X3kgPSBwYXJhbXMubGFiZWxzLnN1cGVyX2xhYmVsX3dpZHRoIC0gcGFyYW1zLnZpei51bmlfbWFyZ2luO1xuICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIGluc3RfeCArICcsJyArIGluc3RfeSArICcpJztcbiAgICB9KTtcblxuICAvLyBzdXBlciByb3cgdGl0bGVcbiAgc3ZnX2dyb3VwLnNlbGVjdCgnLnN1cGVyX3Jvd19ia2cnKVxuICAgIC8vIC50cmFuc2l0aW9uKCkuZGVsYXkoZGVsYXlzLnVwZGF0ZSkuZHVyYXRpb24oZHVyYXRpb24pXG4gICAgLmF0dHIoJ3dpZHRoJywgcGFyYW1zLmxhYmVscy5zdXBlcl9sYWJlbF93aWR0aCArICdweCcpXG4gICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJyArIHBhcmFtcy52aXouZ3JleV9ib3JkZXJfd2lkdGggKyAnLDApJyk7XG5cbiAgLy8gYXBwZW5kIHN1cGVyIHRpdGxlIHJvdyBncm91cFxuICBzdmdfZ3JvdXAuc2VsZWN0KCcuc3VwZXJfcm93JylcbiAgICAvLyAudHJhbnNpdGlvbigpLmRlbGF5KGRlbGF5cy51cGRhdGUpLmR1cmF0aW9uKGR1cmF0aW9uKVxuICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpbnN0X3ggPSBwYXJhbXMubGFiZWxzLnN1cGVyX2xhYmVsX3dpZHRoIC0gcGFyYW1zLnZpei51bmlfbWFyZ2luO1xuICAgICAgdmFyIGluc3RfeSA9IHBhcmFtcy52aXouY2x1c3QuZGltLmhlaWdodCAvIDIgKyBwYXJhbXMubm9ybV9sYWJlbC53aWR0aFxuICAgICAgICAuY29sO1xuICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIGluc3RfeCArICcsJyArIGluc3RfeSArICcpJztcbiAgICB9KTtcblxuICAvLyByZXNpemUgc3BpbGxvdmVyXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIGhpZGUgc3BpbGxvdmVyIGZyb20gc2xhbnRlZCBjb2x1bW4gbGFiZWxzIG9uIHJpZ2h0IHNpZGVcbiAgc3ZnX2dyb3VwLnNlbGVjdCgnLnJpZ2h0X3NsYW50X3RyaWFuZ2xlJylcbiAgICAudHJhbnNpdGlvbigpLmRlbGF5KGRlbGF5cy51cGRhdGUpLmR1cmF0aW9uKGR1cmF0aW9uKVxuICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyBwYXJhbXMudml6LmNsdXN0LmRpbS53aWR0aCArICcsJyArXG4gICAgcGFyYW1zLm5vcm1fbGFiZWwud2lkdGguY29sICsgJyknKTtcblxuICBzdmdfZ3JvdXAuc2VsZWN0KCcubGVmdF9zbGFudF90cmlhbmdsZScpXG4gICAgLnRyYW5zaXRpb24oKS5kZWxheShkZWxheXMudXBkYXRlKS5kdXJhdGlvbihkdXJhdGlvbilcbiAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgtMSwnICsgcGFyYW1zLm5vcm1fbGFiZWwud2lkdGguY29sICsnKScpO1xuXG4gIHN2Z19ncm91cC5zZWxlY3QoJy50b3BfbGVmdF93aGl0ZScpXG4gICAgLnRyYW5zaXRpb24oKS5kZWxheShkZWxheXMudXBkYXRlKS5kdXJhdGlvbihkdXJhdGlvbilcbiAgICAuYXR0cignd2lkdGgnLCBwYXJhbXMudml6LmNsdXN0Lm1hcmdpbi5sZWZ0KVxuICAgIC5hdHRyKCdoZWlnaHQnLCBwYXJhbXMudml6LmNsdXN0Lm1hcmdpbi50b3ApO1xuXG4gIHN2Z19ncm91cC5zZWxlY3QoJy5yaWdodF9zcGlsbG92ZXInKVxuICAgIC50cmFuc2l0aW9uKCkuZGVsYXkoZGVsYXlzLnVwZGF0ZSkuZHVyYXRpb24oZHVyYXRpb24pXG4gICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHRtcF9sZWZ0ID0gcGFyYW1zLnZpei5jbHVzdC5tYXJnaW4ubGVmdCArIHBhcmFtcy52aXouY2x1c3QuZGltLndpZHRoO1xuICAgICAgdmFyIHRtcF90b3AgPSBwYXJhbXMubm9ybV9sYWJlbC5tYXJnaW4udG9wICsgcGFyYW1zLm5vcm1fbGFiZWwud2lkdGhcbiAgICAgICAgLmNvbDtcbiAgICAgIHJldHVybiAndHJhbnNsYXRlKCcgKyB0bXBfbGVmdCArICcsJyArIHRtcF90b3AgKyAnKSc7XG4gICAgfSk7XG5cbiAgLy8gd2hpdGUgYm9yZGVyIGJvdHRvbSAtIHByZXZlbnQgY2x1c3RlcmdyYW0gZnJvbSBoaXR0aW5nIGJvcmRlclxuICBzdmdfZ3JvdXAuc2VsZWN0KCcuYm90dG9tX3NwaWxsb3ZlcicpXG4gICAgLnRyYW5zaXRpb24oKS5kZWxheShkZWxheXMudXBkYXRlKS5kdXJhdGlvbihkdXJhdGlvbilcbiAgICAuYXR0cignd2lkdGgnLCBwYXJhbXMudml6LnN2Z19kaW0ud2lkdGgpXG4gICAgLmF0dHIoJ2hlaWdodCcsIDIgKiBwYXJhbXMudml6LmdyZXlfYm9yZGVyX3dpZHRoKVxuICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbigpIHtcbiAgICAgIC8vIHNoaWZ0IHVwIGVub3VnaCB0byBzaG93IHRoZSBlbnRpcmUgYm9yZGVyIHdpZHRoXG4gICAgICB2YXIgaW5zdF9vZmZzZXQgPSBwYXJhbXMudml6LnN2Z19kaW0uaGVpZ2h0IC0gMyAqIHBhcmFtcy52aXouZ3JleV9ib3JkZXJfd2lkdGg7XG4gICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgwLCcgKyBpbnN0X29mZnNldCArICcpJztcbiAgICB9KTtcblxuXG4gIC8vIHJlc2V0IHpvb20gYW5kIHRyYW5zbGF0ZVxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgcGFyYW1zLnpvb21fYmVoYXZpb3Iuc2NhbGUoMSkudHJhbnNsYXRlKFxuICAgICAgWyBwYXJhbXMudml6LmNsdXN0Lm1hcmdpbi5sZWZ0LCBwYXJhbXMudml6LmNsdXN0Lm1hcmdpbi50b3BdXG4gICk7XG59O1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogc3JjL3Jlc2V0X3NpemUvcmVzZXRfc2l6ZV9hZnRlcl91cGRhdGUuanNcbiAqKi8iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFKQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFHQTtBQUNBO0FBR0E7QUFDQTtBQUVBO0FBQ0E7Ozs7QUEvQkE7QUFDQTs7Ozs7QUFEQTtBQTRDQTtBQUNBO0FBQ0E7O0FBOUNBO0FBQ0E7O0FBREE7QUFDQTs7O0FBREE7QUEwREE7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUdBO0FBQ0E7Ozs7O0FBaEVBO0FBQ0E7O0FBdUVBO0FBQ0E7OztBQUpBO0FBQ0E7OztBQURBOztBQWFBOztBQUZBO0FBQUE7OztBQVhBOztBQXFCQTs7QUFGQTtBQW5CQTtBQUNBOztBQXRFQTtBQUNBOztBQURBO0FBb0dBO0FBREE7QUFDQTs7QUFwR0E7QUEwR0E7QUFDQTs7QUEzR0E7QUE4R0E7QUFDQTs7QUEvR0E7QUFDQTs7QUFEQTtBQXNIQTtBQUNBOzs7Ozs7O0FBdkhBO0FBQ0E7QUFrSUE7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFwSUE7QUF5S0E7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUxBO0FBQ0E7Ozs7QUF6S0E7QUFDQTtBQW9MQTtBQUNBO0FBSUE7QUFDQTtBQUtBO0FBQ0E7QUFJQTtBQUNBO0FBQUE7QUFHQTtBQUNBO0FBRkE7QUFyQkE7QUE0QkE7QUFDQTtBQUdBO0FBQ0E7QUFJQTtBQUNBO0FBR0E7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUZBO0FBM0NBO0FBQ0E7O0FBcExBO0FBeU9BO0FBQUE7QUFDQTs7QUExT0E7QUE4T0E7QUFDQTtBQVFBOztBQURBO0FBSUE7QUFEQTtBQUdBO0FBTkE7QUFUQTtBQUNBOztBQTlPQTtBQWtRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFGQTtBQUNBOzs7QUFwUUE7QUE2UUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFIQTtBQUNBOztBQURBOztBQUFBO0FBV0E7QUFEQTtBQVZBO0FBQ0E7QUFlQTtBQUNBOztBQUVBO0FBQ0E7QUFJQTtBQUNBO0FBR0E7QUFLQTtBQUNBO0FBRkE7QUFDQTtBQUlBO0FBQ0E7QUFBQTtBQUdBO0FBQ0E7QUFGQTtBQUNBO0FBSUE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBVEE7QUFoQ0E7QUFDQTs7QUE4Q0E7QUFDQTtBQUdBO0FBQ0E7QUFFQTtBQUlBO0FBQ0E7QUFGQTtBQUNBO0FBSUE7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUZBO0FBQ0E7QUFJQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFUQTtBQXZFQTtBQUNBO0FBb0ZBO0FBQ0E7O0FBRUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUlBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFNQTtBQUNBO0FBQ0E7QUFIQTtBQWhCQTtBQUNBOzs7O0FBdFhBO0FBQ0E7QUFvWkE7QUFDQTtBQUlBO0FBQ0E7QUFLQTtBQUNBOztBQWRBOztBQUFBO0FBQ0E7QUFzQkE7QUFDQTtBQUFBO0FBR0E7QUFDQTtBQUZBO0FBQ0E7QUFJQTtBQUNBO0FBR0E7QUFHQTtBQUFBO0FBQ0E7QUFDQTtBQXhDQTtBQUNBO0FBK0NBO0FBQ0E7QUFHQTtBQUNBO0FBSUE7QUFDQTs7QUFaQTs7QUFBQTtBQUNBO0FBbUJBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFGQTtBQUNBO0FBSUE7QUFDQTtBQUVBO0FBR0E7QUFBQTtBQUNBO0FBQ0E7QUFqRkE7QUFDQTtBQXlGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFGQTtBQUNBO0FBT0E7QUFDQTs7QUFFQTs7QUFIQTs7QUFBQTs7QUFBQTtBQVVBO0FBREE7O0FBVEE7QUFDQTtBQWVBO0FBRUE7Ozs7Ozs7OztBQURBO0FBQ0E7QUFlQTtBQUNBOztBQUVBOztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBVkE7QUFhQTtBQUNBO0FBQ0E7QUFEQTtBQUlBO0FBTkE7QUFsQkE7O0FBNkJBOztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBVkE7QUFhQTtBQUNBO0FBQ0E7QUFEQTtBQUdBO0FBTEE7QUEzQ0E7QUFDQTs7QUF4aEJBO0FBQ0E7QUE2a0JBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFLQTtBQVBBOztBQUhBO0FBSkE7QUFDQTtBQW1CQTs7QUFFQTtBQUVBO0FBQ0E7QUFHQTtBQU1BO0FBQ0E7QUFDQTtBQURBO0FBR0E7QUFMQTtBQVZBO0FBSEE7QUFDQTs7OztBQWptQkE7QUFDQTtBQTRuQkE7QUFHQTtBQUNBO0FBRkE7QUFNQTtBQUNBO0FBRkE7QUFDQTtBQUlBO0FBSUE7QUFDQTtBQUZBO0FBQ0E7QUFJQTtBQUNBO0FBQUE7QUFHQTtBQUNBO0FBRkE7QUF6QkE7QUFDQTtBQStCQTtBQUVBO0FBQ0E7QUFGQTtBQU1BO0FBQ0E7QUFGQTtBQUNBO0FBSUE7QUFHQTtBQUNBO0FBRkE7QUFDQTtBQUlBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFGQTtBQXBEQTtBQUNBOzs7QUE1bkJBO0FBeXJCQTtBQUFBOztBQURBO0FBSUE7QUFDQTtBQUZBO0FBQ0E7QUFJQTs7QUFHQTtBQUNBO0FBRUE7QUFDQTtBQUFBOztBQURBO0FBSUE7QUFDQTtBQUZBO0FBQ0E7QUFJQTs7QUFHQTtBQUNBOzs7QUFsdEJBOztBQXd0QkE7QUFDQTs7QUF6dEJBOztBQTh0QkE7QUFDQTtBQUVBO0FBQ0E7QUFKQTtBQUNBOztBQS90QkE7O0FBd3VCQTtBQUNBOztBQXp1QkE7O0FBOHVCQTtBQUNBO0FBQ0E7QUFFQTtBQUpBO0FBQ0E7Ozs7QUEvdUJBO0FBQ0E7QUE0dkJBO0FBQ0E7QUFHQTtBQUNBO0FBSUE7QUFHQTtBQUNBO0FBRUE7QUFKQTtBQUNBOztBQXp3QkE7O0FBc3hCQTtBQUNBO0FBSEE7QUFDQTs7O0FBcnhCQTtBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 46 */
/***/ function(module, exports) {

	eval("// TODO add tip back to arguments\nmodule.exports = function (params, ini_inp_row_data, delays, duration, row_selector) {\n\n  var inp_row_data = ini_inp_row_data.row_data;\n\n  // remove zero values from\n  var row_values = _.filter(inp_row_data, function (num) {\n    return num.value != 0;\n  });\n\n  // bind data to tiles\n  var cur_row_tiles = d3.select(row_selector).selectAll('.tile').data(row_values, function (d) {\n    return d.col_name;\n  });\n\n  ///////////////////////////\n  // Exit\n  ///////////////////////////\n  if (delays.run_transition) {\n    cur_row_tiles.exit().transition().duration(300).attr('fill-opacity', 0).remove();\n  } else {\n    cur_row_tiles.exit().attr('fill-opacity', 0).remove();\n  }\n\n  if (params.matrix.tile_type == 'updn') {\n\n    // value split\n    var row_split_data = _.filter(inp_row_data, function (num) {\n      return num.value_up != 0 || num.value_dn != 0;\n    });\n\n    // tile_up\n    var cur_tiles_up = d3.select(row_selector).selectAll('.tile_up').data(row_split_data, function (d) {\n      return d.col_name;\n    });\n\n    if (delays.run_transition) {\n      cur_tiles_up.exit().transition().duration(300).attr('fill', '0').remove();\n    } else {\n      cur_tiles_up.exit().attr('fill', 0).remove();\n    }\n\n    // tile_dn\n    var cur_tiles_dn = d3.select(row_selector).selectAll('.tile_dn').data(row_split_data, function (d) {\n      return d.col_name;\n    });\n\n    if (delays.run_transition) {\n      cur_tiles_dn.exit().transition().duration(300).attr('fill', 0).remove();\n    } else {\n      cur_tiles_dn.exit().attr('fill', 0).remove();\n    }\n  }\n\n  ///////////////////////////\n  // Update\n  ///////////////////////////\n\n  // update tiles in x direction\n  var update_row_tiles = cur_row_tiles.on('mouseover', function (p) {\n    // highlight row - set text to active if\n    d3.selectAll('.row_label_text text').classed('active', function (d) {\n      return p.row_name === d.name;\n    });\n\n    d3.selectAll('.col_label_text text').classed('active', function (d) {\n      return p.col_name === d.name;\n    });\n    if (params.matrix.show_tile_tooltips) {\n      tip.show(p);\n    }\n  }).on('mouseout', function mouseout() {\n    d3.selectAll('text').classed('active', false);\n    if (params.matrix.show_tile_tooltips) {\n      tip.hide();\n    }\n  });\n\n  var col_nodes_names = params.network_data.col_nodes_names;\n\n  if (delays.run_transition) {\n    update_row_tiles.transition().delay(delays.update).duration(duration).attr('width', params.matrix.rect_width).attr('height', params.matrix.rect_height).attr('transform', function (d) {\n      if (_.contains(col_nodes_names, d.col_name)) {\n        var inst_col_index = _.indexOf(col_nodes_names, d.col_name);\n        var x_pos = params.matrix.x_scale(inst_col_index) + 0.5 * params.viz.border_width;\n        return 'translate(' + x_pos + ',0)';\n      }\n    });\n  } else {\n    update_row_tiles.attr('width', params.matrix.rect_width).attr('height', params.matrix.rect_height).attr('transform', function (d) {\n      if (_.contains(col_nodes_names, d.col_name)) {\n        var inst_col_index = _.indexOf(col_nodes_names, d.col_name);\n        var x_pos = params.matrix.x_scale(inst_col_index) + 0.5 * params.viz.border_width;\n        return 'translate(' + x_pos + ',0)';\n      }\n    });\n  }\n\n  if (params.matrix.tile_type == 'updn') {\n\n    // update split tiles_up\n    var update_tiles_up = cur_tiles_up.on('mouseover', function (p) {\n      // highlight row - set text to active if\n      d3.selectAll('.row_label_text text').classed('active', function (d) {\n        return p.row_name === d.name;\n      });\n\n      d3.selectAll('.col_label_text text').classed('active', function (d) {\n        return p.col_name === d.name;\n      });\n      if (params.matrix.show_tile_tooltips) {\n        tip.show(p);\n      }\n    }).on('mouseout', function mouseout() {\n      d3.selectAll('text').classed('active', false);\n      if (params.matrix.show_tile_tooltips) {\n        tip.hide();\n      }\n    });\n\n    if (delays.run_transition) {\n      update_tiles_up.transition().delay(delays.update).duration(duration).attr('d', function () {\n        // up triangle\n        var start_x = 0;\n        var final_x = params.matrix.x_scale.rangeBand();\n        var start_y = 0;\n        var final_y = params.matrix.y_scale.rangeBand() - params.matrix.y_scale.rangeBand() / 60;\n        var output_string = 'M' + start_x + ',' + start_y + ', L' + start_x + ', ' + final_y + ', L' + final_x + ',0 Z';\n        return output_string;\n      }).attr('transform', function (d) {\n        var x_pos = params.matrix.x_scale(d.pos_x) + 0.5 * params.viz.border_width;\n        var y_pos = 0.5 * params.viz.border_width / params.viz.zoom_switch;\n        return 'translate(' + x_pos + ',' + y_pos + ')';\n      });\n    } else {\n      update_tiles_up.attr('d', function () {\n        // up triangle\n        var start_x = 0;\n        var final_x = params.matrix.x_scale.rangeBand();\n        var start_y = 0;\n        var final_y = params.matrix.y_scale.rangeBand() - params.matrix.y_scale.rangeBand() / 60;\n        var output_string = 'M' + start_x + ',' + start_y + ', L' + start_x + ', ' + final_y + ', L' + final_x + ',0 Z';\n        return output_string;\n      }).attr('transform', function (d) {\n        var x_pos = params.matrix.x_scale(d.pos_x) + 0.5 * params.viz.border_width;\n        var y_pos = 0.5 * params.viz.border_width / params.viz.zoom_switch;\n        return 'translate(' + x_pos + ',' + y_pos + ')';\n      });\n    }\n\n    // update split tiles_dn\n    var update_tiles_dn = cur_tiles_dn.on('mouseover', function (p) {\n      // highlight row - set text to active if\n      d3.selectAll('.row_label_text text').classed('active', function (d) {\n        return p.row_name === d.name;\n      });\n\n      d3.selectAll('.col_label_text text').classed('active', function (d) {\n        return p.col_name === d.name;\n      });\n      if (params.matrix.show_tile_tooltips) {\n        tip.show(p);\n      }\n    }).on('mouseout', function mouseout() {\n      d3.selectAll('text').classed('active', false);\n      if (params.matrix.show_tile_tooltips) {\n        tip.hide();\n      }\n    });\n\n    if (delays.run_transition) {\n      update_tiles_dn.transition().delay(delays.update).duration(duration).attr('d', function () {\n        // dn triangle\n        var start_x = 0;\n        var final_x = params.matrix.x_scale.rangeBand();\n        var start_y = params.matrix.y_scale.rangeBand() - params.matrix.y_scale.rangeBand() / 60;\n        var final_y = params.matrix.y_scale.rangeBand() - params.matrix.y_scale.rangeBand() / 60;\n        var output_string = 'M' + start_x + ', ' + start_y + ' ,   L' + final_x + ', ' + final_y + ',  L' + final_x + ',0 Z';\n        return output_string;\n      }).attr('transform', function (d) {\n        var x_pos = params.matrix.x_scale(d.pos_x) + 0.5 * params.viz.border_width;\n        var y_pos = 0.5 * params.viz.border_width / params.viz.zoom_switch;\n        return 'translate(' + x_pos + ',' + y_pos + ')';\n      });\n    } else {\n      update_tiles_dn.attr('d', function () {\n        // dn triangle\n        var start_x = 0;\n        var final_x = params.matrix.x_scale.rangeBand();\n        var start_y = params.matrix.y_scale.rangeBand() - params.matrix.y_scale.rangeBand() / 60;\n        var final_y = params.matrix.y_scale.rangeBand() - params.matrix.y_scale.rangeBand() / 60;\n        var output_string = 'M' + start_x + ', ' + start_y + ' ,   L' + final_x + ', ' + final_y + ',  L' + final_x + ',0 Z';\n        return output_string;\n      }).attr('transform', function (d) {\n        var x_pos = params.matrix.x_scale(d.pos_x) + 0.5 * params.viz.border_width;\n        var y_pos = 0.5 * params.viz.border_width / params.viz.zoom_switch;\n        return 'translate(' + x_pos + ',' + y_pos + ')';\n      });\n    }\n\n    // remove tiles when splitting is done\n    cur_row_tiles.selectAll('.tile').each(function (d) {\n      if (Math.abs(d.value_up) > 0 && Math.abs(d.value_dn) > 0) {\n        d3.select(row_selector).remove();\n      }\n    });\n  }\n\n  ///////////////////////////\n  // Enter\n  ///////////////////////////\n  // enter new tiles\n  var new_tiles = cur_row_tiles.enter().append('rect').attr('class', 'tile row_tile').attr('width', params.matrix.rect_width).attr('height', params.matrix.rect_height).on('mouseover', function (p) {\n    // highlight row - set text to active if\n    d3.selectAll('.row_label_text text').classed('active', function (d) {\n      return p.row_name === d.name;\n    });\n\n    d3.selectAll('.col_label_text text').classed('active', function (d) {\n      return p.col_name === d.name;\n    });\n    if (params.matrix.show_tile_tooltips) {\n      tip.show(p);\n    }\n  }).on('mouseout', function mouseout() {\n    d3.selectAll('text').classed('active', false);\n    if (params.matrix.show_tile_tooltips) {\n      tip.hide();\n    }\n  }).attr('fill-opacity', 0).attr('transform', function (d) {\n    var x_pos = params.matrix.x_scale(d.pos_x) + 0.5 * params.viz.border_width;\n    var y_pos = 0.5 * params.viz.border_width / params.viz.zoom_switch;\n    return 'translate(' + x_pos + ',' + y_pos + ')';\n  });\n\n  if (delays.run_transition) {\n    new_tiles.transition().delay(delays.enter).duration(duration).style('fill', function (d) {\n      return d.value > 0 ? params.matrix.tile_colors[0] : params.matrix.tile_colors[1];\n    }).attr('fill-opacity', function (d) {\n      var output_opacity = params.matrix.opacity_scale(Math.abs(d.value));\n      return output_opacity;\n    });\n  } else {\n    new_tiles.style('fill', function (d) {\n      return d.value > 0 ? params.matrix.tile_colors[0] : params.matrix.tile_colors[1];\n    }).attr('fill-opacity', function (d) {\n      var output_opacity = params.matrix.opacity_scale(Math.abs(d.value));\n      return output_opacity;\n    });\n  }\n\n  // remove new tiles if necessary\n  new_tiles.each(function (d) {\n    if (Math.abs(d.value_up) > 0 && Math.abs(d.value_dn) > 0) {\n      d3.select(row_selector).remove();\n    }\n  });\n\n  ////////////////////////////////////////////////////\n  // need to add split tiles to existing rows\n  ////////////////////////////////////////////////////\n};undefined\n//@ sourceMappingURL=data:application/json;base64,");

/***/ },
/* 47 */
/***/ function(module, exports) {

	eval("module.exports = function (old_params, params) {\n\n  // exit, update, enter\n\n  // check if exit or enter or both are required\n  var old_row_nodes = old_params.network_data.row_nodes;\n  var old_col_nodes = old_params.network_data.col_nodes;\n  var old_row = _.map(old_row_nodes, function (d) {\n    return d.name;\n  });\n  var old_col = _.map(old_col_nodes, function (d) {\n    return d.name;\n  });\n  var all_old_nodes = old_row.concat(old_col);\n\n  var row_nodes = params.network_data.row_nodes;\n  var col_nodes = params.network_data.col_nodes;\n  var row = _.map(row_nodes, function (d) {\n    return d.name;\n  });\n  var col = _.map(col_nodes, function (d) {\n    return d.name;\n  });\n  var all_nodes = row.concat(col);\n\n  var exit_nodes = _.difference(all_old_nodes, all_nodes).length;\n  var enter_nodes = _.difference(all_nodes, all_old_nodes).length;\n\n  var delays = {};\n\n  if (exit_nodes > 0) {\n    delays.update = 1000;\n  } else {\n    delays.update = 0;\n  }\n\n  if (enter_nodes > 0) {\n    delays.enter = 1000;\n  } else {\n    delays.enter = 0;\n  }\n\n  delays.enter = delays.enter + delays.update;\n\n  delays.run_transition = true;\n\n  var old_num_links = old_params.network_data.links.length;\n  var new_num_links = params.network_data.links.length;\n  var cutoff_num_links = 0.35 * params.matrix.def_large_matrix;\n\n  if (old_num_links > cutoff_num_links || new_num_links > cutoff_num_links) {\n    delays.run_transition = false;\n    delays.update = 0;\n    delays.enter = 0;\n  }\n\n  // reduce opacity during update\n  d3.select(params.viz.viz_svg).style('opacity', 0.70);\n\n  function finish_update() {\n    d3.select(params.viz.viz_svg).transition().duration(250).style('opacity', 1.0);\n  }\n  setTimeout(finish_update, delays.enter);\n\n  return delays;\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL25ldHdvcmsvZGVmaW5lX2VudGVyX2V4aXRfZGVsYXlzLmpzPzU4M2EiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvbGRfcGFyYW1zLCBwYXJhbXMpIHtcblxuICAvLyBleGl0LCB1cGRhdGUsIGVudGVyXG5cbiAgLy8gY2hlY2sgaWYgZXhpdCBvciBlbnRlciBvciBib3RoIGFyZSByZXF1aXJlZFxuICB2YXIgb2xkX3Jvd19ub2RlcyA9IG9sZF9wYXJhbXMubmV0d29ya19kYXRhLnJvd19ub2RlcztcbiAgdmFyIG9sZF9jb2xfbm9kZXMgPSBvbGRfcGFyYW1zLm5ldHdvcmtfZGF0YS5jb2xfbm9kZXM7XG4gIHZhciBvbGRfcm93ID0gXy5tYXAob2xkX3Jvd19ub2RlcywgZnVuY3Rpb24oZCl7cmV0dXJuIGQubmFtZTt9KTtcbiAgdmFyIG9sZF9jb2wgPSBfLm1hcChvbGRfY29sX25vZGVzLCBmdW5jdGlvbihkKXtyZXR1cm4gZC5uYW1lO30pO1xuICB2YXIgYWxsX29sZF9ub2RlcyA9IG9sZF9yb3cuY29uY2F0KG9sZF9jb2wpO1xuXG4gIHZhciByb3dfbm9kZXMgPSBwYXJhbXMubmV0d29ya19kYXRhLnJvd19ub2RlcztcbiAgdmFyIGNvbF9ub2RlcyA9IHBhcmFtcy5uZXR3b3JrX2RhdGEuY29sX25vZGVzO1xuICB2YXIgcm93ID0gXy5tYXAocm93X25vZGVzLCBmdW5jdGlvbihkKXtyZXR1cm4gZC5uYW1lO30pO1xuICB2YXIgY29sID0gXy5tYXAoY29sX25vZGVzLCBmdW5jdGlvbihkKXtyZXR1cm4gZC5uYW1lO30pO1xuICB2YXIgYWxsX25vZGVzID0gcm93LmNvbmNhdChjb2wpO1xuXG4gIHZhciBleGl0X25vZGVzICA9IF8uZGlmZmVyZW5jZSggYWxsX29sZF9ub2RlcywgYWxsX25vZGVzICkubGVuZ3RoO1xuICB2YXIgZW50ZXJfbm9kZXMgPSBfLmRpZmZlcmVuY2UoIGFsbF9ub2RlcywgYWxsX29sZF9ub2RlcyApLmxlbmd0aDtcblxuICB2YXIgZGVsYXlzID0ge307XG5cbiAgaWYgKGV4aXRfbm9kZXMgPiAwKXtcbiAgICBkZWxheXMudXBkYXRlID0gMTAwMDtcbiAgfSBlbHNlIHtcbiAgICBkZWxheXMudXBkYXRlID0gMDtcbiAgfVxuXG4gIGlmIChlbnRlcl9ub2RlcyA+IDApe1xuICAgIGRlbGF5cy5lbnRlciA9IDEwMDA7XG4gIH0gZWxzZSB7XG4gICAgZGVsYXlzLmVudGVyID0gMDtcbiAgfVxuXG4gIGRlbGF5cy5lbnRlciAgPSBkZWxheXMuZW50ZXIgKyBkZWxheXMudXBkYXRlIDtcblxuICBkZWxheXMucnVuX3RyYW5zaXRpb24gPSB0cnVlO1xuXG4gIHZhciBvbGRfbnVtX2xpbmtzID0gb2xkX3BhcmFtcy5uZXR3b3JrX2RhdGEubGlua3MubGVuZ3RoO1xuICB2YXIgbmV3X251bV9saW5rcyA9IHBhcmFtcy5uZXR3b3JrX2RhdGEubGlua3MubGVuZ3RoO1xuICB2YXIgY3V0b2ZmX251bV9saW5rcyA9IDAuMzUqcGFyYW1zLm1hdHJpeC5kZWZfbGFyZ2VfbWF0cml4O1xuXG4gIGlmICggb2xkX251bV9saW5rcyA+IGN1dG9mZl9udW1fbGlua3MgfHwgbmV3X251bV9saW5rcyA+IGN1dG9mZl9udW1fbGlua3MgKXtcbiAgICBkZWxheXMucnVuX3RyYW5zaXRpb24gPSBmYWxzZTtcbiAgICBkZWxheXMudXBkYXRlID0gMDtcbiAgICBkZWxheXMuZW50ZXIgPSAwO1xuICB9XG5cbiAgLy8gcmVkdWNlIG9wYWNpdHkgZHVyaW5nIHVwZGF0ZVxuICBkMy5zZWxlY3QocGFyYW1zLnZpei52aXpfc3ZnKVxuICAgIC5zdHlsZSgnb3BhY2l0eScsMC43MCk7XG5cbiAgZnVuY3Rpb24gZmluaXNoX3VwZGF0ZSgpe1xuICAgIGQzLnNlbGVjdChwYXJhbXMudml6LnZpel9zdmcpXG4gICAgICAudHJhbnNpdGlvbigpLmR1cmF0aW9uKDI1MClcbiAgICAgIC5zdHlsZSgnb3BhY2l0eScsMS4wKTtcbiAgfVxuICBzZXRUaW1lb3V0KGZpbmlzaF91cGRhdGUsIGRlbGF5cy5lbnRlcik7XG5cbiAgcmV0dXJuIGRlbGF5cztcbn07XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBzcmMvbmV0d29yay9kZWZpbmVfZW50ZXJfZXhpdF9kZWxheXMuanNcbiAqKi8iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUdBO0FBSEE7QUFDQTtBQUtBO0FBQ0E7QUFEQTtBQUdBO0FBSEE7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBQ0E7O0FBM0NBO0FBQ0E7QUFtREE7QUFDQTtBQURBO0FBS0E7QUFDQTtBQUNBO0FBM0RBIiwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 48 */
/***/ function(module, exports) {

	eval("/* Represents sidebar with controls.\n */\nmodule.exports = function (params, viz) {\n\n  var button_data = [{ 'name': 'Cluster',\n    'short_name': 'clust' }, { 'name': 'Rank',\n    'short_name': 'rank' }];\n\n  var sidebar = d3.select(params.root).append('div').attr('class', params.sidebar.sidebar_class).style('margin-left', '10px').style('float', 'left');\n\n  sidebar.append('div').html('Row Order');\n\n  var row_reorder = sidebar.append('div').classed('viz_medium_text', true).append('div').classed('btn-group-vertical', true).classed('toggle_col_order', true).attr('role', 'group');\n\n  row_reorder.selectAll('.button').data(button_data).enter().append('button').attr('type', 'button').classed('btn', true).classed('btn-primary', true).classed('active', function (d) {\n    var is_active = false;\n    if (d.name == 'Cluster') {\n      var is_active = true;\n    }\n    return is_active;\n  }).attr('name', function (d) {\n    return d.short_name;\n  }).html(function (d) {\n    return d.name;\n  });\n\n  sidebar.append('div').html('Column Order');\n\n  var col_reorder = sidebar.append('div').classed('viz_medium_text', true).append('div').classed('btn-group-vertical', true).classed('toggle_row_order', true).attr('role', 'group');\n\n  col_reorder.selectAll('.button').data(button_data).enter().append('button').attr('type', 'button').classed('btn', true).classed('btn-primary', true).classed('active', function (d) {\n    var is_active = false;\n    if (d.name == 'Cluster') {\n      var is_active = true;\n    }\n    return is_active;\n  }).attr('name', function (d) {\n    return d.short_name;\n  }).html(function (d) {\n    return d.name;\n  });\n\n  var search_container = sidebar.append('div').classed('row', true).classed('gene_search_container', true);\n\n  search_container.append('input').classed('form-control', true).classed('gene_search_box', true).attr('type', 'text').attr('placeholder', 'Input Gene');\n\n  search_container.append('div').classed('btn-group', true).classed('gene_search_button', true).attr('data-toggle', 'buttons').append('div').append('button').html('Search').attr('type', 'button').classed('btn', true).classed('btn-primary', true).classed('submit_gene_button', true);\n\n  var colorbar_sliders = sidebar.append('div').classed('colorbar_sliders', true);\n\n  colorbar_sliders.append('p').classed('viz_medium_text', true).text('Row Group Size');\n\n  colorbar_sliders.append('div').classed('slider_row', true);\n\n  colorbar_sliders.append('p').classed('viz_medium_text', true).text('Column Group Size');\n\n  colorbar_sliders.append('div').classed('slider_col', true);\n\n  var row_filters = sidebar.append('div').classed('row_filters', true);\n\n  row_filters.append('div').classed('viz_medium_text', true).classed('N_row_sum', true).text('Top rows: all rows');\n\n  row_filters.append('div').classed('slider_filter', true).classed('slider_N_row_sum', true);\n\n  // 1. Recreate sidebar in JavaScript from HTML.\n  // 2. Rename all IDs to classes.\n  //    Don't forget load_clustergram.js\n  // 3. Move behavior in load_clustergram.js to sidebar.js\n  //    Example of advanced behavior:\n  //\n  //    if (params.use_controls) {\n  //       sidebar.select(params.root).append('div').....\n};undefined\n//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL3NpZGViYXIuanM/ODUxZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBSZXByZXNlbnRzIHNpZGViYXIgd2l0aCBjb250cm9scy5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihwYXJhbXMsIHZpeikge1xuXG4gIHZhciBidXR0b25fZGF0YSA9IFtcbiAgICAgIHsnbmFtZSc6J0NsdXN0ZXInLFxuICAgICAgICdzaG9ydF9uYW1lJzonY2x1c3QnfSxcbiAgICAgIHsnbmFtZSc6J1JhbmsnLFxuICAgICAgJ3Nob3J0X25hbWUnOidyYW5rJ31cbiAgICBdO1xuXG4gIHZhciBzaWRlYmFyID0gZDNcbiAgICAuc2VsZWN0KHBhcmFtcy5yb290KVxuICAgIC5hcHBlbmQoJ2RpdicpXG4gICAgLmF0dHIoJ2NsYXNzJywgcGFyYW1zLnNpZGViYXIuc2lkZWJhcl9jbGFzcyApXG4gICAgLnN0eWxlKCdtYXJnaW4tbGVmdCcsJzEwcHgnKVxuICAgIC5zdHlsZSgnZmxvYXQnLCAnbGVmdCcpO1xuXG4gIHNpZGViYXJcbiAgICAuYXBwZW5kKCdkaXYnKVxuICAgIC5odG1sKCdSb3cgT3JkZXInKTtcblxuICB2YXIgcm93X3Jlb3JkZXIgPSBzaWRlYmFyXG4gICAgLmFwcGVuZCgnZGl2JylcbiAgICAuY2xhc3NlZCgndml6X21lZGl1bV90ZXh0Jyx0cnVlKVxuICAgIC5hcHBlbmQoJ2RpdicpXG4gICAgLmNsYXNzZWQoJ2J0bi1ncm91cC12ZXJ0aWNhbCcsdHJ1ZSlcbiAgICAuY2xhc3NlZCgndG9nZ2xlX2NvbF9vcmRlcicsdHJ1ZSlcbiAgICAuYXR0cigncm9sZScsJ2dyb3VwJylcblxuICByb3dfcmVvcmRlclxuICAgIC5zZWxlY3RBbGwoJy5idXR0b24nKVxuICAgIC5kYXRhKGJ1dHRvbl9kYXRhKVxuICAgIC5lbnRlcigpXG4gICAgLmFwcGVuZCgnYnV0dG9uJylcbiAgICAuYXR0cigndHlwZScsJ2J1dHRvbicpXG4gICAgLmNsYXNzZWQoJ2J0bicsdHJ1ZSlcbiAgICAuY2xhc3NlZCgnYnRuLXByaW1hcnknLHRydWUpXG4gICAgLmNsYXNzZWQoJ2FjdGl2ZScsIGZ1bmN0aW9uKGQpe1xuICAgICAgdmFyIGlzX2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgaWYgKGQubmFtZSA9PSAnQ2x1c3Rlcicpe1xuICAgICAgICB2YXIgaXNfYWN0aXZlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc19hY3RpdmU7XG4gICAgfSlcbiAgICAuYXR0cignbmFtZScsIGZ1bmN0aW9uKGQpe1xuICAgICAgcmV0dXJuIGQuc2hvcnRfbmFtZTtcbiAgICB9KVxuICAgIC5odG1sKGZ1bmN0aW9uKGQpe3JldHVybiBkLm5hbWU7fSlcblxuICBzaWRlYmFyXG4gICAgLmFwcGVuZCgnZGl2JylcbiAgICAuaHRtbCgnQ29sdW1uIE9yZGVyJyk7XG5cbiAgdmFyIGNvbF9yZW9yZGVyID0gc2lkZWJhclxuICAgIC5hcHBlbmQoJ2RpdicpXG4gICAgLmNsYXNzZWQoJ3Zpel9tZWRpdW1fdGV4dCcsdHJ1ZSlcbiAgICAuYXBwZW5kKCdkaXYnKVxuICAgIC5jbGFzc2VkKCdidG4tZ3JvdXAtdmVydGljYWwnLHRydWUpXG4gICAgLmNsYXNzZWQoJ3RvZ2dsZV9yb3dfb3JkZXInLHRydWUpXG4gICAgLmF0dHIoJ3JvbGUnLCdncm91cCcpXG5cbiAgY29sX3Jlb3JkZXJcbiAgICAuc2VsZWN0QWxsKCcuYnV0dG9uJylcbiAgICAuZGF0YShidXR0b25fZGF0YSlcbiAgICAuZW50ZXIoKVxuICAgIC5hcHBlbmQoJ2J1dHRvbicpXG4gICAgLmF0dHIoJ3R5cGUnLCdidXR0b24nKVxuICAgIC5jbGFzc2VkKCdidG4nLHRydWUpXG4gICAgLmNsYXNzZWQoJ2J0bi1wcmltYXJ5Jyx0cnVlKVxuICAgIC5jbGFzc2VkKCdhY3RpdmUnLCBmdW5jdGlvbihkKXtcbiAgICAgIHZhciBpc19hY3RpdmUgPSBmYWxzZTtcbiAgICAgIGlmIChkLm5hbWUgPT0gJ0NsdXN0ZXInKXtcbiAgICAgICAgdmFyIGlzX2FjdGl2ZSA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNfYWN0aXZlO1xuICAgIH0pXG4gICAgLmF0dHIoJ25hbWUnLCBmdW5jdGlvbihkKXtcbiAgICAgIHJldHVybiBkLnNob3J0X25hbWU7XG4gICAgfSlcbiAgICAuaHRtbChmdW5jdGlvbihkKXtyZXR1cm4gZC5uYW1lO30pXG5cbiAgdmFyIHNlYXJjaF9jb250YWluZXIgPSBzaWRlYmFyXG4gICAgLmFwcGVuZCgnZGl2JylcbiAgICAuY2xhc3NlZCgncm93Jyx0cnVlKVxuICAgIC5jbGFzc2VkKCdnZW5lX3NlYXJjaF9jb250YWluZXInLHRydWUpO1xuXG4gIHNlYXJjaF9jb250YWluZXJcbiAgICAuYXBwZW5kKCdpbnB1dCcpXG4gICAgLmNsYXNzZWQoJ2Zvcm0tY29udHJvbCcsdHJ1ZSlcbiAgICAuY2xhc3NlZCgnZ2VuZV9zZWFyY2hfYm94Jyx0cnVlKVxuICAgIC5hdHRyKCd0eXBlJywndGV4dCcpXG4gICAgLmF0dHIoJ3BsYWNlaG9sZGVyJywnSW5wdXQgR2VuZScpO1xuXG4gIHNlYXJjaF9jb250YWluZXJcbiAgICAuYXBwZW5kKCdkaXYnKVxuICAgIC5jbGFzc2VkKCdidG4tZ3JvdXAnLHRydWUpXG4gICAgLmNsYXNzZWQoJ2dlbmVfc2VhcmNoX2J1dHRvbicsdHJ1ZSlcbiAgICAuYXR0cignZGF0YS10b2dnbGUnLCdidXR0b25zJylcbiAgICAuYXBwZW5kKCdkaXYnKVxuICAgIC5hcHBlbmQoJ2J1dHRvbicpXG4gICAgLmh0bWwoJ1NlYXJjaCcpXG4gICAgLmF0dHIoJ3R5cGUnLCdidXR0b24nKVxuICAgIC5jbGFzc2VkKCdidG4nLHRydWUpXG4gICAgLmNsYXNzZWQoJ2J0bi1wcmltYXJ5Jyx0cnVlKVxuICAgIC5jbGFzc2VkKCdzdWJtaXRfZ2VuZV9idXR0b24nLHRydWUpO1xuXG5cbiAgdmFyIGNvbG9yYmFyX3NsaWRlcnMgPSBzaWRlYmFyXG4gICAgLmFwcGVuZCgnZGl2JylcbiAgICAuY2xhc3NlZCgnY29sb3JiYXJfc2xpZGVycycsdHJ1ZSk7XG5cbiAgY29sb3JiYXJfc2xpZGVyc1xuICAgIC5hcHBlbmQoJ3AnKVxuICAgIC5jbGFzc2VkKCd2aXpfbWVkaXVtX3RleHQnLHRydWUpXG4gICAgLnRleHQoJ1JvdyBHcm91cCBTaXplJyk7XG5cbiAgY29sb3JiYXJfc2xpZGVyc1xuICAgIC5hcHBlbmQoJ2RpdicpXG4gICAgLmNsYXNzZWQoJ3NsaWRlcl9yb3cnLHRydWUpXG5cbiAgY29sb3JiYXJfc2xpZGVyc1xuICAgIC5hcHBlbmQoJ3AnKVxuICAgIC5jbGFzc2VkKCd2aXpfbWVkaXVtX3RleHQnLHRydWUpXG4gICAgLnRleHQoJ0NvbHVtbiBHcm91cCBTaXplJyk7XG5cbiAgY29sb3JiYXJfc2xpZGVyc1xuICAgIC5hcHBlbmQoJ2RpdicpXG4gICAgLmNsYXNzZWQoJ3NsaWRlcl9jb2wnLHRydWUpICAgIFxuXG4gIHZhciByb3dfZmlsdGVycyA9IHNpZGViYXJcbiAgICAuYXBwZW5kKCdkaXYnKVxuICAgIC5jbGFzc2VkKCdyb3dfZmlsdGVycycsdHJ1ZSk7XG5cbiAgcm93X2ZpbHRlcnNcbiAgICAuYXBwZW5kKCdkaXYnKVxuICAgIC5jbGFzc2VkKCd2aXpfbWVkaXVtX3RleHQnLHRydWUpXG4gICAgLmNsYXNzZWQoJ05fcm93X3N1bScsdHJ1ZSlcbiAgICAudGV4dCgnVG9wIHJvd3M6IGFsbCByb3dzJyk7XG5cbiAgcm93X2ZpbHRlcnNcbiAgICAuYXBwZW5kKCdkaXYnKVxuICAgIC5jbGFzc2VkKCdzbGlkZXJfZmlsdGVyJyx0cnVlKVxuICAgIC5jbGFzc2VkKCdzbGlkZXJfTl9yb3dfc3VtJyx0cnVlKTtcblxuICAvLyAxLiBSZWNyZWF0ZSBzaWRlYmFyIGluIEphdmFTY3JpcHQgZnJvbSBIVE1MLlxuICAvLyAyLiBSZW5hbWUgYWxsIElEcyB0byBjbGFzc2VzLlxuICAvLyAgICBEb24ndCBmb3JnZXQgbG9hZF9jbHVzdGVyZ3JhbS5qc1xuICAvLyAzLiBNb3ZlIGJlaGF2aW9yIGluIGxvYWRfY2x1c3RlcmdyYW0uanMgdG8gc2lkZWJhci5qc1xuICAvLyAgICBFeGFtcGxlIG9mIGFkdmFuY2VkIGJlaGF2aW9yOlxuICAvL1xuICAvLyAgICBpZiAocGFyYW1zLnVzZV9jb250cm9scykge1xuICAvLyAgICAgICBzaWRlYmFyLnNlbGVjdChwYXJhbXMucm9vdCkuYXBwZW5kKCdkaXYnKS4uLi4uXG5cbn07XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBzcmMvc2lkZWJhci5qc1xuICoqLyJdLCJtYXBwaW5ncyI6Ijs7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBTUE7QUFDQTtBQUdBO0FBQ0E7QUFPQTtBQVNBO0FBQ0E7QUFDQTtBQURBO0FBR0E7QUFMQTtBQVFBO0FBREE7QUFHQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQU9BO0FBU0E7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUxBO0FBUUE7QUFEQTtBQUdBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBTUE7QUFDQTtBQWFBO0FBQ0E7QUFHQTtBQUNBO0FBSUE7QUFDQTtBQUdBO0FBQ0E7QUFJQTtBQUNBO0FBR0E7QUFDQTtBQUdBO0FBQ0E7QUFLQTtBQUNBOzs7Ozs7Ozs7QUEzSUFBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 49 */
/***/ function(module, exports) {

	eval("\nmodule.exports = function (params, inst_cat) {\n  // change the category\n  params.current_col_cat = inst_cat;\n  console.log('changed category to ' + String(inst_cat));\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL25ldHdvcmsvY2hhbmdlX2NhdGVnb3J5LmpzP2E2NTgiXSwic291cmNlc0NvbnRlbnQiOlsiXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHBhcmFtcywgaW5zdF9jYXQpIHtcbiAgLy8gY2hhbmdlIHRoZSBjYXRlZ29yeVxuICBwYXJhbXMuY3VycmVudF9jb2xfY2F0ID0gaW5zdF9jYXQ7XG4gIGNvbnNvbGUubG9nKCdjaGFuZ2VkIGNhdGVnb3J5IHRvICcgKyBTdHJpbmcoaW5zdF9jYXQpKTtcbn07XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBzcmMvbmV0d29yay9jaGFuZ2VfY2F0ZWdvcnkuanNcbiAqKi8iXSwibWFwcGluZ3MiOiI7QUFDQTs7QUFFQTtBQUNBO0FBSEEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	eval("var utils = __webpack_require__(2);\nvar ini_sliders = __webpack_require__(51);\n\nmodule.exports = function (filter_type, parameters) {\n  var params = parameters || this.params;\n  // filter\n  ////////////////////\n\n  var views = params.network_data.views;\n  var all_views = _.filter(views, function (d) {\n    return utils.has(d, filter_type);\n  });\n\n  var cgm = this;\n\n  // // filter for column category if necessary\n  // if ( utils.has(all_views[0],'col_cat') ) {\n\n  //   // get views with current_col_cat\n  //   all_views = _.filter(all_views, function(d){\n  //     if (d.col_cat == params.current_col_cat){\n  //       return d;\n  //     }\n  //   })\n  // }\n\n  console.log('found ' + String(all_views.length) + ' views for ' + filter_type);\n\n  var inst_max = all_views.length - 1;\n\n  // make dictionary\n  var N_dict = {};\n\n  // filters\n  var all_filt = _.pluck(params.network_data.views, 'N_row_sum');\n\n  all_filt.forEach(function (d) {\n    var tmp_index = _.indexOf(all_filt, d);\n\n    N_dict[tmp_index] = d;\n  });\n\n  var update_network = this.update_network;\n\n  $('.slider_' + filter_type).slider({\n    value: 0,\n    min: 0,\n    max: inst_max,\n    step: 1,\n    stop: function (event, ui) {\n\n      // get value\n      var inst_index = $('.slider_' + filter_type).slider(\"value\");\n\n      var inst_top = N_dict[inst_index];\n\n      var change_view = { 'N_row_sum': inst_top };\n      var filter_name = 'N_row_sum';\n\n      var viz_svg = cgm.params.viz.viz_svg;\n\n      d3.select(viz_svg).style('opacity', 0.70);\n\n      d3.select('.' + filter_type).text('Top rows: ' + inst_top + ' rows');\n\n      // $('.slider_filter').slider('disable');\n      d3.selectAll('.btn').attr('disabled', true);\n      d3.selectAll('.category_section').on('click', '').select('text').style('opacity', 0.5);\n\n      cgm.update_network(cgm.params, change_view);\n\n      ini_sliders(cgm);\n\n      function enable_slider() {\n        // $('.slider_filter').slider('enable');\n        d3.selectAll('.btn').attr('disabled', null);\n        // d3.selectAll('.category_section')\n        //   .on('click', category_key_click)\n        //   .select('text')\n        //   .style('opacity',1);\n      }\n      setTimeout(enable_slider, 2500);\n    }\n  });\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2ZpbHRlcnMvc2V0X3VwX05fZmlsdGVycy5qcz8wNmY0Il0sInNvdXJjZXNDb250ZW50IjpbInZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgaW5pX3NsaWRlcnMgPSByZXF1aXJlKCcuL2luaV9zbGlkZXJzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZmlsdGVyX3R5cGUsIHBhcmFtZXRlcnMpIHtcbiAgdmFyIHBhcmFtcyA9IHBhcmFtZXRlcnMgfHwgdGhpcy5wYXJhbXM7XG4gIC8vIGZpbHRlclxuICAvLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gIHZhciB2aWV3cyA9IHBhcmFtcy5uZXR3b3JrX2RhdGEudmlld3M7XG4gIHZhciBhbGxfdmlld3MgPSBfLmZpbHRlcih2aWV3cywgZnVuY3Rpb24oZCkgeyByZXR1cm4gdXRpbHMuaGFzKGQsZmlsdGVyX3R5cGUpOyB9KTtcblxuICB2YXIgY2dtID0gdGhpcztcblxuICAvLyAvLyBmaWx0ZXIgZm9yIGNvbHVtbiBjYXRlZ29yeSBpZiBuZWNlc3NhcnlcbiAgLy8gaWYgKCB1dGlscy5oYXMoYWxsX3ZpZXdzWzBdLCdjb2xfY2F0JykgKSB7XG5cbiAgLy8gICAvLyBnZXQgdmlld3Mgd2l0aCBjdXJyZW50X2NvbF9jYXRcbiAgLy8gICBhbGxfdmlld3MgPSBfLmZpbHRlcihhbGxfdmlld3MsIGZ1bmN0aW9uKGQpe1xuICAvLyAgICAgaWYgKGQuY29sX2NhdCA9PSBwYXJhbXMuY3VycmVudF9jb2xfY2F0KXtcbiAgLy8gICAgICAgcmV0dXJuIGQ7XG4gIC8vICAgICB9XG4gIC8vICAgfSlcbiAgLy8gfVxuXG4gIGNvbnNvbGUubG9nKCAnZm91bmQgJyArIFN0cmluZyhhbGxfdmlld3MubGVuZ3RoKSArJyB2aWV3cyBmb3IgJyArIGZpbHRlcl90eXBlICk7XG5cbiAgdmFyIGluc3RfbWF4ID0gYWxsX3ZpZXdzLmxlbmd0aCAtIDE7XG5cbiAgLy8gbWFrZSBkaWN0aW9uYXJ5XG4gIHZhciBOX2RpY3QgPSB7fTtcblxuICAvLyBmaWx0ZXJzXG4gIHZhciBhbGxfZmlsdCA9IF8ucGx1Y2soIHBhcmFtcy5uZXR3b3JrX2RhdGEudmlld3MsJ05fcm93X3N1bScpO1xuXG4gIGFsbF9maWx0LmZvckVhY2goZnVuY3Rpb24oZCl7XG4gICAgdmFyIHRtcF9pbmRleCA9IF8uaW5kZXhPZihhbGxfZmlsdCwgZCk7XG5cbiAgICBOX2RpY3RbdG1wX2luZGV4XSA9IGQ7XG5cbiAgfSk7XG5cbiAgdmFyIHVwZGF0ZV9uZXR3b3JrID0gdGhpcy51cGRhdGVfbmV0d29yaztcblxuXG4gICQoICcuc2xpZGVyXycrZmlsdGVyX3R5cGUgKS5zbGlkZXIoe1xuICAgIHZhbHVlOjAsXG4gICAgbWluOiAwLFxuICAgIG1heDogaW5zdF9tYXgsXG4gICAgc3RlcDogMSxcbiAgICBzdG9wOiBmdW5jdGlvbiggZXZlbnQsIHVpICkge1xuXG4gICAgICAvLyBnZXQgdmFsdWVcbiAgICAgIHZhciBpbnN0X2luZGV4ID0gJCggJy5zbGlkZXJfJytmaWx0ZXJfdHlwZSApLnNsaWRlciggXCJ2YWx1ZVwiICk7XG5cbiAgICAgIHZhciBpbnN0X3RvcCA9IE5fZGljdFtpbnN0X2luZGV4XTtcblxuICAgICAgdmFyIGNoYW5nZV92aWV3ID0geydOX3Jvd19zdW0nOmluc3RfdG9wfTtcbiAgICAgIHZhciBmaWx0ZXJfbmFtZSA9ICdOX3Jvd19zdW0nO1xuXG4gICAgICB2YXIgdml6X3N2ZyA9IGNnbS5wYXJhbXMudml6LnZpel9zdmc7XG5cbiAgICAgIGQzLnNlbGVjdCh2aXpfc3ZnKS5zdHlsZSgnb3BhY2l0eScsMC43MCk7XG5cbiAgICAgIGQzLnNlbGVjdCgnLicrZmlsdGVyX3R5cGUpLnRleHQoJ1RvcCByb3dzOiAnK2luc3RfdG9wKycgcm93cycpO1xuXG4gICAgICAvLyAkKCcuc2xpZGVyX2ZpbHRlcicpLnNsaWRlcignZGlzYWJsZScpO1xuICAgICAgZDMuc2VsZWN0QWxsKCcuYnRuJykuYXR0cignZGlzYWJsZWQnLHRydWUpO1xuICAgICAgZDMuc2VsZWN0QWxsKCcuY2F0ZWdvcnlfc2VjdGlvbicpXG4gICAgICAgIC5vbignY2xpY2snLCAnJylcbiAgICAgICAgLnNlbGVjdCgndGV4dCcpXG4gICAgICAgIC5zdHlsZSgnb3BhY2l0eScsMC41KTtcblxuICAgICAgY2dtLnVwZGF0ZV9uZXR3b3JrKGNnbS5wYXJhbXMsIGNoYW5nZV92aWV3KTtcblxuICAgICAgaW5pX3NsaWRlcnMoY2dtKTtcblxuICAgICAgZnVuY3Rpb24gZW5hYmxlX3NsaWRlcigpe1xuICAgICAgICAvLyAkKCcuc2xpZGVyX2ZpbHRlcicpLnNsaWRlcignZW5hYmxlJyk7XG4gICAgICAgIGQzLnNlbGVjdEFsbCgnLmJ0bicpLmF0dHIoJ2Rpc2FibGVkJyxudWxsKTtcbiAgICAgICAgLy8gZDMuc2VsZWN0QWxsKCcuY2F0ZWdvcnlfc2VjdGlvbicpXG4gICAgICAgIC8vICAgLm9uKCdjbGljaycsIGNhdGVnb3J5X2tleV9jbGljaylcbiAgICAgICAgLy8gICAuc2VsZWN0KCd0ZXh0JylcbiAgICAgICAgLy8gICAuc3R5bGUoJ29wYWNpdHknLDEpO1xuICAgICAgfVxuICAgICAgc2V0VGltZW91dChlbmFibGVfc2xpZGVyLCAyNTAwKTtcblxuICAgIH1cbiAgfSk7XG5cbn07XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBzcmMvZmlsdGVycy9zZXRfdXBfTl9maWx0ZXJzLmpzXG4gKiovIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBREE7QUFNQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7OztBQVRBO0FBQ0E7QUFzQkE7QUFDQTs7QUF4QkE7QUFDQTs7QUFEQTtBQUNBO0FBOEJBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFDQTtBQU1BO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFmQTtBQWtCQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7QUFGQTtBQVFBO0FBbkNBO0FBTEE7QUF6Q0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 51 */
/***/ function(module, exports) {

	eval("module.exports = function (cgm) {\n\n  // col groups\n  $(\".slider_col\").slider({\n    value: 0.5,\n    min: 0,\n    max: 1,\n    step: 0.1,\n    slide: function (event, ui) {\n      $(\"#amount\").val(\"$\" + ui.value);\n      var inst_index = ui.value * 10;\n      cgm.change_groups('col', inst_index);\n    }\n  });\n  $(\"#amount\").val(\"$\" + $(\".slider_col\").slider(\"value\"));\n\n  // row groups\n  $(\".slider_row\").slider({\n    value: 0.5,\n    min: 0,\n    max: 1,\n    step: 0.1,\n    slide: function (event, ui) {\n      $(\"#amount\").val(\"$\" + ui.value);\n      var inst_index = ui.value * 10;\n      cgm.change_groups('row', inst_index);\n    }\n  });\n  $(\"#amount\").val(\"$\" + $(\".slider_row\").slider(\"value\"));\n\n  // opacity scale\n  $(\"#slider_opacity\").slider({\n    value: 0.2,\n    min: 0.0,\n    max: 1.0,\n    step: 0.1,\n    slide: function (event, ui) {\n      $(\"#amount\").val(\"$\" + ui.value);\n      var inst_index = ui.value;\n      cgm.opacity_slider(inst_index);\n    }\n  });\n  $(\"#amount\").val(\"$\" + $(\"#slider_opacity\").slider(\"value\"));\n\n  $('.gene_search_box').autocomplete({\n    source: cgm.get_genes()\n  });\n\n  // submit genes button\n  $('.gene_search_box').keyup(function (e) {\n    if (e.keyCode === 13) {\n      var search_gene = $('.gene_search_box').val();\n      cgm.find_gene(search_gene);\n    }\n  });\n\n  $('.submit_gene_button').off().click(function () {\n    var gene = $('.gene_search_box').val();\n    cgm.find_gene(gene);\n  });\n\n  $('.toggle_row_order .btn').off().click(function (evt) {\n    var order_id = $(evt.target).attr('name').split('_')[0];\n    console.log('toggle_row_order');\n    d3.selectAll('.toggle_row_order .btn').classed('active', false);\n    d3.select(this).classed('active', true);\n    cgm.reorder(cgm.params, order_id, 'row');\n  });\n\n  $('.toggle_col_order .btn').off().click(function (evt) {\n    var order_id = $(evt.target).attr('name').split('_')[0];\n    console.log('toggle_col_order');\n    d3.selectAll('.toggle_col_order .btn').classed('active', false);\n    d3.select(this).classed('active', true);\n    cgm.reorder(cgm.params, order_id, 'col');\n  });\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2ZpbHRlcnMvaW5pX3NsaWRlcnMuanM/OGQxZSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGNnbSl7XG5cbiAgLy8gY29sIGdyb3Vwc1xuICAgICQoIFwiLnNsaWRlcl9jb2xcIiApLnNsaWRlcih7XG4gICAgICB2YWx1ZTowLjUsXG4gICAgICBtaW46IDAsXG4gICAgICBtYXg6IDEsXG4gICAgICBzdGVwOiAwLjEsXG4gICAgICBzbGlkZTogZnVuY3Rpb24oIGV2ZW50LCB1aSApIHtcbiAgICAgICAgJCggXCIjYW1vdW50XCIgKS52YWwoIFwiJFwiICsgdWkudmFsdWUgKTtcbiAgICAgICAgdmFyIGluc3RfaW5kZXggPSB1aS52YWx1ZSoxMDtcbiAgICAgICAgY2dtLmNoYW5nZV9ncm91cHMoJ2NvbCcsaW5zdF9pbmRleClcbiAgICAgIH1cbiAgICB9KTtcbiAgICAkKCBcIiNhbW91bnRcIiApLnZhbCggXCIkXCIgKyAkKCBcIi5zbGlkZXJfY29sXCIgKS5zbGlkZXIoIFwidmFsdWVcIiApICk7XG5cbiAgICAvLyByb3cgZ3JvdXBzXG4gICAgJCggXCIuc2xpZGVyX3Jvd1wiICkuc2xpZGVyKHtcbiAgICAgIHZhbHVlOjAuNSxcbiAgICAgIG1pbjogMCxcbiAgICAgIG1heDogMSxcbiAgICAgIHN0ZXA6IDAuMSxcbiAgICAgIHNsaWRlOiBmdW5jdGlvbiggZXZlbnQsIHVpICkge1xuICAgICAgICAkKCBcIiNhbW91bnRcIiApLnZhbCggXCIkXCIgKyB1aS52YWx1ZSApO1xuICAgICAgICB2YXIgaW5zdF9pbmRleCA9IHVpLnZhbHVlKjEwO1xuICAgICAgICBjZ20uY2hhbmdlX2dyb3Vwcygncm93JyxpbnN0X2luZGV4KVxuICAgICAgfVxuICAgIH0pO1xuICAgICQoIFwiI2Ftb3VudFwiICkudmFsKCBcIiRcIiArICQoIFwiLnNsaWRlcl9yb3dcIiApLnNsaWRlciggXCJ2YWx1ZVwiICkgKTtcblxuICAgIC8vIG9wYWNpdHkgc2NhbGVcbiAgICAkKCBcIiNzbGlkZXJfb3BhY2l0eVwiICkuc2xpZGVyKHtcbiAgICAgIHZhbHVlOjAuMixcbiAgICAgIG1pbjogMC4wLFxuICAgICAgbWF4OiAxLjAsXG4gICAgICBzdGVwOiAwLjEsXG4gICAgICBzbGlkZTogZnVuY3Rpb24oIGV2ZW50LCB1aSApIHtcbiAgICAgICAgJCggXCIjYW1vdW50XCIgKS52YWwoIFwiJFwiICsgdWkudmFsdWUgKTtcbiAgICAgICAgdmFyIGluc3RfaW5kZXggPSB1aS52YWx1ZTtcbiAgICAgICAgY2dtLm9wYWNpdHlfc2xpZGVyKGluc3RfaW5kZXgpXG4gICAgICB9XG4gICAgfSk7XG4gICAgJCggXCIjYW1vdW50XCIgKS52YWwoIFwiJFwiICsgJCggXCIjc2xpZGVyX29wYWNpdHlcIiApLnNsaWRlciggXCJ2YWx1ZVwiICkgKTtcblxuICAgICQoJy5nZW5lX3NlYXJjaF9ib3gnKS5hdXRvY29tcGxldGUoe1xuICAgICAgc291cmNlOiBjZ20uZ2V0X2dlbmVzKClcbiAgICB9KTtcblxuICAgIC8vIHN1Ym1pdCBnZW5lcyBidXR0b25cbiAgICAkKCcuZ2VuZV9zZWFyY2hfYm94Jykua2V5dXAoZnVuY3Rpb24oZSkge1xuICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMTMpIHtcbiAgICAgICAgdmFyIHNlYXJjaF9nZW5lID0gJCgnLmdlbmVfc2VhcmNoX2JveCcpLnZhbCgpO1xuICAgICAgICBjZ20uZmluZF9nZW5lKHNlYXJjaF9nZW5lKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgICQoJy5zdWJtaXRfZ2VuZV9idXR0b24nKS5vZmYoKS5jbGljayhmdW5jdGlvbigpIHtcbiAgICAgIHZhciBnZW5lID0gJCgnLmdlbmVfc2VhcmNoX2JveCcpLnZhbCgpO1xuICAgICAgY2dtLmZpbmRfZ2VuZShnZW5lKTtcbiAgICB9KTtcblxuICAgICQoJy50b2dnbGVfcm93X29yZGVyIC5idG4nKS5vZmYoKS5jbGljayhmdW5jdGlvbihldnQpIHtcbiAgICAgIHZhciBvcmRlcl9pZCA9ICQoZXZ0LnRhcmdldCkuYXR0cignbmFtZScpLnNwbGl0KCdfJylbMF07XG4gICAgICBjb25zb2xlLmxvZygndG9nZ2xlX3Jvd19vcmRlcicpXG4gICAgICBkMy5zZWxlY3RBbGwoJy50b2dnbGVfcm93X29yZGVyIC5idG4nKS5jbGFzc2VkKCdhY3RpdmUnLGZhbHNlKTtcbiAgICAgIGQzLnNlbGVjdCh0aGlzKS5jbGFzc2VkKCdhY3RpdmUnLHRydWUpO1xuICAgICAgY2dtLnJlb3JkZXIoY2dtLnBhcmFtcywgb3JkZXJfaWQsJ3JvdycpO1xuICAgIH0pO1xuXG4gICAgJCgnLnRvZ2dsZV9jb2xfb3JkZXIgLmJ0bicpLm9mZigpLmNsaWNrKGZ1bmN0aW9uKGV2dCkge1xuICAgICAgdmFyIG9yZGVyX2lkID0gJChldnQudGFyZ2V0KS5hdHRyKCduYW1lJykuc3BsaXQoJ18nKVswXTtcbiAgICAgIGNvbnNvbGUubG9nKCd0b2dnbGVfY29sX29yZGVyJylcbiAgICAgIGQzLnNlbGVjdEFsbCgnLnRvZ2dsZV9jb2xfb3JkZXIgLmJ0bicpLmNsYXNzZWQoJ2FjdGl2ZScsZmFsc2UpO1xuICAgICAgZDMuc2VsZWN0KHRoaXMpLmNsYXNzZWQoJ2FjdGl2ZScsdHJ1ZSk7XG4gICAgICBjZ20ucmVvcmRlcihjZ20ucGFyYW1zLCBvcmRlcl9pZCwnY29sJyk7XG4gICAgfSk7XG5cblxufTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHNyYy9maWx0ZXJzL2luaV9zbGlkZXJzLmpzXG4gKiovIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBTEE7QUFXQTtBQUNBOztBQWZBO0FBa0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUxBO0FBV0E7QUFDQTs7QUE3QkE7QUFnQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBTEE7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBQ0E7O0FBN0NBO0FBa0RBO0FBQ0E7QUFDQTtBQUZBO0FBREE7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUZBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTEE7QUFyRUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }
/******/ ]);