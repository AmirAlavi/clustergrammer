var Clustergrammer =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var make_config = __webpack_require__(1);
	var make_params = __webpack_require__(9);
	var make_viz = __webpack_require__(48);
	var resize_viz = __webpack_require__(86);
	var play_demo = __webpack_require__(111);
	var ini_demo = __webpack_require__(151);
	var update_viz_with_view = __webpack_require__(123);
	var filter_viz_using_nodes = __webpack_require__(154);
	var filter_viz_using_names = __webpack_require__(155);
	var update_cats = __webpack_require__(156);
	var reset_cats = __webpack_require__(157);

	var d3 = __webpack_require__(159);
	var math = __webpack_require__(160);

	// moved d3.slider to src
	d3.slider = __webpack_require__(662);

	var awesomplete = __webpack_require__(663);

	// getting css from src
	__webpack_require__(664);
	__webpack_require__(668);
	__webpack_require__(670);
	__webpack_require__(672);

	/* clustergrammer 1.0
	 * Nick Fernandez, Ma'ayan Lab, Icahn School of Medicine at Mount Sinai
	 * (c) 2016
	 */
	function Clustergrammer(args) {

	  /* Main program
	   * ----------------------------------------------------------------------- */
	  // consume and validate user input
	  // build giant config object
	  // visualize based on config object
	  // handle user events

	  // consume and validate user arguments, produce configuration object
	  var config = make_config(args);

	  var cgm = {};

	  // make visualization parameters using configuration object
	  cgm.params = make_params(config);
	  cgm.config = config;

	  if (cgm.params.use_sidebar) {
	    var make_sidebar = __webpack_require__(674);
	    make_sidebar(cgm);
	  }

	  // make visualization using parameters
	  make_viz(cgm);

	  function external_resize() {

	    d3.select(cgm.params.viz.viz_svg).style('opacity', 0.5);

	    var wait_time = 500;
	    if (this.params.viz.run_trans === true) {
	      wait_time = 2500;
	    }

	    setTimeout(resize_fun, wait_time, this);
	  }

	  function resize_fun(cgm) {
	    resize_viz(cgm);
	  }

	  function external_update_view(requested_view) {
	    update_viz_with_view(this, requested_view);
	  }

	  function run_update_cats(cat_data) {
	    update_cats(this, cat_data);
	  }

	  // add more API endpoints
	  cgm.update_view = external_update_view;
	  cgm.resize_viz = external_resize;
	  cgm.play_demo = play_demo;
	  cgm.ini_demo = ini_demo;
	  cgm.filter_viz_using_nodes = filter_viz_using_nodes;
	  cgm.filter_viz_using_names = filter_viz_using_names;
	  cgm.update_cats = run_update_cats;
	  cgm.reset_cats = reset_cats;
	  return cgm;
	}

	module.exports = Clustergrammer;

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(2);
	var transpose_network = __webpack_require__(3);
	var get_available_filters = __webpack_require__(4);
	var get_filter_default_state = __webpack_require__(5);
	var set_defaults = __webpack_require__(6);
	var check_sim_mat = __webpack_require__(7);
	var check_nodes_for_categories = __webpack_require__(8);

	module.exports = function make_config(args) {

	  var defaults = set_defaults();

	  // Mixin defaults with user-defined arguments.
	  var config = utils.extend(defaults, args);

	  config.network_data = args.network_data;

	  var super_string = ': ';

	  // replace undersores with space in row/col names
	  _.each(['row', 'col'], function (inst_rc) {

	    var inst_nodes = config.network_data[inst_rc + '_nodes'];

	    var has_cats = check_nodes_for_categories(inst_nodes);

	    inst_nodes.forEach(function (d) {

	      if (has_cats) {
	        config.super_labels = true;
	        config.super[inst_rc] = d.name.split(super_string)[0];
	        d.name = d.name.split(super_string)[1];
	      }

	      d.name = d.name.replace(/_/g, ' ');
	    });
	  });

	  config.network_data.row_nodes_names = utils.pluck(config.network_data.row_nodes, 'name');
	  config.network_data.col_nodes_names = utils.pluck(config.network_data.col_nodes, 'name');

	  config.sim_mat = check_sim_mat(config);

	  var filters = get_available_filters(config.network_data.views);

	  var default_states = {};
	  _.each(_.keys(filters.possible_filters), function (inst_filter) {
	    var tmp_state = get_filter_default_state(filters.filter_data, inst_filter);

	    default_states[inst_filter] = tmp_state;
	  });

	  // process view
	  if (_.has(config.network_data, 'views')) {
	    config.network_data.views.forEach(function (inst_view) {

	      _.each(_.keys(filters.possible_filters), function (inst_filter) {
	        if (!_.has(inst_view, inst_filter)) {
	          inst_view[inst_filter] = default_states[inst_filter];
	        }
	      });

	      var inst_nodes = inst_view.nodes;

	      // proc row/col nodes names in views
	      _.each(['row', 'col'], function (inst_rc) {

	        var has_cats = check_nodes_for_categories(inst_nodes[inst_rc + '_nodes']);

	        inst_nodes[inst_rc + '_nodes'].forEach(function (d) {

	          if (has_cats) {
	            d.name = d.name.split(super_string)[1];
	          }

	          d.name = d.name.replace(/_/g, ' ');
	        });
	      });
	    });
	  }

	  var col_nodes = config.network_data.col_nodes;
	  var row_nodes = config.network_data.row_nodes;

	  // add names and instantaneous positions to links
	  config.network_data.links.forEach(function (d) {
	    d.name = row_nodes[d.source].name + '_' + col_nodes[d.target].name;
	    d.row_name = row_nodes[d.source].name;
	    d.col_name = col_nodes[d.target].name;
	  });

	  // transpose network if necessary
	  if (config.transpose) {
	    config.network_data = transpose_network(config.network_data);
	    var tmp_col_label = args.col_label;
	    var tmp_row_label = args.row_label;
	    args.row_label = tmp_col_label;
	    args.col_label = tmp_row_label;
	  }

	  // super-row/col labels
	  if (!utils.is_undefined(args.row_label) && !utils.is_undefined(args.col_label)) {
	    config.super_labels = true;
	    config.super = {};
	    config.super.row = args.row_label;
	    config.super.col = args.col_label;
	  }

	  // initialize cluster ordering - both rows and columns
	  config.inst_order = {};
	  if (!utils.is_undefined(args.order) && utils.is_supported_order(args.order)) {
	    config.inst_order.row = args.order;
	    config.inst_order.col = args.order;
	  } else {
	    config.inst_order.row = 'clust';
	    config.inst_order.col = 'clust';
	  }

	  // set row or column order directly -- note that row/col are swapped
	  // !! need to swap row/col orderings
	  if (!utils.is_undefined(args.row_order) && utils.is_supported_order(args.row_order)) {
	    // !! row and col orderings are swapped, need to fix
	    config.inst_order.col = args.row_order;
	  }

	  if (!utils.is_undefined(args.col_order) && utils.is_supported_order(args.col_order)) {
	    // !! row and col orderings are swapped, need to fix
	    config.inst_order.row = args.col_order;
	  }

	  var row_has_group = utils.has(config.network_data.row_nodes[0], 'group');
	  var col_has_group = utils.has(config.network_data.col_nodes[0], 'group');

	  config.show_dendrogram = row_has_group || col_has_group;

	  if (utils.has(config.network_data.links[0], 'value_orig')) {
	    config.keep_orig = true;
	  } else {
	    config.keep_orig = false;
	  }

	  return config;
	};

/***/ },
/* 2 */
/***/ function(module, exports) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	/* Utility functions
	 * ----------------------------------------------------------------------- */
	module.exports = {
	  normal_name: function normal_name(d) {
	    var inst_name = d.name.replace(/_/g, ' ').split('#')[0];
	    return inst_name;
	  },
	  is_supported_order: function is_supported_order(order) {
	    return order === 'ini' || order === 'clust' || order === 'rank_var' || order === 'rank' || order === 'class' || order == 'alpha';
	  },

	  /* Returns whether or not an object has a certain property.
	   */
	  has: function has(obj, key) {
	    return obj != null && hasOwnProperty.call(obj, key);
	  },

	  property: function property(key) {
	    return function (obj) {
	      return obj == null ? void 0 : obj[key];
	    };
	  },

	  // Convenience version of a common use case of `map`: fetching a property.
	  pluck: function pluck(arr, key) {
	    var self = this;
	    // Double check that we have lodash or underscore available
	    if (window._) {
	      // Underscore provides a _.pluck function. Use that.
	      if (typeof _.pluck === 'function') {
	        return _.pluck(arr, key);
	      } else if (typeof _.map === 'function') {
	        // Lodash does not have a pluck function.
	        // Use _.map with the property function defined above.
	        return _.map(arr, self.property(key));
	      }
	    } else if (arr.map && typeof arr.map === 'function') {
	      // If lodash or underscore not available, check to see if the native arr.map is available.
	      // If so, use it with the property function defined above.
	      return arr.map(self.property(key));
	    }
	  },

	  /* Returns true if the object is undefined.
	   */
	  is_undefined: function is_undefined(obj) {
	    return obj === void 0;
	  },

	  /* Mixes two objects in together, overwriting a target with a source.
	   */
	  extend: function extend(target, source) {
	    target = target || {};
	    for (var prop in source) {
	      if (_typeof(source[prop]) === 'object') {
	        target[prop] = this.extend(target[prop], source[prop]);
	      } else {
	        target[prop] = source[prop];
	      }
	    }
	    return target;
	  }
		};

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(2);
	/* Transpose network.
	 */
	module.exports = function (net) {
	  var tnet = {},
	      inst_link,
	      i;

	  tnet.row_nodes = net.col_nodes;
	  tnet.col_nodes = net.row_nodes;
	  tnet.links = [];

	  for (i = 0; i < net.links.length; i++) {
	    inst_link = {};
	    inst_link.source = net.links[i].target;
	    inst_link.target = net.links[i].source;
	    inst_link.value = net.links[i].value;

	    // Optional highlight.
	    if (utils.has(net.links[i], 'highlight')) {
	      inst_link.highlight = net.links[i].highlight;
	    }
	    if (utils.has(net.links[i], 'value_up')) {
	      inst_link.value_up = net.links[i].value_up;
	    }
	    if (utils.has(net.links[i], 'value_dn')) {
	      inst_link.value_dn = net.links[i].value_dn;
	    }
	    if (utils.has(net.links[i], 'info')) {
	      inst_link.info = net.links[i].info;
	    }
	    tnet.links.push(inst_link);
	  }

	  return tnet;
	};

/***/ },
/* 4 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function get_available_filters(views) {

	  var possible_filters = {};
	  var filter_data = {};

	  _.each(views, function (inst_view) {
	    var inst_keys = _.keys(inst_view);

	    _.each(inst_keys, function (inst_key) {

	      if (inst_key != 'nodes') {

	        if (!_.has(filter_data, inst_key)) {
	          filter_data[inst_key] = [];
	        }

	        filter_data[inst_key].push(inst_view[inst_key]);

	        filter_data[inst_key] = _.uniq(filter_data[inst_key]);
	      }
	    });
	  });

	  var tmp_filters = _.keys(filter_data);

	  _.each(tmp_filters, function (inst_filter) {

	    var options = filter_data[inst_filter];
	    var num_options = options.length;

	    var filter_type = 'categorical';
	    _.each(options, function (inst_option) {
	      if (typeof inst_option === 'number') {
	        filter_type = 'numerical';
	      }
	    });

	    if (num_options > 1) {
	      possible_filters[inst_filter] = filter_type;
	    }
	  });

	  var filters = {};
	  filters.possible_filters = possible_filters;
	  filters.filter_data = filter_data;

	  return filters;
		};

/***/ },
/* 5 */
/***/ function(module, exports) {

	"use strict";

	module.exports = function get_filter_default_state(filter_data, filter_type) {

	  var default_state = filter_data[filter_type].sort(function (a, b) {
	    return b - a;
	  })[0];

	  default_state = String(default_state);

	  return default_state;
	};

/***/ },
/* 6 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function set_defaults() {

	  var defaults = {
	    // Label options
	    row_label_scale: 1,
	    col_label_scale: 1,
	    super_labels: false,
	    super: {},
	    show_label_tooltips: true,
	    show_tile_tooltips: true,
	    // matrix options
	    transpose: false,
	    tile_colors: ['#FF0000', '#1C86EE'],
	    bar_colors: ['#FF0000', '#1C86EE'],
	    outline_colors: ['orange', 'black'],
	    highlight_color: '#FFFF00',
	    tile_title: false,
	    // Default domain is set to 0: the domain will be set automatically
	    input_domain: 0,
	    opacity_scale: 'linear',
	    do_zoom: true,
	    is_zoom: 0,
	    background_color: '#FFFFFF',
	    super_border_color: '#F5F5F5',
	    outer_margins: {
	      top: 0,
	      bottom: 0,
	      left: 0,
	      right: 0
	    },
	    ini_expand: false,
	    grey_border_width: 2,
	    tile_click_hlight: false,
	    super_label_scale: 1,
	    make_tile_tooltip: function make_tile_tooltip(d) {
	      return d.info;
	    },
	    // initialize view, e.g. initialize with row filtering
	    ini_view: null,
	    use_sidebar: true,
	    title: null,
	    about: null,
	    sidebar_width: 170,
	    sidebar_icons: true,
	    row_search_placeholder: 'Row',
	    buffer_width: 10,
	    show_sim_mat: false,
	    cat_colors: null,
	    resize: true,
	    clamp_opacity: 0.85,
	    expand_button: true,
	    max_allow_fs: 20,
	    dendro_filter: { 'row': false, 'col': false },
	    row_tip_callback: null,
	    new_cat_data: null
	  };

	  return defaults;
	};

/***/ },
/* 7 */
/***/ function(module, exports) {

	"use strict";

	module.exports = function check_sim_mat(config) {

	  var sim_mat = false;

	  var num_rows = config.network_data.row_nodes_names.length;
	  var num_cols = config.network_data.col_nodes_names.length;

	  if (num_rows == num_cols) {

	    // the sort here was causing errors 
	    var rows = config.network_data.row_nodes_names;
	    var cols = config.network_data.col_nodes_names;
	    sim_mat = true;

	    _.each(rows, function (inst_row) {
	      var inst_index = rows.indexOf(inst_row);
	      if (inst_row !== cols[inst_index]) {
	        sim_mat = false;
	      }
	    });
	  }

	  if (sim_mat) {
	    config.expand_button = false;
	  }

	  return sim_mat;
	};

/***/ },
/* 8 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function check_nodes_for_categories(nodes) {

	  var super_string = ': ';
	  var has_cat = true;

	  _.each(nodes, function (inst_node) {
	    if (inst_node.name.indexOf(super_string) < 0) {
	      has_cat = false;
	    }
	  });

	  return has_cat;
		};

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var make_network_using_view = __webpack_require__(10);
	var ini_sidebar_params = __webpack_require__(13);
	var make_requested_view = __webpack_require__(14);
	var get_available_filters = __webpack_require__(4);
	var calc_viz_params = __webpack_require__(15);

	/*
	Params: calculates the size of all the visualization elements in the
	clustergram.
	 */

	module.exports = function make_params(input_config) {

	  var config = $.extend(true, {}, input_config);
	  var params = config;

	  // keep a copy of inst_view
	  params.inst_nodes = {};
	  params.inst_nodes.row_nodes = params.network_data.row_nodes;
	  params.inst_nodes.col_nodes = params.network_data.col_nodes;

	  // when pre-loading the visualization using a view
	  if (params.ini_view !== null) {

	    var requested_view = params.ini_view;

	    var filters = get_available_filters(params.network_data.views);

	    params.viz = {};
	    params.viz.possible_filters = filters.possible_filters;
	    params.viz.filter_data = filters.filter_data;

	    requested_view = make_requested_view(params, requested_view);
	    params.network_data = make_network_using_view(config, params, requested_view);
	  }

	  params = calc_viz_params(params);

	  if (params.use_sidebar) {
	    params.sidebar = ini_sidebar_params(params);
	  }

	  return params;
	};

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var filter_network_using_new_nodes = __webpack_require__(11);
	var get_subset_views = __webpack_require__(12);

	module.exports = function make_network_using_view(config, params, requested_view) {

	  var orig_views = config.network_data.views;

	  var is_enr = false;
	  if (_.has(orig_views[0], 'enr_score_type')) {
	    is_enr = true;
	  }

	  var sub_views = get_subset_views(params, orig_views, requested_view);

	  //////////////////////////////
	  // Enrichr specific rules
	  //////////////////////////////
	  if (is_enr && sub_views.length == 0) {
	    requested_view = { 'N_row_sum': 'all', 'N_col_sum': '10' };
	    sub_views = get_subset_views(params, orig_views, requested_view);
	  }

	  var inst_view = sub_views[0];

	  var new_network_data;

	  // get new_network_data or default back to old_network_data
	  if (typeof inst_view !== 'undefined') {
	    var new_nodes = inst_view.nodes;
	    new_network_data = filter_network_using_new_nodes(config, new_nodes);
	  } else {
	    new_network_data = config.network_data;
	  }

	  return new_network_data;
	};

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(2);

	module.exports = function filter_network_using_new_nodes(config, new_nodes) {

	  var links = config.network_data.links;

	  // get new names of rows and cols
	  var row_names = utils.pluck(new_nodes.row_nodes, 'name');
	  var col_names = utils.pluck(new_nodes.col_nodes, 'name');

	  var new_links = _.filter(links, function (d) {
	    var inst_row = d.name.split('_')[0];
	    var inst_col = d.name.split('_')[1];

	    var row_index = _.indexOf(row_names, inst_row);
	    var col_index = _.indexOf(col_names, inst_col);

	    if (row_index > -1 & col_index > -1) {
	      // redefine source and target
	      d.source = row_index;
	      d.target = col_index;
	      return d;
	    }
	  });

	  // set up new_network_data
	  var new_network_data = {};
	  // rows
	  new_network_data.row_nodes = new_nodes.row_nodes;
	  new_network_data.row_nodes_names = row_names;
	  // cols
	  new_network_data.col_nodes = new_nodes.col_nodes;
	  new_network_data.col_nodes_names = col_names;
	  // links
	  new_network_data.links = new_links;
	  // save all links
	  new_network_data.all_links = links;
	  // add back all views
	  new_network_data.views = config.network_data.views;

	  return new_network_data;
	};

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(2);
	var get_filter_default_state = __webpack_require__(5);

	module.exports = function get_subset_views(params, views, requested_view) {

	  var inst_value;
	  var found_filter;

	  var request_filters = _.keys(requested_view);

	  // find a view that matches all of the requested view/filter-attributes 
	  _.each(request_filters, function (inst_filter) {

	    inst_value = requested_view[inst_filter];

	    // if the value is a number, then convert it to an integer 
	    if (/[^a-z_]/i.test(inst_value)) {
	      inst_value = parseInt(inst_value, 10);
	    }

	    // only run filtering if any of the views has the filter 
	    found_filter = false;
	    _.each(views, function (tmp_view) {
	      if (utils.has(tmp_view, inst_filter)) {
	        found_filter = true;
	      }
	    });

	    if (found_filter) {
	      views = _.filter(views, function (d) {
	        return d[inst_filter] == inst_value;
	      });
	    }
	  });

	  // remove duplicate complete default states 
	  var export_views = [];
	  var found_default = false;
	  var check_default;
	  var inst_default_state;

	  // check if each view is a default state: all filters are at default 
	  // there can only be one of these 
	  _.each(views, function (inst_view) {

	    check_default = true;

	    // check each filter in a view to see if it is in the default state 
	    _.each(_.keys(params.viz.possible_filters), function (inst_filter) {

	      inst_default_state = get_filter_default_state(params.viz.filter_data, inst_filter);

	      if (inst_view[inst_filter] != inst_default_state) {
	        check_default = false;
	      }
	    });

	    // found defaule view, only append if you have not already found a default
	    if (check_default) {
	      if (found_default === false) {
	        found_default = true;
	        export_views.push(inst_view);
	      }
	    } else {
	      export_views.push(inst_view);
	    }
	  });

	  // if (export_views.length > 1){
	  //   console.log('found more than one view in get_subset_views')
	  //   console.log(requested_view)
	  //   console.log(export_views)
	  // } else {
	  //   console.log('found single view in get_subset_views')
	  //   console.log(requested_view)
	  //   console.log(export_views[0])
	  //   console.log('\n')
	  // }

	  return export_views;
		};

/***/ },
/* 13 */
/***/ function(module, exports) {

	"use strict";

	module.exports = function ini_sidebar_params(params) {
	  var sidebar = {};

	  sidebar.wrapper = {};
	  sidebar.wrapper.width = 170;

	  sidebar.row_search = {};
	  sidebar.row_search.box = {};
	  sidebar.row_search.box.height = 34;
	  sidebar.row_search.box.width = 95;
	  sidebar.row_search.placeholder = params.row_search_placeholder;
	  sidebar.row_search.margin_left = 7;

	  sidebar.slider = {};
	  sidebar.slider.width = params.sidebar_width - 30;
	  sidebar.slider.margin_left = 15;

	  sidebar.key_cat = {};
	  sidebar.key_cat.width = params.sidebar_width - 15;
	  sidebar.key_cat.margin_left = 5;
	  sidebar.key_cat.max_height = 100;

	  sidebar.title = params.title;
	  sidebar.title_margin_left = 7;
	  sidebar.about = params.about;
	  sidebar.width = params.sidebar_width;

	  sidebar.buttons = {};
	  sidebar.buttons.width = params.sidebar_width - 15;

	  sidebar.text = {};
	  sidebar.text.width = params.sidebar_width - 15;

	  sidebar.icons = params.sidebar_icons;
	  sidebar.icon_margin_left = -5;

	  return sidebar;
	};

/***/ },
/* 14 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function make_view_request(params, requested_view) {

	  // this will add all necessary information to a view request 
	  // it will grab necessary view information from the sliders 

	  // only one component will be changed at a time 
	  var changed_component = _.keys(requested_view)[0];

	  // add additional filter information from othe possible filters 
	  _.each(_.keys(params.viz.possible_filters), function (inst_filter) {

	    if (inst_filter != changed_component) {

	      if (!d3.select(params.root + ' .slider_' + inst_filter).empty()) {

	        var inst_state = d3.select(params.root + ' .slider_' + inst_filter).attr('current_state');

	        requested_view[inst_filter] = inst_state;
	      }
	    }
	  });

	  return requested_view;
		};

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var ini_label_params = __webpack_require__(16);
	var ini_viz_params = __webpack_require__(17);
	var set_viz_wrapper_size = __webpack_require__(22);
	var get_svg_dim = __webpack_require__(24);
	var calc_label_params = __webpack_require__(25);
	var calc_clust_width = __webpack_require__(26);
	var calc_clust_height = __webpack_require__(27);
	var calc_val_max = __webpack_require__(28);
	var calc_matrix_params = __webpack_require__(29);
	var set_zoom_params = __webpack_require__(32);
	var calc_default_fs = __webpack_require__(47);

	module.exports = function calc_viz_params(params) {
	  var preserve_cats = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];


	  params.labels = ini_label_params(params);
	  params.viz = ini_viz_params(params, preserve_cats);

	  set_viz_wrapper_size(params);

	  params = get_svg_dim(params);
	  params.viz = calc_label_params(params.viz);
	  params.viz = calc_clust_width(params.viz);
	  params.viz = calc_clust_height(params.viz);

	  if (params.sim_mat) {
	    if (params.viz.clust.dim.width <= params.viz.clust.dim.height) {
	      params.viz.clust.dim.height = params.viz.clust.dim.width;
	    } else {
	      params.viz.clust.dim.width = params.viz.clust.dim.height;
	    }
	  }

	  params = calc_val_max(params);
	  params = calc_matrix_params(params);
	  params = set_zoom_params(params);
	  params = calc_default_fs(params);

	  return params;
	};

/***/ },
/* 16 */
/***/ function(module, exports) {

	"use strict";

	module.exports = function set_label_params(params) {

	  var labels = {};
	  labels.super_label_scale = params.super_label_scale;
	  labels.super_labels = params.super_labels;
	  labels.super_label_fs = 13.8;

	  if (labels.super_labels) {
	    labels.super = {};
	    labels.super.row = params.super.row;
	    labels.super.col = params.super.col;
	  }

	  labels.show_label_tooltips = params.show_label_tooltips;

	  labels.row_max_char = _.max(params.network_data.row_nodes, function (inst) {
	    return inst.name.length;
	  }).name.length;

	  labels.col_max_char = _.max(params.network_data.col_nodes, function (inst) {
	    return inst.name.length;
	  }).name.length;

	  labels.max_allow_fs = params.max_allow_fs;

	  return labels;
	};

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(2);
	var get_available_filters = __webpack_require__(4);
	var make_cat_params = __webpack_require__(18);

	module.exports = function ini_viz_params(params) {
	  var preserve_cats = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];


	  var viz = {};

	  viz.root = params.root;
	  viz.viz_wrapper = params.root + ' .viz_wrapper';
	  viz.do_zoom = params.do_zoom;
	  viz.background_color = params.background_color;
	  viz.super_border_color = params.super_border_color;
	  viz.outer_margins = params.outer_margins;
	  viz.is_expand = params.ini_expand;
	  viz.grey_border_width = params.grey_border_width;
	  viz.show_dendrogram = params.show_dendrogram;
	  viz.tile_click_hlight = params.tile_click_hlight;
	  viz.inst_order = params.inst_order;
	  viz.expand_button = params.expand_button;
	  viz.sim_mat = params.sim_mat;
	  viz.dendro_filter = params.dendro_filter;

	  viz.viz_svg = viz.viz_wrapper + ' .viz_svg';

	  viz.zoom_element = viz.viz_wrapper + ' .viz_svg';

	  viz.uni_duration = 1000;
	  viz.bottom_space = 5;
	  viz.run_trans = false;
	  viz.duration = 1000;
	  if (viz.show_dendrogram) {
	    params.group_level = {};
	  }

	  viz.resize = params.resize;
	  if (utils.has(params, 'size')) {
	    viz.fixed_size = params.size;
	  } else {
	    viz.fixed_size = false;
	  }

	  // width is 1 over this value
	  viz.border_fraction = 55;
	  viz.uni_margin = 5;

	  viz.super_labels = {};
	  viz.super_labels.margin = {};
	  viz.super_labels.dim = {};
	  viz.super_labels.margin.left = viz.grey_border_width;
	  viz.super_labels.margin.top = viz.grey_border_width;
	  viz.super_labels.dim.width = 0;
	  if (params.labels.super_labels) {
	    viz.super_labels.dim.width = 15 * params.labels.super_label_scale;
	  }

	  viz.triangle_opacity = 0.6;

	  viz.norm_labels = {};
	  viz.norm_labels.width = {};

	  viz.dendro_room = {};
	  if (viz.show_dendrogram) {
	    viz.dendro_room.symbol_width = 10;
	  } else {
	    viz.dendro_room.symbol_width = 0;
	  }

	  viz.cat_colors = params.cat_colors;

	  viz = make_cat_params(params, viz, preserve_cats);

	  if (_.has(params, 'group_level')) {
	    params.group_level.row = 5;
	    params.group_level.col = 5;
	  }

	  viz.dendro_opacity = 0.35;

	  viz.spillover_col_slant = viz.norm_labels.width.col;

	  var filters = get_available_filters(params.network_data.views);

	  viz.possible_filters = filters.possible_filters;
	  viz.filter_data = filters.filter_data;

	  return viz;
	};

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var process_category_info = __webpack_require__(19);
	var calc_cat_params = __webpack_require__(21);

	module.exports = function make_cat_params(params, viz) {
	  var preserve_cats = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];


	  viz = process_category_info(params, viz, preserve_cats);
	  viz = calc_cat_params(params, viz);

	  return viz;
		};

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(2);
	var colors = __webpack_require__(20);

	module.exports = function process_category_info(params, viz) {
	  var preserve_cats = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];


	  var super_string = ': ';
	  var tmp_super;

	  viz.show_categories = {};
	  viz.all_cats = {};
	  viz.cat_names = {};

	  var predefine_colors = false;
	  if (viz.cat_colors === null) {
	    viz.cat_colors = {};
	    predefine_colors = false;
	  } else {
	    predefine_colors = true;
	  }

	  if (preserve_cats === false) {
	    predefine_colors = false;
	  }

	  var num_colors = 0;
	  _.each(['row', 'col'], function (inst_rc) {

	    viz.show_categories[inst_rc] = false;

	    viz.all_cats[inst_rc] = [];
	    var tmp_keys = _.keys(params.network_data[inst_rc + '_nodes'][0]);

	    _.each(tmp_keys, function (d) {
	      if (d.indexOf('cat-') >= 0) {
	        viz.show_categories[inst_rc] = true;
	        viz.all_cats[inst_rc].push(d);
	      }
	    });

	    if (viz.show_categories[inst_rc]) {

	      if (predefine_colors === false) {
	        viz.cat_colors[inst_rc] = {};
	      }

	      viz.cat_names[inst_rc] = {};

	      _.each(viz.all_cats[inst_rc], function (inst_cat) {

	        _.each(params.network_data[inst_rc + '_nodes'], function (inst_node) {

	          if (inst_node[inst_cat].indexOf(super_string) > 0) {
	            tmp_super = inst_node[inst_cat].split(super_string)[0];
	            viz.cat_names[inst_rc][inst_cat] = tmp_super;
	          } else {
	            viz.cat_names[inst_rc][inst_cat] = inst_cat;
	          }
	        });

	        var names_of_cat = _.uniq(utils.pluck(params.network_data[inst_rc + '_nodes'], inst_cat)).sort();

	        if (predefine_colors === false) {

	          viz.cat_colors[inst_rc][inst_cat] = {};

	          _.each(names_of_cat, function (cat_tmp, i) {

	            var inst_color = colors.get_random_color(i + num_colors);

	            viz.cat_colors[inst_rc][inst_cat][cat_tmp] = inst_color;

	            // hack to get 'Not' categories to not be dark colored
	            // also doing this for false
	            if (cat_tmp.indexOf('Not ') >= 0 || cat_tmp.indexOf(': false') > 0) {
	              viz.cat_colors[inst_rc][inst_cat][cat_tmp] = '#eee';
	            }

	            num_colors = num_colors + 1;
	          });
	        }
	      });
	    }

	    if (params.sim_mat) {
	      viz.cat_colors.row = viz.cat_colors.col;
	    }
	  });

	  viz.cat_colors = viz.cat_colors;

	  return viz;
	};

/***/ },
/* 20 */
/***/ function(module, exports) {

	"use strict";

	// colors from http://graphicdesign.stackexchange.com/revisions/3815/8
	var all_colors;

	all_colors = ["#393b79", "#aec7e8", "#ff7f0e", "#ffbb78", "#98df8a", "#bcbd22", "#404040", "#ff9896", "#c5b0d5", "#8c564b", "#1f77b4", "#5254a3", "#FFDB58", "#c49c94", "#e377c2", "#7f7f7f", "#2ca02c", "#9467bd", "#dbdb8d", "#17becf", "#637939", "#6b6ecf", "#9c9ede", "#d62728", "#8ca252", "#8c6d31", "#bd9e39", "#e7cb94", "#843c39", "#ad494a", "#d6616b", "#7b4173", "#a55194", "#ce6dbd", "#de9ed6"];

	// too light colors 
	// "#e7969c",
	// "#c7c7c7", 
	// "#f7b6d2", 
	// "#cedb9c", 
	// "#9edae5", 

	function get_default_color() {
	  return '#EEE';
	}

	function get_random_color(i) {
	  return all_colors[i % get_num_colors()];
	}

	function get_num_colors() {
	  return all_colors.length;
	}

	module.exports = {
	  get_default_color: get_default_color,
	  get_random_color: get_random_color,
	  get_num_colors: get_num_colors
		};

/***/ },
/* 21 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function calc_cat_params(params, viz) {

	  var separtion_room;

	  // increase the width of the label container based on the label length
	  var label_scale = d3.scale.linear().domain([5, 15]).range([85, 120]).clamp('true');

	  viz.cat_room = {};
	  viz.cat_room.symbol_width = 12;
	  viz.cat_room.separation = 3;

	  viz.cat_colors.opacity = 0.6;
	  viz.cat_colors.active_opacity = 0.9;

	  _.each(['row', 'col'], function (inst_rc) {

	    viz.norm_labels.width[inst_rc] = label_scale(params.labels[inst_rc + '_max_char']) * params[inst_rc + '_label_scale'];

	    viz['num_' + inst_rc + '_nodes'] = params.network_data[inst_rc + '_nodes'].length;

	    // if (_.has(config, 'group_level')){
	    //   config.group_level[inst_rc] = 5;
	    // }

	    if (inst_rc === 'row') {
	      viz.dendro_room[inst_rc] = viz.dendro_room.symbol_width;
	    } else {
	      viz.dendro_room[inst_rc] = viz.dendro_room.symbol_width + viz.uni_margin;
	    }

	    var num_cats = viz.all_cats[inst_rc].length;

	    if (viz.show_categories[inst_rc]) {

	      separtion_room = (num_cats - 1) * viz.cat_room.separation;

	      var adjusted_cats;
	      if (inst_rc === 'row') {
	        adjusted_cats = num_cats + 1;
	      } else {
	        adjusted_cats = num_cats;
	      }

	      viz.cat_room[inst_rc] = adjusted_cats * viz.cat_room.symbol_width + separtion_room;
	    } else {
	      // no categories
	      if (inst_rc == 'row') {
	        viz.cat_room[inst_rc] = viz.cat_room.symbol_width;
	      } else {
	        viz.cat_room[inst_rc] = 0;
	      }
	    }
	  });

	  return viz;
		};

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var calc_viz_dimensions = __webpack_require__(23);

	module.exports = function set_viz_wrapper_size(params) {

	  // Create wrapper around SVG visualization
	  if (d3.select(params.root + ' .viz_wrapper').empty()) {

	    d3.select(params.root).append('div').classed('sidebar_wrapper', true);

	    d3.select(params.root).append('div').classed('viz_wrapper', true);
	  }

	  var cont_dim = calc_viz_dimensions(params);

	  d3.select(params.root + ' .sidebar_wrapper').style('float', 'left').style('width', params.sidebar_width + 'px').style('height', cont_dim.height + 'px').style('overflow', 'hidden');

	  d3.select(params.viz.viz_wrapper).style('float', 'left').style('width', cont_dim.width + 'px').style('height', cont_dim.height + 'px');
		};

/***/ },
/* 23 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function calc_viz_dimensions(params) {

	  var cont_dim = {};
	  var extra_space = params.buffer_width;

	  // var screen_width = window.innerWidth;
	  // var screen_height = window.innerHeight;

	  // // resize container, then resize visualization within container 
	  // d3.select(params.root)
	  //   .style('width', screen_width+'px')
	  //   .style('height', screen_height+'px');

	  var container_width = d3.select(params.root).style('width').replace('px', '');
	  var container_height = d3.select(params.root).style('height').replace('px', '');

	  // get outer_margins
	  var outer_margins;
	  if (params.viz.is_expand === false) {
	    outer_margins = params.viz.outer_margins;
	    cont_dim.width = container_width - params.sidebar_width - extra_space;
	  } else {
	    outer_margins = params.viz.outer_margins;
	    cont_dim.width = container_width - extra_space;
	  }

	  cont_dim.top = outer_margins.top;
	  cont_dim.left = outer_margins.left;

	  if (params.viz.resize) {

	    cont_dim.height = container_height;
	  } else {

	    if (params.viz.is_expand) {
	      cont_dim.width = params.viz.fixed_size.width;
	    } else {
	      cont_dim.width = params.viz.fixed_size.width - params.sidebar_width;
	    }

	    cont_dim.height = params.viz.fixed_size.height;
	  }

	  return cont_dim;
		};

/***/ },
/* 24 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function get_svg_dim(params) {

	  params.viz.svg_dim = {};
	  params.viz.svg_dim.width = Number(d3.select(params.viz.viz_wrapper).style('width').replace('px', ''));

	  params.viz.svg_dim.height = Number(d3.select(params.viz.viz_wrapper).style('height').replace('px', ''));

	  return params;
	};

/***/ },
/* 25 */
/***/ function(module, exports) {

	"use strict";

	module.exports = function calc_label_params(viz) {

	  viz.norm_labels.margin = {};

	  viz.norm_labels.margin.left = viz.super_labels.margin.left + viz.super_labels.dim.width;

	  viz.norm_labels.margin.top = viz.super_labels.margin.top + viz.super_labels.dim.width;

	  viz.label_background = {};

	  viz.label_background.row = viz.norm_labels.width.row + viz.cat_room.row + viz.uni_margin;

	  viz.label_background.col = viz.norm_labels.width.col + viz.cat_room.col + viz.uni_margin;

	  return viz;
	};

/***/ },
/* 26 */
/***/ function(module, exports) {

	"use strict";

	module.exports = function calc_clust_width(viz) {

	  viz.clust = {};
	  viz.clust.margin = {};

	  // margin on left/top of the clustergram/matrix 
	  // 1) norm_label margin and width
	  // 2) cat_room and uni_margin 
	  viz.clust.margin.left = viz.norm_labels.margin.left + viz.norm_labels.width.row + viz.cat_room.row + viz.uni_margin;

	  viz.clust.margin.top = viz.norm_labels.margin.top + viz.norm_labels.width.col + viz.cat_room.col + viz.uni_margin;

	  // the clustergram/matrix width is the svg width minus:
	  // the margin of the clustergram on the left 
	  // the room for the spillover on the right 
	  // ** the dendro will fit in the spillover room on the right 
	  var ini_clust_width = viz.svg_dim.width - viz.clust.margin.left - viz.spillover_col_slant;

	  // make tmp scale to calc height of triangle col labels 
	  var tmp_x_scale = d3.scale.ordinal().rangeBands([0, ini_clust_width]).domain(_.range(viz.num_col_nodes));

	  var triangle_height = tmp_x_scale.rangeBand() / 2;

	  // prevent the visualization from being unnecessarily wide 
	  if (triangle_height > viz.norm_labels.width.col) {
	    var reduce_width = viz.norm_labels.width.col / triangle_height;
	    ini_clust_width = ini_clust_width * reduce_width;
	  }

	  viz.clust.dim = {};
	  viz.clust.dim.width = ini_clust_width;

	  return viz;
	};

/***/ },
/* 27 */
/***/ function(module, exports) {

	"use strict";

	module.exports = function calc_clust_height(viz) {

	  // the clustergram/matrix height is the svg width minus: 
	  // the margin of the clustergram on the top 
	  // the dendrogram 
	  // the bottom_space 
	  var ini_clust_height = viz.svg_dim.height - viz.clust.margin.top - viz.dendro_room.col - viz.bottom_space;

	  viz.clust.dim.height = ini_clust_height;

	  return viz;
	};

/***/ },
/* 28 */
/***/ function(module, exports) {

	"use strict";

	module.exports = function calc_val_max(params) {

	  var val_max = Math.abs(_.max(params.network_data.col_nodes, function (d) {
	    return Math.abs(d.value);
	  }).value);

	  params.labels.bar_scale_col = d3.scale.linear().domain([0, val_max]).range([0, 0.75 * params.viz.norm_labels.width.col]);

	  val_max = Math.abs(_.max(params.network_data.row_nodes, function (d) {
	    return Math.abs(d.value);
	  }).value);

	  params.labels.bar_scale_row = d3.scale.linear().domain([0, val_max]).range([0, params.viz.norm_labels.width.row]);

	  return params;
	};

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var ini_matrix_params = __webpack_require__(30);

	module.exports = function calc_matrix_params(params) {

	  params.matrix = ini_matrix_params(params);

	  params.viz.x_scale = d3.scale.ordinal().rangeBands([0, params.viz.clust.dim.width]);

	  params.viz.y_scale = d3.scale.ordinal().rangeBands([0, params.viz.clust.dim.height]);

	  _.each(['row', 'col'], function (inst_rc) {

	    var inst_order = params.viz.inst_order[inst_rc];

	    if (inst_order === 'custom') {
	      inst_order = 'clust';
	    }

	    if (inst_rc === 'row') {
	      params.viz.x_scale.domain(params.matrix.orders[inst_order + '_' + inst_rc]);
	    } else {
	      params.viz.y_scale.domain(params.matrix.orders[inst_order + '_' + inst_rc]);
	    }
	  });

	  params.viz.border_width = params.viz.x_scale.rangeBand() / params.viz.border_fraction;

	  return params;
		};

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(2);
	var initialize_matrix = __webpack_require__(31);

	module.exports = function ini_matrix_params(params) {

	  var matrix = {};

	  var network_data = params.network_data;

	  matrix.tile_colors = params.tile_colors;
	  matrix.bar_colors = params.bar_colors;
	  matrix.outline_colors = params.outline_colors;
	  matrix.hlight_color = params.highlight_color;
	  matrix.tile_title = params.tile_title;
	  matrix.show_tile_tooltips = params.show_tile_tooltips;
	  matrix.make_tile_tooltip = params.make_tile_tooltip;

	  // initialized clicked tile and rows
	  matrix.click_hlight_x = -666;
	  matrix.click_hlight_y = -666;
	  matrix.click_hlight_row = -666;
	  matrix.click_hlight_col = -666;

	  // definition of a large matrix (num links) determines if transition is run
	  matrix.def_large_matrix = 10000;
	  matrix.opacity_function = params.opacity_scale;

	  matrix.orders = {};

	  _.each(['row', 'col'], function (inst_rc) {

	    // row ordering is based on col info and vice versa
	    var other_rc;
	    if (inst_rc === 'row') {
	      other_rc = 'col';
	    } else {
	      other_rc = 'row';
	    }

	    // the nodes are defined using other_rc
	    var inst_nodes = network_data[other_rc + '_nodes'];
	    var num_nodes = inst_nodes.length;

	    var nodes_names = utils.pluck(inst_nodes, 'name');
	    var tmp = nodes_names.sort();

	    var alpha_index = _.map(tmp, function (d) {
	      return network_data[other_rc + '_nodes_names'].indexOf(d);
	    });

	    matrix.orders['alpha_' + inst_rc] = alpha_index;

	    var possible_orders = ['clust', 'rank'];

	    if (_.has(inst_nodes[0], 'rankvar')) {
	      possible_orders.push('rankvar');
	    }

	    if (params.viz.all_cats[other_rc].length > 0) {
	      _.each(params.viz.all_cats[other_rc], function (inst_cat) {
	        // the index of the category has replaced - with _
	        inst_cat = inst_cat.replace('-', '_');
	        possible_orders.push(inst_cat + '_index');
	      });
	    }

	    _.each(possible_orders, function (inst_order) {

	      var tmp_order_index = d3.range(num_nodes).sort(function (a, b) {
	        return inst_nodes[b][inst_order] - inst_nodes[a][inst_order];
	      });

	      matrix.orders[inst_order + '_' + inst_rc] = tmp_order_index;
	    });
	  });

	  if (utils.has(network_data, 'all_links')) {
	    matrix.max_link = _.max(network_data.all_links, function (d) {
	      return Math.abs(d.value);
	    }).value;
	  } else {
	    matrix.max_link = _.max(network_data.links, function (d) {
	      return Math.abs(d.value);
	    }).value;
	  }

	  matrix.abs_max_val = Math.abs(matrix.max_link) * params.clamp_opacity;

	  if (params.input_domain === 0) {
	    if (matrix.opacity_function === 'linear') {
	      matrix.opacity_scale = d3.scale.linear().domain([0, matrix.abs_max_val]).clamp(true).range([0.0, 1.0]);
	    } else if (matrix.opacity_function === 'log') {
	      matrix.opacity_scale = d3.scale.log().domain([0.001, matrix.abs_max_val]).clamp(true).range([0.0, 1.0]);
	    }
	  } else {
	    if (matrix.opacity_function === 'linear') {
	      matrix.opacity_scale = d3.scale.linear().domain([0, params.input_domain]).clamp(true).range([0.0, 1.0]);
	    } else if (matrix.opacity_function === 'log') {
	      matrix.opacity_scale = d3.scale.log().domain([0.001, params.input_domain]).clamp(true).range([0.0, 1.0]);
	    }
	  }

	  var has_val_up = utils.has(network_data.links[0], 'value_up');
	  var has_val_dn = utils.has(network_data.links[0], 'value_dn');

	  if (has_val_up || has_val_dn) {
	    matrix.tile_type = 'updn';
	  } else {
	    matrix.tile_type = 'simple';
	  }

	  if (utils.has(network_data.links[0], 'highlight')) {
	    matrix.highlight = 1;
	  } else {
	    matrix.highlight = 0;
	  }

	  matrix.matrix = initialize_matrix(network_data);

	  matrix.wait_tooltip = 0;

	  return matrix;
	};

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(2);

	module.exports = function (network_data) {
	  var matrix = [];
	  var ini_object;

	  var keep_orig;
	  if (utils.has(network_data.links[0], 'value_orig')) {
	    keep_orig = true;
	  } else {
	    keep_orig = false;
	  }

	  network_data.row_nodes.forEach(function (tmp, row_index) {

	    matrix[row_index] = {};
	    matrix[row_index].name = network_data.row_nodes[row_index].name;
	    matrix[row_index].row_data = d3.range(network_data.col_nodes.length).map(function (col_index) {

	      if (utils.has(network_data.links[0], 'value_up') || utils.has(network_data.links[0], 'value_dn')) {

	        ini_object = {
	          pos_x: col_index,
	          pos_y: row_index,
	          value: 0,
	          value_up: 0,
	          value_dn: 0,
	          highlight: 0
	        };
	      } else {

	        ini_object = {
	          pos_x: col_index,
	          pos_y: row_index,
	          value: 0,
	          highlight: 0
	        };
	      }

	      if (keep_orig) {
	        ini_object.value_orig = 0;
	      }

	      return ini_object;
	    });
	  });

	  network_data.links.forEach(function (link) {

	    // transfer additional link information is necessary
	    matrix[link.source].row_data[link.target].value = link.value;
	    matrix[link.source].row_data[link.target].row_name = link.row_name;
	    matrix[link.source].row_data[link.target].col_name = link.col_name;

	    if (utils.has(link, 'value_up') || utils.has(link, 'value_dn')) {
	      matrix[link.source].row_data[link.target].value_up = link.value_up;
	      matrix[link.source].row_data[link.target].value_dn = link.value_dn;
	    }

	    if (keep_orig) {
	      matrix[link.source].row_data[link.target].value_orig = link.value_orig;
	    }

	    if (link.highlight) {
	      matrix[link.source].row_data[link.target].highlight = link.highlight;
	    }
	    if (link.info) {
	      matrix[link.source].row_data[link.target].info = link.info;
	    }
	  });

	  return matrix;
	};

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var zoomed = __webpack_require__(33);
	var calc_zoom_switching = __webpack_require__(46);

	module.exports = function set_zoom_params(params) {

	  params.viz.zoom_scale_font = {};
	  params.viz.zoom_scale_font.row = 1;
	  params.viz.zoom_scale_font.col = 1;

	  var max_zoom_limit = 0.75;
	  var half_col_height = params.viz.x_scale.rangeBand() / 2;
	  params.viz.real_zoom = params.viz.norm_labels.width.col / half_col_height * max_zoom_limit;

	  params.viz = calc_zoom_switching(params.viz);

	  params.zoom_behavior = d3.behavior.zoom().scaleExtent([1, params.viz.real_zoom * params.viz.zoom_switch]).on('zoom', function () {
	    zoomed(params);
	  });

	  // rect width needs matrix and zoom parameters 
	  params.viz.rect_width = params.viz.x_scale.rangeBand() - params.viz.border_width;

	  params.viz.rect_height = params.viz.y_scale.rangeBand() - params.viz.border_width / params.viz.zoom_switch;

	  return params;
	};

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var apply_zoom = __webpack_require__(34);

	module.exports = function zoomed(params) {

	  var zoom_info = {};
	  zoom_info.zoom_x = d3.event.scale;
	  zoom_info.zoom_y = d3.event.scale;
	  zoom_info.trans_x = d3.event.translate[0] - params.viz.clust.margin.left;
	  zoom_info.trans_y = d3.event.translate[1] - params.viz.clust.margin.top;

	  apply_zoom(params, zoom_info);
		};

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var run_transformation = __webpack_require__(35);
	var zoom_rules_y = __webpack_require__(44);
	var zoom_rules_x = __webpack_require__(45);

	module.exports = function apply_zoom(params, zoom_info) {

	  d3.selectAll('.tile_tip').style('display', 'none');

	  zoom_info = zoom_rules_y(params, zoom_info);

	  zoom_info = zoom_rules_x(params, zoom_info);

	  run_transformation(params, zoom_info);
		};

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var constrain_font_size = __webpack_require__(36);
	var zooming_has_stopped = __webpack_require__(38);
	var show_visible_area = __webpack_require__(41);
	var resize_label_val_bars = __webpack_require__(43);
	var num_visible_labels = __webpack_require__(39);

	module.exports = function run_transformation(params, zoom_info) {

	  // apply transformation and reset translate vector
	  // translate clustergram
	  d3.select(params.root + ' .clust_group').attr('transform', 'translate(' + [zoom_info.trans_x, zoom_info.trans_y] + ') scale(' + zoom_info.zoom_x + ',' + zoom_info.zoom_y + ')');

	  // labels
	  /////////////////////////////
	  d3.select(params.root + ' .row_label_zoom_container').attr('transform', 'translate(' + [0, zoom_info.trans_y] + ') scale(' + zoom_info.zoom_y + ')');

	  // move down col labels as zooming occurs, subtract trans_x - 20 almost works
	  d3.select(params.root + ' .col_zoom_container').attr('transform', 'translate(' + [zoom_info.trans_x, 0] + ') scale(' + zoom_info.zoom_x + ')');

	  d3.select(params.root + ' .row_cat_container').attr('transform', 'translate(' + [0, zoom_info.trans_y] + ') scale( 1,' + zoom_info.zoom_y + ')');

	  d3.select(params.root + ' .row_dendro_container').attr('transform', 'translate(' + [params.viz.uni_margin / 2, zoom_info.trans_y] + ') ' + 'scale( 1,' + zoom_info.zoom_y + ')');

	  // transform col_class
	  d3.select(params.root + ' .col_cat_container').attr('transform', 'translate(' + [zoom_info.trans_x, 0] + ') scale(' + zoom_info.zoom_x + ',1)');

	  d3.select(params.root + ' .col_dendro_container').attr('transform', 'translate(' + [zoom_info.trans_x, params.viz.uni_margin / 2] + ') scale(' + zoom_info.zoom_x + ',1)');

	  // reset translate vector - add back margins to trans_x and trans_y
	  params.zoom_behavior.translate([zoom_info.trans_x + params.viz.clust.margin.left, zoom_info.trans_y + params.viz.clust.margin.top]);

	  constrain_font_size(params);

	  resize_label_val_bars(params, zoom_info);

	  d3.select(params.root + ' .viz_svg').attr('is_zoom', function () {
	    var inst_zoom = Number(d3.select(params.root + ' .viz_svg').attr('is_zoom'));
	    d3.select(params.root + ' .viz_svg').attr('stopped_zoom', 1);
	    return inst_zoom + 1;
	  });

	  var not_zooming = function not_zooming() {

	    d3.select(params.root + ' .viz_svg').attr('is_zoom', function () {
	      var inst_zoom = Number(d3.select(params.root + ' .viz_svg').attr('is_zoom'));
	      return inst_zoom - 1;
	    });
	  };

	  setTimeout(not_zooming, 100);

	  setTimeout(zooming_has_stopped, 1000, params);

	  _.each(['row', 'col'], function (inst_rc) {

	    var inst_num_visible = num_visible_labels(params, inst_rc);

	    if (inst_num_visible > 250) {

	      d3.selectAll(params.root + ' .' + inst_rc + '_label_group').select('text').style('display', 'none');

	      d3.selectAll(params.root + ' .' + inst_rc + '_cat_group').select('path').style('display', 'none');

	      d3.selectAll('.horz_lines').select('line').style('display', 'none');
	      d3.selectAll('.vert_lines').select('line').style('display', 'none');
	    } else {

	      if (inst_num_visible > 40) {

	        var calc_show_char = d3.scale.linear().domain([1, 500]).range([3, 1]).clamp(true);

	        var num_show_char = Math.floor(calc_show_char(inst_num_visible));

	        d3.selectAll(params.root + ' .' + inst_rc + '_label_group').select('text').style('opacity', 0.5).text(function (d) {
	          return d.name.substring(0, num_show_char) + '..';
	        });
	      }
	    }
	  });

	  // // experimental tile display toggling
	  // var inst_zoom = Number(d3.select(params.root+' .viz_svg').attr('is_zoom'));

	  // if (inst_zoom == 1){
	  //   d3.selectAll(params.root+' .hide_tile')
	  //     .style('display', 'none');
	  // }

	  show_visible_area(params, zoom_info);
		};

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var calc_real_font_size = __webpack_require__(37);

	module.exports = function constrain_font_size(params) {

	  var tmp_font_size = params.labels.default_fs_row;
	  var inst_zoom;

	  var real_font_size = calc_real_font_size(params);

	  // rows
	  ////////////////////////////////////
	  if (real_font_size.row > params.labels.max_allow_fs) {

	    if (params.viz.zoom_switch_y) {
	      inst_zoom = params.zoom_behavior.scale() / params.viz.zoom_switch_y;
	    } else {
	      inst_zoom = params.zoom_behavior.scale();
	    }

	    if (inst_zoom < 1) {
	      inst_zoom = 1;
	    }

	    tmp_font_size = params.labels.max_allow_fs / inst_zoom;

	    d3.selectAll(params.root + ' .row_label_group').select('text').style('font-size', tmp_font_size + 'px').attr('y', params.viz.rect_height * 0.5 + tmp_font_size * 0.35);
	  } else {
	    d3.selectAll(params.root + ' .row_label_group').select('text').style('font-size', params.labels.default_fs_row + 'px').attr('y', params.viz.rect_height * 0.5 + params.labels.default_fs_row * 0.35);
	  }

	  // columns 
	  //////////////////////////////////////


	  if (real_font_size.col > params.labels.max_allow_fs) {

	    if (params.viz.zoom_switch > 1) {
	      inst_zoom = params.zoom_behavior.scale() / params.viz.zoom_switch;
	    } else {
	      inst_zoom = params.zoom_behavior.scale();
	    }

	    if (inst_zoom < 1) {
	      inst_zoom = 1;
	    }

	    tmp_font_size = params.labels.max_allow_fs / inst_zoom;

	    if (tmp_font_size > 0.7 * params.viz.rect_width) {
	      tmp_font_size = 0.7 * params.viz.rect_width;
	    }

	    d3.selectAll(params.root + ' .col_label_text').select('text').style('font-size', tmp_font_size + 'px');
	  } else {
	    d3.selectAll(params.root + ' .col_label_text').select('text').style('font-size', params.labels.default_fs_col + 'px');
	  }
		};

/***/ },
/* 37 */
/***/ function(module, exports) {

	"use strict";

	module.exports = function calc_real_font_size(params) {

	  var real_font_size = {};
	  // zoom_switch behavior has to change with zoom_switch_y
	  if (params.viz.zoom_switch > 1) {
	    real_font_size.row = params.labels.default_fs_row * params.zoom_behavior.scale();
	    real_font_size.col = params.labels.default_fs_col * params.zoom_behavior.scale(); ///params.viz.zoom_switch;
	  } else {
	    real_font_size.row = params.labels.default_fs_row * params.zoom_behavior.scale() / params.viz.zoom_switch_y;
	    real_font_size.col = params.labels.default_fs_col * params.zoom_behavior.scale();
	  }

	  return real_font_size;
		};

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var num_visible_labels = __webpack_require__(39);
	var trim_text = __webpack_require__(40);
	var constrain_font_size = __webpack_require__(36);

	module.exports = function zooming_has_stopped(params) {

	  var inst_zoom = Number(d3.select(params.root + ' .viz_svg').attr('is_zoom'));

	  _.each(['row', 'col'], function (inst_rc) {

	    d3.selectAll(params.root + ' .' + inst_rc + '_label_group').select('text').style('opacity', 1);

	    d3.selectAll(params.root + ' .' + inst_rc + '_cat_group').select('path').style('display', 'block');
	  });

	  if (inst_zoom === 0) {

	    var check_stop = Number(d3.select(params.root + ' .viz_svg').attr('stopped_zoom'));

	    if (check_stop != 0) {

	      // // experimental tile display toggling 
	      // d3.selectAll(params.root+' .hide_tile')
	      //   .style('display','block');

	      d3.selectAll(params.root + ' .row_label_group').select('text').style('display', 'none');
	      d3.selectAll(params.root + ' .row_label_group').select('text').style('display', 'block');

	      d3.select(params.root + ' .viz_svg').attr('stopped_zoom', 0);

	      d3.selectAll(params.root + ' .row_label_group').select('text').style('display', 'block');
	      d3.selectAll(params.root + ' .col_label_group').select('text').style('display', 'block');

	      d3.selectAll(params.root + ' .horz_lines').select('line').style('display', 'block');
	      d3.selectAll(params.root + ' .vert_lines').select('line').style('display', 'block');

	      _.each(['row', 'col'], function (inst_rc) {

	        var inst_num_visible = num_visible_labels(params, inst_rc);

	        if (inst_num_visible < 125) {
	          d3.selectAll(params.root + ' .' + inst_rc + '_label_group').each(function () {
	            trim_text(params, this, inst_rc);
	          });
	        }
	      });

	      text_patch();

	      constrain_font_size(params);
	    }

	    // this makes sure that the text is visible after zooming and trimming
	    // there is buggy behavior in chrome when zooming into large matrices
	    // I'm running it twice in quick succession 
	    setTimeout(text_patch, 25);
	    setTimeout(text_patch, 100);
	    // setTimeout( text_patch, 2000 );
	  }

	  function text_patch() {

	    _.each(['row', 'col'], function (inst_rc) {

	      d3.selectAll(params.root + ' .' + inst_rc + '_label_group').filter(function () {
	        return d3.select(this).style('display') != 'none';
	      }).select('text').style('font-size', function () {
	        var inst_fs = Number(d3.select(this).style('font-size').replace('px', ''));
	        return inst_fs;
	      });
	    });
	  }
		};

/***/ },
/* 39 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function num_visible_labels(params, inst_rc) {

	  var group_name;
	  if (inst_rc === 'row') {
	    group_name = 'group';
	  } else if (inst_rc === 'col') {
	    group_name = 'text';
	  }

	  var num_visible = d3.selectAll(params.root + ' .' + inst_rc + '_label_' + group_name).filter(function () {
	    return d3.select(this).style('display') != 'none';
	  })[0].length;

	  return num_visible;
	};

/***/ },
/* 40 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function (params, inst_selection, inst_rc) {
	  if (d3.select(inst_selection).style('display') != 'none') {

	    // trim text that is longer than the container 
	    var inst_zoom;
	    var inst_width;
	    var trimmed_text;
	    var current_num_char;
	    var inst_text;
	    var original_text;
	    var keep_num_char;
	    var i;

	    var max_width = params.viz.norm_labels.width[inst_rc];

	    if (inst_rc === 'row') {
	      if (params.viz.zoom_switch_y) {
	        inst_zoom = params.zoom_behavior.scale() / params.viz.zoom_switch_y;
	      } else {
	        inst_zoom = params.zoom_behavior.scale();
	      }
	      // num_trims = params.labels.row_max_char;
	    } else {
	      if (params.viz.zoom_switch > 1) {
	        inst_zoom = params.zoom_behavior.scale() / params.viz.zoom_switch;
	      } else {
	        inst_zoom = params.zoom_behavior.scale();
	      }
	      // num_trims = params.labels.col_max_char;
	    }

	    var num_trims;
	    d3.select(inst_selection).select('text').each(function (d) {
	      num_trims = d.name.length;
	    });

	    var tmp_width = d3.select(inst_selection).select('text').node().getBBox().width;

	    inst_width = calc_width(tmp_width, inst_zoom);

	    if (inst_width > max_width) {

	      for (i = 1; i < num_trims; i++) {
	        if (inst_width > max_width) {

	          d3.select(inst_selection).select('text').text(trim);

	          tmp_width = d3.select(inst_selection).select('text').node().getBBox().width;

	          inst_width = calc_width(tmp_width, inst_zoom);
	        }
	      }
	    } else if (inst_width < max_width * 0.75) {

	      for (i = 1; i < num_trims; i++) {
	        if (inst_width < max_width * 0.75) {

	          d3.select(inst_selection).select('text').text(add_back);

	          tmp_width = d3.select(inst_selection).select('text').node().getBBox().width;

	          inst_width = calc_width(tmp_width, inst_zoom);
	        }
	      }
	    }
	  }

	  function trim() {
	    inst_text = d3.select(this).text();
	    current_num_char = inst_text.length;
	    keep_num_char = current_num_char - 3;
	    trimmed_text = inst_text.substring(0, keep_num_char) + '..';
	    return trimmed_text;
	  }

	  function add_back(d) {
	    inst_text = d3.select(this).text();
	    if (inst_text.slice(-2) === '..') {
	      current_num_char = inst_text.length - 2;
	    } else {
	      current_num_char = inst_text.length;
	    }

	    original_text = d.name;
	    keep_num_char = current_num_char + 2;
	    trimmed_text = original_text.substring(0, keep_num_char) + '..';

	    // if '..' was added to original text 
	    if (trimmed_text.length > original_text.length) {
	      trimmed_text = original_text;
	    }

	    return trimmed_text;
	  }

	  function calc_width(tmp_width, inst_zoom) {
	    if (inst_zoom < 1) {
	      inst_width = tmp_width;
	    } else {
	      inst_width = tmp_width * inst_zoom;
	    }

	    return inst_width;
	  }
		};

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var toggle_element_display = __webpack_require__(42);

	module.exports = function show_visible_area(params, zoom_info) {

	  var vis_area = {};

	  // get translation vector absolute values
	  vis_area.min_x = Math.abs(zoom_info.trans_x) / zoom_info.zoom_x - 3 * params.viz.rect_width;
	  vis_area.min_y = Math.abs(zoom_info.trans_y) / zoom_info.zoom_y - 3 * params.viz.rect_height;

	  vis_area.max_x = Math.abs(zoom_info.trans_x) / zoom_info.zoom_x + params.viz.clust.dim.width / zoom_info.zoom_x;
	  vis_area.max_y = Math.abs(zoom_info.trans_y) / zoom_info.zoom_y + params.viz.clust.dim.height / zoom_info.zoom_y;

	  // toggle labels and rows
	  ///////////////////////////////////////////////
	  d3.selectAll(params.root + ' .row_label_group').each(function () {
	    toggle_element_display(vis_area, this, 'row');
	  });

	  d3.selectAll(params.root + ' .row').each(function () {
	    toggle_element_display(vis_area, this, 'row');
	  });

	  // toggle col labels
	  d3.selectAll(params.root + ' .col_label_text').each(function () {
	    toggle_element_display(vis_area, this, 'col');
	  });

	  return vis_area;
		};

/***/ },
/* 42 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function toggle_element_display(vis_area, inst_selection, inst_rc) {

	  var inst_trans = d3.select(inst_selection).attr('transform');

	  if (inst_rc === 'row') {

	    var y_trans = Number(inst_trans.split(',')[1].split(')')[0]);

	    d3.select(inst_selection).style('display', function () {
	      var inst_display;
	      if (y_trans < vis_area.max_y && y_trans > vis_area.min_y) {
	        inst_display = 'block';
	      } else {
	        inst_display = 'none';
	      }
	      return inst_display;
	    });
	  } else {

	    var x_trans = Number(inst_trans.split('(')[1].split(',')[0].split(')')[0]);

	    d3.select(inst_selection).style('display', function () {
	      var inst_display;
	      if (x_trans < vis_area.max_x && x_trans > vis_area.min_x) {
	        inst_display = 'block';
	      } else {
	        inst_display = 'none';
	      }

	      return inst_display;
	    });
	  }
		};

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(2);

	module.exports = function resize_label_val_bars(params, zoom_info) {

	  // resize label bars if necessary
	  if (utils.has(params.network_data.row_nodes[0], 'value')) {
	    d3.selectAll(params.root + ' .row_bars').attr('width', function (d) {
	      var inst_value = 0;
	      inst_value = params.labels.bar_scale_row(Math.abs(d.value)) / zoom_info.zoom_y;
	      return inst_value;
	    }).attr('x', function (d) {
	      var inst_value = 0;
	      inst_value = -params.labels.bar_scale_row(Math.abs(d.value)) / zoom_info.zoom_y;
	      return inst_value;
	    });
	  }

	  if (utils.has(params.network_data.col_nodes[0], 'value')) {
	    d3.selectAll(params.root + ' .col_bars').attr('width', function (d) {
	      var inst_value = 0;
	      if (d.value > 0) {
	        inst_value = params.labels.bar_scale_col(d.value) / zoom_info.zoom_x;
	      }
	      return inst_value;
	    });
	  }
		};

/***/ },
/* 44 */
/***/ function(module, exports) {

	"use strict";

	module.exports = function zoom_rules_y(params, zoom_info) {

	  // zoom in the x direction before zooming in the y direction 
	  if (params.viz.zoom_switch_y > 1) {
	    if (zoom_info.zoom_y < params.viz.zoom_switch_y) {
	      zoom_info.trans_y = 0;
	      zoom_info.zoom_y = 1;
	    } else {
	      zoom_info.zoom_y = zoom_info.zoom_y / params.viz.zoom_switch_y;
	    }
	  }

	  // calculate panning room available in the y direction 
	  zoom_info.pan_room_y = (zoom_info.zoom_y - 1) * params.viz.clust.dim.height;

	  // no positive panning or panning more than pan_room
	  if (zoom_info.trans_y >= 0) {
	    zoom_info.trans_y = 0;
	  } else if (zoom_info.trans_y <= -zoom_info.pan_room_y) {
	    zoom_info.trans_y = -zoom_info.pan_room_y;
	  }

	  return zoom_info;
	};

/***/ },
/* 45 */
/***/ function(module, exports) {

	"use strict";

	module.exports = function zoom_rules_x(params, zoom_info) {

	  // zoom in the y direction before zooming in the x direction 
	  if (params.viz.zoom_switch > 1) {
	    if (zoom_info.zoom_x < params.viz.zoom_switch) {
	      zoom_info.trans_x = 0;
	      zoom_info.zoom_x = 1;
	    } else {
	      zoom_info.zoom_x = zoom_info.zoom_x / params.viz.zoom_switch;
	    }
	  }

	  // calculate panning room available in the x direction 
	  zoom_info.pan_room_x = (zoom_info.zoom_x - 1) * params.viz.clust.dim.width;

	  // no positive panning or panning more than pan_room
	  if (zoom_info.trans_x > 0) {
	    zoom_info.trans_x = 0;
	  } else if (zoom_info.trans_x <= -zoom_info.pan_room_x) {
	    zoom_info.trans_x = -zoom_info.pan_room_x;
	  }

	  return zoom_info;
	};

/***/ },
/* 46 */
/***/ function(module, exports) {

	"use strict";

	module.exports = function calc_zoom_switching(viz) {

	  var width_by_col = viz.clust.dim.width / viz.num_col_nodes;
	  var height_by_row = viz.clust.dim.height / viz.num_row_nodes;
	  viz.zoom_switch = width_by_col / height_by_row;

	  viz.zoom_switch_y = 1;

	  if (viz.zoom_switch < 1) {
	    viz.zoom_switch_y = 1 / viz.zoom_switch;
	    viz.zoom_switch = 1;
	  }

	  return viz;
	};

/***/ },
/* 47 */
/***/ function(module, exports) {

	"use strict";

	module.exports = function calc_default_fs(params) {

	  params.labels.default_fs_row = params.viz.y_scale.rangeBand() * 1.01;
	  params.labels.default_fs_col = params.viz.x_scale.rangeBand() * 0.87;

	  if (params.labels.default_fs_row > params.labels.max_allow_fs) {
	    params.labels.default_fs_row = params.labels.max_allow_fs;
	  }

	  if (params.labels.default_fs_col > params.labels.max_allow_fs) {
	    params.labels.default_fs_col = params.labels.max_allow_fs;
	  }

	  return params;
		};

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var generate_matrix = __webpack_require__(49);
	var make_rows = __webpack_require__(58);
	var make_cols = __webpack_require__(73);
	var generate_super_labels = __webpack_require__(76);
	var spillover = __webpack_require__(77);
	var search = __webpack_require__(82);
	var initialize_resizing = __webpack_require__(85);
	var ini_doubleclick = __webpack_require__(87);
	var make_col_cat = __webpack_require__(105);
	var make_row_cat = __webpack_require__(108);
	var trim_text = __webpack_require__(40);
	var make_row_dendro = __webpack_require__(109);
	var make_col_dendro = __webpack_require__(110);

	module.exports = function make_viz(cgm) {

	  var params = cgm.params;

	  d3.select(params.viz.viz_wrapper + ' svg').remove();

	  var svg_group = d3.select(params.viz.viz_wrapper).append('svg').attr('class', 'viz_svg').attr('id', 'svg_' + params.root.replace('#', '')).attr('width', params.viz.svg_dim.width).attr('height', params.viz.svg_dim.height).attr('is_zoom', 0).attr('stopped_zoom', 1);

	  svg_group.append('rect').attr('class', 'super_background').style('width', params.viz.svg_dim.width).style('height', params.viz.svg_dim.height).style('fill', 'white');

	  generate_matrix(params, svg_group);

	  var delay_text = 0;
	  make_rows(cgm, delay_text);

	  if (params.viz.show_dendrogram) {
	    make_row_dendro(cgm);
	    make_col_dendro(cgm);
	  }

	  make_cols(cgm, delay_text);

	  _.each(['row', 'col'], function (inst_rc) {

	    var inst_fs = Number(d3.select('.' + inst_rc + '_label_group').select('text').style('font-size').replace('px', ''));

	    var min_trim_fs = 8;
	    if (inst_fs > min_trim_fs) {
	      d3.selectAll(params.root + ' .' + inst_rc + '_label_group').each(function () {
	        trim_text(params, this, inst_rc);
	      });
	    }
	  });

	  // make category colorbars
	  make_row_cat(params);
	  if (params.viz.show_categories.col) {
	    make_col_cat(params);
	  }

	  spillover(cgm);

	  if (params.labels.super_labels) {
	    generate_super_labels(params);
	  }

	  function border_colors() {
	    var inst_color = params.viz.super_border_color;
	    if (params.viz.is_expand) {
	      inst_color = 'white';
	    }
	    return inst_color;
	  }

	  // left border
	  d3.select(params.viz.viz_svg).append('rect').classed('left_border', true).classed('borders', true).attr('fill', border_colors).attr('width', params.viz.grey_border_width).attr('height', params.viz.svg_dim.height).attr('transform', 'translate(0,0)');

	  // right border
	  d3.select(params.viz.viz_svg).append('rect').classed('right_border', true).classed('borders', true).attr('fill', border_colors).attr('width', params.viz.grey_border_width).attr('height', params.viz.svg_dim.height).attr('transform', function () {
	    var inst_offset = params.viz.svg_dim.width - params.viz.grey_border_width;
	    return 'translate(' + inst_offset + ',0)';
	  });

	  // top border
	  d3.select(params.viz.viz_svg).append('rect').classed('top_border', true).classed('borders', true).attr('fill', border_colors).attr('width', params.viz.svg_dim.width).attr('height', params.viz.grey_border_width).attr('transform', function () {
	    var inst_offset = 0;
	    return 'translate(' + inst_offset + ',0)';
	  });

	  // bottom border
	  d3.select(params.viz.viz_svg).append('rect').classed('bottom_border', true).classed('borders', true).attr('fill', border_colors).attr('width', params.viz.svg_dim.width).attr('height', params.viz.grey_border_width).attr('transform', function () {
	    var inst_offset = params.viz.svg_dim.height - params.viz.grey_border_width;
	    return 'translate(0,' + inst_offset + ')';
	  });

	  initialize_resizing(cgm);

	  ini_doubleclick(params);

	  if (params.viz.do_zoom) {
	    d3.select(params.viz.zoom_element)
	    // d3.select(params.root+' .clust_container')
	    .call(params.zoom_behavior);
	  }

	  d3.select(params.viz.zoom_element)
	  // d3.select(params.root+' .clust_container')
	  .on('dblclick.zoom', null);

	  search(params, params.network_data.row_nodes, 'name');

	  // var opacity_slider = function (inst_slider) {

	  //   // var max_link = params.matrix.max_link;
	  //   var slider_scale = d3.scale
	  //     .linear()
	  //     .domain([0, 1])
	  //     .range([1, 0.1]);

	  //   var slider_factor = slider_scale(inst_slider);

	  //   if (params.matrix.opacity_function === 'linear') {
	  //     params.matrix.opacity_scale = d3.scale.linear()
	  //       .domain([0, slider_factor * Math.abs(params.matrix.max_link)])
	  //       .clamp(true)
	  //       .range([0.0, 1.0]);
	  //   } else if (params.matrix.opacity_function === 'log') {
	  //     params.matrix.opacity_scale = d3.scale.log()
	  //       .domain([0.0001, slider_factor * Math.abs(params.matrix.max_link)])
	  //       .clamp(true)
	  //       .range([0.0, 1.0]);
	  //   }

	  //   d3.selectAll(params.root+' .tile')
	  //     .style('fill-opacity', function (d) {
	  //       return params.matrix.opacity_scale(Math.abs(d.value));
	  //     });

	  // };

	  // function reset_zoom(inst_scale) {
	  //   two_translate_zoom(params, 0, 0, inst_scale);
	  // }
		};

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(2);
	var draw_gridlines = __webpack_require__(50);
	var add_click_hlight = __webpack_require__(51);
	var make_simple_rows = __webpack_require__(52);
	var d3_tip_custom = __webpack_require__(57);

	module.exports = function (params, svg_elem) {
	  var network_data = params.network_data;

	  var matrix = [],
	      row_nodes = network_data.row_nodes,
	      col_nodes = network_data.col_nodes,
	      clust_group;

	  var row_nodes_names = utils.pluck(row_nodes, 'name');

	  // append a group that will hold clust_group and position it once
	  clust_group = svg_elem.append('g').attr('class', 'clust_container').attr('transform', 'translate(' + params.viz.clust.margin.left + ',' + params.viz.clust.margin.top + ')').append('g').attr('class', 'clust_group').classed('clust_group', true);

	  // d3-tooltip - for tiles
	  var tip = d3_tip_custom().attr('class', 'd3-tip tile_tip').direction('nw').offset([0, 0]).html(function (d) {
	    var inst_value = String(d.value.toFixed(3));
	    var tooltip_string;

	    if (params.keep_orig) {
	      var orig_value = String(d.value_orig.toFixed(3));
	      tooltip_string = '<p>' + d.row_name + ' and ' + d.col_name + '</p>' + '<p> normalized value: ' + inst_value + '</p>' + '<div> original value: ' + orig_value + '</div>';
	    } else {
	      tooltip_string = '<p>' + d.row_name + ' and ' + d.col_name + '</p>' + '<div> value: ' + inst_value + '</div>';
	    }

	    return tooltip_string;
	  });

	  d3.select(params.root + ' .clust_group').call(tip);

	  // clustergram background rect
	  clust_group.append('rect').classed('background', true).classed('grey_background', true).style('fill', '#eee').style('opacity', 0.25).attr('width', params.viz.clust.dim.width).attr('height', params.viz.clust.dim.height);

	  // make row matrix - add key names to rows in matrix
	  clust_group.selectAll('.row').data(params.matrix.matrix, function (d) {
	    return d.name;
	  }).enter().append('g').attr('class', 'row').attr('transform', function (d) {
	    var tmp_index = _.indexOf(row_nodes_names, d.name);
	    return 'translate(0,' + params.viz.y_scale(tmp_index) + ')';
	  }).each(function (d) {
	    make_simple_rows(params, d, tip, this);
	  });

	  // add callback function to tile group - if one is supplied by the user
	  if (typeof params.click_tile === 'function') {
	    d3.selectAll(params.root + ' .tile').on('click', function (d) {

	      // export row/col name and value from tile
	      var tile_info = {};
	      tile_info.row = params.network_data.row_nodes[d.pos_y].name;
	      tile_info.col = params.network_data.col_nodes[d.pos_x].name;
	      tile_info.value = d.value;

	      if (utils.has(d, 'value_up')) {
	        tile_info.value_up = d.value_up;
	      }
	      if (utils.has(d, 'value_dn')) {
	        tile_info.value_dn = d.value_dn;
	      }
	      if (utils.has(d, 'info')) {
	        tile_info.info = d.info;
	      }
	      // run the user supplied callback function
	      params.click_tile(tile_info);
	      add_click_hlight(params, this);
	    });
	  } else {

	    // highlight clicked tile
	    if (params.tile_click_hlight) {
	      d3.selectAll(params.root + ' .tile').on('click', function () {
	        add_click_hlight(params, this);
	      });
	    }
	  }

	  // draw grid lines after drawing tiles
	  draw_gridlines(params, row_nodes, col_nodes);

	  // Matrix API
	  return {
	    get_clust_group: function get_clust_group() {
	      return clust_group;
	    },
	    get_matrix: function get_matrix() {
	      return matrix;
	    },
	    get_nodes: function get_nodes(type) {
	      if (type === 'row') {
	        return network_data.row_nodes;
	      }
	      return network_data.col_nodes;
	    }
	  };
		};

/***/ },
/* 50 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function (params, row_nodes, col_nodes) {

	  var row_nodes_names = params.network_data.row_nodes_names;
	  var col_nodes_names = params.network_data.col_nodes_names;

	  d3.selectAll(params.root + ' .horz_lines').remove();

	  d3.selectAll(params.root + ' .vert_lines').remove();

	  // append horizontal lines
	  d3.select(params.root + ' .clust_group').selectAll('.horz_lines').data(row_nodes, function (d) {
	    return d.name;
	  }).enter().append('g').attr('class', 'horz_lines').attr('transform', function (d) {
	    var inst_index = _.indexOf(row_nodes_names, d.name);
	    return 'translate(0,' + params.viz.y_scale(inst_index) + ') rotate(0)';
	  }).append('line').attr('x1', 0).attr('x2', params.viz.clust.dim.width).style('stroke-width', function () {
	    var inst_width;
	    if (params.viz.zoom_switch > 1) {
	      inst_width = params.viz.border_width / params.viz.zoom_switch;
	    } else {
	      inst_width = params.viz.border_width;
	    }
	    return inst_width + 'px';
	  }).style('stroke', 'white');

	  // append vertical line groups
	  d3.select(params.root + ' .clust_group').selectAll('.vert_lines').data(col_nodes).enter().append('g').attr('class', 'vert_lines').attr('transform', function (d) {
	    var inst_index = _.indexOf(col_nodes_names, d.name);
	    return 'translate(' + params.viz.x_scale(inst_index) + ') rotate(-90)';
	  }).append('line').attr('x1', 0).attr('x2', -params.viz.clust.dim.height).style('stroke-width', function () {
	    var inst_width;
	    if (params.viz.zoom_switch_y > 1) {
	      inst_width = params.viz.border_width / params.viz.zoom_switch_y;
	    } else {
	      inst_width = params.viz.border_width;
	    }
	    return inst_width + 'px';
	  }).style('stroke', 'white');
		};

/***/ },
/* 51 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function (params, clicked_rect) {

	  // get x position of rectangle
	  d3.select(clicked_rect).each(function (d) {
	    var pos_x = d.pos_x;
	    var pos_y = d.pos_y;

	    d3.selectAll(params.root + ' .click_hlight').remove();

	    if (pos_x != params.matrix.click_hlight_x || pos_y != params.matrix.click_hlight_y) {

	      // save pos_x to params.viz.click_hlight_x
	      params.matrix.click_hlight_x = pos_x;
	      params.matrix.click_hlight_y = pos_y;

	      // draw the highlighting rectangle as four rectangles
	      // so that the width and height can be controlled
	      // separately

	      var rel_width_hlight = 6;
	      var opacity_hlight = 0.85;

	      var hlight_width = rel_width_hlight * params.viz.border_width;
	      var hlight_height = rel_width_hlight * params.viz.border_width / params.viz.zoom_switch;

	      // top highlight
	      d3.select(clicked_rect.parentNode).append('rect').classed('click_hlight', true).classed('top_hlight', true).attr('width', params.viz.x_scale.rangeBand()).attr('height', hlight_height).attr('fill', params.matrix.hlight_color).attr('transform', function () {
	        return 'translate(' + params.viz.x_scale(pos_x) + ',0)';
	      }).attr('opacity', opacity_hlight);

	      // left highlight
	      d3.select(clicked_rect.parentNode).append('rect').classed('click_hlight', true).classed('left_hlight', true).attr('width', hlight_width).attr('height', params.viz.y_scale.rangeBand() - hlight_height * 0.99).attr('fill', params.matrix.hlight_color).attr('transform', function () {
	        return 'translate(' + params.viz.x_scale(pos_x) + ',' + hlight_height * 0.99 + ')';
	      }).attr('opacity', opacity_hlight);

	      // right highlight
	      d3.select(clicked_rect.parentNode).append('rect').classed('click_hlight', true).classed('right_hlight', true).attr('width', hlight_width).attr('height', params.viz.y_scale.rangeBand() - hlight_height * 0.99).attr('fill', params.matrix.hlight_color).attr('transform', function () {
	        var tmp_translate = params.viz.x_scale(pos_x) + params.viz.x_scale.rangeBand() - hlight_width;
	        return 'translate(' + tmp_translate + ',' + hlight_height * 0.99 + ')';
	      }).attr('opacity', opacity_hlight);

	      // bottom highlight
	      d3.select(clicked_rect.parentNode).append('rect').classed('click_hlight', true).classed('bottom_hlight', true).attr('width', function () {
	        return params.viz.x_scale.rangeBand() - 1.98 * hlight_width;
	      }).attr('height', hlight_height).attr('fill', params.matrix.hlight_color).attr('transform', function () {
	        var tmp_translate_x = params.viz.x_scale(pos_x) + hlight_width * 0.99;
	        var tmp_translate_y = params.viz.y_scale.rangeBand() - hlight_height;
	        return 'translate(' + tmp_translate_x + ',' + tmp_translate_y + ')';
	      }).attr('opacity', opacity_hlight);
	    } else {
	      params.matrix.click_hlight_x = -666;
	      params.matrix.click_hlight_y = -666;
	    }
	  });
	};

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/* eslint-disable */

	var draw_up_tile = __webpack_require__(53);
	var draw_dn_tile = __webpack_require__(54);
	var mouseover_tile = __webpack_require__(55);
	var mouseout_tile = __webpack_require__(56);

	module.exports = function make_simple_rows(params, ini_inp_row_data, tip, row_selection) {

	  var inp_row_data = ini_inp_row_data.row_data;

	  var keep_orig;
	  if (_.has(params.network_data.links[0], 'value_orig')) {
	    keep_orig = true;
	  } else {
	    keep_orig = false;
	  }

	  var row_values;
	  if (keep_orig === false) {
	    // value: remove zero values to make visualization faster
	    row_values = _.filter(inp_row_data, function (num) {
	      return num.value !== 0;
	    });
	  } else {
	    row_values = inp_row_data;
	  }

	  // generate tiles in the current row
	  var tile = d3.select(row_selection).selectAll('rect').data(row_values, function (d) {
	    return d.col_name;
	  }).enter().append('rect').attr('class', 'tile row_tile').attr('width', params.viz.rect_width).attr('height', params.viz.rect_height)
	  // switch the color based on up/dn value
	  .style('fill', function (d) {

	    var inst_fill;
	    if (d.value_orig === 'NaN') {
	      // console.log('found NaN while making tiles');
	      inst_fill = '#000000';
	    } else {
	      inst_fill = d.value > 0 ? params.matrix.tile_colors[0] : params.matrix.tile_colors[1];
	    }

	    return inst_fill;
	  }).on('mouseover', function () {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    mouseover_tile(params, this, tip, args);
	  }).on('mouseout', function () {
	    mouseout_tile(params, this, tip);
	  }).style('fill-opacity', function (d) {
	    // calculate output opacity using the opacity scale

	    var inst_opacity;
	    if (d.value_orig === 'NaN') {
	      // console.log('found NaN while making tiles');
	      inst_opacity = 0.175;
	    } else {
	      inst_opacity = params.matrix.opacity_scale(Math.abs(d.value));
	    }

	    return inst_opacity;
	  }).attr('transform', function (d) {
	    var x_pos = params.viz.x_scale(d.pos_x) + 0.5 * params.viz.border_width;
	    var y_pos = 0.5 * params.viz.border_width / params.viz.zoom_switch;
	    return 'translate(' + x_pos + ',' + y_pos + ')';
	  });

	  // // tile circles
	  // /////////////////////////////
	  // var tile = d3.select(row_selection)
	  //   .selectAll('circle')
	  //   .data(row_values, function(d){ return d.col_name; })
	  //   .enter()
	  //   .append('circle')
	  //   .attr('cx', params.viz.rect_height/4)
	  //   .attr('cy', params.viz.rect_height/4)
	  //   .attr('r', params.viz.rect_height/4)
	  //   .attr('class', 'tile_circle')
	  //   // .attr('width', params.viz.rect_width/2)
	  //   // .attr('height', params.viz.rect_height/2)
	  //   // // switch the color based on up/dn value
	  //   // .style('fill', function(d) {
	  //   //   // return d.value > 0 ? params.matrix.tile_colors[0] : params.matrix.tile_colors[1];
	  //   //   return 'black';
	  //   // })
	  //   // .on('mouseover', function(...args) {
	  //   //     mouseover_tile(params, this, tip, args);
	  //   // })
	  //   // .on('mouseout', function() {
	  //   //   mouseout_tile(params, this, tip);
	  //   // })
	  //   .style('fill-opacity', function(d) {
	  //     // calculate output opacity using the opacity scale
	  //     var output_opacity = params.matrix.opacity_scale(Math.abs(d.value));
	  //     if (output_opacity < 0.3){
	  //       output_opacity = 0;
	  //     } else if (output_opacity < 0.6){
	  //       output_opacity = 0.35;
	  //     } else {
	  //       output_opacity = 1;
	  //     }
	  //     return output_opacity;
	  //     // return 0.1;
	  //   })
	  //   .attr('transform', function(d) {
	  //     var x_pos = params.viz.x_scale(d.pos_x) + 0.5*params.viz.border_width + params.viz.rect_width/4;
	  //     var y_pos = 0.5*params.viz.border_width/params.viz.zoom_switch + params.viz.rect_height/4;
	  //     return 'translate(' + x_pos + ','+y_pos+')';
	  //   });


	  if (params.matrix.tile_type == 'updn') {

	    // value split
	    var row_split_data = _.filter(inp_row_data, function (num) {
	      return num.value_up != 0 || num.value_dn != 0;
	    });

	    // tile_up
	    d3.select(row_selection).selectAll('.tile_up').data(row_split_data, function (d) {
	      return d.col_name;
	    }).enter().append('path').attr('class', 'tile_up').attr('d', function () {
	      return draw_up_tile(params);
	    }).attr('transform', function (d) {
	      var x_pos = params.viz.x_scale(d.pos_x) + 0.5 * params.viz.border_width;
	      var y_pos = 0.5 * params.viz.border_width / params.viz.zoom_switch;
	      return 'translate(' + x_pos + ',' + y_pos + ')';
	    }).style('fill', function () {
	      return params.matrix.tile_colors[0];
	    }).style('fill-opacity', function (d) {
	      var inst_opacity = 0;
	      if (Math.abs(d.value_dn) > 0) {
	        inst_opacity = params.matrix.opacity_scale(Math.abs(d.value_up));
	      }
	      return inst_opacity;
	    }).on('mouseover', function () {
	      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	        args[_key2] = arguments[_key2];
	      }

	      mouseover_tile(params, this, tip, args);
	    }).on('mouseout', function () {
	      mouseout_tile(params, this, tip);
	    });

	    // tile_dn
	    d3.select(row_selection).selectAll('.tile_dn').data(row_split_data, function (d) {
	      return d.col_name;
	    }).enter().append('path').attr('class', 'tile_dn').attr('d', function () {
	      return draw_dn_tile(params);
	    }).attr('transform', function (d) {
	      var x_pos = params.viz.x_scale(d.pos_x) + 0.5 * params.viz.border_width;
	      var y_pos = 0.5 * params.viz.border_width / params.viz.zoom_switch;
	      return 'translate(' + x_pos + ',' + y_pos + ')';
	    }).style('fill', function () {
	      return params.matrix.tile_colors[1];
	    }).style('fill-opacity', function (d) {
	      var inst_opacity = 0;
	      if (Math.abs(d.value_up) > 0) {
	        inst_opacity = params.matrix.opacity_scale(Math.abs(d.value_dn));
	      }
	      return inst_opacity;
	    }).on('mouseover', function () {
	      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	        args[_key3] = arguments[_key3];
	      }

	      mouseover_tile(params, this, tip, args);
	    }).on('mouseout', function () {
	      mouseout_tile(params, this, tip);
	    });

	    // remove rect when tile is split
	    tile.each(function (d) {
	      if (Math.abs(d.value_up) > 0 && Math.abs(d.value_dn) > 0) {
	        d3.select(this).remove();
	      }
	    });
	  }

	  // append title to group
	  if (params.matrix.tile_title) {
	    tile.append('title').text(function (d) {
	      var inst_string = 'value: ' + d.value;
	      return inst_string;
	    });
	  }
		};

/***/ },
/* 53 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function draw_up_tile(params) {

	  var start_x = 0;
	  var final_x = params.viz.x_scale.rangeBand() - params.viz.border_width / params.viz.zoom_switch_y;
	  var start_y = 0;
	  var final_y = params.viz.y_scale.rangeBand() - params.viz.border_width / params.viz.zoom_switch;

	  var output_string = 'M' + start_x + ',' + start_y + ', L' + start_x + ', ' + final_y + ', L' + final_x + ',0 Z';

	  return output_string;
	};

/***/ },
/* 54 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function draw_dn_tile(params) {

	  var start_x = 0;
	  var final_x = params.viz.x_scale.rangeBand() - params.viz.border_width / params.viz.zoom_switch_y;
	  var start_y = params.viz.y_scale.rangeBand() - params.viz.border_width / params.viz.zoom_switch;
	  var final_y = params.viz.y_scale.rangeBand() - params.viz.border_width / params.viz.zoom_switch;

	  var output_string = 'M' + start_x + ', ' + start_y + ' ,   L' + final_x + ', ' + final_y + ',  L' + final_x + ',0 Z';

	  return output_string;
	};

/***/ },
/* 55 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function mouseover_tile(params, inst_selection, tip, inst_arguments) {

	  var inst_data = inst_arguments[0];

	  var args = [].slice.call(inst_arguments);
	  var timeout;
	  var delay = 1000;

	  d3.select(inst_selection).classed('hovering', true);

	  _.each(['row', 'col'], function (inst_rc) {

	    d3.selectAll(params.root + ' .' + inst_rc + '_label_group text').style('font-weight', function (d) {
	      var font_weight;
	      var inst_found = inst_data[inst_rc + '_name'].replace(/_/g, ' ') === d.name;
	      if (inst_found) {
	        font_weight = 'bold';
	      } else {
	        font_weight = 'normal';
	      }
	      return font_weight;
	    });
	  });

	  args.push(inst_selection);
	  clearTimeout(timeout);
	  timeout = setTimeout(check_if_hovering, delay, inst_selection);

	  function check_if_hovering() {
	    if (d3.select(inst_selection).classed('hovering')) {

	      var inst_zoom = Number(d3.select(params.root + ' .viz_svg').attr('is_zoom'));

	      if (inst_zoom === 0) {

	        if (params.matrix.show_tile_tooltips) {
	          d3.selectAll('.d3-tip').style('display', 'block');
	          tip.show.apply(inst_selection, args);
	        }
	      }
	    }
	  }
		};

/***/ },
/* 56 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function mouseout_tile(params, inst_selection, tip) {

	  d3.select(inst_selection).classed('hovering', false);

	  _.each(['row', 'col'], function (inst_rc) {

	    d3.selectAll(params.root + ' .' + inst_rc + '_label_group text').style('font-weight', 'normal');
	  });

	  tip.hide();
	};

/***/ },
/* 57 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function d3_tip_custom() {
	  /* eslint-disable */
	  // Copyright (c) 2013 Justin Palmer
	  //
	  // Tooltips for d3.js SVG visualizations

	  // Public - contructs a new tooltip
	  //
	  // Returns a tip
	  // ****************** 
	  // Nick Fernandez modified version 4-19-2016 
	  // improved multiple svg, scrolling+zooming support
	  // made syntax fixes
	  //////////////////////////////////////////////
	  var direction = d3_tip_direction,
	      offset = d3_tip_offset,
	      html = d3_tip_html,
	      node = initNode(),
	      svg = null,
	      point = null,
	      target = null;

	  function tip(vis) {
	    svg = getSVGNode(vis);
	    point = svg.createSVGPoint();
	    document.body.appendChild(node);
	  }

	  // Public - show the tooltip on the screen
	  //
	  // Returns a tip
	  tip.show = function () {
	    var args = Array.prototype.slice.call(arguments);
	    if (args[args.length - 1] instanceof SVGElement) {
	      target = args.pop();
	    }

	    var content = html.apply(this, args);
	    var poffset = offset.apply(this, args);
	    var dir = direction.apply(this, args);
	    var nodel = d3.select(node);
	    var i = 0;
	    var coords;

	    nodel.html(content).style({ opacity: 1, 'pointer-events': 'all' });

	    while (i--) {
	      nodel.classed(directions[i], false);
	    }
	    coords = direction_callbacks.get(dir).apply(this);
	    nodel.classed(dir, true).style({
	      top: coords.top + poffset[0] + 'px',
	      left: coords.left + poffset[1] + 'px'
	    });

	    // quick fix for fading tile tooltips
	    if (isFunction(this) === false) {

	      var inst_class = d3.select(this).attr('class');

	      if (inst_class.indexOf('tile') >= 0) {
	        setTimeout(fade_tips, 10000, this);
	      }
	    }

	    return tip;
	  };

	  // Public - hide the tooltip
	  //
	  // Returns a tip
	  tip.hide = function () {
	    var nodel = d3.select(node);
	    nodel.style({ opacity: 0, 'pointer-events': 'none' });
	    return tip;
	  };

	  // Public: Proxy attr calls to the d3 tip container.  Sets or gets attribute value.
	  //
	  // n - name of the attribute
	  // v - value of the attribute
	  //
	  // Returns tip or attribute value
	  tip.attr = function (n) {
	    if (arguments.length < 2 && typeof n === 'string') {
	      return d3.select(node).attr(n);
	    } else {
	      var args = Array.prototype.slice.call(arguments);
	      d3.selection.prototype.attr.apply(d3.select(node), args);
	    }

	    return tip;
	  };

	  // Public: Proxy style calls to the d3 tip container.  Sets or gets a style value.
	  //
	  // n - name of the property
	  // v - value of the property
	  //
	  // Returns tip or style property value
	  tip.style = function (n) {
	    if (arguments.length < 2 && typeof n === 'string') {
	      return d3.select(node).style(n);
	    } else {
	      var args = Array.prototype.slice.call(arguments);
	      d3.selection.prototype.style.apply(d3.select(node), args);
	    }

	    return tip;
	  };

	  // Public: Set or get the direction of the tooltip
	  //
	  // v - One of n(north), s(south), e(east), or w(west), nw(northwest),
	  //     sw(southwest), ne(northeast) or se(southeast)
	  //
	  // Returns tip or direction
	  tip.direction = function (v) {
	    if (!arguments.length) {
	      return direction;
	    }
	    direction = v == null ? v : d3.functor(v);

	    return tip;
	  };

	  // Public: Sets or gets the offset of the tip
	  //
	  // v - Array of [x, y] offset
	  //
	  // Returns offset or
	  tip.offset = function (v) {
	    if (!arguments.length) {
	      return offset;
	    }
	    offset = v == null ? v : d3.functor(v);

	    return tip;
	  };

	  // Public: sets or gets the html value of the tooltip
	  //
	  // v - String value of the tip
	  //
	  // Returns html value or tip
	  tip.html = function (v) {
	    if (!arguments.length) {
	      return html;
	    }
	    html = v == null ? v : d3.functor(v);

	    return tip;
	  };

	  function d3_tip_direction() {
	    return 'n';
	  }
	  function d3_tip_offset() {
	    return [0, 0];
	  }
	  function d3_tip_html() {
	    return ' ';
	  }

	  var direction_callbacks = d3.map({
	    n: direction_n,
	    s: direction_s,
	    e: direction_e,
	    w: direction_w,
	    nw: direction_nw,
	    ne: direction_ne,
	    sw: direction_sw,
	    se: direction_se
	  }),
	      directions = direction_callbacks.keys();

	  function direction_n() {
	    var bbox = getScreenBBox();
	    return {
	      top: bbox.n.y - node.offsetHeight,
	      left: bbox.n.x - node.offsetWidth / 2
	    };
	  }

	  function direction_s() {
	    var bbox = getScreenBBox();
	    return {
	      top: bbox.s.y,
	      left: bbox.s.x - node.offsetWidth / 2
	    };
	  }

	  function direction_e() {
	    var bbox = getScreenBBox();
	    return {
	      top: bbox.e.y - node.offsetHeight / 2,
	      left: bbox.e.x
	    };
	  }

	  function direction_w() {
	    var bbox = getScreenBBox();
	    return {
	      top: bbox.w.y - node.offsetHeight / 2,
	      left: bbox.w.x - node.offsetWidth
	    };
	  }

	  function direction_nw() {
	    var bbox = getScreenBBox();
	    return {
	      top: bbox.nw.y - node.offsetHeight,
	      left: bbox.nw.x - node.offsetWidth
	    };
	  }

	  function direction_ne() {
	    var bbox = getScreenBBox();
	    return {
	      top: bbox.ne.y - node.offsetHeight,
	      left: bbox.ne.x
	    };
	  }

	  function direction_sw() {
	    var bbox = getScreenBBox();
	    return {
	      top: bbox.sw.y,
	      left: bbox.sw.x - node.offsetWidth
	    };
	  }

	  function direction_se() {
	    var bbox = getScreenBBox();
	    return {
	      top: bbox.se.y,
	      left: bbox.e.x
	    };
	  }

	  function initNode() {
	    var node = d3.select(document.createElement('div'));
	    node.style({
	      position: 'absolute',
	      opacity: 0,
	      pointerEvents: 'none',
	      boxSizing: 'border-box'
	    });

	    return node.node();
	  }

	  function getSVGNode(el) {
	    el = el.node();
	    if (el.tagName.toLowerCase() == 'svg') {
	      return el;
	    }

	    return el.ownerSVGElement;
	  }

	  // Private - gets the screen coordinates of a shape
	  //
	  // Given a shape on the screen, will return an SVGPoint for the directions
	  // n(north), s(south), e(east), w(west), ne(northeast), se(southeast), nw(northwest),
	  // sw(southwest).
	  //
	  //    +-+-+
	  //    |   |
	  //    +   +
	  //    |   |
	  //    +-+-+
	  //
	  // Returns an Object {n, s, e, w, nw, sw, ne, se}
	  function getScreenBBox() {
	    var targetel = target || d3.event.target;
	    var bbox = {};
	    var matrix = targetel.getScreenCTM();
	    var tbbox = targetel.getBBox();
	    var width = tbbox.width;
	    var height = tbbox.height;
	    var x = tbbox.x;
	    var y = tbbox.y;
	    var scrollTop = document.documentElement.scrollTop || document.body.scrollTop;
	    var scrollLeft = document.documentElement.scrollLeft || document.body.scrollLeft;

	    // Nick - prevents bugs with scrolling and zooming on the same object 
	    matrix.a = 1;
	    matrix.d = 1;
	    // changing order of adding scrolling, 
	    // original ordering was causing problems with pre-translated or rotated
	    // elements. 
	    matrix.e = matrix.e + scrollLeft;
	    matrix.f = matrix.f + scrollTop;
	    point.x = x; //+ scrollLeft 
	    point.y = y; //+ scrollTop 

	    bbox.nw = point.matrixTransform(matrix);
	    point.x = point.x + width;
	    bbox.ne = point.matrixTransform(matrix);
	    point.y = point.y + height;
	    bbox.se = point.matrixTransform(matrix);
	    point.x = point.x - width;
	    bbox.sw = point.matrixTransform(matrix);
	    point.y = point.y - height / 2;
	    bbox.w = point.matrixTransform(matrix);
	    point.x = point.x + width;
	    bbox.e = point.matrixTransform(matrix);
	    point.x = point.x - width / 2;
	    point.y = point.y - height / 2;
	    bbox.n = point.matrixTransform(matrix);
	    point.y = point.y + height;
	    bbox.s = point.matrixTransform(matrix);

	    return bbox;
	  }

	  // only fade tips if you are still hovering on the current tip 
	  function fade_tips(inst_selection) {

	    var is_hovering = d3.select(inst_selection).classed('hovering');

	    if (is_hovering) {
	      d3.selectAll('.d3-tip').transition().duration(250).style('opacity', 0);
	    }
	  }

	  function isFunction(functionToCheck) {
	    var getType = {};
	    return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
	  }

	  return tip;
	};

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(2);
	var add_row_click_hlight = __webpack_require__(59);
	var row_reorder = __webpack_require__(60);
	var col_reorder = __webpack_require__(71);
	var make_row_tooltips = __webpack_require__(72);

	module.exports = function make_rows(cgm, text_delay) {

	  var params = cgm.params;

	  var row_nodes = params.network_data.row_nodes;

	  var row_nodes_names = params.network_data.row_nodes_names;
	  var row_container;

	  // row container holds all row text and row visualizations (triangles rects)
	  if (d3.select(params.viz.viz_svg + ' .row_container').empty()) {
	    row_container = d3.select(params.viz.viz_svg).append('g').attr('class', 'row_container').attr('transform', 'translate(' + params.viz.norm_labels.margin.left + ',' + params.viz.clust.margin.top + ')');
	  } else {
	    row_container = d3.select(params.viz.viz_svg).select('.row_container').attr('transform', 'translate(' + params.viz.norm_labels.margin.left + ',' + params.viz.clust.margin.top + ')');
	  }

	  if (d3.select(params.root + ' .row_white_background').empty()) {
	    row_container.append('rect').classed('row_white_background', true).classed('white_bars', true).attr('fill', params.viz.background_color).attr('width', params.viz.label_background.row).attr('height', 30 * params.viz.clust.dim.height + 'px');
	  }

	  if (d3.select(params.root + ' .row_label_container').empty()) {
	    // container to hold text row labels
	    row_container.append('g').attr('class', 'row_label_container').attr('transform', 'translate(' + params.viz.norm_labels.width.row + ',0)').append('g').attr('class', 'row_label_zoom_container');
	  } else {
	    // container to hold text row labels
	    row_container.select(params.root + ' .row_label_container').attr('transform', 'translate(' + params.viz.norm_labels.width.row + ',0)');
	  }

	  var row_labels = d3.select(params.root + ' .row_label_zoom_container').selectAll('g').data(row_nodes, function (d) {
	    return d.name;
	  }).enter().append('g').attr('class', 'row_label_group').attr('transform', function (d) {
	    var inst_index = _.indexOf(row_nodes_names, d.name);
	    return 'translate(0,' + params.viz.y_scale(inst_index) + ')';
	  });

	  d3.select(params.root + ' .row_label_zoom_container').selectAll('.row_label_group').on('dblclick', function (d) {

	    // if (params.dendro_filter.col === false){

	    var data_attr = '__data__';
	    var row_name = this[data_attr].name;

	    if (params.sim_mat) {
	      row_reorder(cgm, this, row_name);

	      var col_selection = d3.selectAll(params.root + ' .col_label_text').filter(function (d) {
	        return d.name == row_name;
	      })[0][0];

	      col_reorder(cgm, col_selection, row_name);
	    } else {
	      row_reorder(cgm, this, row_name);
	    }
	    if (params.tile_click_hlight) {
	      add_row_click_hlight(this, d.ini);
	    }
	    // }
	  });

	  make_row_tooltips(params);

	  // append rectangle behind text
	  row_labels.insert('rect').style('opacity', 0);

	  // append row label text
	  row_labels.append('text').attr('y', params.viz.rect_height * 0.5 + params.labels.default_fs_row * 0.35).attr('text-anchor', 'end').style('font-size', params.labels.default_fs_row + 'px').text(function (d) {
	    return utils.normal_name(d);
	  }).attr('pointer-events', 'none').style('opacity', 0).style('cursor', 'default').transition().delay(text_delay).duration(text_delay).style('opacity', 1);

	  // change the size of the highlighting rects
	  row_labels.each(function () {
	    var bbox = d3.select(this).select('text')[0][0].getBBox();
	    d3.select(this).select('rect').attr('x', bbox.x).attr('y', 0).attr('width', bbox.width).attr('height', params.viz.y_scale.rangeBand()).style('fill', function () {
	      var inst_hl = 'yellow';
	      return inst_hl;
	    }).style('opacity', function (d) {
	      var inst_opacity = 0;
	      // highlight target genes
	      if (d.target === 1) {
	        inst_opacity = 1;
	      }
	      return inst_opacity;
	    });
	  });

	  if (utils.has(params.network_data.row_nodes[0], 'value')) {

	    row_labels.append('rect').attr('class', 'row_bars').attr('width', function (d) {
	      var inst_value = 0;
	      inst_value = params.labels.bar_scale_row(Math.abs(d.value));
	      return inst_value;
	    }).attr('x', function (d) {
	      var inst_value = 0;
	      inst_value = -params.labels.bar_scale_row(Math.abs(d.value));
	      return inst_value;
	    }).attr('height', params.viz.y_scale.rangeBand()).attr('fill', function (d) {
	      return d.value > 0 ? params.matrix.bar_colors[0] : params.matrix.bar_colors[1];
	    }).attr('opacity', 0.4);
	  }

	  // add row callback function
	  d3.selectAll(params.root + ' .row_label_group').on('click', function (d) {
	    if (typeof params.click_label == 'function') {
	      params.click_label(d.name, 'row');
	      add_row_click_hlight(params, this, d.ini);
	    } else {
	      if (params.tile_click_hlight) {
	        add_row_click_hlight(params, this, d.ini);
	      }
	    }
	  });
		};

/***/ },
/* 59 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function (params, clicked_row, id_clicked_row) {
	  if (id_clicked_row != params.click_hlight_row) {

	    var rel_width_hlight = 6;
	    var opacity_hlight = 0.85;
	    // var hlight_width  = rel_width_hlight*params.viz.border_width;
	    var hlight_height = rel_width_hlight * params.viz.border_width / params.viz.zoom_switch;

	    d3.selectAll(params.root + ' .click_hlight').remove();

	    // // highlight selected row
	    // d3.selectAll(params.root+' .row_label_group')
	    //   .select('rect')
	    // d3.select(this)
	    //   .select('rect')
	    //   .style('opacity', 1);

	    d3.select(clicked_row).append('rect').classed('click_hlight', true).classed('row_top_hlight', true).attr('width', params.viz.svg_dim.width).attr('height', hlight_height).attr('fill', params.matrix.hlight_color).attr('opacity', opacity_hlight);

	    d3.select(clicked_row).append('rect').classed('click_hlight', true).classed('row_bottom_hlight', true).attr('width', params.viz.svg_dim.width).attr('height', hlight_height).attr('fill', params.matrix.hlight_color).attr('opacity', opacity_hlight).attr('transform', function () {
	      var tmp_translate_y = params.viz.y_scale.rangeBand() - hlight_height;
	      return 'translate(0,' + tmp_translate_y + ')';
	    });
	  } else {
	    d3.selectAll(params.root + ' .click_hlight').remove();
	    params.click_hlight_row = -666;
	  }
		};

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(2);
	var reposition_tile_highlight = __webpack_require__(61);
	var toggle_dendro_view = __webpack_require__(62);
	var show_visible_area = __webpack_require__(41);

	module.exports = function row_reorder(cgm, row_selection, inst_row) {

	  var params = cgm.params;
	  params.viz.inst_order.row = 'custom';
	  toggle_dendro_view(cgm, 'col');

	  // d3.selectAll(params.root+' .col_dendro_group').style('opacity',0);

	  d3.selectAll(params.root + ' .toggle_col_order .btn').classed('active', false);

	  // // get inst row (gene)
	  // var inst_row = d3.select(row_selection).select('text').text();

	  params.viz.run_trans = true;

	  var mat = params.matrix.matrix;
	  var row_nodes = params.network_data.row_nodes;
	  var col_nodes = params.network_data.col_nodes;

	  var col_nodes_names = utils.pluck(col_nodes, 'name');

	  // find the index of the row
	  var tmp_arr = [];
	  row_nodes.forEach(function (node) {
	    tmp_arr.push(node.name);
	  });

	  // find index
	  inst_row = _.indexOf(tmp_arr, inst_row);

	  // gather the values of the input genes
	  tmp_arr = [];
	  col_nodes.forEach(function (node, index) {
	    tmp_arr.push(mat[inst_row].row_data[index].value);
	  });

	  // sort the rows
	  var tmp_sort = d3.range(tmp_arr.length).sort(function (a, b) {
	    return tmp_arr[b] - tmp_arr[a];
	  });

	  // resort cols
	  params.viz.x_scale.domain(tmp_sort);

	  var t;

	  // reorder matrix
	  ////////////////////
	  if (params.network_data.links.length > params.matrix.def_large_matrix) {

	    // define the t variable as the transition function
	    t = d3.select(params.root + ' .clust_group');

	    // Move Col Labels
	    d3.select(params.root + ' .col_zoom_container').selectAll('.col_label_text').attr('transform', function (d) {
	      var inst_index = _.indexOf(col_nodes_names, d.name);
	      return 'translate(' + params.viz.x_scale(inst_index) + ')rotate(-90)';
	    });

	    // reorder col_class groups
	    d3.selectAll(params.root + ' .col_cat_group').attr('transform', function (d) {
	      var inst_index = _.indexOf(col_nodes_names, d.name);
	      return 'translate(' + params.viz.x_scale(inst_index) + ',0)';
	    });
	  } else {

	    // define the t variable as the transition function
	    t = d3.select(params.root + ' .clust_group').transition().duration(2500);

	    // Move Col Labels
	    d3.select(params.root + ' .col_zoom_container').selectAll('.col_label_text').transition().duration(2500).attr('transform', function (d) {
	      var inst_index = _.indexOf(col_nodes_names, d.name);
	      return 'translate(' + params.viz.x_scale(inst_index) + ')rotate(-90)';
	    });

	    // reorder col_class groups
	    d3.selectAll(params.root + ' .col_cat_group').transition().duration(2500).attr('transform', function (d) {
	      var inst_index = _.indexOf(col_nodes_names, d.name);
	      return 'translate(' + params.viz.x_scale(inst_index) + ',0)';
	    });
	  }

	  // reorder matrix
	  t.selectAll('.tile').attr('transform', function (d) {
	    return 'translate(' + params.viz.x_scale(d.pos_x) + ',0)';
	  });

	  t.selectAll('.tile_up').attr('transform', function (d) {
	    return 'translate(' + params.viz.x_scale(d.pos_x) + ',0)';
	  });

	  t.selectAll('.tile_dn').attr('transform', function (d) {
	    return 'translate(' + params.viz.x_scale(d.pos_x) + ',0)';
	  });

	  // highlight selected column
	  ///////////////////////////////
	  // unhilight and unbold all columns (already unbolded earlier)
	  d3.selectAll(params.root + ' .row_label_group').select('rect').style('opacity', 0);
	  // highlight column name
	  d3.select(row_selection).select('rect').style('opacity', 1);

	  reposition_tile_highlight(params);

	  // redefine x and y positions
	  params.network_data.links.forEach(function (d) {
	    d.x = params.viz.x_scale(d.target);
	    d.y = params.viz.y_scale(d.source);
	  });

	  // reset visible area
	  var zoom_info = {};
	  zoom_info.zoom_x = 1;
	  zoom_info.zoom_y = 1;
	  zoom_info.trans_x = 0;
	  zoom_info.trans_y = 0;
	  show_visible_area(params, zoom_info);

	  setTimeout(function () {
	    params.viz.run_trans = false;
	  }, 2500);
		};

/***/ },
/* 61 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function (params) {

	  // resize click hlight
	  var rel_width_hlight = 6;
	  // var opacity_hlight = 0.85;

	  var hlight_width = rel_width_hlight * params.viz.border_width;
	  var hlight_height = rel_width_hlight * params.viz.border_width / params.viz.zoom_switch;
	  // reposition tile highlight
	  ////////////////////////////////

	  // top highlight
	  d3.select(params.root + ' .top_hlight').attr('width', params.viz.x_scale.rangeBand()).attr('height', hlight_height).transition().duration(2500).attr('transform', function () {
	    return 'translate(' + params.viz.x_scale(params.matrix.click_hlight_x) + ',0)';
	  });

	  // left highlight
	  d3.select(params.root + ' .left_hlight').attr('width', hlight_width).attr('height', params.viz.y_scale.rangeBand() - hlight_height * 0.99).transition().duration(2500).attr('transform', function () {
	    return 'translate(' + params.viz.x_scale(params.matrix.click_hlight_x) + ',' + hlight_height * 0.99 + ')';
	  });

	  // right highlight
	  d3.select(params.root + ' .right_hlight').attr('width', hlight_width).attr('height', params.viz.y_scale.rangeBand() - hlight_height * 0.99).transition().duration(2500).attr('transform', function () {
	    var tmp_translate = params.viz.x_scale(params.matrix.click_hlight_x) + params.viz.x_scale.rangeBand() - hlight_width;
	    return 'translate(' + tmp_translate + ',' + hlight_height * 0.99 + ')';
	  });

	  // bottom highlight
	  d3.select(params.root + ' .bottom_hlight').attr('width', function () {
	    return params.viz.x_scale.rangeBand() - 1.98 * hlight_width;
	  }).attr('height', hlight_height).transition().duration(2500).attr('transform', function () {
	    var tmp_translate_x = params.viz.x_scale(params.matrix.click_hlight_x) + hlight_width * 0.99;
	    var tmp_translate_y = params.viz.y_scale.rangeBand() - hlight_height;
	    return 'translate(' + tmp_translate_x + ',' + tmp_translate_y + ')';
	  });
		};

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var make_row_dendro_triangles = __webpack_require__(63);
	var make_col_dendro_triangles = __webpack_require__(69);

	module.exports = function toggle_dendro_view(cgm, row_col) {
	  var wait_time = arguments.length <= 2 || arguments[2] === undefined ? 1500 : arguments[2];


	  var params = cgm.params;

	  // row and col are reversed
	  if (row_col === 'row') {
	    if (params.viz.inst_order.col === 'clust') {
	      // the last true tells the viz that I'm chaning group size and not to
	      // delay the change in dendro
	      setTimeout(make_row_dendro_triangles, wait_time, cgm, true);
	    }
	  }

	  if (row_col === 'col') {
	    if (params.viz.inst_order.row === 'clust') {
	      setTimeout(make_col_dendro_triangles, wait_time, cgm, true);
	    }
	  }

	  if (params.viz.inst_order.row != 'clust' && params.viz.dendro_filter.col === false) {
	    d3.selectAll(params.root + ' .col_dendro_group').style('opacity', 0).on('mouseover', null).on('mouseout', null);
	  }

	  if (params.viz.inst_order.col != 'clust' && params.viz.dendro_filter.row === false) {
	    d3.selectAll(params.root + ' .row_dendro_group').style('opacity', 0).on('mouseover', null).on('mouseout', null);
	  }
	};

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var calc_row_dendro_triangles = __webpack_require__(64);
	var dendro_group_highlight = __webpack_require__(65);
	var dendro_mouseover = __webpack_require__(67);
	var dendro_mouseout = __webpack_require__(68);

	module.exports = function make_row_dendro_triangles(cgm) {
	  var is_change_group = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];


	  var params = cgm.params;

	  var dendro_info = calc_row_dendro_triangles(params);

	  var inst_dendro_opacity;
	  if (dendro_info.length > 1) {
	    inst_dendro_opacity = params.viz.dendro_opacity;
	  } else {
	    inst_dendro_opacity = 0.90;
	  }

	  var run_transition;
	  if (d3.selectAll(params.root + ' .row_dendro_group').empty()) {
	    run_transition = false;
	  } else {
	    run_transition = true;
	    d3.selectAll(params.root + ' .row_dendro_group').remove();
	  }

	  if (is_change_group) {
	    run_transition = false;
	  }

	  d3.select(params.root + ' .row_dendro_container').selectAll('path').data(dendro_info, function (d) {
	    return d.name;
	  }).enter().append('path').style('opacity', 0).attr('class', 'row_dendro_group').attr('d', function (d) {

	    // up triangle
	    var start_x = 0;
	    var start_y = d.pos_top;

	    var mid_x = 30;
	    var mid_y = d.pos_mid;

	    var final_x = 0;
	    var final_y = d.pos_bot;

	    var output_string = 'M' + start_x + ',' + start_y + ', L' + mid_x + ', ' + mid_y + ', L' + final_x + ',' + final_y + ' Z';

	    return output_string;
	  }).style('fill', 'black').on('mouseover', function (d) {
	    var inst_rc;
	    if (params.sim_mat) {
	      inst_rc = 'both';
	    } else {
	      inst_rc = 'row';
	    }
	    dendro_mouseover(this);
	    dendro_group_highlight(params, this, d, inst_rc);
	  }).on('mouseout', function () {
	    if (params.viz.inst_order.col === 'clust') {
	      d3.select(this).style('opacity', inst_dendro_opacity);
	    }

	    d3.selectAll(params.root + ' .dendro_shadow').remove();

	    dendro_mouseout(this);
	  }).on('click', function (d) {
	    row_dendro_filter_db(d, this);
	  });

	  var triangle_opacity;
	  if (params.viz.inst_order.col === 'clust') {
	    triangle_opacity = inst_dendro_opacity;
	  } else {
	    triangle_opacity = 0;
	  }

	  if (run_transition) {

	    d3.select(params.root + ' .row_dendro_container').selectAll('path').transition().delay(1000).duration(1000).style('opacity', triangle_opacity);
	  } else {

	    d3.select(params.root + ' .row_dendro_container').selectAll('path').style('opacity', triangle_opacity);
	  }

	  var row_dendro_filter_db = _.debounce(row_dendro_filter, 1500);

	  function row_dendro_filter(d, inst_selection) {

	    var names = {};
	    if (cgm.params.dendro_filter.col === false) {

	      /* filter rows using dendrogram */
	      if (cgm.params.dendro_filter.row === false) {

	        // // disable row ordering and dendro slider
	        // d3.selectAll('.toggle_row_order .btn').attr('disabled', true);
	        // $(params.root+' .slider_row').slider('disable');

	        d3.select(params.root + ' .slider_row').style('opacity', 0.5).style('pointer-events', 'none');

	        names.row = d.all_names;

	        var tmp_names = cgm.params.network_data.row_nodes_names;

	        // keep a backup of the inst_view
	        var inst_row_nodes = cgm.params.network_data.row_nodes;
	        var inst_col_nodes = cgm.params.network_data.col_nodes;

	        cgm.filter_viz_using_names(names);

	        cgm.params.inst_nodes.row_nodes = inst_row_nodes;
	        cgm.params.inst_nodes.col_nodes = inst_col_nodes;

	        d3.selectAll(params.root + ' .dendro_shadow').transition().duration(1000).style('opacity', 0).remove();

	        // keep the names of all the rows
	        cgm.params.dendro_filter.row = tmp_names;

	        d3.select(inst_selection).style('opacity', 1);

	        /* reset filter */
	      } else {

	        names.row = cgm.params.dendro_filter.row;

	        cgm.filter_viz_using_names(names);
	        cgm.params.dendro_filter.row = false;
	      }
	    }
	  }
		};

/***/ },
/* 64 */
/***/ function(module, exports) {

	"use strict";

	module.exports = function calc_row_dendro_triangles(params) {

	  var triangle_info = {};
	  var inst_level = params.group_level.row;
	  var row_nodes = params.network_data.row_nodes;
	  var row_nodes_names = params.network_data.row_nodes_names;

	  _.each(row_nodes, function (d) {

	    // console.log('row_node '+d.name)

	    var tmp_group = d.group[inst_level];
	    var inst_index = _.indexOf(row_nodes_names, d.name);
	    var inst_top = params.viz.y_scale(inst_index);
	    var inst_bot = inst_top + params.viz.y_scale.rangeBand();

	    if (_.has(triangle_info, tmp_group) === false) {
	      triangle_info[tmp_group] = {};
	      triangle_info[tmp_group].name_top = d.name;
	      triangle_info[tmp_group].name_bot = d.name;
	      triangle_info[tmp_group].pos_top = inst_top;
	      triangle_info[tmp_group].pos_bot = inst_bot;
	      triangle_info[tmp_group].pos_mid = (inst_top + inst_bot) / 2;
	      triangle_info[tmp_group].name = tmp_group;
	      triangle_info[tmp_group].all_names = [];
	    }

	    triangle_info[tmp_group].all_names.push(d.name);

	    if (inst_top < triangle_info[tmp_group].pos_top) {
	      triangle_info[tmp_group].name_top = d.name;
	      triangle_info[tmp_group].pos_top = inst_top;
	      triangle_info[tmp_group].pos_mid = (inst_top + triangle_info[tmp_group].pos_bot) / 2;
	    }

	    if (inst_bot > triangle_info[tmp_group].pos_bot) {
	      triangle_info[tmp_group].name_bot = d.name;
	      triangle_info[tmp_group].pos_bot = inst_bot;
	      triangle_info[tmp_group].pos_mid = (triangle_info[tmp_group].pos_top + inst_bot) / 2;
	    }
	  });

	  var group_info = [];

	  _.each(triangle_info, function (d) {
	    group_info.push(d);
	  });

	  return group_info;
	};

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var dendro_shade_bars = __webpack_require__(66);
	module.exports = function dendro_group_highlight(params, inst_selection, inst_data, inst_rc) {

	  var wait_before_make_shade = 200;

	  setTimeout(still_hovering, wait_before_make_shade);

	  function still_hovering() {
	    if (d3.select(inst_selection).classed('hovering')) {
	      make_shade_bars();
	    }
	  }

	  function make_shade_bars() {

	    if (inst_rc === 'row') {

	      // row and col labling are reversed
	      if (params.viz.inst_order.col === 'clust') {
	        dendro_shade_bars(params, inst_selection, inst_rc, inst_data);
	      }
	    } else if (inst_rc === 'col') {

	      // row and col labeling are reversed
	      if (params.viz.inst_order.row === 'clust') {
	        dendro_shade_bars(params, inst_selection, inst_rc, inst_data);
	      }
	    } else if (inst_rc === 'both') {

	      if (params.viz.inst_order.col === 'clust') {
	        dendro_shade_bars(params, inst_selection, 'row', inst_data);
	      }
	      if (params.viz.inst_order.row === 'clust') {
	        dendro_shade_bars(params, inst_selection, 'col', inst_data);
	      }
	    }
	  }
	};

/***/ },
/* 66 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function dendro_shade_bars(params, inst_selection, inst_rc, inst_data) {

	  var inst_opacity = 0.2;
	  var select_opacity = 0.7;
	  var bot_height;

	  if (inst_rc == 'row') {

	    d3.select(inst_selection).style('opacity', select_opacity);

	    // top shade 
	    d3.select(params.root + ' .clust_group').append('rect').style('width', params.viz.clust.dim.width + 'px').style('height', inst_data.pos_top + 'px').style('fill', 'black').style('opacity', inst_opacity).classed('dendro_shadow', true);

	    bot_height = params.viz.clust.dim.height - inst_data.pos_bot;
	    // bottom shade 
	    d3.select(params.root + ' .clust_group').append('rect').style('width', params.viz.clust.dim.width + 'px').style('height', bot_height + 'px').attr('transform', 'translate(0,' + inst_data.pos_bot + ')').style('fill', 'black').style('opacity', inst_opacity).classed('dendro_shadow', true);
	  } else if (inst_rc === 'col') {

	    d3.select(inst_selection).style('opacity', select_opacity);

	    // top shade 
	    d3.select(params.root + ' .clust_group').append('rect').style('width', inst_data.pos_top + 'px').style('height', params.viz.clust.dim.height + 'px').style('fill', 'black').style('opacity', inst_opacity).classed('dendro_shadow', true);

	    // bottom shade 
	    bot_height = params.viz.clust.dim.width - inst_data.pos_bot;
	    d3.select(params.root + ' .clust_group').append('rect').style('width', bot_height + 'px').style('height', params.viz.clust.dim.height + 'px').attr('transform', 'translate(' + inst_data.pos_bot + ',0)').style('fill', 'black').style('opacity', inst_opacity).classed('dendro_shadow', true);
	  }
		};

/***/ },
/* 67 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function dendro_mouseover(inst_selection) {
	  d3.select(inst_selection).classed('hovering', true);
		};

/***/ },
/* 68 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function dendro_mouseout(inst_selection) {
	  d3.select(inst_selection).classed('hovering', false);
		};

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var calc_col_dendro_triangles = __webpack_require__(70);
	var dendro_group_highlight = __webpack_require__(65);
	var dendro_mouseover = __webpack_require__(67);
	var dendro_mouseout = __webpack_require__(68);

	module.exports = function make_col_dendro_triangles(cgm) {
	  var is_change_group = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];


	  var params = cgm.params;

	  var dendro_info = calc_col_dendro_triangles(params);

	  var inst_dendro_opacity;
	  if (dendro_info.length > 1) {
	    inst_dendro_opacity = params.viz.dendro_opacity;
	  } else {
	    inst_dendro_opacity = 0.90;
	  }

	  var run_transition;
	  if (d3.selectAll(params.root + ' .col_dendro_group').empty()) {
	    run_transition = false;
	  } else {
	    run_transition = true;
	    d3.selectAll(params.root + ' .col_dendro_group').remove();
	  }

	  if (is_change_group) {
	    run_transition = false;
	  }

	  d3.select(params.root + ' .col_dendro_container').selectAll('path').data(dendro_info, function (d) {
	    return d.name;
	  }).enter().append('path').style('opacity', 0).attr('class', 'col_dendro_group').attr('d', function (d) {

	    // up triangle
	    var start_x = d.pos_top;
	    var start_y = 0;

	    var mid_x = d.pos_mid;
	    var mid_y = 30;

	    var final_x = d.pos_bot;
	    var final_y = 0;

	    var output_string = 'M' + start_x + ',' + start_y + ', L' + mid_x + ', ' + mid_y + ', L' + final_x + ',' + final_y + ' Z';

	    return output_string;
	  }).style('fill', 'black').on('mouseover', function (d) {
	    var inst_rc;
	    if (params.sim_mat) {
	      inst_rc = 'both';
	    } else {
	      inst_rc = 'col';
	    }
	    dendro_mouseover(this);
	    dendro_group_highlight(params, this, d, inst_rc);
	  }).on('mouseout', function () {
	    if (params.viz.inst_order.col === 'clust') {
	      d3.select(this).style('opacity', inst_dendro_opacity);
	    }
	    d3.selectAll(params.root + ' .dendro_shadow').remove();
	    dendro_mouseout(this);
	  }).on('click', function (d) {
	    col_dendro_filter_db(d, this);
	  });

	  var triangle_opacity;

	  if (params.viz.inst_order.row === 'clust') {
	    triangle_opacity = inst_dendro_opacity;
	  } else {
	    triangle_opacity = 0;
	  }

	  if (run_transition) {

	    d3.select(params.root + ' .col_dendro_container').selectAll('path').transition().delay(1000).duration(1000).style('opacity', triangle_opacity);
	  } else {

	    d3.select(params.root + ' .col_dendro_container').selectAll('path').style('opacity', triangle_opacity);
	  }

	  var col_dendro_filter_db = _.debounce(col_dendro_filter, 700);

	  function col_dendro_filter(d, inst_selection) {

	    var names = {};
	    if (cgm.params.dendro_filter.row === false) {

	      /* filter cols using dendrogram */
	      if (cgm.params.dendro_filter.col === false) {

	        // // disable col ordering and dendro slider
	        // d3.selectAll('.toggle_col_order .btn').attr('disabled', true);

	        // $(params.root+' .slider_col').slider('disable');

	        d3.select(params.root + ' .slider_col').style('opacity', 0.5).style('pointer-events', 'none');

	        names.col = d.all_names;

	        var tmp_names = cgm.params.network_data.col_nodes_names;

	        // keep a backup of the inst_view
	        var inst_row_nodes = cgm.params.network_data.row_nodes;
	        var inst_col_nodes = cgm.params.network_data.col_nodes;

	        cgm.filter_viz_using_names(names);

	        cgm.params.inst_nodes.row_nodes = inst_row_nodes;
	        cgm.params.inst_nodes.col_nodes = inst_col_nodes;

	        d3.selectAll(params.root + ' .dendro_shadow').transition().duration(1000).style('opacity', 0).remove();

	        // keep the names of all the cols
	        cgm.params.dendro_filter.col = tmp_names;

	        d3.select(inst_selection).style('opacity', 1);

	        /* reset filter */
	      } else {

	        names.col = cgm.params.dendro_filter.col;

	        cgm.filter_viz_using_names(names);
	        cgm.params.dendro_filter.col = false;
	      }
	    }
	  }
		};

/***/ },
/* 70 */
/***/ function(module, exports) {

	"use strict";

	module.exports = function calc_col_dendro_triangles(params) {

	  var triangle_info = {};
	  var inst_level = params.group_level.col;
	  var col_nodes = params.network_data.col_nodes;
	  var col_nodes_names = params.network_data.col_nodes_names;

	  _.each(col_nodes, function (d) {

	    var tmp_group = d.group[inst_level];
	    var inst_index = _.indexOf(col_nodes_names, d.name);
	    var inst_top = params.viz.x_scale(inst_index);
	    var inst_bot = inst_top + params.viz.x_scale.rangeBand();

	    if (_.has(triangle_info, tmp_group) === false) {
	      triangle_info[tmp_group] = {};
	      triangle_info[tmp_group].name_top = d.name;
	      triangle_info[tmp_group].name_bot = d.name;
	      triangle_info[tmp_group].pos_top = inst_top;
	      triangle_info[tmp_group].pos_bot = inst_bot;
	      triangle_info[tmp_group].pos_mid = (inst_top + inst_bot) / 2;
	      triangle_info[tmp_group].name = tmp_group;
	      triangle_info[tmp_group].all_names = [];
	    }

	    triangle_info[tmp_group].all_names.push(d.name);

	    if (inst_top < triangle_info[tmp_group].pos_top) {
	      triangle_info[tmp_group].name_top = d.name;
	      triangle_info[tmp_group].pos_top = inst_top;
	      triangle_info[tmp_group].pos_mid = (inst_top + triangle_info[tmp_group].pos_bot) / 2;
	    }

	    if (inst_bot > triangle_info[tmp_group].pos_bot) {
	      triangle_info[tmp_group].name_bot = d.name;
	      triangle_info[tmp_group].pos_bot = inst_bot;
	      triangle_info[tmp_group].pos_mid = (triangle_info[tmp_group].pos_top + inst_bot) / 2;
	    }
	  });

	  var group_info = [];

	  _.each(triangle_info, function (d) {
	    group_info.push(d);
	  });

	  return group_info;
		};

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(2);
	var reposition_tile_highlight = __webpack_require__(61);
	var toggle_dendro_view = __webpack_require__(62);
	var show_visible_area = __webpack_require__(41);

	module.exports = function col_reorder(cgm, col_selection, inst_term) {

	  var params = cgm.params;

	  params.viz.inst_order.col = 'custom';
	  toggle_dendro_view(cgm, 'col');

	  // d3.selectAll(params.root+' .row_dendro_group').style('opacity',0);

	  d3.selectAll(params.root + ' .toggle_row_order .btn').classed('active', false);

	  params.viz.run_trans = true;

	  var mat = params.matrix.matrix;
	  var row_nodes = params.network_data.row_nodes;
	  var col_nodes = params.network_data.col_nodes;

	  var row_nodes_names = utils.pluck(row_nodes, 'name');

	  // // get inst col (term)
	  // var inst_term = d3.select(col_selection).select('text').attr('full_name');

	  // find the column number of col_selection term from col_nodes
	  // gather column node names
	  var tmp_arr = [];
	  col_nodes.forEach(function (node) {
	    tmp_arr.push(node.name);
	  });

	  // find index
	  var inst_col = _.indexOf(tmp_arr, inst_term);

	  // gather the values of the input genes
	  tmp_arr = [];
	  row_nodes.forEach(function (node, index) {
	    tmp_arr.push(mat[index].row_data[inst_col].value);
	  });

	  // sort the cols
	  var tmp_sort = d3.range(tmp_arr.length).sort(function (a, b) {
	    return tmp_arr[b] - tmp_arr[a];
	  });

	  // resort cols
	  ////////////////////////////
	  params.viz.y_scale.domain(tmp_sort);

	  var t;

	  // reorder
	  if (params.network_data.links.length > params.matrix.def_large_matrix) {
	    t = d3.select(params.root + ' .clust_group');

	    // reorder row_label_triangle groups
	    d3.selectAll(params.root + ' .row_cat_group').attr('transform', function (d) {
	      var inst_index = _.indexOf(row_nodes_names, d.name);
	      return 'translate(0,' + params.viz.y_scale(inst_index) + ')';
	    });

	    // Move Row Labels
	    d3.select(params.root + ' .row_label_zoom_container').selectAll('.row_label_group').attr('transform', function (d) {
	      var inst_index = _.indexOf(row_nodes_names, d.name);
	      return 'translate(0,' + params.viz.y_scale(inst_index) + ')';
	    });
	  } else {

	    t = d3.select(params.root + ' .clust_group').transition().duration(2500);

	    // reorder row_label_triangle groups
	    d3.selectAll(params.root + ' .row_cat_group').transition().duration(2500).attr('transform', function (d) {
	      var inst_index = _.indexOf(row_nodes_names, d.name);
	      return 'translate(0,' + params.viz.y_scale(inst_index) + ')';
	    });

	    // Move Row Labels
	    d3.select(params.root + ' .row_label_zoom_container').selectAll('.row_label_group').transition().duration(2500).attr('transform', function (d) {
	      var inst_index = _.indexOf(row_nodes_names, d.name);
	      return 'translate(0,' + params.viz.y_scale(inst_index) + ')';
	    });
	  }

	  // reorder matrix rows
	  t.selectAll('.row').attr('transform', function (d) {
	    var inst_index = _.indexOf(row_nodes_names, d.name);
	    return 'translate(0,' + params.viz.y_scale(inst_index) + ')';
	  });

	  // highlight selected column
	  ///////////////////////////////
	  // unhilight and unbold all columns (already unbolded earlier)
	  d3.selectAll(params.root + ' .col_label_text').select('.highlight_rect').style('opacity', 0);
	  // highlight column name
	  d3.select(col_selection).select('.highlight_rect').style('opacity', 1);

	  // redefine x and y positions
	  params.network_data.links.forEach(function (d) {
	    d.x = params.viz.x_scale(d.target);
	    d.y = params.viz.y_scale(d.source);
	  });

	  reposition_tile_highlight(params);

	  // reset visible area
	  var zoom_info = {};
	  zoom_info.zoom_x = 1;
	  zoom_info.zoom_y = 1;
	  zoom_info.trans_x = 0;
	  zoom_info.trans_y = 0;
	  show_visible_area(params, zoom_info);

	  setTimeout(function () {
	    params.viz.run_trans = false;
	  }, 2500);
		};

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var d3_tip_custom = __webpack_require__(57);

	module.exports = function make_tooltips(params) {

	  d3.selectAll(params.root + ' .row_tip').remove();

	  if (params.labels.show_label_tooltips) {

	    // d3-tooltip
	    var row_tip = d3_tip_custom().attr('class', 'd3-tip row_tip').direction('e').offset([0, 10]).html(function (d) {
	      var inst_name = d.name.replace(/_/g, ' ').split('#')[0];
	      return "<span>" + inst_name + "</span>";
	    });

	    d3.select(params.viz.viz_wrapper).select(params.root + ' .row_container').call(row_tip);

	    d3.select(params.root + ' .row_label_zoom_container').selectAll('g').on('mouseover', function (d) {

	      // do not include params.root selector since tooltips are not in root
	      d3.select(' .row_tip').classed(d.name, true);

	      d3.selectAll('.d3-tip').style('opacity', 0);

	      d3.select(this).select('text').classed('active', true);

	      row_tip.show(d);

	      if (params.row_tip_callback != null) {
	        params.row_tip_callback(d.name);
	      }
	    }).on('mouseout', function mouseout(d) {

	      d3.select(' .row_tip').classed(d.name, false);

	      d3.select(this).select('text').classed('active', false);

	      row_tip.hide(d);
	    });
	  } else {

	    d3.select(params.root + ' .row_label_zoom_container').selectAll('g').on('mouseover', function () {
	      d3.select(this).select('text').classed('active', true);
	    }).on('mouseout', function mouseout() {
	      d3.select(this).select('text').classed('active', false);
	    });
	  }
		};

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(2);
	var add_col_click_hlight = __webpack_require__(74);
	var col_reorder = __webpack_require__(71);
	var row_reorder = __webpack_require__(60);
	var make_col_tooltips = __webpack_require__(75);

	module.exports = function (cgm, text_delay) {

	  var params = cgm.params;
	  var col_container;

	  var col_nodes = params.network_data.col_nodes;
	  var col_nodes_names = params.network_data.col_nodes_names;

	  // offset click group column label
	  var x_offset_click = params.viz.x_scale.rangeBand() / 2 + params.viz.border_width;
	  // reduce width of rotated rects
	  var reduce_rect_width = params.viz.x_scale.rangeBand() * 0.36;

	  // make container to pre-position zoomable elements
	  if (d3.select(params.root + ' .col_container').empty()) {

	    col_container = d3.select(params.viz.viz_svg).append('g').attr('class', 'col_container').attr('transform', 'translate(' + params.viz.clust.margin.left + ',' + params.viz.norm_labels.margin.top + ')');

	    // white background rect for col labels
	    col_container.append('rect').attr('fill', params.viz.background_color) //!! prog_colors
	    .attr('width', 30 * params.viz.clust.dim.width + 'px').attr('height', params.viz.label_background.col).attr('class', 'white_bars');

	    // col labels
	    col_container.append('g').attr('class', 'col_label_outer_container')
	    // position the outer col label group
	    .attr('transform', 'translate(0,' + params.viz.norm_labels.width.col + ')').append('g').attr('class', 'col_zoom_container');
	  } else {

	    col_container = d3.select(params.root + ' .col_container').attr('transform', 'translate(' + params.viz.clust.margin.left + ',' + params.viz.norm_labels.margin.top + ')');

	    // white background rect for col labels
	    col_container.select('.white_bars').attr('fill', params.viz.background_color) //!! prog_colors
	    .attr('width', 30 * params.viz.clust.dim.width + 'px').attr('height', params.viz.label_background.col);

	    // col labels
	    col_container.select(params.root + ' .col_label_outer_container');
	  }

	  // add main column label group
	  var col_label_obj = d3.select(params.root + ' .col_zoom_container').selectAll('.col_label_text').data(col_nodes, function (d) {
	    return d.name;
	  }).enter().append('g').attr('class', 'col_label_text').attr('transform', function (d) {
	    var inst_index = _.indexOf(col_nodes_names, d.name);
	    return 'translate(' + params.viz.x_scale(inst_index) + ') rotate(-90)';
	  });

	  // append group for individual column label
	  var col_label_group = col_label_obj
	  // append new group for rect and label (not white lines)
	  .append('g').attr('class', 'col_label_group')
	  // rotate column labels
	  .attr('transform', 'translate(' + params.viz.x_scale.rangeBand() / 2 + ',' + x_offset_click + ') rotate(45)').on('mouseover', function () {
	    d3.select(this).select('text').classed('active', true);
	  }).on('mouseout', function () {
	    d3.select(this).select('text').classed('active', false);
	  });

	  // append column value bars
	  if (utils.has(params.network_data.col_nodes[0], 'value')) {

	    col_label_group.append('rect').attr('class', 'col_bars').attr('width', function (d) {
	      var inst_value = 0;
	      if (d.value > 0) {
	        inst_value = params.labels.bar_scale_col(d.value);
	      }
	      return inst_value;
	    })
	    // rotate labels - reduce width if rotating
	    .attr('height', params.viz.x_scale.rangeBand() * 0.66).style('fill', function (d) {
	      return d.value > 0 ? params.matrix.bar_colors[0] : params.matrix.bar_colors[1];
	    }).attr('opacity', 0.6);
	  }

	  // add column label
	  col_label_group.append('text').attr('x', 0)
	  // manually tuned
	  .attr('y', params.viz.x_scale.rangeBand() * 0.64).attr('dx', params.viz.border_width).attr('text-anchor', 'start').attr('full_name', function (d) {
	    return d.name;
	  })
	  // original font size
	  .style('font-size', params.labels.default_fs_col + 'px').style('cursor', 'default').text(function (d) {
	    return utils.normal_name(d);
	  })
	  // .attr('pointer-events','none')
	  .style('opacity', 0).transition().delay(text_delay).duration(text_delay).style('opacity', 1);

	  make_col_tooltips(params);

	  // this is interferring with text tooltip
	  //////////////////////////////////////////
	  // // append rectangle behind text
	  // col_label_group
	  //   .insert('rect')
	  //   .attr('class','.highlight_rect')
	  //   .attr('x', 0)
	  //   .attr('y', 0)
	  //   .attr('width', 10*params.viz.rect_height)
	  //   .attr('height', 0.67*params.viz.rect_width)
	  //   .style('opacity', 0);

	  // add triangle under rotated labels
	  col_label_group.append('path').style('stroke-width', 0).attr('d', function () {
	    // x and y are flipped since its rotated
	    var origin_y = -params.viz.border_width;
	    var start_x = 0;
	    var final_x = params.viz.x_scale.rangeBand() - reduce_rect_width;
	    var start_y = -(params.viz.x_scale.rangeBand() - reduce_rect_width + params.viz.border_width);
	    var final_y = -params.viz.border_width;
	    var output_string = 'M ' + origin_y + ',0 L ' + start_y + ',' + start_x + ', L ' + final_y + ',' + final_x + ' Z';
	    return output_string;
	  }).attr('fill', '#eee').style('opacity', 0).transition().delay(text_delay).duration(text_delay).style('opacity', params.viz.triangle_opacity);

	  // add col callback function
	  d3.selectAll(params.root + ' .col_label_text').on('click', function (d) {

	    if (typeof params.click_label == 'function') {
	      params.click_label(d.name, 'col');
	      add_col_click_hlight(params, this, d.ini);
	    } else {

	      if (params.tile_click_hlight) {
	        add_col_click_hlight(params, this, d.ini);
	      }
	    }
	  }).on('dblclick', function (d) {

	    // if (params.dendro_filter.row === false){

	    var data_attr = '__data__';
	    var col_name = this[data_attr].name;

	    if (params.sim_mat) {
	      col_reorder(cgm, this, col_name);

	      var row_selection = d3.selectAll(params.root + ' .row_label_group').filter(function (d) {
	        return d.name == col_name;
	      })[0][0];

	      row_reorder(cgm, row_selection, col_name);
	    } else {
	      col_reorder(cgm, this, col_name);
	    }

	    if (params.tile_click_hlight) {
	      add_col_click_hlight(params, this, d.ini);
	    }

	    // }
	  });
		};

/***/ },
/* 74 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function (params, clicked_col, id_clicked_col) {

	  if (id_clicked_col != params.click_hlight_col) {

	    params.click_hlight_col = id_clicked_col;

	    var rel_width_hlight = 6;
	    var opacity_hlight = 0.85;
	    var hlight_width = rel_width_hlight * params.viz.border_width;
	    // var hlight_height = rel_width_hlight*params.viz.border_width/params.viz.zoom_switch;

	    d3.selectAll(params.root + ' .click_hlight').remove();

	    // // highlight selected column
	    // ///////////////////////////////
	    // // unhilight and unbold all columns (already unbolded earlier)
	    // d3.selectAll('.col_label_text')
	    //   .select('rect')
	    //   .style('opacity', 0);
	    // // highlight column name
	    // d3.select(clicked_col)
	    //   .select('rect')
	    //   .style('opacity', 1);

	    d3.select(clicked_col).append('rect').classed('click_hlight', true).classed('col_top_hlight', true).attr('width', params.viz.clust.dim.height).attr('height', hlight_width).attr('fill', params.matrix.hlight_color).attr('opacity', opacity_hlight).attr('transform', function () {
	      var tmp_translate_y = 0;
	      var tmp_translate_x = -(params.viz.clust.dim.height + params.viz.cat_room.col + params.viz.uni_margin);
	      return 'translate(' + tmp_translate_x + ',' + tmp_translate_y + ')';
	    });

	    d3.select(clicked_col).append('rect').classed('click_hlight', true).classed('col_bottom_hlight', true).attr('width', params.viz.clust.dim.height).attr('height', hlight_width).attr('fill', params.matrix.hlight_color).attr('opacity', opacity_hlight).attr('transform', function () {
	      // reverse x and y since rotated
	      var tmp_translate_y = params.viz.x_scale.rangeBand() - hlight_width;
	      var tmp_translate_x = -(params.viz.clust.dim.height + params.viz.cat_room.col + params.viz.uni_margin);
	      return 'translate(' + tmp_translate_x + ',' + tmp_translate_y + ')';
	    });
	  } else {
	    d3.selectAll(params.root + ' .click_hlight').remove();
	    params.click_hlight_col = -666;
	  }
		};

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var d3_tip_custom = __webpack_require__(57);

	module.exports = function make_col_tooltips(params) {

	  if (params.labels.show_label_tooltips) {

	    // d3-tooltip
	    var col_tip = d3_tip_custom().attr('class', 'd3-tip').direction('w').offset([20, 0]).style('display', 'block').html(function (d) {
	      var inst_name = d.name.replace(/_/g, ' ').split('#')[0];
	      return "<span>" + inst_name + "</span>";
	    });

	    d3.select(params.viz.viz_wrapper).select('svg').select(params.root + ' .col_zoom_container').selectAll('.col_label_group').select('text').call(col_tip);

	    d3.select(params.root + ' .col_zoom_container')
	    // .selectAll('.col_label_text')
	    .selectAll('.col_label_group')
	    // .selectAll('text')
	    .on('mouseover', col_tip.show).on('mouseout', function () {
	      col_tip.hide(this);
	    });
	  }
		};

/***/ },
/* 76 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function (params) {

	  d3.select(params.viz.viz_svg).append('rect').attr('fill', params.viz.background_color).attr('height', params.viz.super_labels.dim.width + 'px').attr('width', '3000px').classed('super_col_bkg', true).classed('white_bars', true).attr('transform', 'translate(0,' + params.viz.super_labels.margin.top + ')');

	  d3.select(params.viz.viz_svg).append('text').attr('class', 'super_col').text(params.labels.super.col).attr('text-anchor', 'center').attr('transform', function () {

	    var inst_text_width = d3.select(this)[0][0].getBBox().width;

	    var inst_x = params.viz.clust.dim.width / 2 + params.viz.norm_labels.width.row - inst_text_width / 2;
	    var inst_y = params.viz.super_labels.dim.width;
	    return 'translate(' + inst_x + ',' + inst_y + ')';
	  }).style('font-size', function () {
	    var inst_font_size = params.labels.super_label_fs * params.labels.super_label_scale;
	    return inst_font_size + 'px';
	  }).style('font-weight', 300);

	  d3.select(params.viz.viz_svg).append('rect').attr('fill', params.viz.background_color).attr('width', params.viz.super_labels.dim.width + 'px').attr('height', '3000px').classed('super_row_bkg', true).classed('white_bars', true).attr('transform', 'translate(' + params.viz.super_labels.margin.left + ',0)');

	  // append super title row group - used to separate translation from rotation
	  d3.select(params.viz.viz_svg).append('g').classed('super_row', true).attr('transform', function () {
	    // position in the middle of the clustergram
	    var inst_x = params.viz.super_labels.dim.width;
	    var inst_y = params.viz.clust.dim.height / 2 + params.viz.norm_labels.width.col;
	    return 'translate(' + inst_x + ',' + inst_y + ')';
	  });

	  // super row label (rotate the already translated title )
	  d3.select(params.root + ' .super_row').append('text').text(params.labels.super.row).attr('text-anchor', 'center').attr('transform', function () {
	    var inst_text_width = d3.select(this)[0][0].getBBox().width;
	    var inst_x_offset = inst_text_width / 2 + params.viz.norm_labels.width.col;
	    var inst_offset = 'translate(0,' + inst_x_offset + '), rotate(-90)';
	    return inst_offset;
	  }).style('font-size', function () {
	    var inst_font_size = params.labels.super_label_fs * params.labels.super_label_scale;
	    return inst_font_size + 'px';
	  }).style('font-weight', 300);
		};

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var get_cat_title = __webpack_require__(78);
	var ini_cat_reorder = __webpack_require__(79);
	var make_row_cat_super_labels = __webpack_require__(81);

	module.exports = function Spillover(cgm) {

	  var params = cgm.params;

	  var viz = params.viz;

	  // hide spillover from slanted column labels on right side
	  d3.select(viz.root + ' .col_container').append('path').style('stroke-width', '0').attr('d', 'M 0,0 L 1000,-1000, L 1000,0 Z').attr('fill', viz.background_color) //!! prog_colors
	  .attr('class', 'right_slant_triangle').attr('transform', 'translate(' + viz.clust.dim.width + ',' + viz.norm_labels.width.col + ')');

	  // hide spillover from slanted column labels on left side
	  d3.select(viz.root + ' .col_container').append('path').style('stroke-width', '0').attr('d', 'M 0,0 L 500,-500, L 0,-500 Z').attr('fill', viz.background_color).attr('class', 'left_slant_triangle')
	  // shift left by 1 px to prevent cutting off labels
	  .attr('transform', 'translate(-1,' + viz.norm_labels.width.col + ')');

	  // white rect to cover excess labels
	  d3.select(viz.viz_svg).append('rect').attr('fill', viz.background_color) //!! prog_colors
	  .attr('width', viz.clust.margin.left).attr('height', viz.clust.margin.top).attr('class', 'top_left_white');

	  var tmp_left = viz.clust.margin.left + viz.clust.dim.width + viz.uni_margin + viz.dendro_room.row;
	  var tmp_top = viz.norm_labels.margin.top + viz.norm_labels.width.col;

	  // hide spillover from right
	  d3.select(viz.viz_svg).append('rect').attr('fill', viz.background_color) //!! prog_colors
	  .attr('width', 10 * viz.clust.dim.width).attr('height', viz.svg_dim.height + 'px').attr('transform', function () {
	    return 'translate(' + tmp_left + ',' + tmp_top + ')';
	  }).attr('class', 'white_bars').attr('class', 'right_spillover');

	  // hide spillover from top of row dendrogram
	  var x_offset = viz.clust.margin.left + viz.clust.dim.width;
	  var y_offset = tmp_top;
	  var tmp_width = viz.dendro_room.row + viz.uni_margin;
	  var tmp_height = viz.cat_room.col + viz.uni_margin;
	  d3.select(viz.viz_svg).append('rect').attr('fill', viz.background_color).attr('width', tmp_width).attr('height', tmp_height).attr('transform', function () {
	    return 'translate(' + x_offset + ',' + y_offset + ')';
	  }).classed('white_bars', true).classed('dendro_row_spillover', true);

	  // hide spillover left top of col dendrogram
	  x_offset = 0;
	  y_offset = viz.clust.margin.top + viz.clust.dim.height;
	  tmp_width = viz.clust.margin.left;
	  tmp_height = viz.clust.dim.height * 10;
	  d3.select(viz.viz_svg).append('rect').attr('fill', viz.background_color).attr('width', tmp_width).attr('height', tmp_height).attr('transform', function () {
	    return 'translate(' + x_offset + ',' + y_offset + ')';
	  }).classed('white_bars', true).classed('dendro_col_spillover', true);

	  x_offset = viz.clust.margin.left + viz.clust.dim.width;
	  y_offset = viz.clust.margin.top + viz.clust.dim.height;
	  tmp_width = viz.cat_room.col + viz.clust.dim.width;
	  tmp_height = viz.cat_room.row + viz.uni_margin;
	  d3.select(viz.viz_svg).append('rect').attr('fill', viz.background_color).attr('width', tmp_width).attr('height', tmp_height).attr('transform', function () {
	    return 'translate(' + x_offset + ',' + y_offset + ')';
	  }).classed('white_bars', true).classed('dendro_corner_spillover', true);

	  x_offset = viz.clust.margin.left + viz.clust.dim.width + viz.uni_margin;
	  y_offset = viz.norm_labels.margin.top + viz.norm_labels.width.col + 2.5 * viz.uni_margin;
	  var cat_text_size = 1.15 * viz.cat_room.symbol_width;
	  var cat_super_opacity = 0.65;
	  var extra_y_room = 1.25;

	  // col category super labels
	  if (viz.show_categories.col) {

	    d3.select(viz.viz_svg).selectAll().data(viz.all_cats.col).enter().append('text').classed('col_cat_super', true).style('font-size', cat_text_size + 'px').style('opacity', cat_super_opacity).style('cursor', 'default').attr('transform', function (d) {
	      var inst_cat = parseInt(d.split('-')[1], 10);
	      var inst_y = y_offset + extra_y_room * viz.cat_room.symbol_width * inst_cat;
	      return 'translate(' + x_offset + ',' + inst_y + ')';
	    }).text(function (d) {
	      return get_cat_title(viz, d, 'col');
	    });
	  }

	  // row category super labels
	  if (viz.show_categories.row) {
	    make_row_cat_super_labels(cgm);
	  }

	  // white border bottom - prevent clustergram from hitting border
	  if (viz.show_dendrogram) {
	    y_offset = viz.clust.margin.top + viz.clust.dim.height + viz.dendro_room.col;
	  } else {
	    y_offset = viz.clust.margin.top + viz.clust.dim.height;
	  }
	  d3.select(viz.viz_svg).append('rect').attr('class', 'bottom_spillover').attr('fill', viz.background_color) //!! prog_colors
	  .attr('width', viz.svg_dim.width)
	  // make this border twice the width of the grey border
	  .attr('height', 2 * viz.svg_dim.height).attr('transform', function () {
	    // shift up enough to show the entire border width
	    var inst_offset = y_offset;
	    return 'translate(0,' + inst_offset + ')';
	  });

	  ini_cat_reorder(cgm);
		};

/***/ },
/* 78 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function get_cat_title(viz, inst_cat, inst_rc) {
	  var cat_title;

	  // make default title if none is given 
	  if (viz.cat_names[inst_rc][inst_cat] === inst_cat) {
	    var inst_num = parseInt(inst_cat.split('-')[1], 10) + 1;
	    cat_title = 'Category ' + inst_num;
	  } else {
	    cat_title = viz.cat_names[inst_rc][inst_cat];
	  }

	  return cat_title;
		};

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var all_reorder = __webpack_require__(80);

	module.exports = function ini_cat_reorder(cgm) {
	  /* eslint-disable */

	  var params = cgm.params;

	  _.each(['row', 'col'], function (inst_rc) {

	    if (params.viz.show_categories[inst_rc]) {
	      d3.selectAll(params.root + ' .' + inst_rc + '_cat_super').on('dblclick', function () {

	        if (params.sim_mat) {
	          inst_rc = 'both';
	        }

	        d3.selectAll(params.root + ' .toggle_' + inst_rc + '_order .btn').classed('active', false);

	        var order_id = this.__data__.replace('-', '_') + '_index';
	        if (params.viz.sim_mat) {
	          all_reorder(cgm, order_id, 'row');
	          all_reorder(cgm, order_id, 'col');
	        } else {
	          all_reorder(cgm, order_id, inst_rc);
	        }
	      });
	    }
	  });
	};

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(2);
	var toggle_dendro_view = __webpack_require__(62);
	var show_visible_area = __webpack_require__(41);

	module.exports = function (cgm, inst_order, tmp_row_col) {

	  var params = cgm.params;

	  // row/col names are swapped, will improve later
	  var row_col;
	  if (tmp_row_col === 'row') {
	    row_col = 'col';
	  } else if (tmp_row_col === 'col') {
	    row_col = 'row';
	  }

	  params.viz.run_trans = true;

	  // save order state
	  if (row_col === 'row') {
	    params.viz.inst_order.row = inst_order;
	  } else if (row_col === 'col') {
	    params.viz.inst_order.col = inst_order;
	  }

	  if (params.viz.show_dendrogram) {
	    toggle_dendro_view(cgm, tmp_row_col);
	  }

	  var row_nodes_obj = params.network_data.row_nodes;
	  var row_nodes_names = utils.pluck(row_nodes_obj, 'name');

	  var col_nodes_obj = params.network_data.col_nodes;
	  var col_nodes_names = utils.pluck(col_nodes_obj, 'name');

	  if (row_col === 'row') {

	    params.viz.x_scale.domain(params.matrix.orders[params.viz.inst_order.row + '_row']);
	  } else if (row_col == 'col') {

	    params.viz.y_scale.domain(params.matrix.orders[params.viz.inst_order.col + '_col']);
	  }

	  var t;

	  // only animate transition if there are a small number of tiles
	  if (d3.selectAll(params.root + ' .tile')[0].length < params.matrix.def_large_matrix) {

	    // define the t variable as the transition function
	    t = d3.select(params.root + ' .clust_group').transition().duration(2500);

	    t.selectAll('.row').attr('transform', function (d) {
	      var tmp_index = _.indexOf(row_nodes_names, d.name);
	      return 'translate(0,' + params.viz.y_scale(tmp_index) + ')';
	    });

	    t.selectAll('.row').selectAll('.tile').attr('transform', function (d) {
	      return 'translate(' + params.viz.x_scale(d.pos_x) + ' , 0)';
	    });

	    t.selectAll('.row').selectAll('.tile_circle').attr('transform', function (d) {
	      var x_pos = params.viz.x_scale(d.pos_x) + 0.5 * params.viz.border_width + params.viz.rect_width / 4;
	      var y_pos = 0.5 * params.viz.border_width / params.viz.zoom_switch + params.viz.rect_height / 4;
	      return 'translate(' + x_pos + ' , ' + y_pos + ')';
	    });

	    t.selectAll('.tile_up').attr('transform', function (d) {
	      return 'translate(' + params.viz.x_scale(d.pos_x) + ' , 0)';
	    });

	    t.selectAll('.tile_dn').attr('transform', function (d) {
	      return 'translate(' + params.viz.x_scale(d.pos_x) + ' , 0)';
	    });

	    // Move Row Labels
	    d3.select(params.root + ' .row_label_zoom_container').selectAll('.row_label_group').transition().duration(2500).attr('transform', function (d) {
	      var inst_index = _.indexOf(row_nodes_names, d.name);
	      return 'translate(0,' + params.viz.y_scale(inst_index) + ')';
	    });

	    // t.selectAll('.column')
	    d3.select(params.root + ' .col_zoom_container').selectAll('.col_label_text').transition().duration(2500).attr('transform', function (d) {
	      var inst_index = _.indexOf(col_nodes_names, d.name);
	      return 'translate(' + params.viz.x_scale(inst_index) + ') rotate(-90)';
	    });

	    // reorder row_label_triangle groups
	    d3.selectAll(params.root + ' .row_cat_group').transition().duration(2500).attr('transform', function (d) {
	      var inst_index = _.indexOf(row_nodes_names, d.name);
	      return 'translate(0,' + params.viz.y_scale(inst_index) + ')';
	    });

	    // reorder col_class groups
	    d3.selectAll(params.root + ' .col_cat_group').transition().duration(2500).attr('transform', function (d) {
	      var inst_index = _.indexOf(col_nodes_names, d.name);
	      return 'translate(' + params.viz.x_scale(inst_index) + ',0)';
	    });
	  } else {

	    // define the t variable as the transition function
	    t = d3.select(params.root + ' .clust_group');

	    // reorder matrix
	    t.selectAll('.row').attr('transform', function (d) {
	      var tmp_index = _.indexOf(row_nodes_names, d.name);
	      return 'translate(0,' + params.viz.y_scale(tmp_index) + ')';
	    }).selectAll('.tile').attr('transform', function (d) {
	      return 'translate(' + params.viz.x_scale(d.pos_x) + ' , 0)';
	    });

	    t.selectAll('.tile_up').attr('transform', function (d) {
	      return 'translate(' + params.viz.x_scale(d.pos_x) + ' , 0)';
	    });

	    t.selectAll('.tile_dn').attr('transform', function (d) {
	      return 'translate(' + params.viz.x_scale(d.pos_x) + ' , 0)';
	    });

	    // Move Row Labels
	    d3.select(params.root + ' .row_label_zoom_container').selectAll('.row_label_group').attr('transform', function (d) {
	      var inst_index = _.indexOf(row_nodes_names, d.name);
	      return 'translate(0,' + params.viz.y_scale(inst_index) + ')';
	    });

	    // t.selectAll('.column')
	    d3.select(params.root + ' .col_zoom_container').selectAll('.col_label_text').attr('transform', function (d) {
	      var inst_index = _.indexOf(col_nodes_names, d.name);
	      return 'translate(' + params.viz.x_scale(inst_index) + ') rotate(-90)';
	    });

	    // reorder row_label_triangle groups
	    d3.selectAll(params.root + ' .row_cat_group').attr('transform', function (d) {
	      var inst_index = _.indexOf(row_nodes_names, d.name);
	      return 'translate(0,' + params.viz.y_scale(inst_index) + ')';
	    });

	    // reorder col_class groups
	    d3.selectAll(params.root + ' .col_cat_group').attr('transform', function (d) {
	      var inst_index = _.indexOf(col_nodes_names, d.name);
	      return 'translate(' + params.viz.x_scale(inst_index) + ',0)';
	    });
	  }

	  // redefine x and y positions
	  params.network_data.links.forEach(function (d) {
	    d.x = params.viz.x_scale(d.target);
	    d.y = params.viz.y_scale(d.source);
	  });

	  // reset visible area
	  var zoom_info = {};
	  zoom_info.zoom_x = 1;
	  zoom_info.zoom_y = 1;
	  zoom_info.trans_x = 0;
	  zoom_info.trans_y = 0;
	  show_visible_area(params, zoom_info);

	  setTimeout(function () {
	    params.viz.run_trans = false;
	  }, 2500);
		};

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var get_cat_title = __webpack_require__(78);

	module.exports = function make_row_cat_super_labels(cgm) {

	  var params = cgm.params;

	  var viz = params.viz;
	  var extra_x_room = 2.75;

	  if (d3.select('.row_cat_label_container').empty()) {
	    d3.select(cgm.params.viz.viz_svg).append('g').classed('row_cat_label_container', true);
	  }

	  d3.selectAll(params.root + ' .row_cat_label_container text').remove();

	  var x_offset = viz.clust.margin.left + viz.clust.dim.width + viz.uni_margin;
	  var y_offset = viz.norm_labels.margin.top + viz.norm_labels.width.col + 2.5 * viz.uni_margin;
	  var cat_text_size = 1.15 * viz.cat_room.symbol_width;
	  var cat_super_opacity = 0.65;
	  var extra_y_room = 1.25;

	  d3.select(params.root + ' .row_cat_label_container').attr('transform', function () {
	    x_offset = viz.norm_labels.margin.left + viz.norm_labels.width.row + viz.cat_room.symbol_width + extra_x_room * viz.uni_margin;
	    y_offset = viz.clust.margin.top - viz.uni_margin;
	    return 'translate(' + x_offset + ',' + y_offset + ') rotate(-90)';
	  });

	  d3.selectAll(params.root + ' .row_cat_label_container text').remove();

	  if (viz.sim_mat === false) {

	    d3.select(params.root + ' .row_cat_label_container').selectAll().data(viz.all_cats.row).enter().append('text').classed('row_cat_super', true).style('font-size', cat_text_size + 'px').style('opacity', cat_super_opacity).style('cursor', 'default').attr('transform', function (d) {
	      var inst_y = extra_y_room * viz.cat_room.symbol_width * parseInt(d.split('-')[1], 10);
	      return 'translate(0,' + inst_y + ')';
	    }).text(function (d) {
	      return get_cat_title(viz, d, 'row');
	    });
	  }
	};

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var two_translate_zoom = __webpack_require__(83);

	/* Handles searching rows or columns.
	 TODO need to generalize to column and row
	 * ----------------------------------------------------------------------- */
	module.exports = function (params, nodes, prop) {

	  /* Collect entities from row or columns.
	   */
	  var entities = [];
	  var i;

	  for (i = 0; i < nodes.length; i++) {
	    entities.push(nodes[i][prop]);
	  }

	  /* Find a gene (row) in the clustergram.
	   */
	  function find_entity(search_term) {

	    if (entities.indexOf(search_term) !== -1) {

	      // unhighlight
	      d3.selectAll(params.root + ' .row_label_group').select('rect').style('opacity', 0);

	      // calc pan_dy 
	      var idx = _.indexOf(entities, search_term);
	      var inst_y_pos = params.viz.y_scale(idx);
	      var pan_dy = params.viz.clust.dim.height / 2 - inst_y_pos;

	      two_translate_zoom(params, 0, pan_dy, params.viz.zoom_switch);

	      // highlight 
	      d3.selectAll(params.root + ' .row_label_group').filter(function (d) {
	        return d[prop] === search_term;
	      }).select('rect').style('opacity', 1);
	    }
	  }

	  return {
	    find_entity: find_entity,
	    get_entities: entities
	  };
		};

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(2);
	var label_constrain_and_trim = __webpack_require__(84);
	var show_visible_area = __webpack_require__(41);

	module.exports = function two_translate_zoom(params, pan_dx, pan_dy, fin_zoom) {

	  d3.selectAll('.tile_tip').style('display', 'none');

	  // reset visible area 
	  var zoom_info = {};
	  zoom_info.zoom_x = 1;
	  zoom_info.zoom_y = 1;
	  zoom_info.trans_x = 0;
	  zoom_info.trans_y = 0;

	  show_visible_area(params, zoom_info);

	  // do not allow while transitioning, e.g. reordering
	  if (!params.viz.run_trans) {

	    // define the commonly used variable half_height
	    var half_height = params.viz.clust.dim.height / 2;

	    // y pan room, the pan room has to be less than half_height since
	    // zooming in on a gene that is near the top of the clustergram also causes
	    // panning out of the visible region
	    var y_pan_room = half_height / params.viz.zoom_switch;

	    // prevent visualization from panning down too much
	    // when zooming into genes near the top of the clustergram
	    if (pan_dy >= half_height - y_pan_room) {

	      // explanation of panning rules
	      /////////////////////////////////
	      // prevent the clustergram from panning down too much
	      // if the amount of panning is equal to the half_height then it needs to be reduced
	      // effectively, the the visualization needs to be moved up (negative) by some factor
	      // of the half-width-of-the-visualization.
	      //
	      // If there was no zooming involved, then the
	      // visualization would be centered first, then panned to center the top term
	      // this would require a
	      // correction to re-center it. However, because of the zooming the offset is
	      // reduced by the zoom factor (this is because the panning is occurring on something
	      // that will be zoomed into - this is why the pan_dy value is not scaled in the two
	      // translate transformations, but it has to be scaled afterwards to set the translate
	      // vector)
	      // pan_dy = half_height - (half_height)/params.viz.zoom_switch

	      // if pan_dy is greater than the pan room, then panning has to be restricted
	      // start by shifting back up (negative) by half_height/params.viz.zoom_switch then shift back down
	      // by the difference between half_height and pan_dy (so that the top of the clustergram is
	      // visible)
	      var shift_top_viz = half_height - pan_dy;
	      var shift_up_viz = -half_height / params.viz.zoom_switch + shift_top_viz;

	      // reduce pan_dy so that the visualization does not get panned to far down
	      pan_dy = pan_dy + shift_up_viz;
	    }

	    // prevent visualization from panning up too much
	    // when zooming into genes at the bottom of the clustergram
	    if (pan_dy < -(half_height - y_pan_room)) {

	      shift_top_viz = half_height + pan_dy;

	      shift_up_viz = half_height / params.viz.zoom_switch - shift_top_viz; //- move_up_one_row;

	      // reduce pan_dy so that the visualization does not get panned to far down
	      pan_dy = pan_dy + shift_up_viz;
	    }

	    // will improve this !!
	    var zoom_y = fin_zoom;
	    var zoom_x;
	    if (fin_zoom <= params.viz.zoom_switch) {
	      zoom_x = 1;
	    } else {
	      zoom_x = fin_zoom / params.viz.zoom_switch;
	    }

	    // search duration - the duration of zooming and panning
	    var search_duration = 700;

	    // center_y
	    var center_y = -(zoom_y - 1) * half_height;

	    // transform clust group
	    ////////////////////////////
	    d3.select(params.root + ' .clust_group').transition().duration(search_duration)
	    // first apply the margin transformation
	    // then zoom, then apply the final transformation
	    .attr('transform', 'translate(' + [0, 0 + center_y] + ')' + ' scale(' + zoom_x + ',' + zoom_y + ')' + 'translate(' + [pan_dx, pan_dy] + ')');

	    // transform row labels
	    d3.select(params.root + ' .row_label_zoom_container').transition().duration(search_duration).attr('transform', 'translate(' + [0, center_y] + ')' + ' scale(' + zoom_y + ',' + zoom_y + ')' + 'translate(' + [0, pan_dy] + ')');

	    // transform row_cat_container
	    // use the offset saved in params, only zoom in the y direction
	    d3.select(params.root + ' .row_cat_container').transition().duration(search_duration).attr('transform', 'translate(' + [0, center_y] + ')' + ' scale(' + 1 + ',' + zoom_y + ')' + 'translate(' + [0, pan_dy] + ')');

	    d3.select(params.root + ' .row_dendro_container').transition().duration(search_duration).attr('transform', 'translate(' + [0, center_y] + ')' + ' scale(' + zoom_x + ',' + zoom_y + ')' + 'translate(' + [params.viz.uni_margin / 2, pan_dy] + ')');

	    // transform col labels
	    d3.select(params.root + ' .col_zoom_container').transition().duration(search_duration).attr('transform', ' scale(' + zoom_x + ',' + zoom_x + ')' + 'translate(' + [pan_dx, 0] + ')');

	    // transform col_class
	    d3.select(params.root + ' .col_cat_container').transition().duration(search_duration).attr('transform', ' scale(' + zoom_x + ',' + 1 + ')' + 'translate(' + [pan_dx, 0] + ')');

	    d3.select(params.root + ' .col_dendro_container').transition().duration(search_duration).attr('transform', ' scale(' + zoom_x + ',' + 1 + ')' + 'translate(' + [pan_dx, params.viz.uni_margin / 2] + ')');

	    // set y translate: center_y is positive, positive moves the visualization down
	    // the translate vector has the initial margin, the first y centering, and pan_dy
	    // times the scaling zoom_y
	    var net_y_offset = params.viz.clust.margin.top + center_y + pan_dy * zoom_y;

	    // reset the zoom and translate 
	    params.zoom_behavior.scale(zoom_y).translate([pan_dx, net_y_offset]);

	    label_constrain_and_trim(params);

	    // re-size of the highlighting rects
	    /////////////////////////////////////////
	    d3.select(params.root + ' .row_label_zoom_container').each(function () {
	      // get the bounding box of the row label text
	      var bbox = d3.select(this).select('text')[0][0].getBBox();

	      // use the bounding box to set the size of the rect
	      d3.select(this).select('rect').attr('x', bbox.x * 0.5).attr('y', 0).attr('width', bbox.width * 0.5).attr('height', params.viz.y_scale.rangeBand()).style('fill', 'yellow');
	    });

	    // column value bars
	    ///////////////////////
	    // reduce the height of the column value bars based on the zoom applied
	    // recalculate the height and divide by the zooming scale
	    // col_label_obj.select('rect')
	    if (utils.has(params.network_data.col_nodes[0], 'value')) {

	      d3.selectAll(params.root + ' .col_bars')
	      // .transition()
	      // .duration(search_duration)
	      .attr('width', function (d) {
	        var inst_value = 0;
	        if (d.value > 0) {
	          inst_value = params.labels.bar_scale_col(d.value) / zoom_x;
	        }
	        return inst_value;
	      });
	    }

	    if (utils.has(params.network_data.row_nodes[0], 'value')) {

	      d3.selectAll(params.root + ' .row_bars').transition().duration(search_duration).attr('width', function (d) {
	        var inst_value = 0;
	        inst_value = params.labels.bar_scale_row(Math.abs(d.value)) / zoom_y;
	        return inst_value;
	      }).attr('x', function (d) {
	        var inst_value = 0;
	        inst_value = -params.labels.bar_scale_row(Math.abs(d.value)) / zoom_y;
	        return inst_value;
	      });
	    }
	  }
	};

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(2);
	var trim_text = __webpack_require__(40);
	var constrain_font_size = __webpack_require__(36);

	module.exports = function label_constrain_and_trim(params) {

	  // console.log('label_constrain_and_trim');

	  // reset text in rows and columns 
	  d3.selectAll(params.root + ' .row_label_group').select('text').text(function (d) {
	    return utils.normal_name(d);
	  });

	  d3.selectAll(params.root + ' .col_label_text').select('text').text(function (d) {
	    return utils.normal_name(d);
	  });

	  constrain_font_size(params);

	  d3.selectAll(params.root + ' .row_label_group').each(function () {
	    trim_text(params, this, 'row');
	  });

	  d3.selectAll(params.root + ' .col_label_group').each(function () {
	    trim_text(params, this, 'col');
	  });
		};

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var resize_viz = __webpack_require__(86);

	module.exports = function (cgm) {

	  var params = cgm.params;

	  var exp_button;

	  // d3.select(window).on('resize', null);

	  // // resize window
	  // if (params.viz.resize) {
	  //   d3.select(window).on('resize', function () {

	  //     d3.select(params.viz.viz_svg).style('opacity', 0.5);

	  //     var wait_time = 500;
	  //     if (params.viz.run_trans === true) {
	  //       wait_time = 2500;
	  //     }

	  //     setTimeout(resize_viz, wait_time, params);
	  //   });
	  // }

	  // if (params.viz.expand_button) {

	  d3.select(params.root + ' .expand_button').on('click', null);
	  var expand_opacity = 0.4;

	  if (d3.select(params.root + ' .expand_button').empty()) {
	    exp_button = d3.select(params.viz.viz_svg).append('text').attr('class', 'expand_button');
	  } else {
	    exp_button = d3.select(params.root + ' .expand_button');
	  }

	  exp_button.attr('text-anchor', 'middle').attr('dominant-baseline', 'central').attr('font-family', 'FontAwesome').attr('font-size', '30px').text(function () {
	    if (params.viz.is_expand === false) {
	      // expand button
	      return '';
	    } else {
	      // menu button
	      return '';
	    }
	  }).attr('y', '25px').attr('x', '25px').style('cursor', 'pointer').style('opacity', expand_opacity).on('mouseover', function () {
	    d3.select(this).style('opacity', 0.75);
	  }).on('mouseout', function () {
	    d3.select(this).style('opacity', expand_opacity);
	  }).on('click', function () {

	    // expand view
	    if (params.viz.is_expand === false) {

	      d3.select(this).text(function () {
	        // menu button
	        return '';
	      });
	      params.viz.is_expand = true;

	      d3.selectAll(params.root + ' .borders').style('fill', 'white');
	      // d3.select(params.root+' .footer_section').style('display', 'none');
	      d3.select(params.root + ' .sidebar_wrapper').style('display', 'none');

	      // contract view
	    } else {

	      d3.select(this).text(function () {
	        // expand button
	        return '';
	      });

	      params.viz.is_expand = false;

	      d3.selectAll(params.root + ' .borders').style('fill', '#eee');
	      // d3.select(params.root+' .footer_section').style('display', 'block');
	      d3.select(params.root + ' .viz_wrapper').style('width', '100px');
	      d3.select(params.root + ' .sidebar_wrapper').style('display', 'block');
	    }

	    // // resize parent div
	    // set_viz_wrapper_size(params);

	    d3.select(params.viz.viz_svg).style('opacity', 0.5);
	    var wait_time = 500;
	    if (params.viz.run_trans == true) {
	      wait_time = 2500;
	    }
	    setTimeout(resize_viz, wait_time, cgm);
	  });
	  // }
	};

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(2);
	var zoomed = __webpack_require__(33);
	var ini_doubleclick = __webpack_require__(87);
	var reset_zoom = __webpack_require__(88);
	var resize_dendro = __webpack_require__(89);
	var resize_grid_lines = __webpack_require__(90);
	var resize_super_labels = __webpack_require__(91);
	var resize_spillover = __webpack_require__(92);
	var resize_borders = __webpack_require__(93);
	var resize_row_labels = __webpack_require__(94);
	var resize_highlights = __webpack_require__(95);
	var resize_row_viz = __webpack_require__(96);
	var resize_col_labels = __webpack_require__(97);
	var resize_col_text = __webpack_require__(98);
	var resize_col_triangle = __webpack_require__(99);
	var resize_col_hlight = __webpack_require__(100);
	var recalc_params_for_resize = __webpack_require__(101);
	var resize_row_tiles = __webpack_require__(102);
	var resize_label_bars = __webpack_require__(103);
	var label_constrain_and_trim = __webpack_require__(84);
	var make_row_dendro_triangles = __webpack_require__(63);
	var make_col_dendro_triangles = __webpack_require__(69);
	var toggle_dendro_view = __webpack_require__(62);
	var show_visible_area = __webpack_require__(41);
	var calc_viz_dimensions = __webpack_require__(23);
	var position_play_button = __webpack_require__(104);
	var make_row_cat_super_labels = __webpack_require__(81);
	var ini_cat_reorder = __webpack_require__(79);

	module.exports = function (cgm) {

	  var params = cgm.params;

	  var cont_dim = calc_viz_dimensions(params);

	  d3.select(params.root + ' .play_button');
	  // .style('opacity', 0.2);

	  // reset visible area
	  var zoom_info = {};
	  zoom_info.zoom_x = 1;
	  zoom_info.zoom_y = 1;
	  zoom_info.trans_x = 0;
	  zoom_info.trans_y = 0;

	  d3.select(params.root + ' .sidebar_wrapper').style('height', cont_dim.height + 'px');

	  d3.select(params.viz.viz_wrapper)
	  // .style('float', 'left')
	  .style('margin-top', cont_dim.top + 'px').style('width', cont_dim.width + 'px').style('height', cont_dim.height + 'px');

	  params = recalc_params_for_resize(params);

	  reset_zoom(params);

	  var svg_group = d3.select(params.viz.viz_svg);

	  // redefine x and y positions
	  _.each(params.network_data.links, function (d) {
	    d.x = params.viz.x_scale(d.target);
	    d.y = params.viz.y_scale(d.source);
	  });

	  // disable zoom while transitioning
	  svg_group.on('.zoom', null);

	  params.zoom_behavior.scaleExtent([1, params.viz.real_zoom * params.viz.zoom_switch]).on('zoom', function () {
	    zoomed(params);
	  });

	  // reenable zoom after transition
	  if (params.viz.do_zoom) {
	    svg_group.call(params.zoom_behavior);
	  }

	  // prevent normal double click zoom etc
	  ini_doubleclick(params);

	  svg_group.attr('width', params.viz.svg_dim.width).attr('height', params.viz.svg_dim.height);

	  svg_group.select('.super_background').style('width', params.viz.svg_dim.width).style('height', params.viz.svg_dim.height);

	  svg_group.select('.grey_background').attr('width', params.viz.clust.dim.width).attr('height', params.viz.clust.dim.height);

	  setTimeout(position_play_button, 100, params);

	  var row_nodes = params.network_data.row_nodes;
	  var row_nodes_names = utils.pluck(row_nodes, 'name');

	  resize_row_tiles(params, svg_group);

	  svg_group.selectAll('.highlighting_rect').attr('width', params.viz.x_scale.rangeBand() * 0.80).attr('height', params.viz.y_scale.rangeBand() * 0.80);

	  resize_highlights(params);

	  // resize row labels
	  ///////////////////////////

	  resize_row_labels(params, svg_group);
	  resize_row_viz(params, svg_group);

	  // change the size of the highlighting rects
	  svg_group.selectAll('.row_label_group').each(function () {
	    var bbox = d3.select(this).select('text')[0][0].getBBox();
	    d3.select(this).select('rect').attr('x', bbox.x).attr('y', 0).attr('width', bbox.width).attr('height', params.viz.rect_height).style('fill', 'yellow').style('opacity', function (d) {
	      var inst_opacity = 0;
	      // highlight target genes
	      if (d.target === 1) {
	        inst_opacity = 1;
	      }
	      return inst_opacity;
	    });
	  });

	  // necessary to properly position row labels vertically
	  svg_group.selectAll('.row_label_group').select('text').attr('y', params.viz.rect_height * 0.5 + params.labels.default_fs_row * 0.35);

	  if (utils.has(params.network_data.row_nodes[0], 'value')) {
	    resize_label_bars(params, svg_group);
	  }

	  svg_group.selectAll('.row_cat_group').attr('transform', function (d) {
	    var inst_index = _.indexOf(row_nodes_names, d.name);
	    return 'translate(0, ' + params.viz.y_scale(inst_index) + ')';
	  });

	  svg_group.selectAll('.row_cat_group').select('path').attr('d', function () {
	    var origin_x = params.viz.cat_room.symbol_width - 1;
	    var origin_y = 0;
	    var mid_x = 1;
	    var mid_y = params.viz.rect_height / 2;
	    var final_x = params.viz.cat_room.symbol_width - 1;
	    var final_y = params.viz.rect_height;
	    var output_string = 'M ' + origin_x + ',' + origin_y + ' L ' + mid_x + ',' + mid_y + ', L ' + final_x + ',' + final_y + ' Z';
	    return output_string;
	  });

	  var is_resize = true;
	  if (params.viz.show_dendrogram) {
	    make_row_dendro_triangles(cgm, is_resize);
	    make_col_dendro_triangles(cgm, is_resize);
	    resize_dendro(params, svg_group);

	    toggle_dendro_view(cgm, 'row', 0);
	    toggle_dendro_view(cgm, 'col', 0);
	  }

	  resize_col_labels(params, svg_group);
	  resize_col_text(params, svg_group);
	  resize_col_triangle(params, svg_group);
	  resize_col_hlight(params, svg_group);

	  resize_super_labels(params, svg_group);
	  resize_spillover(params.viz, svg_group);

	  // specific to screen resize
	  resize_grid_lines(params, svg_group);
	  resize_borders(params, svg_group);

	  // reset zoom and translate
	  params.zoom_behavior.scale(1).translate([params.viz.clust.margin.left, params.viz.clust.margin.top]);

	  label_constrain_and_trim(params);

	  // reposition matrix
	  d3.select(params.root + ' .clust_container').attr('transform', 'translate(' + params.viz.clust.margin.left + ',' + params.viz.clust.margin.top + ')');

	  show_visible_area(params, zoom_info);

	  make_row_cat_super_labels(cgm);

	  d3.select(params.viz.viz_svg).style('opacity', 1);

	  ini_cat_reorder(cgm);
		};

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var two_translate_zoom = __webpack_require__(83);

	module.exports = function (params) {
	  // disable double-click zoom
	  d3.selectAll(params.viz.zoom_element).on('dblclick.zoom', null);

	  d3.select(params.viz.zoom_element).on('dblclick', function () {
	    two_translate_zoom(params, 0, 0, 1);
	  });
	};

/***/ },
/* 88 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function (params) {

	  // reset zoom
	  //////////////////////////////
	  var zoom_y = 1;
	  // var zoom_x = 1;
	  var pan_dx = 0;
	  var pan_dy = 0;

	  var half_height = params.viz.clust.dim.height / 2;
	  var center_y = -(zoom_y - 1) * half_height;

	  d3.select(params.root + ' .clust_group').attr('transform', 'translate(' + [0, 0 + center_y] + ')' + ' scale(' + 1 + ',' + zoom_y + ')' + 'translate(' + [pan_dx, pan_dy] + ')');

	  d3.select(params.root + ' .row_label_zoom_container').attr('transform', 'translate(' + [0, center_y] + ')' + ' scale(' + zoom_y + ',' + zoom_y + ')' + 'translate(' + [0, pan_dy] + ')');

	  d3.select(params.root + ' .row_cat_container').attr('transform', 'translate(' + [0, center_y] + ')' + ' scale(' + 1 + ',' + zoom_y + ')' + 'translate(' + [0, pan_dy] + ')');

	  d3.select(params.root + ' .row_dendro_container').attr('transform', 'translate(' + [0, center_y] + ')' + ' scale(' + zoom_y + ',' + zoom_y + ')' + 'translate(' + [params.viz.uni_margin / 2, pan_dy] + ')');

	  d3.select(params.root + ' .col_zoom_container').attr('transform', ' scale(' + 1 + ',' + 1 + ')' + 'translate(' + [pan_dx, 0] + ')');

	  d3.select(params.root + ' .col_cat_container').attr('transform', ' scale(' + 1 + ',' + 1 + ')' + 'translate(' + [pan_dx, 0] + ')');

	  d3.select(params.root + ' .col_dendro_container').attr('transform', ' scale(' + 1 + ',' + 1 + ')' + 'translate(' + [pan_dx, params.viz.uni_margin / 2] + ')');
		};

/***/ },
/* 89 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function resize_dendro(params, svg_group) {
	  var delay_info = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];


	  // resize dendrogram
	  ///////////////////

	  var delays = {};

	  if (delay_info === false) {
	    delays.run_transition = false;
	  } else {
	    delays = delay_info;
	  }

	  var duration = params.viz.duration;
	  var col_nodes = params.network_data.col_nodes;
	  var col_nodes_names = params.network_data.col_nodes_names;

	  var dendro_group;
	  if (delays.run_transition) {

	    dendro_group = svg_group.transition().delay(delays.update).duration(duration);

	    svg_group.selectAll('.col_cat_group')
	    // data binding needed for loss/gain of columns
	    .data(col_nodes, function (d) {
	      return d.name;
	    }).transition().delay(delays.update).duration(duration).attr('transform', function (d) {
	      var inst_index = _.indexOf(col_nodes_names, d.name);
	      return 'translate(' + params.viz.x_scale(inst_index) + ',0)';
	    });

	    svg_group.selectAll('.col_dendro_group')
	    // data binding needed for loss/gain of columns
	    .data(col_nodes, function (d) {
	      return d.name;
	    }).transition().delay(delays.update).duration(duration).attr('transform', function (d) {
	      var inst_index = _.indexOf(col_nodes_names, d.name);
	      return 'translate(' + params.viz.x_scale(inst_index) + ',0)';
	    });
	  } else {

	    dendro_group = svg_group;

	    svg_group.selectAll('.col_cat_group')
	    // data binding needed for loss/gain of columns
	    .data(col_nodes, function (d) {
	      return d.name;
	    }).attr('transform', function (d) {
	      var inst_index = _.indexOf(col_nodes_names, d.name);
	      return 'translate(' + params.viz.x_scale(inst_index) + ',0)';
	    });

	    d3.select(params.root).selectAll('.col_dendro_group')
	    // data binding needed for loss/gain of columns
	    .data(col_nodes, function (d) {
	      return d.name;
	    }).attr('transform', function (d) {
	      var inst_index = _.indexOf(col_nodes_names, d.name);
	      return 'translate(' + params.viz.x_scale(inst_index) + ',0)';
	    });
	  }

	  var i;
	  var inst_class;

	  _.each(['row', 'col'], function (inst_rc) {

	    var num_cats = params.viz.all_cats[inst_rc].length;

	    for (i = 0; i < num_cats; i++) {
	      inst_class = '.' + inst_rc + '_cat_rect_' + String(i);

	      if (inst_rc === 'row') {
	        dendro_group.selectAll(inst_class).attr('height', params.viz.y_scale.rangeBand());
	      } else {
	        dendro_group.selectAll(inst_class).attr('width', params.viz.x_scale.rangeBand());
	      }
	    }
	  });

	  // position row_dendro_outer_container
	  var x_offset = params.viz.clust.margin.left + params.viz.clust.dim.width;
	  var y_offset = params.viz.clust.margin.top;
	  var spillover_width = params.viz.dendro_room.row + params.viz.uni_margin;

	  d3.select(params.root + ' .viz_svg').select('row_dendro_outer_container').attr('transform', 'translate(' + x_offset + ',' + y_offset + ')');

	  d3.select(params.root + ' .row_dendro_outer_container').select('.row_dendro_spillover').attr('width', spillover_width + 'px').attr('height', params.viz.svg_dim.height);

	  x_offset = params.viz.clust.margin.left;
	  y_offset = params.viz.clust.margin.top + params.viz.clust.dim.height;
	  var spillover_height = params.viz.dendro_room.col + params.viz.uni_margin;

	  d3.select(params.root + ' .col_dendro_outer_container').select('.col_dendro_spillover').attr('width', params.viz.svg_dim.width).attr('height', spillover_height + 'px');

	  d3.select(params.root + ' .col_dendro_outer_container').select('.col_dendro_spillover_top').attr('width', params.viz.svg_dim.width).attr('height', params.viz.svg_dim.height).attr('transform', 'translate(0,' + params.viz.dendro_room.col + ')');
		};

/***/ },
/* 90 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function resize_grid_lines(params, svg_group) {

	  var col_nodes_names = params.network_data.col_nodes_names;
	  var row_nodes_names = params.network_data.row_nodes_names;

	  // reposition grid lines
	  svg_group.selectAll('.horz_lines').attr('transform', function (d) {
	    var inst_index = _.indexOf(row_nodes_names, d.name);
	    return 'translate(0,' + params.viz.y_scale(inst_index) + ') rotate(0)';
	  });

	  svg_group.selectAll('.horz_lines').select('line').attr('x2', params.viz.clust.dim.width).style('stroke-width', function () {
	    var inst_width;
	    if (params.viz.zoom_switch > 1) {
	      inst_width = params.viz.border_width / params.viz.zoom_switch;
	    } else {
	      inst_width = params.viz.border_width;
	    }
	    return inst_width + 'px';
	  });

	  svg_group.selectAll('.vert_lines').attr('transform', function (d) {
	    var inst_index = _.indexOf(col_nodes_names, d.name);
	    return 'translate(' + params.viz.x_scale(inst_index) + ') rotate(-90)';
	  });

	  svg_group.selectAll('.vert_lines').select('line').attr('x2', -params.viz.clust.dim.height).style('stroke-width', function () {
	    var inst_width;
	    if (params.viz.zoom_switch_y > 1) {
	      inst_width = params.viz.border_width / params.viz.zoom_switch_y;
	    } else {
	      inst_width = params.viz.border_width;
	    }
	    return inst_width + 'px';
	  });
		};

/***/ },
/* 91 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function resize_super_labels(params, ini_svg_group) {
	  var delay_info = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];


	  var delays = {};
	  var duration = params.viz.duration;
	  var svg_group;

	  if (delay_info === false) {
	    delays.run_transition = false;
	  } else {
	    delays = delay_info;
	  }

	  if (delays.run_transition) {
	    svg_group = ini_svg_group.transition().delay(delays.update).duration(duration);
	  } else {
	    svg_group = ini_svg_group;
	  }

	  svg_group.select('.super_col_bkg').attr('height', params.viz.super_labels.dim.width + 'px').attr('transform', 'translate(0,' + params.viz.grey_border_width + ')');

	  // super col title
	  svg_group.select('.super_col').attr('transform', function () {
	    var inst_x = params.viz.clust.dim.width / 2 + params.viz.norm_labels.width.row;
	    var inst_y = params.viz.super_labels.dim.width;
	    return 'translate(' + inst_x + ',' + inst_y + ')';
	  });

	  svg_group.select('.super_row_bkg').attr('width', params.viz.super_labels.dim.width + 'px').attr('transform', 'translate(' + params.viz.grey_border_width + ',0)');

	  svg_group.select('.super_row').attr('transform', function () {
	    var inst_x = params.viz.super_labels.dim.width;
	    var inst_y = params.viz.clust.dim.height / 2 + params.viz.norm_labels.width.col;
	    return 'translate(' + inst_x + ',' + inst_y + ')';
	  });
		};

/***/ },
/* 92 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function resize_spillover(viz, ini_svg_group) {
	  var delay_info = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];


	  var delays = {};
	  var duration = viz.duration;
	  var svg_group;

	  if (delay_info === false) {
	    delays.run_transition = false;
	  } else {
	    delays = delay_info;
	  }

	  if (delays.run_transition) {
	    svg_group = ini_svg_group.transition().delay(delays.update).duration(duration);
	  } else {
	    svg_group = ini_svg_group;
	  }

	  svg_group.select(viz.root + ' .right_slant_triangle').attr('transform', 'translate(' + viz.clust.dim.width + ',' + viz.norm_labels.width.col + ')');

	  svg_group.select(viz.root + ' .left_slant_triangle').attr('transform', 'translate(-1,' + viz.norm_labels.width.col + ')');

	  svg_group.select(viz.root + ' .top_left_white').attr('width', viz.clust.margin.left).attr('height', viz.clust.margin.top);

	  var tmp_left = viz.clust.margin.left + viz.clust.dim.width + viz.uni_margin + viz.dendro_room.row;
	  var tmp_top = viz.norm_labels.margin.top + viz.norm_labels.width.col;

	  svg_group.select(viz.root + ' .right_spillover').attr('transform', function () {
	    return 'translate(' + tmp_left + ',' + tmp_top + ')';
	  }).attr('height', viz.svg_dim.height + 'px');

	  // resize dendro spillovers 
	  var x_offset = viz.clust.margin.left + viz.clust.dim.width;
	  var y_offset = tmp_top;
	  var tmp_width = viz.dendro_room.row + viz.uni_margin;
	  var tmp_height = viz.cat_room.col + viz.uni_margin;
	  d3.select(viz.root + ' .dendro_row_spillover').attr('width', tmp_width).attr('height', tmp_height).attr('transform', function () {
	    return 'translate(' + x_offset + ',' + y_offset + ')';
	  });

	  // hide spillover left top of col dendrogram 
	  x_offset = 0;
	  y_offset = viz.clust.margin.top + viz.clust.dim.height;
	  tmp_width = viz.clust.margin.left;
	  tmp_height = viz.clust.dim.height * 10;

	  svg_group.select('.dendro_col_spillover').attr('width', tmp_width).attr('height', tmp_height).attr('transform', function () {
	    return 'translate(' + x_offset + ',' + y_offset + ')';
	  });

	  x_offset = viz.clust.margin.left + viz.clust.dim.width;
	  y_offset = viz.clust.margin.top + viz.clust.dim.height;
	  tmp_width = viz.cat_room.col + viz.clust.dim.width;
	  tmp_height = viz.cat_room.row + viz.uni_margin;

	  svg_group.select('.dendro_corner_spillover').attr('width', tmp_width).attr('height', tmp_height).attr('transform', function () {
	    return 'translate(' + x_offset + ',' + y_offset + ')';
	  });

	  x_offset = viz.clust.margin.left + viz.clust.dim.width + viz.uni_margin;
	  y_offset = viz.norm_labels.margin.top + viz.norm_labels.width.col + 2.5 * viz.uni_margin;
	  var extra_x_room = 2.75;
	  var extra_y_room = 1.2;

	  // reposition category superlabels 
	  if (viz.show_categories.col) {

	    d3.selectAll(viz.root + ' .col_cat_super').attr('transform', function (d) {
	      var inst_cat = parseInt(d.split('-')[1], 10);
	      var inst_y = y_offset + extra_y_room * viz.cat_room.symbol_width * inst_cat;
	      return 'translate(' + x_offset + ',' + inst_y + ')';
	    });
	  }

	  if (viz.show_categories.row) {
	    d3.select(viz.root + ' .row_cat_label_container').attr('transform', function () {
	      x_offset = viz.norm_labels.margin.left + viz.norm_labels.width.row + viz.cat_room.symbol_width + extra_x_room * viz.uni_margin;
	      y_offset = viz.clust.margin.top - viz.uni_margin;
	      return 'translate(' + x_offset + ',' + y_offset + ') rotate(-90)';
	    });
	  }

	  // white border bottom - prevent clustergram from hitting border
	  if (viz.show_dendrogram) {
	    y_offset = viz.clust.margin.top + viz.clust.dim.height + viz.dendro_room.col;
	  } else {
	    y_offset = viz.clust.margin.top + viz.clust.dim.height;
	  }
	  svg_group.select(viz.root + ' .bottom_spillover').attr('width', viz.svg_dim.width).attr('height', 2 * viz.svg_dim.height).attr('transform', function () {
	    // shift up enough to show the entire border width
	    var inst_offset = y_offset;
	    return 'translate(0,' + inst_offset + ')';
	  });
		};

/***/ },
/* 93 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function resize_borders(params, svg_group) {

	  // left border
	  svg_group.select('.left_border').attr('width', params.viz.grey_border_width).attr('height', params.viz.svg_dim.height).attr('transform', 'translate(0,0)');

	  // right border
	  svg_group.select('.right_border').attr('width', params.viz.grey_border_width).attr('height', params.viz.svg_dim.height).attr('transform', function () {
	    var inst_offset = params.viz.svg_dim.width - params.viz.grey_border_width;
	    return 'translate(' + inst_offset + ',0)';
	  });

	  // top border
	  svg_group.select('.top_border').attr('width', params.viz.svg_dim.width).attr('height', params.viz.grey_border_width).attr('transform', function () {
	    var inst_offset = 0;
	    return 'translate(' + inst_offset + ',0)';
	  });

	  // bottom border
	  svg_group.select('.bottom_border').attr('width', params.viz.svg_dim.width).attr('height', params.viz.grey_border_width).attr('transform', function () {
	    var inst_offset = params.viz.svg_dim.height - params.viz.grey_border_width;
	    return 'translate(0,' + inst_offset + ')';
	  });
		};

/***/ },
/* 94 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function resize_row_labels(params, ini_svg_group) {
	  var delay_info = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];


	  var delays = {};
	  var duration = params.viz.duration;
	  var svg_group;

	  var row_nodes = params.network_data.row_nodes;
	  var row_nodes_names = params.network_data.row_nodes_names;

	  if (delay_info === false) {
	    delays.run_transition = false;
	  } else {
	    delays = delay_info;
	  }

	  if (delays.run_transition) {

	    ini_svg_group.selectAll('.row_label_group')
	    // data bind necessary for loss/gain of rows
	    .data(row_nodes, function (d) {
	      return d.name;
	    }).transition().delay(delays.update).duration(duration).attr('transform', function (d) {
	      var inst_index = _.indexOf(row_nodes_names, d.name);
	      return 'translate(0,' + params.viz.y_scale(inst_index) + ')';
	    }).attr('y', params.viz.rect_height * 0.5 + params.labels.default_fs_row * 0.35);

	    svg_group = ini_svg_group.transition().delay(delays.update).duration(duration);
	  } else {

	    ini_svg_group.selectAll('.row_label_group')
	    // data bind necessary for loss/gain of rows
	    .data(row_nodes, function (d) {
	      return d.name;
	    }).attr('transform', function (d) {
	      var inst_index = _.indexOf(row_nodes_names, d.name);
	      return 'translate(0,' + params.viz.y_scale(inst_index) + ')';
	    }).attr('y', params.viz.rect_height * 0.5 + params.labels.default_fs_row * 0.35);

	    svg_group = ini_svg_group;
	  }

	  svg_group.select(params.root + ' .row_container').attr('transform', 'translate(' + params.viz.norm_labels.margin.left + ',' + params.viz.clust.margin.top + ')');

	  svg_group.select(params.root + ' .row_container').select('.white_bars').attr('width', params.viz.label_background.row).attr('height', 30 * params.viz.clust.dim.height + 'px');

	  svg_group.select(params.root + ' .row_container').select('.row_label_container').attr('transform', 'translate(' + params.viz.norm_labels.width.row + ',0)');
		};

/***/ },
/* 95 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function resize_highlights(params) {

	  // reposition tile highlight
	  ////////////////////////////////

	  var rel_width_hlight = 6;
	  // var opacity_hlight = 0.85;
	  var hlight_width = rel_width_hlight * params.viz.border_width;
	  var hlight_height = rel_width_hlight * params.viz.border_width / params.viz.zoom_switch;

	  // top highlight
	  d3.select(params.root + ' .top_hlight').attr('width', params.viz.rect_width).attr('height', hlight_height).attr('transform', function () {
	    return 'translate(' + params.viz.x_scale(params.matrix.click_hlight_x) + ',0)';
	  });

	  // left highlight
	  d3.select(params.root + ' .left_hlight').attr('width', hlight_width).attr('height', params.viz.rect_width - hlight_height * 0.99).attr('transform', function () {
	    return 'translate(' + params.viz.x_scale(params.matrix.click_hlight_x) + ',' + hlight_height * 0.99 + ')';
	  });

	  // right highlight
	  d3.select(params.root + ' .right_hlight').attr('width', hlight_width).attr('height', params.viz.rect_height - hlight_height * 0.99).attr('transform', function () {
	    var tmp_translate = params.viz.x_scale(params.matrix.click_hlight_x) + params.viz.rect_width - hlight_width;
	    return 'translate(' + tmp_translate + ',' + hlight_height * 0.99 + ')';
	  });

	  // bottom highlight
	  d3.select(params.root + ' .bottom_hlight').attr('width', function () {
	    return params.viz.rect_width - 1.98 * hlight_width;
	  }).attr('height', hlight_height).attr('transform', function () {
	    var tmp_translate_x = params.viz.x_scale(params.matrix.click_hlight_x) + hlight_width * 0.99;
	    var tmp_translate_y = params.viz.rect_height - hlight_height;
	    return 'translate(' + tmp_translate_x + ',' + tmp_translate_y + ')';
	  });

	  // resize row highlight
	  /////////////////////////
	  d3.select(params.root + ' .row_top_hlight').attr('width', params.viz.svg_dim.width).attr('height', hlight_height);

	  d3.select(params.root + ' .row_bottom_hlight').attr('width', params.viz.svg_dim.width).attr('height', hlight_height).attr('transform', function () {
	    var tmp_translate_y = params.viz.rect_height - hlight_height;
	    return 'translate(0,' + tmp_translate_y + ')';
	  });

	  // resize col highlight
	  /////////////////////////
	  d3.select(params.root + ' .col_top_hlight').attr('width', params.viz.clust.dim.height).attr('height', hlight_width).attr('transform', function () {
	    var tmp_translate_y = 0;
	    var tmp_translate_x = -(params.viz.clust.dim.height + params.viz.cat_room.col + params.viz.uni_margin);
	    return 'translate(' + tmp_translate_x + ',' + tmp_translate_y + ')';
	  });

	  d3.select(params.root + ' .col_bottom_hlight').attr('width', params.viz.clust.dim.height).attr('height', hlight_width).attr('transform', function () {
	    var tmp_translate_y = params.viz.rect_width - hlight_width;
	    var tmp_translate_x = -(params.viz.clust.dim.height + params.viz.cat_room.col + params.viz.uni_margin);
	    return 'translate(' + tmp_translate_x + ',' + tmp_translate_y + ')';
	  });
		};

/***/ },
/* 96 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function resize_row_viz(params, ini_svg_group) {
	  var delay_info = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];


	  var delays = {};
	  var duration = params.viz.duration;
	  var svg_group;

	  if (delay_info === false) {
	    delays.run_transition = false;
	  } else {
	    delays = delay_info;
	  }

	  if (delays.run_transition) {
	    svg_group = ini_svg_group.transition().delay(delays.update).duration(duration);
	  } else {
	    svg_group = ini_svg_group;
	  }

	  svg_group.select('.row_cat_outer_container').attr('transform', 'translate(' + params.viz.norm_labels.width.row + ',0)').select('white_bars').attr('width', params.viz.cat_room.row + 'px').attr('height', function () {
	    var inst_height = params.viz.clust.dim.height;
	    return inst_height;
	  });

	  var x_offset = params.viz.clust.margin.left + params.viz.clust.dim.width;
	  var y_offset = params.viz.clust.margin.top;
	  svg_group.select('.row_dendro_outer_container').attr('transform', 'translate(' + x_offset + ',' + y_offset + ')');

	  // !! tmp resize col dendro
	  x_offset = params.viz.clust.margin.left;
	  y_offset = params.viz.clust.margin.top + params.viz.clust.dim.height;

	  svg_group.select(' .col_dendro_outer_container').attr('transform', function () {
	    return 'translate(' + x_offset + ',' + y_offset + ')';
	  });
		};

/***/ },
/* 97 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function (params, ini_svg_group) {
	  var delay_info = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];


	  var delays = {};
	  var duration = params.viz.duration;
	  var svg_group;

	  var col_nodes = params.network_data.col_nodes;
	  var col_nodes_names = params.network_data.col_nodes_names;

	  if (delay_info === false) {
	    delays.run_transition = false;
	  } else {
	    delays = delay_info;
	  }

	  if (delays.run_transition) {
	    svg_group = ini_svg_group.transition().delay(delays.update).duration(duration);

	    ini_svg_group.selectAll('.col_label_text').data(col_nodes, function (d) {
	      return d.name;
	    }).transition().delay(delays.update).duration(duration).attr('transform', function (d) {
	      var inst_index = _.indexOf(col_nodes_names, d.name);
	      return 'translate(' + params.viz.x_scale(inst_index) + ') rotate(-90)';
	    });
	  } else {
	    svg_group = ini_svg_group;

	    ini_svg_group.selectAll('.col_label_text').data(col_nodes, function (d) {
	      return d.name;
	    }).attr('transform', function (d) {
	      var inst_index = _.indexOf(col_nodes_names, d.name);
	      return 'translate(' + params.viz.x_scale(inst_index) + ') rotate(-90)';
	    });
	  }

	  // offset click group column label
	  var x_offset_click = params.viz.x_scale.rangeBand() / 2 + params.viz.border_width;

	  svg_group.select(params.root + ' .col_container').attr('transform', 'translate(' + params.viz.clust.margin.left + ',' + params.viz.norm_labels.margin.top + ')');

	  svg_group.select(params.root + ' .col_container').select('.white_bars').attr('width', 30 * params.viz.clust.dim.width + 'px').attr('height', params.viz.label_background.col);

	  svg_group.select(params.root + ' .col_container').select('.col_label_outer_container').attr('transform', 'translate(0,' + params.viz.norm_labels.width.col + ')');

	  svg_group.selectAll('.col_label_group').attr('transform', 'translate(' + params.viz.x_scale.rangeBand() / 2 + ',' + x_offset_click + ') rotate(45)');

	  svg_group.selectAll('.col_label_group').select('text').attr('y', params.viz.x_scale.rangeBand() * 0.60).attr('dx', 2 * params.viz.border_width);
		};

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(2);

	module.exports = function resize_col_text(params, svg_group) {
	  svg_group.selectAll('.col_label_group').select('text').style('font-size', params.labels.default_fs_col + 'px').text(function (d) {
	    return utils.normal_name(d);
	  });

	  svg_group.selectAll('.col_label_group').each(function () {
	    d3.select(this).select('text')[0][0].getBBox();
	  });
	};

/***/ },
/* 99 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function resize_col_triangle(params, ini_svg_group) {
	  var delay_info = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];


	  // resize column triangle
	  var ini_triangle_group = ini_svg_group.selectAll('.col_label_group').select('path');

	  var delays = {};
	  var duration = params.viz.duration;

	  // var row_nodes = params.network_data.row_nodes;
	  // var row_nodes_names = params.network_data.row_nodes_names;

	  if (delay_info === false) {
	    delays.run_transition = false;
	  } else {
	    delays = delay_info;
	  }

	  var triangle_group;
	  if (delays.run_transition) {
	    triangle_group = ini_triangle_group.transition().delay(delays.update).duration(duration);
	  } else {
	    triangle_group = ini_triangle_group;
	  }

	  var reduce_rect_width = params.viz.x_scale.rangeBand() * 0.36;

	  triangle_group.attr('d', function () {
	    // x and y are flipped since its rotated
	    var origin_y = -params.viz.border_width;
	    var start_x = 0;
	    var final_x = params.viz.x_scale.rangeBand() - reduce_rect_width;
	    var start_y = -(params.viz.x_scale.rangeBand() - reduce_rect_width + params.viz.border_width);
	    var final_y = -params.viz.border_width;
	    var output_string = 'M ' + origin_y + ',0 L ' + start_y + ',' + start_x + ', L ' + final_y + ',' + final_x + ' Z';
	    return output_string;
	  }).attr('fill', '#eee');
		};

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(2);

	module.exports = function resize_col_hlight(params, svg_group) {
	  var delay_info = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];


	  var delays = {};
	  // var duration = params.viz.duration;

	  if (delay_info === false) {
	    delays.run_transition = false;
	  } else {
	    delays = delay_info;
	  }

	  if (utils.has(params.network_data.col_nodes[0], 'value')) {

	    svg_group.selectAll('.col_bars').data(params.network_data.col_nodes, function (d) {
	      return d.name;
	    }).attr('width', function (d) {

	      var inst_value = 0;

	      if (d.value > 0) {
	        inst_value = params.labels.bar_scale_col(d.value);
	      }
	      return inst_value;
	    })
	    // rotate labels - reduce width if rotating
	    .attr('height', params.viz.rect_width * 0.66);
	  }
		};

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var get_svg_dim = __webpack_require__(24);
	var calc_clust_height = __webpack_require__(27);
	var calc_clust_width = __webpack_require__(26);
	var calc_default_fs = __webpack_require__(47);
	var calc_zoom_switching = __webpack_require__(46);

	module.exports = function recalc_params_for_resize(params) {

	  // Resetting some visualization parameters
	  params = get_svg_dim(params);
	  params.viz = calc_clust_width(params.viz);
	  params.viz = calc_clust_height(params.viz);

	  if (params.sim_mat) {
	    if (params.viz.clust.dim.width <= params.viz.clust.dim.height) {
	      params.viz.clust.dim.height = params.viz.clust.dim.width;
	    } else {
	      params.viz.clust.dim.width = params.viz.clust.dim.height;
	    }
	  }

	  params.viz = calc_zoom_switching(params.viz);

	  // redefine x_scale and y_scale rangeBands
	  params.viz.x_scale.rangeBands([0, params.viz.clust.dim.width]);
	  params.viz.y_scale.rangeBands([0, params.viz.clust.dim.height]);

	  // precalc rect_width and height
	  params.viz.rect_width = params.viz.x_scale.rangeBand();
	  params.viz.rect_height = params.viz.y_scale.rangeBand();

	  // redefine zoom extent
	  params.viz.real_zoom = params.viz.norm_labels.width.col / (params.viz.rect_width / 2);

	  // redefine border width
	  params.viz.border_width = params.viz.rect_width / 55;

	  // the default font sizes are set here
	  params = calc_default_fs(params);

	  return params;
	};

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(2);
	var draw_up_tile = __webpack_require__(53);
	var draw_dn_tile = __webpack_require__(54);

	module.exports = function resize_row_tiles(params, svg_group) {

	  var row_nodes = params.network_data.row_nodes;
	  var row_nodes_names = utils.pluck(row_nodes, 'name');

	  svg_group.selectAll('.row').attr('transform', function (d) {
	    var tmp_index = _.indexOf(row_nodes_names, d.name);
	    return 'translate(0,' + params.viz.y_scale(tmp_index) + ')';
	  });

	  // reset tiles
	  svg_group.selectAll('.row').selectAll('.tile').attr('transform', function (d) {
	    var x_pos = params.viz.x_scale(d.pos_x) + 0.5 * params.viz.border_width;
	    var y_pos = 0.5 * params.viz.border_width / params.viz.zoom_switch;
	    return 'translate(' + x_pos + ',' + y_pos + ')';
	  }).attr('width', params.viz.rect_width).attr('height', params.viz.rect_height);

	  // reset tile_up
	  svg_group.selectAll('.row').selectAll('.tile_up').attr('d', function () {
	    return draw_up_tile(params);
	  }).attr('transform', function (d) {
	    var x_pos = params.viz.x_scale(d.pos_x) + 0.5 * params.viz.border_width;
	    var y_pos = 0.5 * params.viz.border_width / params.viz.zoom_switch;
	    return 'translate(' + x_pos + ',' + y_pos + ')';
	  });

	  svg_group.selectAll('.row').selectAll('.tile_dn').attr('d', function () {
	    return draw_dn_tile(params);
	  }).attr('transform', function (d) {
	    var x_pos = params.viz.x_scale(d.pos_x) + 0.5 * params.viz.border_width;
	    var y_pos = 0.5 * params.viz.border_width / params.viz.zoom_switch;
	    return 'translate(' + x_pos + ',' + y_pos + ')';
	  });
		};

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var calc_val_max = __webpack_require__(28);

	module.exports = function resize_label_bars(params, svg_group) {

	  // // set bar scale
	  // var val_max = Math.abs(_.max( params.network_data.row_nodes, function(d) { 
	  //   return Math.abs(d.value); 
	  // } ).value) ;

	  // params.labels.bar_scale_row = d3.scale
	  //   .linear()
	  //   .domain([0, val_max])
	  //   .range([0, params.viz.norm_labels.width.row ]);

	  params = calc_val_max(params);

	  svg_group.selectAll('.row_bars')
	  // .transition().delay(delays.update).duration(duration)
	  .attr('width', function (d) {
	    var inst_value = 0;
	    inst_value = params.labels.bar_scale_row(Math.abs(d.value));
	    return inst_value;
	  }).attr('x', function (d) {
	    var inst_value = 0;
	    inst_value = -params.labels.bar_scale_row(Math.abs(d.value));
	    return inst_value;
	  }).attr('height', params.viz.y_scale.rangeBand());
		};

/***/ },
/* 104 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function position_play_button(params) {

	  var clust_transform = d3.select(params.root + ' .clust_container').attr('transform');

	  var clust_x = Number(clust_transform.split('(')[1].split(',')[0]);
	  var clust_y = Number(clust_transform.split(',')[1].replace(')', ''));
	  var trans_x = clust_x + params.viz.clust.dim.width / 2;
	  var trans_y = clust_y + params.viz.clust.dim.height / 2;

	  d3.select(params.root + ' .play_button').attr('transform', function () {
	    return 'translate(' + trans_x + ',' + trans_y + ')';
	  });
		};

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var cat_tooltip_text = __webpack_require__(106);
	var d3_tip_custom = __webpack_require__(57);
	var reset_cat_opacity = __webpack_require__(107);

	module.exports = function make_col_cat(params) {

	  // make or reuse outer container
	  if (d3.select(params.root + ' .col_cat_outer_container').empty()) {
	    d3.select(params.root + ' .col_container').append('g').attr('class', 'col_cat_outer_container').attr('transform', function () {
	      var inst_offset = params.viz.norm_labels.width.col + 2;
	      return 'translate(0,' + inst_offset + ')';
	    }).append('g').attr('class', 'col_cat_container');
	  } else {
	    d3.select(params.root + ' .col_container').select('col_cat_outer_container').attr('transform', function () {
	      var inst_offset = params.viz.norm_labels.width.col + 2;
	      return 'translate(0,' + inst_offset + ')';
	    });
	  }

	  // d3-tooltip
	  var cat_tip = d3_tip_custom().attr('class', 'd3-tip').direction('s').offset([5, 0]).style('display', 'block').html(function (d) {
	    return cat_tooltip_text(params, d, this, 'col');
	  });

	  // append groups - each will hold classification rects
	  d3.select(params.root + ' .col_cat_container').selectAll('g').data(params.network_data.col_nodes, function (d) {
	    return d.name;
	  }).enter().append('g').attr('class', 'col_cat_group').attr('transform', function (d) {
	    var inst_index = _.indexOf(params.network_data.col_nodes_names, d.name);
	    return 'translate(' + params.viz.x_scale(inst_index) + ',0)';
	  });

	  d3.select(params.root + ' .col_cat_container').selectAll('.col_cat_group').call(cat_tip);

	  // add category rects
	  d3.selectAll(params.root + ' .col_cat_group').each(function () {

	    var inst_selection = this;
	    var cat_rect;

	    _.each(params.viz.all_cats.col, function (inst_cat) {

	      var inst_num = parseInt(inst_cat.split('-')[1], 10);
	      var cat_rect_class = 'col_cat_rect_' + String(inst_num);

	      if (d3.select(inst_selection).select('.' + cat_rect_class).empty()) {
	        cat_rect = d3.select(inst_selection).append('rect').attr('class', cat_rect_class).attr('cat', inst_cat).attr('transform', function () {
	          var cat_room = params.viz.cat_room.symbol_width + params.viz.cat_room.separation;
	          var inst_shift = inst_num * cat_room;
	          return 'translate(0,' + inst_shift + ')';
	        });
	      } else {
	        cat_rect = d3.select(inst_selection).select('.' + cat_rect_class);
	      }

	      cat_rect.attr('width', params.viz.x_scale.rangeBand()).attr('height', params.viz.cat_room.symbol_width).style('fill', function (d) {
	        return params.viz.cat_colors.col[inst_cat][d[inst_cat]];
	      }).style('opacity', params.viz.cat_colors.opacity).on('mouseover', cat_tip.show).on('mouseout', function () {

	        cat_tip.hide(this);

	        reset_cat_opacity(params);

	        d3.select(this).classed('hovering', false);
	      });
	    });
	  });
	};

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var get_cat_title = __webpack_require__(78);
	var utils = __webpack_require__(2);

	module.exports = function cat_tooltip_text(params, inst_data, inst_selection, inst_rc) {

	  // category index
	  var inst_cat = d3.select(inst_selection).attr('cat');
	  var cat_title = get_cat_title(params.viz, inst_cat, inst_rc);
	  var cat_name = inst_data[inst_cat];

	  if (cat_name.indexOf(': ') >= 0) {
	    cat_name = cat_name.split(': ')[1];
	  }

	  var cat_string = cat_title + ': ' + cat_name;

	  var pval_name = inst_cat.replace('-', '_') + '_pval';
	  var inst_pval;
	  if (utils.has(inst_data, pval_name)) {
	    inst_pval = inst_data[inst_cat.replace('-', '_') + '_pval'];
	    // there are three significant digits in the pval
	    inst_pval = inst_pval.toFixed(3);
	    cat_string = cat_string + ' (pval: ' + String(inst_pval) + ')';
	  }

	  d3.select(inst_selection).classed('hovering', true);

	  setTimeout(highlight_categories, 700);

	  return cat_string;

	  function highlight_categories() {

	    if (d3.select(inst_selection).classed('hovering')) {

	      var node_types = [inst_rc];

	      if (params.viz.sim_mat) {
	        node_types = ['row', 'col'];
	      }

	      _.each(node_types, function (tmp_rc) {

	        if (cat_name.indexOf('Not ') < 0 && cat_name != 'false') {
	          d3.selectAll(params.root + ' .' + tmp_rc + '_cat_group').selectAll('rect').style('opacity', function (d) {
	            var inst_opacity;
	            var tmp_name;
	            var tmp_cat = d3.select(this).attr('cat');

	            if (d[tmp_cat].indexOf(': ') >= 0) {
	              tmp_name = d[tmp_cat].split(': ')[1];
	            } else {
	              tmp_name = d[tmp_cat];
	            }

	            if (tmp_cat === inst_cat && tmp_name === cat_name) {
	              inst_opacity = params.viz.cat_colors.active_opacity;
	            } else {
	              inst_opacity = params.viz.cat_colors.opacity / 4;
	            }

	            return inst_opacity;
	          });
	        }
	      });
	    }
	  }
		};

/***/ },
/* 107 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function reset_cat_opacity(params) {

	  _.each(['row', 'col'], function (inst_rc) {
	    d3.selectAll(params.root + ' .' + inst_rc + '_cat_group').selectAll('rect').style('opacity', params.viz.cat_colors.opacity);
	  });
		};

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var cat_tooltip_text = __webpack_require__(106);
	var d3_tip_custom = __webpack_require__(57);
	var reset_cat_opacity = __webpack_require__(107);

	module.exports = function make_row_cat(params) {
	  var updating = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];


	  // make or reuse outer container
	  if (d3.select(params.root + ' .row_cat_outer_container').empty()) {
	    d3.select(params.root + ' .row_container').append('g').attr('class', 'row_cat_outer_container').attr('transform', 'translate(' + params.viz.norm_labels.width.row + ',0)').append('g').attr('class', 'row_cat_container');
	  } else {
	    d3.select(params.root + ' .row_container').select('row_cat_outer_container').attr('transform', 'translate(' + params.viz.norm_labels.width.row + ',0)');
	  }

	  // white background
	  if (d3.select(params.root + ' .row_cat_container').select('.white_bars').empty()) {
	    d3.select(params.root + ' .row_cat_container').append('rect').attr('class', 'white_bars').attr('fill', params.viz.background_color).attr('width', params.viz.cat_room.row + 'px').attr('height', function () {
	      var inst_height = params.viz.clust.dim.height;
	      return inst_height;
	    });
	  } else {
	    d3.select(params.root + ' .row_cat_container').select('.white_bars').attr('fill', params.viz.background_color).attr('width', params.viz.cat_room.row + 'px').attr('height', function () {
	      var inst_height = params.viz.clust.dim.height;
	      return inst_height;
	    });
	  }

	  // d3-tooltip
	  var cat_tip = d3_tip_custom().attr('class', 'd3-tip').direction('e').offset([5, 0]).style('display', 'block').html(function (d) {
	    return cat_tooltip_text(params, d, this, 'row');
	  });

	  // groups that hold classification triangle and colorbar rect
	  var row_cat_group = d3.select(params.root + ' .row_cat_container').selectAll('g').data(params.network_data.row_nodes, function (d) {
	    return d.name;
	  }).enter().append('g').attr('class', 'row_cat_group').attr('transform', function (d) {
	    var inst_index = _.indexOf(params.network_data.row_nodes_names, d.name);
	    return 'translate(0, ' + params.viz.y_scale(inst_index) + ')';
	  });

	  // // working on removing old categories
	  // console.log('trying to')
	  // d3.select(params.root+' .row_cat_container')
	  //   .selectAll('g')
	  //   .data(params.network_data.row_nodes, function(d){return d.name;})
	  //   .exit()
	  //   .each(function(d){
	  //     console.log('here')
	  //   });

	  d3.select(params.root + ' .row_cat_container').selectAll('.row_cat_group').call(cat_tip);

	  // add row triangles
	  row_cat_group.append('path').attr('d', function () {
	    var origin_x = params.viz.cat_room.symbol_width - 1;
	    var origin_y = 0;
	    var mid_x = 1;
	    var mid_y = params.viz.y_scale.rangeBand() / 2;
	    var final_x = params.viz.cat_room.symbol_width - 1;
	    var final_y = params.viz.y_scale.rangeBand();
	    var output_string = 'M ' + origin_x + ',' + origin_y + ' L ' + mid_x + ',' + mid_y + ', L ' + final_x + ',' + final_y + ' Z';
	    return output_string;
	  }).attr('fill', '#eee').style('opacity', params.viz.triangle_opacity);

	  var cat_rect;
	  var inst_selection;

	  d3.selectAll(params.root + ' .row_cat_group rect').remove();

	  if (params.viz.show_categories.row) {

	    d3.selectAll(params.root + ' .row_cat_group').each(function () {

	      inst_selection = this;

	      _.each(params.viz.all_cats.row, function (inst_cat) {

	        var inst_num = parseInt(inst_cat.split('-')[1], 10);
	        var cat_rect_class = 'row_cat_rect_' + String(inst_num);

	        if (d3.select(inst_selection).select('.' + cat_rect_class).empty()) {
	          cat_rect = d3.select(inst_selection).append('rect').attr('class', cat_rect_class).attr('cat', inst_cat);
	        } else {
	          cat_rect = d3.select(inst_selection).select('.' + cat_rect_class);
	        }

	        cat_rect.attr('width', params.viz.cat_room.symbol_width).attr('height', params.viz.y_scale.rangeBand()).style('fill', function (d) {
	          var inst_color = params.viz.cat_colors.row[inst_cat][d[inst_cat]];
	          return inst_color;
	        }).attr('x', function () {
	          var inst_offset = params.viz.cat_room.symbol_width + params.viz.uni_margin / 2;
	          return inst_offset + 'px';
	        }).attr('transform', function () {
	          var cat_room = params.viz.cat_room.symbol_width + params.viz.cat_room.separation;
	          var inst_shift = inst_num * cat_room;
	          return 'translate(' + inst_shift + ',0)';
	        }).on('mouseover', cat_tip.show).on('mouseout', function () {
	          cat_tip.hide(this);
	          reset_cat_opacity(params);
	          d3.select(this).classed('hovering', false);
	        });

	        if (updating) {
	          cat_rect.style('opacity', 0).transition().duration(1000).style('opacity', params.viz.cat_colors.opacity);
	        } else {
	          cat_rect.style('opacity', params.viz.cat_colors.opacity);
	        }
	      });
	    });
	  }
		};

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var make_row_dendro_triangles = __webpack_require__(63);

	module.exports = function make_row_dendro(cgm) {

	  var params = cgm.params;

	  var spillover_width = params.viz.dendro_room.row + params.viz.uni_margin;

	  // position row_dendro_outer_container
	  var x_offset = params.viz.clust.margin.left + params.viz.clust.dim.width;
	  var y_offset = params.viz.clust.margin.top;

	  // make or reuse outer container
	  if (d3.select(params.root + ' .row_dendro_outer_container').empty()) {

	    d3.select(params.root + ' .viz_svg').append('g').attr('class', 'row_dendro_outer_container').attr('transform', 'translate(' + x_offset + ',' + y_offset + ')');

	    d3.select(params.root + ' .row_dendro_outer_container').append('rect').classed('row_dendro_spillover', true).attr('fill', params.viz.background_color).attr('width', spillover_width + 'px').attr('height', params.viz.svg_dim.height);

	    d3.select(params.root + ' .row_dendro_outer_container').append('g').attr('class', 'row_dendro_container').attr('transform', 'translate(' + params.viz.uni_margin / 2 + ',0)');
	  } else {
	    d3.select(params.root + ' .viz_svg').select('row_dendro_outer_container').attr('transform', 'translate(' + x_offset + ',' + y_offset + ')');

	    d3.select(params.root + ' .row_dendro_outer_container').select('.row_dendro_spillover').attr('width', spillover_width + 'px').attr('height', params.viz.svg_dim.height);
	  }

	  make_row_dendro_triangles(cgm, false);

	  if (params.viz.inst_order.col != 'clust') {
	    d3.selectAll(params.root + ' .row_dendro_group').remove();
	  }
		};

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var make_col_dendro_triangles = __webpack_require__(69);

	module.exports = function make_col_dendro(cgm) {

	  var params = cgm.params;

	  // position col_dendro_outer_container
	  var x_offset = params.viz.clust.margin.left;
	  var y_offset = params.viz.clust.margin.top + params.viz.clust.dim.height;
	  var spillover_height = params.viz.dendro_room.col + params.viz.uni_margin;

	  // make or reuse outer container
	  if (d3.select(params.root + ' .col_dendro_outer_container').empty()) {

	    d3.select(params.root + ' .viz_svg').append('g').attr('class', 'col_dendro_outer_container').attr('transform', 'translate(' + x_offset + ',' + y_offset + ')');

	    d3.select(params.root + ' .col_dendro_outer_container').append('rect').classed('col_dendro_spillover', true).attr('fill', params.viz.background_color).attr('width', params.viz.svg_dim.width).attr('height', spillover_height + 'px');

	    d3.select(params.root + ' .col_dendro_outer_container').append('g').attr('class', 'col_dendro_container').attr('transform', 'translate(0,' + params.viz.uni_margin / 2 + ')');

	    d3.select(params.root + ' .col_dendro_outer_container').append('rect').classed('col_dendro_spillover_top', true).attr('fill', params.viz.background_color).attr('width', params.viz.svg_dim.width).attr('height', params.viz.svg_dim.height).attr('transform', 'translate(0,' + params.viz.dendro_room.col + ')');
	  } else {

	    d3.select(params.root + ' .viz_svg').select('col_dendro_outer_container').attr('transform', 'translate(' + x_offset + ',' + y_offset + ')');

	    d3.select(params.root + ' .col_dendro_outer_container').select('.col_dendro_spillover').attr('width', params.viz.svg_dim.width).attr('height', spillover_height + 'px');
	  }

	  make_col_dendro_triangles(cgm, false);

	  if (params.viz.inst_order.row != 'clust') {
	    d3.selectAll(params.root + ' .col_dendro_group').remove();
	  }
		};

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/* eslint-disable */

	var run_segment = __webpack_require__(112);
	var play_intro = __webpack_require__(113);
	var play_zoom = __webpack_require__(115);
	var play_reset_zoom = __webpack_require__(116);
	var play_reorder_row = __webpack_require__(118);
	var play_reorder_buttons = __webpack_require__(119);
	var play_search = __webpack_require__(121);
	var play_filter = __webpack_require__(122);
	var quick_cluster = __webpack_require__(145);
	var play_groups = __webpack_require__(146);
	var play_categories = __webpack_require__(147);
	var play_conclusion = __webpack_require__(148);
	var toggle_play_button = __webpack_require__(149);
	var play_menu_button = __webpack_require__(150);

	module.exports = function play_demo() {

	  var cgm = this;
	  var params = cgm.params;

	  if (d3.select(params.root + ' .running_demo').empty()) {

	    // prevent more than one demo from running at once 
	    d3.select(params.root + ' .play_button').classed('running_demo', true);

	    toggle_play_button(params, false);

	    // prevent user interaction while playing 
	    $.blockUI({ css: {
	        border: 'none',
	        padding: '15px',
	        backgroundColor: '#000',
	        '-webkit-border-radius': '10px',
	        '-moz-border-radius': '10px',
	        opacity: 0,
	        color: '#fff',
	        cursor: 'default'
	      } });

	    d3.selectAll('.blockUI').style('opacity', 0);

	    // intro text 
	    var inst_time = 750;

	    if (cgm.params.viz.is_expand === false) {
	      inst_time = run_segment(params, inst_time, quick_cluster);
	      inst_time = inst_time - 1500;
	    }

	    // clustergram interaction 
	    ///////////////////////////////////
	    inst_time = run_segment(params, inst_time, play_intro);
	    inst_time = run_segment(params, inst_time, play_zoom);
	    inst_time = run_segment(params, inst_time, play_reset_zoom);
	    inst_time = run_segment(params, inst_time, play_categories);
	    inst_time = run_segment(params, inst_time, play_reorder_row);

	    // sidebar interaction 
	    ///////////////////////////////////
	    inst_time = run_segment(params, inst_time, play_menu_button);
	    inst_time = run_segment(params, inst_time, play_groups);
	    inst_time = run_segment(params, inst_time, play_reorder_buttons);
	    inst_time = run_segment(params, inst_time, play_search);
	    inst_time = run_segment(cgm, inst_time, play_filter);

	    // conclusion 
	    ///////////////////////////////////
	    inst_time = run_segment(params, inst_time, quick_cluster);
	    inst_time = run_segment(params, inst_time, play_conclusion);
	  }
		};

/***/ },
/* 112 */
/***/ function(module, exports) {

	"use strict";

	module.exports = function run_segment(segment_data, inst_time, inst_segment) {
	  /* eslint-disable */

	  var timer = setTimeout(inst_segment().run, inst_time, segment_data);

	  // set up kill demo that will stop setTimeouts
	  //////////////////////////////////////////////////
	  // if (clear_timer){
	  //   clearTimeout(timer);
	  // }

	  var inst_duration = inst_segment().get_duration();
	  inst_time = inst_time + inst_duration;

	  return inst_time;
		};

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var demo_text = __webpack_require__(114);

	module.exports = function play_intro() {

	  var speed_up = 1;

	  function run(params) {
	    var text_1 = 'Clustergrammer allows users to generate\ninteractive and ' + 'sharable visualizations\nby uploading a matrix';
	    var text_2 = "This demo will quickly overview some\nof Clustergrammer's " + "interactive features";

	    setTimeout(demo_text, 0, params, text_1, 4500 / speed_up);
	    setTimeout(demo_text, 4500 / speed_up, params, text_2, 4500 / speed_up);
	  }

	  function get_duration() {
	    return 10000 / speed_up;
	  }

	  return {
	    run: run,
	    get_duration: get_duration
	  };
		};

/***/ },
/* 114 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function demo_text(params, text, read_duration) {

	  var split_text = text.split('\n');

	  if (split_text.length < 3) {
	    split_text.push('');
	  }

	  d3.select(params.root + ' .demo_group').style('opacity', 0).transition().duration(250).style('opacity', 1).transition().duration(250).delay(read_duration).style('opacity', 0);

	  for (var i = 0; i < split_text.length; i++) {

	    var inst_text_num = i + 1;

	    // make text box 
	    //////////////////
	    var inst_text_obj = d3.select(params.root + ' .demo_group').select('#text_' + inst_text_num).text(split_text[i]);
	    var bbox = inst_text_obj[0][0].getBBox();

	    var box_opacity = 0.9;

	    var tmp_fs = Number(d3.select('.demo_group').select('text').style('font-size').replace('px', ''));
	    var shift_height = tmp_fs * 1.3;

	    d3.select(params.root + ' .demo_group').select('.rect_' + inst_text_num).style('fill', 'white').attr('width', bbox.width + 20).attr('height', bbox.height).attr('x', -10).attr('y', bbox.y + i * shift_height).style('opacity', box_opacity);
	  }
		};

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var demo_text = __webpack_require__(114);
	var two_translate_zoom = __webpack_require__(83);

	module.exports = function play_zoom() {

	  function run(params) {
	    var text = 'Zoom and pan by\nscrolling and dragging';
	    demo_text(params, text, 4000);

	    setTimeout(two_translate_zoom, 1500, params, 0, 0, 4);
	  }

	  function get_duration() {
	    return 4000;
	  }

	  return {
	    run: run,
	    get_duration: get_duration
	  };
		};

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var demo_text = __webpack_require__(114);
	var two_translate_zoom = __webpack_require__(83);
	var sim_click = __webpack_require__(117);

	module.exports = function play_reset_zoom() {

	  function run(params) {

	    var text = 'Reset zoom by double-clicking\n';
	    demo_text(params, text, 4000);

	    setTimeout(sim_click, 2000, params, 'double', 300, 300);
	    setTimeout(two_translate_zoom, 2400, params, 0, 0, 1);
	  }

	  function get_duration() {
	    return 4500;
	  }

	  return {
	    run: run,
	    get_duration: get_duration
	  };
		};

/***/ },
/* 117 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function sim_click(params, single_double, pos_x, pos_y) {

	  var click_duration = 200;

	  var click_circle = d3.select(params.root + ' .viz_svg').append('circle').attr('cx', pos_x).attr('cy', pos_y).attr('r', 25).style('stroke', 'black').style('stroke-width', '3px').style('fill', '#007f00').style('opacity', 0.5);

	  if (single_double === 'double') {
	    click_circle.transition().duration(click_duration).style('opacity', 0.0).transition().duration(50).style('opacity', 0.5).transition().duration(click_duration).style('opacity', 0.0).remove();
	  } else {
	    click_circle.transition().duration(click_duration).style('opacity', 0.0).transition().duration(250).remove();
	  }
		};

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var demo_text = __webpack_require__(114);
	var sim_click = __webpack_require__(117);

	module.exports = function play_reorder_row() {
	  /* eslint-disable */

	  function run(params) {

	    var text = 'Reorder the matrix based on a single\nrow or column by double-clicking a\nlabel';
	    demo_text(params, text, 7000);

	    var inst_element = get_row_element(params, 'EGFR');

	    var group_trans = d3.select(inst_element).attr('transform');

	    var container_trans = d3.select(params.root + ' .clust_container').attr('transform').split(',')[1].replace(')', '');

	    var x_trans = params.viz.norm_labels.width.row * 0.9;

	    var row_trans = group_trans.split(',')[1].replace(')', '');
	    var y_trans = String(Number(row_trans) + Number(container_trans) + params.viz.rect_height / 2);

	    var wait_click = 4000;
	    setTimeout(sim_click, wait_click, params, 'double', x_trans, y_trans);
	    var wait_reorder = wait_click + 300;
	    setTimeout(fire_double_click_row, wait_reorder, params, inst_element);
	  }

	  function get_duration() {
	    return 8000;
	  }

	  function get_row_element(params, inst_row) {

	    var inst_element = d3.selectAll(params.root + ' .row_label_group').filter(function () {
	      var inst_data = this.__data__;
	      return inst_data.name == inst_row;
	    })[0][0];

	    return inst_element;
	  }

	  function fire_double_click_row(params, inst_element) {

	    $(inst_element).d3DblClick();
	  }

	  // allows doubleclicking on d3 element
	  jQuery.fn.d3DblClick = function () {
	    this.each(function (i, e) {
	      var evt = document.createEvent("MouseEvents");
	      evt.initMouseEvent("dblclick", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
	      e.dispatchEvent(evt);
	    });
	  };
	  return {
	    run: run,
	    get_duration: get_duration
	  };
		};

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var demo_text = __webpack_require__(114);
	var highlight_sidebar_element = __webpack_require__(120);

	module.exports = function play_reorder_buttons() {
	  /* eslint-disable */

	  function run(params) {

	    var text = 'Reorder all rows and columns\nby clicking the reorder\n buttons';
	    demo_text(params, text, 9000);

	    setTimeout(highlight_sidebar_element, 3000, params, 'toggle_col_order');
	    setTimeout(click_reorder_button, 3500, params, 'col', 'rank');

	    setTimeout(highlight_sidebar_element, 7000, params, 'toggle_row_order');
	    setTimeout(click_reorder_button, 7500, params, 'row', 'rank');
	  }

	  function get_duration() {
	    return 11000;
	  }

	  function click_reorder_button(params, inst_rc, inst_order) {
	    var inst_button = d3.selectAll('.toggle_' + inst_rc + '_order .btn').filter(function () {
	      return this.__data__ == inst_order;
	    })[0];

	    $(inst_button).click();
	  }

	  return {
	    run: run,
	    get_duration: get_duration
	  };
		};

/***/ },
/* 120 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function highlight_sidebar_element(params, highlight_class) {
	  var duration = arguments.length <= 2 || arguments[2] === undefined ? 4000 : arguments[2];


	  if (highlight_class.indexOf('slider') < 0) {
	    d3.select(params.root + ' .' + highlight_class).style('background', '#007f00').style('box-shadow', '0px 0px 10px 5px #007f00').transition().duration(1).delay(duration).style('background', '#FFFFFF').style('box-shadow', 'none');
	  } else {
	    d3.select(params.root + ' .' + highlight_class).style('box-shadow', '0px 0px 10px 5px #007f00').transition().duration(1).delay(duration).style('box-shadow', 'none');
	  }
		};

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var demo_text = __webpack_require__(114);
	var highlight_sidebar_element = __webpack_require__(120);
	var two_translate_zoom = __webpack_require__(83);

	module.exports = function play_search() {

	  function run(params) {

	    var text = 'Search for rows using\nthe search box';
	    demo_text(params, text, 5000);

	    var ini_delay = 2500;
	    setTimeout(highlight_sidebar_element, ini_delay, params, 'gene_search_container');

	    // manually mimic typing and autocomplete 
	    setTimeout(type_out_search, ini_delay + 1000, params, 'E');
	    setTimeout(type_out_search, ini_delay + 1500, params, 'EG');
	    setTimeout(type_out_search, ini_delay + 2000, params, 'EGF');
	    setTimeout(type_out_search, ini_delay + 2500, params, 'EGFR');

	    setTimeout(run_search, 5500, params);

	    setTimeout(two_translate_zoom, 7500, params, 0, 0, 1);
	  }

	  function get_duration() {
	    return 10000;
	  }

	  function type_out_search(params, inst_string) {
	    $(params.root + ' .gene_search_box').val(inst_string);
	    $(params.root + ' .gene_search_box').autocomplete("search", inst_string);
	  }

	  function run_search(params) {
	    $(params.root + ' .submit_gene_button').click();
	    $(params.root + ' .gene_search_box').autocomplete("search", '');
	  }

	  return {
	    run: run,
	    get_duration: get_duration
	  };
		};

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var demo_text = __webpack_require__(114);
	var highlight_sidebar_element = __webpack_require__(120);
	var update_viz_with_view = __webpack_require__(123);

	module.exports = function play_filter() {

	  function run(cgm) {
	    var params = cgm.params;

	    var text = 'Filter rows based on sum or\nvariance using the sliders';
	    demo_text(params, text, 4000);

	    var filter_type = 'N_row_sum';

	    setTimeout(highlight_sidebar_element, 5000, params, 'slider_' + filter_type, 13000);

	    text = 'Filter: Top 20 rows by sum';
	    setTimeout(demo_text, 5000, params, text, 4000);
	    setTimeout(run_update, 5300, cgm, filter_type, 20, 1);

	    text = 'Filter: Top 10 rows by sum';
	    setTimeout(demo_text, 10000, params, text, 4000);
	    setTimeout(run_update, 10300, cgm, filter_type, 10, 2);

	    text = 'Filter: All rows';
	    setTimeout(demo_text, 15000, params, text, 4000);
	    setTimeout(run_update, 15300, cgm, filter_type, 'all', 0);
	  }

	  function get_duration() {
	    return 19500;
	  }

	  function run_update(cgm, filter_type, filter_value, filter_index) {

	    var params = cgm.params;

	    var requested_view = {};
	    requested_view[filter_type] = filter_value;
	    update_viz_with_view(cgm, requested_view);

	    // quick fix for slider
	    $(params.root + ' .slider_' + filter_type).slider("value", filter_index);

	    var unit_name;
	    if (filter_type === 'N_row_sum') {
	      unit_name = 'sum';
	    } else {
	      unit_name = 'variance';
	    }

	    d3.select(params.root + ' .title_' + filter_type).text('Top rows ' + unit_name + ': ' + filter_value);
	  }

	  return {
	    run: run,
	    get_duration: get_duration
	  };
		};

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var make_network_using_view = __webpack_require__(10);
	var disable_sidebar = __webpack_require__(124);
	var update_viz_with_network = __webpack_require__(125);

	module.exports = function update_network_with_view(cgm, requested_view) {

	  disable_sidebar(cgm.params);

	  // make new_network_data by filtering the original network data
	  var new_network_data = make_network_using_view(cgm.config, cgm.params, requested_view);

	  update_viz_with_network(cgm, new_network_data);
		};

/***/ },
/* 124 */
/***/ function(module, exports) {

	'use strict';

	/* eslint-disable */
	module.exports = function disable_sidebar(params) {

	  console.log('improve sidebar disable');
	  // $(params.root+' .slider').slider('disable');

	  d3.selectAll(params.root + ' .btn').attr('disabled', true);

	  d3.select(params.viz.viz_svg).style('opacity', 0.70);
		};

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var make_params = __webpack_require__(9);
	var define_enter_exit_delays = __webpack_require__(126);
	var enter_exit_update = __webpack_require__(127);
	var initialize_resizing = __webpack_require__(85);
	var make_col_cat = __webpack_require__(105);
	var make_row_cat = __webpack_require__(108);
	var make_row_dendro = __webpack_require__(109);
	var make_col_dendro = __webpack_require__(110);
	var ini_sidebar = __webpack_require__(139);
	var enable_sidebar = __webpack_require__(141);
	var ini_doubleclick = __webpack_require__(87);
	var update_reorder_buttons = __webpack_require__(142);
	var make_row_cat_super_labels = __webpack_require__(81);
	var modify_row_node_cats = __webpack_require__(143);

	module.exports = function update_viz_with_network(cgm, new_network_data) {

	  var inst_group_level = cgm.params.group_level;

	  // make tmp config to make new params
	  var tmp_config = jQuery.extend(true, {}, cgm.config);

	  var new_cat_data = null;

	  // bring in 'new' category data
	  if (cgm.params.new_cat_data != null) {
	    modify_row_node_cats(cgm.params.new_cat_data, new_network_data.row_nodes);
	    new_cat_data = cgm.params.new_cat_data;
	  }

	  tmp_config.network_data = new_network_data;
	  tmp_config.inst_order = cgm.params.viz.inst_order;
	  tmp_config.input_domain = cgm.params.matrix.opacity_scale.domain()[1];

	  update_reorder_buttons(tmp_config, cgm.params);

	  tmp_config.ini_expand = false;
	  tmp_config.ini_view = null;
	  tmp_config.current_col_cat = cgm.params.current_col_cat;

	  // // pass on category info to new config
	  // console.log('passing on category info from previous viz')
	  // tmp_config.all_cats = cgm.params.viz.all_cats;
	  // tmp_config.cat_colors.row['cat-1'] = tmp_config.cat_colors.row['cat-0']

	  // always preserve category colors when updating
	  tmp_config.cat_colors = cgm.params.viz.cat_colors;

	  var new_params = make_params(tmp_config);
	  var delays = define_enter_exit_delays(cgm.params, new_params);

	  // pass the newly calcluated params back to teh cgm object
	  cgm.params = new_params;

	  if (new_cat_data != null) {
	    cgm.params.new_cat_data = new_cat_data;
	  }

	  // have persistent group levels while updating
	  cgm.params.group_level = inst_group_level;

	  enter_exit_update(cgm, new_network_data, delays);

	  make_row_cat(cgm.params);
	  make_row_cat_super_labels(cgm);

	  if (cgm.params.viz.show_categories.col) {
	    make_col_cat(cgm.params);
	  }

	  if (cgm.params.viz.show_dendrogram) {
	    make_row_dendro(cgm);
	    make_col_dendro(cgm);
	  }

	  initialize_resizing(cgm);

	  d3.select(cgm.params.viz.viz_svg).call(cgm.params.zoom_behavior);

	  ini_doubleclick(cgm.params);

	  ini_sidebar(cgm);

	  cgm.params.viz.run_trans = true;

	  d3.selectAll(cgm.params.root + ' .d3-tip').style('opacity', 0);

	  setTimeout(enable_sidebar, 2500, cgm.params);
		};

/***/ },
/* 126 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function (old_params, params) {

	  // exit, update, enter

	  // check if exit or enter or both are required
	  var old_row_nodes = old_params.network_data.row_nodes;
	  var old_col_nodes = old_params.network_data.col_nodes;
	  var old_row = _.map(old_row_nodes, function (d) {
	    return d.name;
	  });
	  var old_col = _.map(old_col_nodes, function (d) {
	    return d.name;
	  });
	  var all_old_nodes = old_row.concat(old_col);

	  var row_nodes = params.network_data.row_nodes;
	  var col_nodes = params.network_data.col_nodes;
	  var row = _.map(row_nodes, function (d) {
	    return d.name;
	  });
	  var col = _.map(col_nodes, function (d) {
	    return d.name;
	  });
	  var all_nodes = row.concat(col);

	  var exit_nodes = _.difference(all_old_nodes, all_nodes).length;
	  var enter_nodes = _.difference(all_nodes, all_old_nodes).length;

	  var delays = {};

	  if (exit_nodes > 0) {
	    delays.update = 1000;
	  } else {
	    delays.update = 0;
	  }

	  if (enter_nodes > 0) {
	    delays.enter = 1000;
	  } else {
	    delays.enter = 0;
	  }

	  delays.enter = delays.enter + delays.update;

	  delays.run_transition = true;

	  var old_num_links = old_params.network_data.links.length;
	  var new_num_links = params.network_data.links.length;
	  var cutoff_num_links = 0.5 * params.matrix.def_large_matrix;

	  if (old_num_links > cutoff_num_links || new_num_links > cutoff_num_links) {
	    delays.run_transition = false;
	    delays.update = 0;
	    delays.enter = 0;
	  }

	  // reduce opacity during update
	  d3.select(params.viz.viz_svg).style('opacity', 0.70);

	  function finish_update() {
	    d3.select(params.viz.viz_svg).transition().duration(250).style('opacity', 1.0);
	  }
	  setTimeout(finish_update, delays.enter);

	  return delays;
	};

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var resize_after_update = __webpack_require__(128);
	var make_rows = __webpack_require__(58);
	var make_cols = __webpack_require__(73);
	var eeu_existing_row = __webpack_require__(129);
	var exit_components = __webpack_require__(133);
	var enter_grid_lines = __webpack_require__(134);
	var enter_row_groups = __webpack_require__(135);
	var resize_containers = __webpack_require__(138);
	var label_constrain_and_trim = __webpack_require__(84);
	var d3_tip_custom = __webpack_require__(57);

	module.exports = function (cgm, network_data, delays) {

	  var params = cgm.params;

	  // remove old tooltips
	  d3.selectAll(params.root + ' .d3-tip').style('opacity', 0);

	  // d3-tooltip - for tiles
	  var tip = d3_tip_custom().attr('class', 'd3-tip tile_tip').direction('nw').offset([0, 0]).html(function (d) {
	    var inst_value = String(d.value.toFixed(3));
	    var tooltip_string;

	    if (params.keep_orig) {
	      var orig_value = String(d.value_orig.toFixed(3));
	      tooltip_string = '<p>' + d.row_name + ' and ' + d.col_name + '</p>' + '<p> normalized value: ' + inst_value + '</p>' + '<div> original value: ' + orig_value + '</div>';
	    } else {
	      tooltip_string = '<p>' + d.row_name + ' and ' + d.col_name + '</p>' + '<div> value: ' + inst_value + '</div>';
	    }

	    return tooltip_string;
	  });

	  d3.select(params.root + ' .clust_group').call(tip);

	  // TODO check if necessary
	  resize_containers(params);

	  // get row and col names
	  var row_nodes_names = params.network_data.row_nodes_names;

	  var duration = 1000;

	  // make global so that names can be accessed
	  var row_nodes = network_data.row_nodes;
	  var col_nodes = network_data.col_nodes;
	  var links = network_data.links;

	  //
	  var tile_data = links;

	  // add name to links for object constancy
	  for (var i = 0; i < tile_data.length; i++) {
	    var d = tile_data[i];
	    tile_data[i].name = row_nodes[d.source].name + '_' + col_nodes[d.target].name;
	  }

	  // move rows
	  var move_rows = d3.select(params.root + ' .clust_group').selectAll('.row').data(params.matrix.matrix, function (d) {
	    return d.name;
	  });

	  if (delays.run_transition) {
	    move_rows.transition().delay(delays.update).duration(duration).attr('transform', function (d) {
	      var tmp_index = _.indexOf(row_nodes_names, d.name);
	      return 'translate(0,' + params.viz.y_scale(tmp_index) + ')';
	    });
	  } else {
	    move_rows.attr('transform', function (d) {
	      var tmp_index = _.indexOf(row_nodes_names, d.name);
	      return 'translate(0,' + params.viz.y_scale(tmp_index) + ')';
	    });
	  }

	  // update existing rows - enter, exit, update tiles in existing row
	  d3.select(params.root + ' .clust_group').selectAll('.row').each(function (d) {
	    // TODO add tip back to arguments
	    var inst_selection = this;
	    eeu_existing_row(params, d, delays, duration, inst_selection, tip);
	  });

	  d3.selectAll(params.root + ' .horz_lines').remove();
	  d3.selectAll(params.root + ' .vert_lines').remove();

	  // exit
	  ////////////
	  exit_components(params, delays, duration);

	  // resize clust components using appropriate delays
	  resize_after_update(params, row_nodes, col_nodes, links, duration, delays);

	  // enter new elements
	  //////////////////////////
	  enter_row_groups(params, delays, duration, tip);

	  // update existing rows
	  make_rows(cgm, duration);
	  make_cols(cgm, duration);

	  enter_grid_lines(params, delays, duration);

	  setTimeout(label_constrain_and_trim, 2000, params);
		};

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(2);
	var calc_clust_height = __webpack_require__(27);
	var get_svg_dim = __webpack_require__(24);
	var calc_clust_width = __webpack_require__(26);
	var reset_zoom = __webpack_require__(88);
	var resize_dendro = __webpack_require__(89);
	var resize_super_labels = __webpack_require__(91);
	var resize_spillover = __webpack_require__(92);
	var resize_row_labels = __webpack_require__(94);
	var resize_row_viz = __webpack_require__(96);
	var resize_col_labels = __webpack_require__(97);
	var resize_col_text = __webpack_require__(98);
	var resize_col_triangle = __webpack_require__(99);
	var resize_col_hlight = __webpack_require__(100);
	var resize_label_bars = __webpack_require__(103);
	var calc_default_fs = __webpack_require__(47);
	var calc_zoom_switching = __webpack_require__(46);
	var show_visible_area = __webpack_require__(41);

	module.exports = function (params, row_nodes, col_nodes, links, duration, delays) {

	  // reset visible area
	  var zoom_info = {};
	  zoom_info.zoom_x = 1;
	  zoom_info.zoom_y = 1;
	  zoom_info.trans_x = 0;
	  zoom_info.trans_y = 0;

	  show_visible_area(params, zoom_info);
	  // quick fix for column filtering
	  setTimeout(show_visible_area, 2200, params, zoom_info);

	  var row_nodes_names = params.network_data.row_nodes_names;

	  reset_zoom(params);

	  // Resetting some visualization parameters
	  params = get_svg_dim(params);
	  params.viz = calc_clust_width(params.viz);
	  params.viz = calc_clust_height(params.viz);

	  if (params.sim_mat) {
	    if (params.viz.clust.dim.width <= params.viz.clust.dim.height) {
	      params.viz.clust.dim.height = params.viz.clust.dim.width;
	    } else {
	      params.viz.clust.dim.width = params.viz.clust.dim.height;
	    }
	  }
	  params.viz = calc_zoom_switching(params.viz);

	  // redefine x_scale and y_scale rangeBands
	  params.viz.x_scale.rangeBands([0, params.viz.clust.dim.width]);
	  params.viz.y_scale.rangeBands([0, params.viz.clust.dim.height]);

	  // redefine zoom extent
	  params.viz.real_zoom = params.viz.norm_labels.width.col / (params.viz.x_scale.rangeBand() / 2);
	  params.zoom_behavior.scaleExtent([1, params.viz.real_zoom * params.viz.zoom_switch]);

	  // redefine border width
	  params.viz.border_width = params.viz.x_scale.rangeBand() / 40;

	  params = calc_default_fs(params);

	  // resize the svg
	  ///////////////////////
	  var svg_group = d3.select(params.viz.viz_wrapper).select('svg');

	  svg_group.select(params.root + ' .grey_background').transition().delay(delays.update).duration(duration).attr('width', params.viz.clust.dim.width).attr('height', params.viz.clust.dim.height);

	  resize_row_labels(params, svg_group, delays);

	  // do not delay the font size change since this will break the bounding box calc
	  svg_group.selectAll('.row_label_group').select('text').style('font-size', params.labels.default_fs_row + 'px').text(function (d) {
	    return utils.normal_name(d);
	  });

	  // change the size of the highlighting rects
	  svg_group.selectAll('.row_label_group').each(function () {
	    var bbox = d3.select(this).select('text')[0][0].getBBox();
	    d3.select(this).select('rect').attr('x', bbox.x).attr('y', 0).attr('width', bbox.width).attr('height', params.viz.y_scale.rangeBand()).style('fill', 'yellow').style('opacity', function (d) {
	      var inst_opacity = 0;
	      // highlight target genes
	      if (d.target === 1) {
	        inst_opacity = 1;
	      }
	      return inst_opacity;
	    });
	  });

	  resize_row_viz(params, svg_group, delays);

	  if (delays.run_transition) {

	    // positioning row text after row text size may have been reduced
	    svg_group.selectAll('.row_label_group').select('text').transition().delay(delays.update).duration(duration).attr('y', params.viz.rect_height * 0.5 + params.labels.default_fs_row * 0.35);

	    svg_group.selectAll('.row_cat_group').data(row_nodes, function (d) {
	      return d.name;
	    }).transition().delay(delays.update).duration(duration).attr('transform', function (d) {
	      var inst_index = _.indexOf(row_nodes_names, d.name);
	      return 'translate(0, ' + params.viz.y_scale(inst_index) + ')';
	    });

	    svg_group.selectAll('.row_cat_group').select('path').transition().delay(delays.update).duration(duration).attr('d', function () {
	      var origin_x = params.viz.cat_room.symbol_width - 1;
	      var origin_y = 0;
	      var mid_x = 1;
	      var mid_y = params.viz.y_scale.rangeBand() / 2;
	      var final_x = params.viz.cat_room.symbol_width - 1;
	      var final_y = params.viz.y_scale.rangeBand();
	      var output_string = 'M ' + origin_x + ',' + origin_y + ' L ' + mid_x + ',' + mid_y + ', L ' + final_x + ',' + final_y + ' Z';
	      return output_string;
	    });

	    svg_group.selectAll('.row_dendro_group').data(row_nodes, function (d) {
	      return d.name;
	    }).transition().delay(delays.update).duration(duration).attr('transform', function (d) {
	      var inst_index = _.indexOf(row_nodes_names, d.name);
	      return 'translate(0, ' + params.viz.y_scale(inst_index) + ')';
	    });
	  } else {

	    // positioning row text after row text size may have been reduced
	    svg_group.selectAll('.row_label_group').select('text').attr('y', params.viz.rect_height * 0.5 + params.labels.default_fs_row * 0.35);

	    svg_group.selectAll('.row_cat_group').data(row_nodes, function (d) {
	      return d.name;
	    }).attr('transform', function (d) {
	      var inst_index = _.indexOf(row_nodes_names, d.name);
	      return 'translate(0, ' + params.viz.y_scale(inst_index) + ')';
	    });

	    svg_group.selectAll('.row_cat_group').select('path').attr('d', function () {
	      var origin_x = params.viz.cat_room.symbol_width - 1;
	      var origin_y = 0;
	      var mid_x = 1;
	      var mid_y = params.viz.y_scale.rangeBand() / 2;
	      var final_x = params.viz.cat_room.symbol_width - 1;
	      var final_y = params.viz.y_scale.rangeBand();
	      var output_string = 'M ' + origin_x + ',' + origin_y + ' L ' + mid_x + ',' + mid_y + ', L ' + final_x + ',' + final_y + ' Z';
	      return output_string;
	    });

	    svg_group.selectAll('.row_dendro_group').data(row_nodes, function (d) {
	      return d.name;
	    }).attr('transform', function (d) {
	      var inst_index = _.indexOf(row_nodes_names, d.name);
	      return 'translate(0, ' + params.viz.y_scale(inst_index) + ')';
	    });
	  }

	  if (utils.has(params.network_data.row_nodes[0], 'value')) {

	    resize_label_bars(params, svg_group);
	  }

	  // resize col labels
	  ///////////////////////
	  // reduce width of rotated rects

	  resize_col_labels(params, svg_group, delays);
	  resize_col_text(params, svg_group);
	  resize_col_triangle(params, svg_group, delays);

	  resize_col_hlight(params, svg_group, delays);

	  resize_dendro(params, svg_group, delays);
	  resize_super_labels(params, svg_group, delays);
	  resize_spillover(params.viz, svg_group, delays);

	  // reset zoom and translate
	  params.zoom_behavior.scale(1).translate([params.viz.clust.margin.left, params.viz.clust.margin.top]);
		};

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var exit_existing_row = __webpack_require__(130);
	var enter_existing_row = __webpack_require__(131);
	var update_split_tiles = __webpack_require__(132);
	var mouseover_tile = __webpack_require__(55);
	var mouseout_tile = __webpack_require__(56);

	// TODO add tip back to arguments
	module.exports = function eeu_existing_row(params, ini_inp_row_data, delays, duration, row_selection, tip) {

	  var inp_row_data = ini_inp_row_data.row_data;

	  // remove zero values from
	  var row_values = _.filter(inp_row_data, function (num) {
	    return num.value != 0;
	  });

	  // bind data to tiles
	  var cur_row_tiles = d3.select(row_selection).selectAll('.tile').data(row_values, function (d) {
	    return d.col_name;
	  });

	  exit_existing_row(params, delays, cur_row_tiles, inp_row_data, row_selection);

	  ///////////////////////////
	  // Update
	  ///////////////////////////

	  // update tiles in x direction 
	  var update_row_tiles = cur_row_tiles.on('mouseover', function () {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    mouseover_tile(params, this, tip, args);
	  }).on('mouseout', function mouseout() {
	    mouseout_tile(params, this, tip);
	  });

	  var col_nodes_names = params.network_data.col_nodes_names;

	  if (delays.run_transition) {
	    update_row_tiles.transition().delay(delays.update).duration(duration).attr('width', params.viz.rect_width).attr('height', params.viz.rect_height).attr('transform', function (d) {
	      if (_.contains(col_nodes_names, d.col_name)) {
	        var inst_col_index = _.indexOf(col_nodes_names, d.col_name);
	        var x_pos = params.viz.x_scale(inst_col_index) + 0.5 * params.viz.border_width;
	        return 'translate(' + x_pos + ',0)';
	      }
	    });
	  } else {
	    update_row_tiles.attr('width', params.viz.rect_width).attr('height', params.viz.rect_height).attr('transform', function (d) {
	      if (_.contains(col_nodes_names, d.col_name)) {
	        var inst_col_index = _.indexOf(col_nodes_names, d.col_name);
	        var x_pos = params.viz.x_scale(inst_col_index) + 0.5 * params.viz.border_width;
	        return 'translate(' + x_pos + ',0)';
	      }
	    });
	  }

	  if (params.matrix.tile_type == 'updn') {
	    update_split_tiles(params, inp_row_data, row_selection, delays, duration, cur_row_tiles, tip);
	  }

	  enter_existing_row(params, delays, duration, cur_row_tiles, tip);
		};

/***/ },
/* 130 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function exit_existing_row(params, delays, cur_row_tiles, inp_row_data, row_selection) {

	  if (delays.run_transition) {
	    cur_row_tiles.exit().transition().duration(300).attr('fill-opacity', 0).remove();
	  } else {
	    cur_row_tiles.exit().attr('fill-opacity', 0).remove();
	  }

	  if (params.matrix.tile_type == 'updn') {

	    // value split
	    var row_split_data = _.filter(inp_row_data, function (num) {
	      return num.value_up != 0 || num.value_dn != 0;
	    });

	    // tile_up
	    var cur_tiles_up = d3.select(row_selection).selectAll('.tile_up').data(row_split_data, function (d) {
	      return d.col_name;
	    });

	    if (delays.run_transition) {
	      cur_tiles_up.exit().transition().duration(300).attr('fill', '0').remove();
	    } else {
	      cur_tiles_up.exit().attr('fill', 0).remove();
	    }

	    // tile_dn
	    var cur_tiles_dn = d3.select(row_selection).selectAll('.tile_dn').data(row_split_data, function (d) {
	      return d.col_name;
	    });

	    if (delays.run_transition) {
	      cur_tiles_dn.exit().transition().duration(300).attr('fill', 0).remove();
	    } else {
	      cur_tiles_dn.exit().attr('fill', 0).remove();
	    }
	  }
		};

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var mouseover_tile = __webpack_require__(55);
	var mouseout_tile = __webpack_require__(56);

	module.exports = function enter_existing_row(params, delays, duration, cur_row_tiles, tip) {

	  // enter new tiles
	  var new_tiles = cur_row_tiles.enter().append('rect').attr('class', 'tile row_tile').attr('width', params.viz.rect_width).attr('height', params.viz.rect_height).on('mouseover', function () {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    mouseover_tile(params, this, tip, args);
	  }).on('mouseout', function mouseout() {
	    mouseout_tile(params, this, tip);
	  }).attr('fill-opacity', 0).attr('transform', function (d) {
	    var x_pos = params.viz.x_scale(d.pos_x) + 0.5 * params.viz.border_width;
	    var y_pos = 0.5 * params.viz.border_width / params.viz.zoom_switch;
	    return 'translate(' + x_pos + ',' + y_pos + ')';
	  });

	  if (delays.run_transition) {
	    new_tiles.transition().delay(delays.enter).duration(duration).style('fill', function (d) {
	      return d.value > 0 ? params.matrix.tile_colors[0] : params.matrix.tile_colors[1];
	    }).attr('fill-opacity', function (d) {
	      var output_opacity = params.matrix.opacity_scale(Math.abs(d.value));
	      return output_opacity;
	    });
	  } else {
	    new_tiles.style('fill', function (d) {
	      return d.value > 0 ? params.matrix.tile_colors[0] : params.matrix.tile_colors[1];
	    }).attr('fill-opacity', function (d) {
	      var output_opacity = params.matrix.opacity_scale(Math.abs(d.value));
	      return output_opacity;
	    });
	  }

	  // remove new tiles if necessary
	  new_tiles.each(function (d) {
	    if (Math.abs(d.value_up) > 0 && Math.abs(d.value_dn) > 0) {
	      d3.select(this).remove();
	    }
	  });
	};

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var draw_up_tile = __webpack_require__(53);
	var draw_dn_tile = __webpack_require__(54);
	var mouseover_tile = __webpack_require__(55);
	var mouseout_tile = __webpack_require__(56);

	module.exports = function update_split_tiles(params, inp_row_data, row_selection, delays, duration, cur_row_tiles, tip) {

	  // value split
	  var row_split_data = _.filter(inp_row_data, function (num) {
	    return num.value_up != 0 || num.value_dn != 0;
	  });

	  // tile_up
	  var cur_tiles_up = d3.select(row_selection).selectAll('.tile_up').data(row_split_data, function (d) {
	    return d.col_name;
	  });

	  // update split tiles_up
	  var update_tiles_up = cur_tiles_up.on('mouseover', function () {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    mouseover_tile(params, this, tip, args);
	  }).on('mouseout', function mouseout() {
	    mouseout_tile(params, this, tip);
	  });

	  if (delays.run_transition) {
	    update_tiles_up.transition().delay(delays.update).duration(duration).attr('d', function () {
	      return draw_up_tile(params);
	    }).attr('transform', function (d) {
	      var x_pos = params.viz.x_scale(d.pos_x) + 0.5 * params.viz.border_width;
	      var y_pos = 0.5 * params.viz.border_width / params.viz.zoom_switch;
	      return 'translate(' + x_pos + ',' + y_pos + ')';
	    });
	  } else {
	    update_tiles_up.attr('d', function () {
	      return draw_up_tile(params);
	    }).attr('transform', function (d) {
	      var x_pos = params.viz.x_scale(d.pos_x) + 0.5 * params.viz.border_width;
	      var y_pos = 0.5 * params.viz.border_width / params.viz.zoom_switch;
	      return 'translate(' + x_pos + ',' + y_pos + ')';
	    });
	  }

	  // tile_dn
	  var cur_tiles_dn = d3.select(row_selection).selectAll('.tile_dn').data(row_split_data, function (d) {
	    return d.col_name;
	  });

	  // update split tiles_dn
	  var update_tiles_dn = cur_tiles_dn.on('mouseover', function () {
	    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      args[_key2] = arguments[_key2];
	    }

	    mouseover_tile(params, this, tip, args);
	  }).on('mouseout', function mouseout() {
	    mouseout_tile(params, this, tip);
	  });

	  if (delays.run_transition) {
	    update_tiles_dn.transition().delay(delays.update).duration(duration).attr('d', function () {
	      return draw_dn_tile(params);
	    }).attr('transform', function (d) {
	      var x_pos = params.viz.x_scale(d.pos_x) + 0.5 * params.viz.border_width;
	      var y_pos = 0.5 * params.viz.border_width / params.viz.zoom_switch;
	      return 'translate(' + x_pos + ',' + y_pos + ')';
	    });
	  } else {
	    update_tiles_dn.attr('d', function () {
	      return draw_dn_tile(params);
	    }).attr('transform', function (d) {
	      var x_pos = params.viz.x_scale(d.pos_x) + 0.5 * params.viz.border_width;
	      var y_pos = 0.5 * params.viz.border_width / params.viz.zoom_switch;
	      return 'translate(' + x_pos + ',' + y_pos + ')';
	    });
	  }

	  // remove tiles when splitting is done
	  cur_row_tiles.selectAll('.tile').each(function (d) {
	    if (Math.abs(d.value_up) > 0 && Math.abs(d.value_dn) > 0) {
	      d3.select(this).remove();
	    }
	  });
	};

/***/ },
/* 133 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function exit_components(params, delays, duration) {

	  var row_nodes = params.network_data.row_nodes;
	  var col_nodes = params.network_data.col_nodes;

	  // remove entire rows
	  var exiting_rows = d3.select(params.root + ' .clust_group').selectAll('.row').data(params.matrix.matrix, function (d) {
	    return d.name;
	  }).exit();

	  if (delays.run_transition) {
	    exiting_rows.transition().duration(duration).style('opacity', 0).remove();
	  } else {
	    exiting_rows.style('opacity', 0).remove();
	  }

	  // remove row labels
	  d3.selectAll(params.root + ' .row_label_group').data(row_nodes, function (d) {
	    return d.name;
	  }).exit().transition().duration(duration).style('opacity', 0).remove();

	  // remove column labels
	  d3.selectAll(params.root + ' .col_label_group').data(col_nodes, function (d) {
	    return d.name;
	  }).exit().transition().duration(duration).style('opacity', 0).remove();

	  // remove row triangles and colorbars
	  d3.selectAll(params.root + ' .row_cat_group').data(row_nodes, function (d) {
	    return d.name;
	  }).exit().transition().duration(duration).style('opacity', 0).remove();

	  // remove row triangles and colorbars
	  d3.selectAll(params.root + ' .row_dendro_group').data(row_nodes, function (d) {
	    return d.name;
	  }).exit().transition().duration(duration).style('opacity', 0).remove();

	  d3.selectAll(params.root + ' .col_label_text').data(col_nodes, function (d) {
	    return d.name;
	  }).exit().transition().duration(duration).style('opacity', 0).remove();

	  d3.selectAll(params.root + ' .horz_lines').data(row_nodes, function (d) {
	    return d.name;
	  }).exit().transition().duration(duration).style('opacity', 0).remove();

	  d3.selectAll(params.root + ' .vert_lines').data(col_nodes, function (d) {
	    return d.name;
	  }).exit().transition().duration(duration).style('opacity', 0).remove();

	  // remove dendrogram
	  d3.selectAll(params.root + ' .col_cat_group').data(col_nodes, function (d) {
	    return d.name;
	  }).exit().transition().duration(duration).style('opacity', 0).remove();

	  d3.selectAll(params.root + ' .col_dendro_group').data(col_nodes, function (d) {
	    return d.name;
	  }).exit().transition().duration(duration).style('opacity', 0).remove();
		};

/***/ },
/* 134 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function enter_grid_lines(params, delays, duration) {

	  var row_nodes = params.network_data.row_nodes;
	  var row_nodes_names = params.network_data.row_nodes_names;

	  var col_nodes = params.network_data.col_nodes;
	  var col_nodes_names = params.network_data.col_nodes_names;

	  // Fade in new gridlines
	  ///////////////////////////

	  // append horizontal lines
	  d3.select(params.root + ' .clust_group').selectAll('.horz_lines').data(row_nodes, function (d) {
	    return d.name;
	  }).enter().append('g').attr('class', 'horz_lines').attr('transform', function (d) {
	    var inst_index = _.indexOf(row_nodes_names, d.name);
	    return 'translate(0,' + params.viz.y_scale(inst_index) + ') rotate(0)';
	  }).append('line').attr('x1', 0).attr('x2', params.viz.clust.dim.width).style('stroke-width', function () {
	    var inst_width;
	    if (params.viz.zoom_switch > 1) {
	      inst_width = params.viz.border_width / params.viz.zoom_switch;
	    } else {
	      inst_width = params.viz.border_width;
	    }
	    return inst_width + 'px';
	  }).attr('opacity', 0).attr('stroke', 'white').transition().delay(delays.enter).duration(2 * duration).attr('opacity', 1);

	  // append vertical line groups
	  d3.select(params.root + ' .clust_group').selectAll('.vert_lines').data(col_nodes).enter().append('g').attr('class', 'vert_lines').attr('transform', function (d) {
	    var inst_index = _.indexOf(col_nodes_names, d.name);
	    return 'translate(' + params.viz.x_scale(inst_index) + ') rotate(-90)';
	  }).append('line').attr('x1', 0).attr('x2', -params.viz.clust.dim.height).style('stroke-width', function () {
	    var inst_width;
	    if (params.viz.zoom_switch_y > 1) {
	      inst_width = params.viz.border_width / params.viz.zoom_switch_y;
	    } else {
	      inst_width = params.viz.border_width;
	    }
	    return inst_width + 'px';
	  }).style('stroke', 'white').attr('opacity', 0).transition().delay(delays.enter).duration(2 * duration).attr('opacity', 1);
		};

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var enter_new_rows = __webpack_require__(136);

	module.exports = function enter_row_groups(params, delays, duration, tip) {

	  var row_nodes_names = params.network_data.row_nodes_names;

	  // enter new rows
	  var new_row_groups = d3.select(params.root + ' .clust_group').selectAll('.row').data(params.matrix.matrix, function (d) {
	    return d.name;
	  }).enter().append('g').attr('class', 'row').attr('transform', function (d) {
	    var tmp_index = _.indexOf(row_nodes_names, d.name);
	    return 'translate(0,' + params.viz.y_scale(tmp_index) + ')';
	  });

	  new_row_groups.each(function (d) {
	    enter_new_rows(params, d, delays, duration, tip, this);
	  });
		};

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var enter_split_tiles = __webpack_require__(137);
	var mouseover_tile = __webpack_require__(55);
	var mouseout_tile = __webpack_require__(56);

	// make each row in the clustergram
	module.exports = function enter_new_rows(params, ini_inp_row_data, delays, duration, tip, row_selection) {

	  var inp_row_data = ini_inp_row_data.row_data;

	  // remove zero values to make visualization faster
	  var row_data = _.filter(inp_row_data, function (num) {
	    return num.value !== 0;
	  });

	  // update tiles
	  ////////////////////////////////////////////
	  var tile = d3.select(row_selection).selectAll('rect').data(row_data, function (d) {
	    return d.col_name;
	  }).enter().append('rect').attr('class', 'tile row_tile').attr('width', params.viz.rect_width).attr('height', params.viz.rect_height)
	  // switch the color based on up/dn value
	  .style('fill', function (d) {
	    return d.value > 0 ? params.matrix.tile_colors[0] : params.matrix.tile_colors[1];
	  }).on('mouseover', function () {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    mouseover_tile(params, this, tip, args);
	  }).on('mouseout', function mouseout() {
	    mouseout_tile(params, this, tip);
	  });

	  tile.style('fill-opacity', 0).transition().delay(delays.enter).duration(duration).style('fill-opacity', function (d) {
	    // calculate output opacity using the opacity scale
	    var output_opacity = params.matrix.opacity_scale(Math.abs(d.value));
	    return output_opacity;
	  });

	  tile.attr('transform', function (d) {
	    var x_pos = params.viz.x_scale(d.pos_x) + 0.5 * params.viz.border_width;
	    var y_pos = 0.5 * params.viz.border_width / params.viz.zoom_switch;
	    return 'translate(' + x_pos + ',' + y_pos + ')';
	  });

	  if (params.matrix.tile_type == 'updn') {
	    enter_split_tiles(params, inp_row_data, row_selection, tip, delays, duration, tile);
	  }
		};

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var draw_up_tile = __webpack_require__(53);
	var draw_dn_tile = __webpack_require__(54);

	module.exports = function enter_split_tiles(params, inp_row_data, row_selection, tip, delays, duration, tile) {

	  // value split
	  var row_split_data = _.filter(inp_row_data, function (num) {
	    return num.value_up != 0 || num.value_dn != 0;
	  });

	  // tile_up
	  var new_tiles_up = d3.select(row_selection).selectAll('.tile_up').data(row_split_data, function (d) {
	    return d.col_name;
	  }).enter().append('path').attr('class', 'tile_up').attr('d', function () {
	    return draw_up_tile(params);
	  }).attr('transform', function (d) {
	    var x_pos = params.viz.x_scale(d.pos_x) + 0.5 * params.viz.border_width;
	    var y_pos = 0.5 * params.viz.border_width / params.viz.zoom_switch;
	    return 'translate(' + x_pos + ',' + y_pos + ')';
	  }).style('fill', function () {
	    return params.matrix.tile_colors[0];
	  }).on('mouseover', function (p) {
	    // highlight row - set text to active if
	    d3.selectAll(params.root + ' .row_label_group text').classed('active', function (d) {
	      return p.row_name === d.name;
	    });

	    d3.selectAll(params.root + ' .col_label_text text').classed('active', function (d) {
	      return p.col_name === d.name;
	    });
	    if (params.matrix.show_tile_tooltips) {
	      tip.show(p);
	    }
	  }).on('mouseout', function () {
	    d3.selectAll(params.root + ' text').classed('active', false);
	    if (params.matrix.show_tile_tooltips) {
	      tip.hide();
	    }
	  });

	  new_tiles_up.style('fill-opacity', 0).transition().delay(delays.enter).duration(duration).style('fill-opacity', function (d) {
	    var inst_opacity = 0;
	    if (Math.abs(d.value_dn) > 0) {
	      inst_opacity = params.matrix.opacity_scale(Math.abs(d.value_up));
	    }
	    return inst_opacity;
	  });

	  // tile_dn
	  var new_tiles_dn = d3.select(row_selection).selectAll('.tile_dn').data(row_split_data, function (d) {
	    return d.col_name;
	  }).enter().append('path').attr('class', 'tile_dn').attr('d', function () {
	    return draw_dn_tile(params);
	  }).attr('transform', function (d) {
	    var x_pos = params.viz.x_scale(d.pos_x) + 0.5 * params.viz.border_width;
	    var y_pos = 0.5 * params.viz.border_width / params.viz.zoom_switch;
	    return 'translate(' + x_pos + ',' + y_pos + ')';
	  }).style('fill', function () {
	    return params.matrix.tile_colors[1];
	  }).on('mouseover', function (p) {
	    // highlight row - set text to active if
	    d3.selectAll(params.root + ' .row_label_group text').classed('active', function (d) {
	      return p.row_name === d.name;
	    });

	    d3.selectAll(params.root + ' .col_label_text text').classed('active', function (d) {
	      return p.col_name === d.name;
	    });
	    if (params.matrix.show_tile_tooltips) {
	      tip.show(p);
	    }
	  }).on('mouseout', function () {
	    d3.selectAll(params.root + ' text').classed('active', false);
	    if (params.matrix.show_tile_tooltips) {
	      tip.hide();
	    }
	  });

	  new_tiles_dn.style('fill-opacity', 0).transition().delay(delays.enter).duration(duration).style('fill-opacity', function (d) {
	    var inst_opacity = 0;
	    if (Math.abs(d.value_up) > 0) {
	      inst_opacity = params.matrix.opacity_scale(Math.abs(d.value_dn));
	    }
	    return inst_opacity;
	  });

	  // remove tiles when splitting is done
	  tile.each(function (d) {
	    if (Math.abs(d.value_up) > 0 && Math.abs(d.value_dn) > 0) {
	      d3.select(this).remove();
	    }
	  });
		};

/***/ },
/* 138 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function resize_containers(params) {

	  // reposition matrix
	  d3.select(params.root + ' .clust_container').attr('transform', 'translate(' + params.viz.clust.margin.left + ',' + params.viz.clust.margin.top + ')');

	  // reposition col container
	  d3.select(params.root + ' .col_label_outer_container').attr('transform', 'translate(0,' + params.viz.norm_labels.width.col + ')');

	  // reposition col_viz container
	  d3.select(params.root + ' .col_cat_outer_container').attr('transform', function () {
	    var inst_offset = params.viz.norm_labels.width.col + 2;
	    return 'translate(0,' + inst_offset + ')';
	  });
		};

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/* eslint-disable */

	var change_groups = __webpack_require__(140);
	var search = __webpack_require__(82);
	var all_reorder = __webpack_require__(80);
	var ini_cat_reorder = __webpack_require__(79);

	module.exports = function ini_sidebar(cgm) {

	  var params = cgm.params;

	  // initializes sidebar buttons and sliders

	  var search_obj = search(params, params.network_data.row_nodes, 'name');

	  // var input = document.getElementById("myinput");
	  var input = d3.select(params.root + ' .gene_search_box')[0][0];
	  var awesomplete = new Awesomplete(input, { minChars: 1, maxItems: 15 });

	  awesomplete.list = search_obj.get_entities;

	  // submit genes button
	  $(params.root + ' .gene_search_box').keyup(function (e) {
	    if (e.keyCode === 13) {
	      var search_gene = $(params.root + ' .gene_search_box').val();
	      search_obj.find_entity(search_gene);
	    }
	  });

	  $(params.root + ' .submit_gene_button').off().click(function () {
	    var gene = $(params.root + ' .gene_search_box').val();
	    search_obj.find_entity(gene);
	  });

	  var reorder_types;
	  if (params.sim_mat) {
	    reorder_types = ['both'];
	  } else {
	    reorder_types = ['row', 'col'];
	  }

	  /* initialize dendro sliders */
	  _.each(reorder_types, function (inst_rc) {

	    var tmp_rc = inst_rc;
	    if (tmp_rc === 'both') {
	      tmp_rc = 'row';
	    }
	    var inst_group = cgm.params.group_level[tmp_rc];
	    var inst_group_value = inst_group / 10;

	    if (d3.select(params.root + ' .slider_' + inst_rc).select('#handle-one').empty()) {

	      var dendro_slider = d3.slider().snap(true).value(inst_group_value).min(0).max(1).step(0.1).on('slide', function (evt, value) {
	        run_on_dendro_slide(evt, value, inst_rc);
	      });

	      d3.select(params.root + ' .slider_' + inst_rc).call(dendro_slider);
	    }

	    // reorder buttons
	    $(params.root + ' .toggle_' + inst_rc + '_order .btn').off().click(function (evt) {

	      var order_id = $(evt.target).attr('name').replace('_row', '').replace('_col', '');

	      d3.selectAll(params.root + ' .toggle_' + inst_rc + '_order .btn').classed('active', false);

	      d3.select(this).classed('active', true);

	      if (inst_rc != 'both') {
	        all_reorder(cgm, order_id, inst_rc);
	      } else {
	        all_reorder(cgm, order_id, 'row');
	        all_reorder(cgm, order_id, 'col');
	      }
	    });
	  });

	  ini_cat_reorder(cgm);

	  // Opacity Slider
	  //////////////////////////////////////////////////////////////////////

	  if (d3.select(cgm.params.root + ' .opacity_slider').select('#handle-one').empty()) {

	    var slider_fun = d3.slider()
	    // .axis(d3.svg.axis())
	    .snap(true).value(1).min(0.1).max(1.9).step(0.1).on('slide', function (evt, value) {
	      run_on_opacity_slide(evt, value);
	    });

	    d3.select(cgm.params.root + ' .opacity_slider').call(slider_fun);
	  }

	  //////////////////////////////////////////////////////////////////////

	  // $( params.root+' .opacity_slider' ).slider({
	  //   // value:0.5,
	  //   min: 0.1,
	  //   max: 2.0,
	  //   step: 0.1,
	  //   slide: function( event, ui ) {

	  //     $( "#amount" ).val( "$" + ui.value );
	  //     var inst_index = 2 - ui.value;

	  //     var scaled_max = params.matrix.abs_max_val * inst_index;

	  //     params.matrix.opacity_scale.domain([0, scaled_max]);

	  //     d3.selectAll(params.root+' .tile')
	  //       .style('fill-opacity', function(d) {
	  //         // calculate output opacity using the opacity scale
	  //         var output_opacity = params.matrix.opacity_scale(Math.abs(d.value));
	  //         return output_opacity;
	  //       });


	  //   }
	  // });

	  function run_on_dendro_slide(evt, value, inst_rc) {
	    $("#amount").val("$" + value);
	    var inst_index = value * 10;
	    // var inst_rc;

	    if (inst_rc != 'both') {
	      change_groups(cgm, inst_rc, inst_index);
	    } else {
	      change_groups(cgm, 'row', inst_index);
	      change_groups(cgm, 'col', inst_index);
	    }
	  }

	  function run_on_opacity_slide(evt, value) {

	    var inst_index = 2 - value;
	    var scaled_max = cgm.params.matrix.abs_max_val * inst_index;

	    cgm.params.matrix.opacity_scale.domain([0, scaled_max]);

	    d3.selectAll(cgm.params.root + ' .tile').style('fill-opacity', function (d) {
	      // calculate output opacity using the opacity scale
	      var output_opacity = cgm.params.matrix.opacity_scale(Math.abs(d.value));
	      return output_opacity;
	    });
	  }
		};

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// var build_color_groups = require('./build_color_groups');
	var make_row_dendro_triangles = __webpack_require__(63);
	var make_col_dendro_triangles = __webpack_require__(69);

	/* Changes the groupings (x- and y-axis color bars).
	 */
	module.exports = function (cgm, inst_rc, inst_index) {

	  var params = cgm.params;

	  if (inst_rc === 'row') {
	    params.group_level.row = inst_index;
	  } else if (inst_rc === 'col') {
	    params.group_level.col = inst_index;
	  }

	  var is_change_group = true;
	  make_row_dendro_triangles(cgm, is_change_group);
	  make_col_dendro_triangles(cgm, is_change_group);
		};

/***/ },
/* 141 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function enable_sidebar(params) {

	  /* only enable dendrogram sliders if there has been no dendro_filtering */

	  // $(params.root+' .opacity_slider').slider('enable');

	  // $(params.root+' .slider_N_row_sum').slider('enable');
	  // $(params.root+' .slider_N_row_var').slider('enable');

	  // only enable reordering if params.dendro_filter.row === false

	  if (params.dendro_filter.row === false) {
	    // $(params.root+' .slider_row').slider('enable');
	    d3.select(params.root + ' .slider_row').style('opacity', 1).style('pointer-events', 'all');
	  }

	  d3.selectAll(params.root + ' .toggle_row_order .btn').attr('disabled', null);

	  if (params.dendro_filter.col === false) {
	    // $(params.root+' .slider_col').slider('enable');
	    d3.select(params.root + ' .slider_col').style('opacity', 1).style('pointer-events', 'all');
	  }

	  d3.selectAll(params.root + ' .toggle_col_order .btn').attr('disabled', null);

	  d3.selectAll(params.root + ' .gene_search_button .btn').attr('disabled', null);

	  params.viz.run_trans = false;

	  // d3.selectAll(params.root+' .category_section')
	  //   .on('click', category_key_click)
	  //   .select('text')
	  //   .style('opacity',1);
	};

/***/ },
/* 142 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function update_reorder_buttons(tmp_config, params) {
	  _.each(['row', 'col'], function (inst_rc) {

	    var other_rc;
	    if (inst_rc === 'row') {
	      other_rc = 'col';
	    } else {
	      other_rc = 'row';
	    }

	    d3.selectAll(params.root + ' .toggle_' + other_rc + '_order .btn').filter(function () {
	      return d3.select(this).attr('name') === tmp_config.inst_order[inst_rc];
	    }).classed('active', true);
	  });
	};

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var remove_node_cats = __webpack_require__(144);

	module.exports = function modify_row_node_cats(cat_data, inst_nodes) {

	  var cat_type_num = 0;
	  var inst_index = 0;
	  var inst_cat_title;
	  var inst_cats;
	  var inst_members;
	  var inst_name;
	  var inst_category;
	  var inst_cat_name;
	  var inst_full_cat;
	  var inst_cat_num;

	  // loop through row nodes
	  //////////////////////////
	  _.each(inst_nodes, function (inst_node) {

	    inst_name = inst_node.name;
	    cat_type_num = 0;

	    remove_node_cats(inst_node);

	    // loop through each category type
	    _.each(cat_data, function (inst_cat_data) {

	      inst_cat_title = inst_cat_data.cat_title;
	      inst_cats = inst_cat_data.cats;

	      // initialize with no category
	      inst_category = 'false';
	      inst_index = -1;

	      inst_cat_num = 0;
	      // loop through each category in the category-type
	      _.each(inst_cats, function (inst_cat) {

	        inst_cat_name = inst_cat.cat_name;
	        inst_members = inst_cat.members;

	        // add category if node is a member
	        if (_.contains(inst_members, inst_name)) {

	          inst_category = inst_cat_name;
	          inst_index = inst_cat_num;
	        }

	        inst_cat_num = inst_cat_num + 1;
	      });

	      inst_full_cat = inst_cat_title + ': ' + inst_category;

	      inst_node['cat-' + String(cat_type_num)] = inst_full_cat;
	      inst_node['cat_' + String(cat_type_num) + '_index'] = inst_index;

	      cat_type_num = cat_type_num + 1;
	    });
	  });
		};

/***/ },
/* 144 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function remove_node_cats(inst_node) {

	  var all_props = _.keys(inst_node);

	  _.each(all_props, function (inst_prop) {

	    if (inst_prop.indexOf('cat-') > -1) {
	      delete inst_node[inst_prop];
	    }

	    if (inst_prop.indexOf('cat_') > -1) {
	      delete inst_node[inst_prop];
	    }
	  });
		};

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var sim_click = __webpack_require__(117);

	module.exports = function quick_cluster() {
	  /* eslint-disable */

	  function run(params) {

	    var x_trans = Number(d3.select(params.root + ' .expand_button').attr('x').replace('px', ''));
	    var y_trans = Number(d3.select(params.root + ' .expand_button').attr('y').replace('px', ''));

	    var wait_click = 0;
	    var wait_real_click = 400;
	    setTimeout(sim_click, wait_click, params, 'single', x_trans, y_trans);
	    setTimeout(click_menu_button, wait_real_click, params);

	    setTimeout(reset_cluster_order, 1500, params);
	  }

	  function get_duration() {
	    return 3500;
	  }

	  function click_menu_button(params) {
	    $(params.root + ' .expand_button').d3Click();
	  };

	  function reset_cluster_order(params) {
	    click_reorder_button(params, 'row', 'clust');
	    click_reorder_button(params, 'col', 'clust');
	  }

	  function click_reorder_button(params, inst_rc, inst_order) {
	    var inst_button = d3.selectAll('.toggle_' + inst_rc + '_order .btn').filter(function () {
	      return this.__data__ == inst_order;
	    })[0];

	    $(inst_button).click();
	  }

	  // allows doubleclicking on d3 element
	  jQuery.fn.d3Click = function () {
	    this.each(function (i, e) {
	      var evt = document.createEvent("MouseEvents");
	      evt.initMouseEvent("click", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
	      e.dispatchEvent(evt);
	    });
	  };

	  return {
	    run: run,
	    get_duration: get_duration
	  };
		};

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var demo_text = __webpack_require__(114);
	var highlight_sidebar_element = __webpack_require__(120);
	var change_groups = __webpack_require__(140);

	module.exports = function play_groups() {
	  /* eslint-disable */

	  function run(params) {

	    var text = 'Identify row and column groups\nof varying sizes using ' + ' the\nsliders and dendrogram';
	    demo_text(params, text, 10000);

	    setTimeout(highlight_sidebar_element, 3000, params, 'slider_col', 7000);

	    setTimeout(change_group_slider, 4000, params, 'row', 3);
	    setTimeout(change_group_slider, 5000, params, 'row', 4);
	    setTimeout(change_group_slider, 6000, params, 'row', 5);
	    setTimeout(change_group_slider, 7000, params, 'row', 6);
	    setTimeout(change_group_slider, 8000, params, 'row', 7);
	    setTimeout(change_group_slider, 9000, params, 'row', 5);
	  }

	  function get_duration() {
	    return 11000;
	  }

	  function change_group_slider(params, inst_rc, inst_value) {
	    $(cgm.params.root + ' .slider_col').slider("value", inst_value / 10);
	    change_groups(cgm, inst_rc, inst_value);
	  }

	  return {
	    run: run,
	    get_duration: get_duration
	  };
		};

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var demo_text = __webpack_require__(114);
	var sim_click = __webpack_require__(117);

	module.exports = function play_category() {
	  /* eslint-disable */

	  function run(params) {

	    var text = 'Row and column categories\ncan be use to reorder\nby double-clicking';
	    demo_text(params, text, 7000);

	    var inst_element = d3.selectAll(params.root + ' .col_cat_super').filter(function () {
	      return this.__data__ === 'cat-1';
	    })[0];

	    var tmp_pos = d3.select('.col_cat_super').attr('transform');
	    var x_trans = Number(tmp_pos.split('(')[1].split(',')[0].replace(')', '')) + 20;
	    var y_trans = Number(tmp_pos.split(',')[1].replace(')', ''));

	    var wait_click = 4000;
	    setTimeout(sim_click, wait_click, params, 'double', x_trans, y_trans);

	    var wait_reorder = wait_click + 300;
	    setTimeout(fire_double_click_row, wait_reorder, params, inst_element);
	  }

	  function get_duration() {
	    return 8000;
	  }

	  function fire_double_click_row(params, inst_element) {
	    $(inst_element).d3DblClick();
	  }

	  // allows doubleclicking on d3 element
	  jQuery.fn.d3DblClick = function () {
	    this.each(function (i, e) {
	      var evt = document.createEvent("MouseEvents");
	      evt.initMouseEvent("dblclick", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
	      e.dispatchEvent(evt);
	    });
	  };
	  return {
	    run: run,
	    get_duration: get_duration
	  };
		};

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var demo_text = __webpack_require__(114);
	var toggle_play_button = __webpack_require__(149);

	module.exports = function play_conclusion() {

	  function run(params) {
	    var text_1 = "Clustergrammer is built with gene\nexpression data in mind" + " and interfaces\nwith several Ma'ayan lab web tools";
	    var text_2 = "The example data being visualized is\ngene expression data" + " obtained from the\nCancer Cell Line Encyclopedia";
	    var text_3 = "For more information please view\nthe help documentation";

	    setTimeout(demo_text, 0, params, text_1, 4500);
	    setTimeout(demo_text, 4500, params, text_2, 4500);
	    setTimeout(demo_text, 9000, params, text_3, 4500);

	    setTimeout(reset_demo, 14000, params);
	  }

	  function reset_demo(params) {

	    // prevent more than one demo from running at once 
	    d3.select(params.root + ' .play_button').classed('running_demo', false);

	    toggle_play_button(params, true);
	  }

	  function get_duration() {
	    return 12000;
	  }

	  return {
	    run: run,
	    get_duration: get_duration
	  };
		};

/***/ },
/* 149 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function toggle_play_button(params, show) {

	  if (show === false) {
	    d3.select(params.root + ' .play_button').transition().duration(500).style('opacity', 0);
	  } else {
	    d3.select(params.root + ' .play_button').transition().duration(500).style('opacity', 1);

	    $.unblockUI();
	  }
		};

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var demo_text = __webpack_require__(114);
	var sim_click = __webpack_require__(117);

	module.exports = function play_menu_button() {
	  /* eslint-disable */

	  function run(params) {

	    var text = 'View additional controls\nby clicking the menu button';
	    demo_text(params, text, 4000);

	    // var inst_element = get_row_element(params, 'EGFR');

	    // var group_trans = d3.select(inst_element).attr('transform');

	    // var container_trans = d3.select(params.root+' .clust_container')
	    //   .attr('transform')
	    //   .split(',')[1].replace(')','');

	    // var x_trans = params.viz.norm_labels.width.row * 0.9;

	    // var row_trans = group_trans.split(',')[1].replace(')','');
	    // var y_trans = String(Number(row_trans) + Number(container_trans) + 
	    //   params.viz.rect_height/2);

	    var x_trans = Number(d3.select(params.root + ' .expand_button').attr('x').replace('px', ''));
	    var y_trans = Number(d3.select(params.root + ' .expand_button').attr('y').replace('px', ''));

	    var wait_click = 3000;
	    var wait_real_click = 3400;
	    setTimeout(sim_click, wait_click, params, 'single', x_trans, y_trans);
	    setTimeout(click_menu_button, wait_real_click, params);
	  }

	  function get_duration() {
	    return 5000;
	  }

	  function click_menu_button(params) {
	    $(params.root + ' .expand_button').d3Click();
	  };

	  function get_row_element(params, inst_row) {

	    var inst_element = d3.selectAll(params.root + ' .row_label_group').filter(function () {
	      var inst_data = this.__data__;
	      return inst_data.name == inst_row;
	    })[0][0];

	    return inst_element;
	  }

	  // allows doubleclicking on d3 element
	  jQuery.fn.d3Click = function () {
	    this.each(function (i, e) {
	      var evt = document.createEvent("MouseEvents");
	      evt.initMouseEvent("click", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
	      e.dispatchEvent(evt);
	    });
	  };

	  // allows doubleclicking on d3 element
	  jQuery.fn.d3DblClick = function () {
	    this.each(function (i, e) {
	      var evt = document.createEvent("MouseEvents");
	      evt.initMouseEvent("dblclick", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
	      e.dispatchEvent(evt);
	    });
	  };
	  return {
	    run: run,
	    get_duration: get_duration
	  };
		};

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var make_play_button = __webpack_require__(152);
	var make_demo_text_containers = __webpack_require__(153);

	module.exports = function ini_demo() {

	  var cgm = this;
	  var params = cgm.params;

	  make_play_button(cgm);

	  var demo_text_size = 30;
	  make_demo_text_containers(params, demo_text_size);
		};

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var position_play_button = __webpack_require__(104);

	module.exports = function make_play_button(cgm) {

	  var params = cgm.params;

	  if (d3.select(params.root + ' .play_button').empty()) {

	    var play_button = d3.select(params.root + ' .viz_svg').append('g').classed('play_button', true).classed('running_demo', false);

	    position_play_button(params);

	    play_button.append('circle').style('r', 45).style('fill', 'white').style('stroke', 'black').style('stroke-width', '3px').style('opacity', 0.5);

	    play_button.append('path').attr('d', function () {

	      var tri_w = 40;
	      var tri_h = 22;
	      var tri_offset = 15;

	      return 'M-' + tri_offset + ',-' + tri_h + ' l ' + tri_w + ',' + tri_h + ' l -' + tri_w + ',' + tri_h + ' z ';
	    }).style('fill', 'black').style('opacity', 0.5);

	    // mouseover behavior
	    play_button.on('mouseover', function () {
	      d3.select(this).select('path').style('fill', 'red').style('opacity', 1);

	      d3.select(this).select('circle').style('opacity', 1);
	    }).on('mouseout', function () {
	      d3.select(this).select('path').style('fill', 'black').style('opacity', 0.5);
	      d3.select(this).select('circle').style('opacity', 0.5);
	    }).on('click', function () {
	      // running from anonymous function to keep this defined correctly 
	      cgm.play_demo();
	    });
	  }
		};

/***/ },
/* 153 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function make_demo_text_containers(params, demo_text_size) {

	  if (d3.select(params.root + ' .demo_group').empty()) {

	    var clust_transform = d3.select(params.root + ' .clust_container').attr('transform');
	    var clust_x = Number(clust_transform.split('(')[1].split(',')[0]);
	    var clust_y = Number(clust_transform.split(',')[1].replace(')', ''));

	    // demo text container 
	    var demo_group = d3.select(params.root + ' .viz_svg').append('g').classed('demo_group', true).attr('transform', function () {
	      var pos_x = clust_x + 20;
	      var pos_y = clust_y + 40;
	      return 'translate(' + pos_x + ',' + pos_y + ')';
	    });

	    demo_group.append('rect').classed('rect_1', true);

	    demo_group.append('rect').classed('rect_2', true);

	    demo_group.append('rect').classed('rect_3', true);

	    var shift_height = 1.3 * demo_text_size;

	    demo_group.append('text').attr('id', 'text_1').attr('font-size', demo_text_size + 'px').attr('font-weight', 1000).attr('font-family', '"Helvetica Neue", Helvetica, Arial, sans-serif');

	    demo_group.append('text').attr('id', 'text_2').attr('font-size', demo_text_size + 'px').attr('font-weight', 1000).attr('font-family', '"Helvetica Neue", Helvetica, Arial, sans-serif').attr('transform', function () {
	      return 'translate(0,' + String(shift_height) + ')';
	    });

	    demo_group.append('text').attr('id', 'text_3').attr('font-size', demo_text_size + 'px').attr('font-weight', 1000).attr('font-family', '"Helvetica Neue", Helvetica, Arial, sans-serif').attr('transform', function () {
	      return 'translate(0,' + String(2 * shift_height) + ')';
	    });
	  }
		};

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var filter_network_using_new_nodes = __webpack_require__(11);
	var update_viz_with_network = __webpack_require__(125);

	module.exports = function filter_viz_using_nodes(new_nodes) {

	  var new_network_data = filter_network_using_new_nodes(this.config, new_nodes);
	  update_viz_with_network(this, new_network_data);
		};

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var filter_network_using_new_nodes = __webpack_require__(11);
	var update_viz_with_network = __webpack_require__(125);

	module.exports = function filter_viz_using_names(names) {
	  var external_cgm = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];


	  // names is an object with row and column names that will be used to filter
	  // the matrix

	  var cgm;
	  if (external_cgm === false) {
	    cgm = this;
	  } else {
	    cgm = external_cgm;
	  }

	  var params = cgm.params;
	  var new_nodes = {};
	  var found_nodes;

	  _.each(['row', 'col'], function (inst_rc) {

	    // I'm requiring view 0
	    // var orig_nodes = params.network_data.views[0].nodes[inst_rc+'_nodes'];
	    var orig_nodes = params.inst_nodes[inst_rc + '_nodes'];

	    if (_.has(names, inst_rc)) {

	      var inst_names = names[inst_rc];
	      found_nodes = $.grep(orig_nodes, function (d) {
	        return $.inArray(d.name, inst_names) > -1;
	      });
	    } else {
	      found_nodes = orig_nodes;
	    }

	    new_nodes[inst_rc + '_nodes'] = found_nodes;
	  });

	  // new_nodes.col_nodes = params.network_data.col_nodes;

	  var new_network_data = filter_network_using_new_nodes(cgm.config, new_nodes);

	  // takes entire cgm object
	  // last argument tells it to not preserve categoty colors
	  update_viz_with_network(cgm, new_network_data);
		};

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var make_row_cat = __webpack_require__(108);
	var calc_viz_params = __webpack_require__(15);
	var resize_viz = __webpack_require__(86);
	var modify_row_node_cats = __webpack_require__(143);

	module.exports = function update_cats(cgm, cat_data) {

	  // do not change column category info
	  var col_cat_colors = cgm.params.viz.cat_colors.col;

	  modify_row_node_cats(cat_data, cgm.params.network_data.row_nodes);
	  // modify the current inst copy of nodes
	  modify_row_node_cats(cat_data, cgm.params.inst_nodes.row_nodes);

	  // recalculate the visualization parameters using the updated network_data
	  cgm.params = calc_viz_params(cgm.params, false);

	  make_row_cat(cgm.params, true);
	  resize_viz(cgm);

	  cgm.params.new_cat_data = cat_data;

	  cgm.params.viz.cat_colors.col = col_cat_colors;
		};

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var make_row_cat = __webpack_require__(108);
	var calc_viz_params = __webpack_require__(15);
	var resize_viz = __webpack_require__(86);
	var modify_row_node_cats = __webpack_require__(143);
	var make_default_cat_data = __webpack_require__(158);

	module.exports = function reset_cats() {

	  var tmp_cgm = this;

	  var cat_data = make_default_cat_data(tmp_cgm);

	  // do not change column category info
	  var col_cat_colors = tmp_cgm.params.viz.cat_colors.col;

	  modify_row_node_cats(cat_data, tmp_cgm.params.network_data.row_nodes);
	  // modify the current inst copy of nodes
	  modify_row_node_cats(cat_data, tmp_cgm.params.inst_nodes.row_nodes);

	  // recalculate the visualization parameters using the updated network_data
	  tmp_cgm.params = calc_viz_params(tmp_cgm.params, false);

	  make_row_cat(tmp_cgm.params, true);
	  resize_viz(tmp_cgm);

	  tmp_cgm.params.new_cat_data = cat_data;

	  tmp_cgm.params.viz.cat_colors.col = col_cat_colors;
		};

/***/ },
/* 158 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function make_default_cat_data(cgm) {

	  // only row category resetting is supported currently

	  // get row_nodes from config, since this is has the original network
	  var row_nodes = cgm.config.network_data.row_nodes;
	  var title_sep = ': ';

	  // contains all the category information stored as an array of
	  // cat_type
	  var cat_data = [];
	  var cat_type;
	  var cat_info;
	  var found_cat_title;
	  var found_cat_name;
	  var cat_name;

	  _.each(row_nodes, function (inst_node) {

	    var all_props = _.keys(inst_node);

	    _.each(all_props, function (inst_prop) {

	      if (inst_prop.indexOf('cat-') > -1) {

	        cat_name = inst_node[inst_prop];

	        // default title and name
	        var cat_title = inst_prop;
	        cat_name = inst_node[inst_prop];
	        var cat_string = inst_node[inst_prop];
	        var cat_row_name = inst_node.name;

	        if (cat_string.indexOf(title_sep) > -1) {
	          cat_title = cat_string.split(title_sep)[0];
	          cat_name = cat_string.split(title_sep)[1];
	        }

	        // cat_data is empty
	        if (cat_data.length === 0) {

	          add_new_cat_type(cat_title, cat_name, cat_row_name);

	          // cat_data is not empty
	        } else {

	          // look for cat_title in cat_data
	          found_cat_title = false;
	          _.each(cat_data, function (inst_cat_type) {

	            // check each cat_type object for a matching title
	            if (cat_title === inst_cat_type.cat_title) {
	              found_cat_title = true;

	              // check if cat_name is in cats
	              found_cat_name = false;
	              _.each(inst_cat_type.cats, function (inst_cat_obj) {

	                // found category name, add cat_row_name to members
	                if (cat_name === inst_cat_obj.cat_name) {
	                  found_cat_name = true;

	                  // add cat_row_name to members
	                  inst_cat_obj.members.push(cat_row_name);
	                }
	              });

	              // did not find cat name in cat_type - add cat_info for new
	              // category
	              if (found_cat_name === false) {
	                cat_info = {};
	                cat_info.cat_name = cat_name;
	                cat_info.members = [];
	                cat_info.members.push(cat_row_name);
	                inst_cat_type.cats.push(cat_info);
	              }
	            }
	          });

	          // did not find category type, initialize category type object
	          if (found_cat_title === false) {

	            add_new_cat_type(cat_title, cat_name, cat_row_name);
	          }
	        }
	      }
	    });
	  });

	  function add_new_cat_type(cat_title, cat_name, cat_row_name) {

	    // initialize cat_type object to push to cat_data
	    cat_type = {};
	    cat_type.cat_title = cat_title;
	    cat_type.cats = [];

	    // initialize cat_info (e.g. 'true' category has members [...])
	    cat_info = {};
	    cat_info.cat_name = cat_name;
	    cat_info.members = [];
	    cat_info.members.push(cat_row_name);

	    cat_type.cats.push(cat_info);

	    cat_data.push(cat_type);
	  }

	  return cat_data;
	};

/***/ },
/* 159 */
/***/ function(module, exports) {

	module.exports = d3;

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var core = __webpack_require__(161);

	/**
	 * math.js factory function. Creates a new instance of math.js
	 *
	 * @param {Object} [config] Available configuration options:
	 *                            {number} epsilon
	 *                              Minimum relative difference between two
	 *                              compared values, used by all comparison functions.
	 *                            {string} matrix
	 *                              A string 'matrix' (default) or 'array'.
	 *                            {string} number
	 *                              A string 'number' (default), 'bignumber', or
	 *                              'fraction'
	 *                            {number} precision
	 *                              The number of significant digits for BigNumbers.
	 *                              Not applicable for Numbers.
	 *                            {boolean} predictable
	 *                              Predictable output type of functions. When true,
	 *                              output type depends only on the input types. When
	 *                              false (default), output type can vary depending
	 *                              on input values. For example `math.sqrt(-2)`
	 *                              returns `NaN` when predictable is false, and
	 *                              returns `complex('2i')` when true.
	 */
	function create(config) {
	  // create a new math.js instance
	  var math = core.create(config);
	  math.create = create;

	  // import data types, functions, constants, expression parser, etc.
	  math['import'](__webpack_require__(173));

	  return math;
	}

	// return a new instance of math.js
	module.exports = create();

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

		module.exports = __webpack_require__(162);

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isFactory = __webpack_require__(163).isFactory;
	var deepExtend = __webpack_require__(163).deepExtend;
	var typedFactory = __webpack_require__(164);
	var emitter = __webpack_require__(168);

	var importFactory = __webpack_require__(170);
	var configFactory = __webpack_require__(172);

	/**
	 * Math.js core. Creates a new, empty math.js instance
	 * @param {Object} [options] Available options:
	 *                            {number} epsilon
	 *                              Minimum relative difference between two
	 *                              compared values, used by all comparison functions.
	 *                            {string} matrix
	 *                              A string 'Matrix' (default) or 'Array'.
	 *                            {string} number
	 *                              A string 'number' (default), 'BigNumber', or 'Fraction'
	 *                            {number} precision
	 *                              The number of significant digits for BigNumbers.
	 *                              Not applicable for Numbers.
	 *                            {boolean} predictable
	 *                              Predictable output type of functions. When true,
	 *                              output type depends only on the input types. When
	 *                              false (default), output type can vary depending
	 *                              on input values. For example `math.sqrt(-2)`
	 *                              returns `NaN` when predictable is false, and
	 *                              returns `complex('2i')` when true.
	 * @returns {Object} Returns a bare-bone math.js instance containing
	 *                   functions:
	 *                   - `import` to add new functions
	 *                   - `config` to change configuration
	 *                   - `on`, `off`, `once`, `emit` for events
	 */
	exports.create = function create(options) {
	  // simple test for ES5 support
	  if (typeof Object.create !== 'function') {
	    throw new Error('ES5 not supported by this JavaScript engine. ' + 'Please load the es5-shim and es5-sham library for compatibility.');
	  }

	  // cached factories and instances
	  var factories = [];
	  var instances = [];

	  // create a namespace for the mathjs instance, and attach emitter functions
	  var math = emitter.mixin({});
	  math.type = {};
	  math.expression = {
	    transform: Object.create(math)
	  };

	  // create a new typed instance
	  math.typed = typedFactory.create(math.type);

	  // create configuration options. These are private
	  var _config = {
	    // minimum relative difference between two compared values,
	    // used by all comparison functions
	    epsilon: 1e-12,

	    // type of default matrix output. Choose 'matrix' (default) or 'array'
	    matrix: 'Matrix',

	    // type of default number output. Choose 'number' (default) 'BigNumber', or 'Fraction
	    number: 'number',

	    // number of significant digits in BigNumbers
	    precision: 64,

	    // predictable output type of functions. When true, output type depends only
	    // on the input types. When false (default), output type can vary depending
	    // on input values. For example `math.sqrt(-2)` returns `NaN` when
	    // predictable is false, and returns `complex('2i')` when true.
	    predictable: false
	  };

	  /**
	   * Load a function or data type from a factory.
	   * If the function or data type already exists, the existing instance is
	   * returned.
	   * @param {{type: string, name: string, factory: Function}} factory
	   * @returns {*}
	   */
	  function load(factory) {
	    if (!isFactory(factory)) {
	      throw new Error('Factory object with properties `type`, `name`, and `factory` expected');
	    }

	    var index = factories.indexOf(factory);
	    var instance;
	    if (index === -1) {
	      // doesn't yet exist
	      if (factory.math === true) {
	        // pass with math namespace
	        instance = factory.factory(math.type, _config, load, math.typed, math);
	      } else {
	        instance = factory.factory(math.type, _config, load, math.typed);
	      }

	      // append to the cache
	      factories.push(factory);
	      instances.push(instance);
	    } else {
	      // already existing function, return the cached instance
	      instance = instances[index];
	    }

	    return instance;
	  }

	  // load the import and config functions
	  math['import'] = load(importFactory);
	  math['config'] = load(configFactory);

	  // apply options
	  if (options) {
	    math.config(options);
	  }

	  return math;
	};

/***/ },
/* 163 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Clone an object
	 *
	 *     clone(x)
	 *
	 * Can clone any primitive type, array, and object.
	 * If x has a function clone, this function will be invoked to clone the object.
	 *
	 * @param {*} x
	 * @return {*} clone
	 */

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	exports.clone = function clone(x) {
	  var type = typeof x === 'undefined' ? 'undefined' : _typeof(x);

	  // immutable primitive types
	  if (type === 'number' || type === 'string' || type === 'boolean' || x === null || x === undefined) {
	    return x;
	  }

	  // use clone function of the object when available
	  if (typeof x.clone === 'function') {
	    return x.clone();
	  }

	  // array
	  if (Array.isArray(x)) {
	    return x.map(function (value) {
	      return clone(value);
	    });
	  }

	  if (x instanceof Number) return new Number(x.valueOf());
	  if (x instanceof String) return new String(x.valueOf());
	  if (x instanceof Boolean) return new Boolean(x.valueOf());
	  if (x instanceof Date) return new Date(x.valueOf());
	  if (x && x.isBigNumber === true) return x; // bignumbers are immutable
	  if (x instanceof RegExp) throw new TypeError('Cannot clone ' + x); // TODO: clone a RegExp

	  // object
	  var m = {};
	  for (var key in x) {
	    if (x.hasOwnProperty(key)) {
	      m[key] = clone(x[key]);
	    }
	  }
	  return m;
	};

	/**
	 * Extend object a with the properties of object b
	 * @param {Object} a
	 * @param {Object} b
	 * @return {Object} a
	 */
	exports.extend = function (a, b) {
	  for (var prop in b) {
	    if (b.hasOwnProperty(prop)) {
	      a[prop] = b[prop];
	    }
	  }
	  return a;
	};

	/**
	 * Deep extend an object a with the properties of object b
	 * @param {Object} a
	 * @param {Object} b
	 * @returns {Object}
	 */
	exports.deepExtend = function deepExtend(a, b) {
	  // TODO: add support for Arrays to deepExtend
	  if (Array.isArray(b)) {
	    throw new TypeError('Arrays are not supported by deepExtend');
	  }

	  for (var prop in b) {
	    if (b.hasOwnProperty(prop)) {
	      if (b[prop] && b[prop].constructor === Object) {
	        if (a[prop] === undefined) {
	          a[prop] = {};
	        }
	        if (a[prop].constructor === Object) {
	          deepExtend(a[prop], b[prop]);
	        } else {
	          a[prop] = b[prop];
	        }
	      } else if (Array.isArray(b[prop])) {
	        throw new TypeError('Arrays are not supported by deepExtend');
	      } else {
	        a[prop] = b[prop];
	      }
	    }
	  }
	  return a;
	};

	/**
	 * Deep test equality of all fields in two pairs of arrays or objects.
	 * @param {Array | Object} a
	 * @param {Array | Object} b
	 * @returns {boolean}
	 */
	exports.deepEqual = function deepEqual(a, b) {
	  var prop, i, len;
	  if (Array.isArray(a)) {
	    if (!Array.isArray(b)) {
	      return false;
	    }

	    if (a.length != b.length) {
	      return false;
	    }

	    for (i = 0, len = a.length; i < len; i++) {
	      if (!exports.deepEqual(a[i], b[i])) {
	        return false;
	      }
	    }
	    return true;
	  } else if (a instanceof Object) {
	    if (Array.isArray(b) || !(b instanceof Object)) {
	      return false;
	    }

	    for (prop in a) {
	      //noinspection JSUnfilteredForInLoop
	      if (!exports.deepEqual(a[prop], b[prop])) {
	        return false;
	      }
	    }
	    for (prop in b) {
	      //noinspection JSUnfilteredForInLoop
	      if (!exports.deepEqual(a[prop], b[prop])) {
	        return false;
	      }
	    }
	    return true;
	  } else {
	    return (typeof a === 'undefined' ? 'undefined' : _typeof(a)) === (typeof b === 'undefined' ? 'undefined' : _typeof(b)) && a == b;
	  }
	};

	/**
	 * Test whether the current JavaScript engine supports Object.defineProperty
	 * @returns {boolean} returns true if supported
	 */
	exports.canDefineProperty = function () {
	  // test needed for broken IE8 implementation
	  try {
	    if (Object.defineProperty) {
	      Object.defineProperty({}, 'x', { get: function get() {} });
	      return true;
	    }
	  } catch (e) {}

	  return false;
	};

	/**
	 * Attach a lazy loading property to a constant.
	 * The given function `fn` is called once when the property is first requested.
	 * On older browsers (<IE8), the function will fall back to direct evaluation
	 * of the properties value.
	 * @param {Object} object   Object where to add the property
	 * @param {string} prop     Property name
	 * @param {Function} fn     Function returning the property value. Called
	 *                          without arguments.
	 */
	exports.lazy = function (object, prop, fn) {
	  if (exports.canDefineProperty()) {
	    var _uninitialized = true;
	    var _value;
	    Object.defineProperty(object, prop, {
	      get: function get() {
	        if (_uninitialized) {
	          _value = fn();
	          _uninitialized = false;
	        }
	        return _value;
	      },

	      set: function set(value) {
	        _value = value;
	        _uninitialized = false;
	      },

	      configurable: true,
	      enumerable: true
	    });
	  } else {
	    // fall back to immediate evaluation
	    object[prop] = fn();
	  }
	};

	/**
	 * Traverse a path into an object.
	 * When a namespace is missing, it will be created
	 * @param {Object} object
	 * @param {string} path   A dot separated string like 'name.space'
	 * @return {Object} Returns the object at the end of the path
	 */
	exports.traverse = function (object, path) {
	  var obj = object;

	  if (path) {
	    var names = path.split('.');
	    for (var i = 0; i < names.length; i++) {
	      var name = names[i];
	      if (!(name in obj)) {
	        obj[name] = {};
	      }
	      obj = obj[name];
	    }
	  }

	  return obj;
	};

	/**
	 * Test whether an object is a factory. a factory has fields:
	 *
	 * - factory: function (type: Object, config: Object, load: function, typed: function [, math: Object])   (required)
	 * - name: string (optional)
	 * - path: string    A dot separated path (optional)
	 * - math: boolean   If true (false by default), the math namespace is passed
	 *                   as fifth argument of the factory function
	 *
	 * @param {*} object
	 * @returns {boolean}
	 */
	exports.isFactory = function (object) {
	  return object && typeof object.factory === 'function';
	};

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var typedFunction = __webpack_require__(165);
	var digits = __webpack_require__(166).digits;

	// returns a new instance of typed-function
	var _createTyped = function createTyped() {
	  // initially, return the original instance of typed-function
	  // consecutively, return a new instance from typed.create.
	  _createTyped = typedFunction.create;
	  return typedFunction;
	};

	/**
	 * Factory function for creating a new typed instance
	 * @param {Object} type   Object with data types like Complex and BigNumber
	 * @returns {Function}
	 */
	exports.create = function create(type) {
	  // TODO: typed-function must be able to silently ignore signatures with unknown data types

	  // get a new instance of typed-function
	  var typed = _createTyped();

	  // define all types. The order of the types determines in which order function
	  // arguments are type-checked (so for performance it's important to put the
	  // most used types first).
	  typed.types = [{ name: 'number', test: function test(x) {
	      return typeof x === 'number';
	    } }, { name: 'Complex', test: function test(x) {
	      return x && x.isComplex;
	    } }, { name: 'BigNumber', test: function test(x) {
	      return x && x.isBigNumber;
	    } }, { name: 'Fraction', test: function test(x) {
	      return x && x.isFraction;
	    } }, { name: 'Unit', test: function test(x) {
	      return x && x.isUnit;
	    } }, { name: 'string', test: function test(x) {
	      return typeof x === 'string';
	    } }, { name: 'Array', test: Array.isArray }, { name: 'Matrix', test: function test(x) {
	      return x && x.isMatrix;
	    } }, { name: 'DenseMatrix', test: function test(x) {
	      return x && x.isDenseMatrix;
	    } }, { name: 'SparseMatrix', test: function test(x) {
	      return x && x.isSparseMatrix;
	    } }, { name: 'ImmutableDenseMatrix', test: function test(x) {
	      return x && x.isImmutableDenseMatrix;
	    } }, { name: 'Range', test: function test(x) {
	      return x && x.isRange;
	    } }, { name: 'Index', test: function test(x) {
	      return x && x.isIndex;
	    } }, { name: 'boolean', test: function test(x) {
	      return typeof x === 'boolean';
	    } }, { name: 'ResultSet', test: function test(x) {
	      return x && x.isResultSet;
	    } }, { name: 'Help', test: function test(x) {
	      return x && x.isHelp;
	    } }, { name: 'function', test: function test(x) {
	      return typeof x === 'function';
	    } }, { name: 'Date', test: function test(x) {
	      return x instanceof Date;
	    } }, { name: 'RegExp', test: function test(x) {
	      return x instanceof RegExp;
	    } }, { name: 'Object', test: function test(x) {
	      return (typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object';
	    } }, { name: 'null', test: function test(x) {
	      return x === null;
	    } }, { name: 'undefined', test: function test(x) {
	      return x === undefined;
	    } }];

	  // TODO: add conversion from BigNumber to number?
	  typed.conversions = [{
	    from: 'number',
	    to: 'BigNumber',
	    convert: function convert(x) {
	      // note: conversion from number to BigNumber can fail if x has >15 digits
	      if (digits(x) > 15) {
	        throw new TypeError('Cannot implicitly convert a number with >15 significant digits to BigNumber ' + '(value: ' + x + '). ' + 'Use function bignumber(x) to convert to BigNumber.');
	      }
	      return new type.BigNumber(x);
	    }
	  }, {
	    from: 'number',
	    to: 'Complex',
	    convert: function convert(x) {
	      return new type.Complex(x, 0);
	    }
	  }, {
	    from: 'number',
	    to: 'string',
	    convert: function convert(x) {
	      return x + '';
	    }
	  }, {
	    from: 'BigNumber',
	    to: 'Complex',
	    convert: function convert(x) {
	      return new type.Complex(x.toNumber(), 0);
	    }
	  }, {
	    from: 'Fraction',
	    to: 'Complex',
	    convert: function convert(x) {
	      return new type.Complex(x.valueOf(), 0);
	    }
	  }, {
	    from: 'number',
	    to: 'Fraction',
	    convert: function convert(x) {
	      if (digits(x) > 15) {
	        throw new TypeError('Cannot implicitly convert a number with >15 significant digits to Fraction ' + '(value: ' + x + '). ' + 'Use function fraction(x) to convert to Fraction.');
	      }
	      return new type.Fraction(x);
	    }
	  }, {
	    // FIXME: add conversion from Fraction to number, for example for `sqrt(fraction(1,3))`
	    //  from: 'Fraction',
	    //  to: 'number',
	    //  convert: function (x) {
	    //    return x.valueOf();
	    //  }
	    //}, {
	    from: 'string',
	    to: 'number',
	    convert: function convert(x) {
	      var n = Number(x);
	      if (isNaN(n)) {
	        throw new Error('Cannot convert "' + x + '" to a number');
	      }
	      return n;
	    }
	  }, {
	    from: 'boolean',
	    to: 'number',
	    convert: function convert(x) {
	      return +x;
	    }
	  }, {
	    from: 'boolean',
	    to: 'BigNumber',
	    convert: function convert(x) {
	      return new type.BigNumber(+x);
	    }
	  }, {
	    from: 'boolean',
	    to: 'Fraction',
	    convert: function convert(x) {
	      return new type.Fraction(+x);
	    }
	  }, {
	    from: 'boolean',
	    to: 'string',
	    convert: function convert(x) {
	      return +x;
	    }
	  }, {
	    from: 'null',
	    to: 'number',
	    convert: function convert() {
	      return 0;
	    }
	  }, {
	    from: 'null',
	    to: 'string',
	    convert: function convert() {
	      return 'null';
	    }
	  }, {
	    from: 'null',
	    to: 'BigNumber',
	    convert: function convert() {
	      return new type.BigNumber(0);
	    }
	  }, {
	    from: 'null',
	    to: 'Fraction',
	    convert: function convert() {
	      return new type.Fraction(0);
	    }
	  }, {
	    from: 'Array',
	    to: 'Matrix',
	    convert: function convert(array) {
	      // TODO: how to decide on the right type of matrix to create?
	      return new type.DenseMatrix(array);
	    }
	  }, {
	    from: 'Matrix',
	    to: 'Array',
	    convert: function convert(matrix) {
	      return matrix.valueOf();
	    }
	  }];

	  return typed;
	};

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * typed-function
	 *
	 * Type checking for JavaScript functions
	 *
	 * https://github.com/josdejong/typed-function
	 */
	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	(function (root, factory) {
	  if (true) {
	    // AMD. Register as an anonymous module.
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {
	    // OldNode. Does not work with strict CommonJS, but
	    // only CommonJS-like environments that support module.exports,
	    // like OldNode.
	    module.exports = factory();
	  } else {
	    // Browser globals (root is window)
	    root.typed = factory();
	  }
	})(undefined, function () {
	  // factory function to create a new instance of typed-function
	  // TODO: allow passing configuration, types, tests via the factory function
	  function create() {
	    /**
	     * Get a type test function for a specific data type
	     * @param {string} name                   Name of a data type like 'number' or 'string'
	     * @returns {Function(obj: *) : boolean}  Returns a type testing function.
	     *                                        Throws an error for an unknown type.
	     */
	    function getTypeTest(name) {
	      var test;
	      for (var i = 0; i < typed.types.length; i++) {
	        var entry = typed.types[i];
	        if (entry.name === name) {
	          test = entry.test;
	          break;
	        }
	      }

	      if (!test) {
	        var hint;
	        for (i = 0; i < typed.types.length; i++) {
	          entry = typed.types[i];
	          if (entry.name.toLowerCase() == name.toLowerCase()) {
	            hint = entry.name;
	            break;
	          }
	        }

	        throw new Error('Unknown type "' + name + '"' + (hint ? '. Did you mean "' + hint + '"?' : ''));
	      }
	      return test;
	    }

	    /**
	     * Retrieve the function name from a set of functions, and check
	     * whether the name of all functions match (if given)
	     * @param {Array.<function>} fns
	     */
	    function getName(fns) {
	      var name = '';

	      for (var i = 0; i < fns.length; i++) {
	        var fn = fns[i];

	        // merge function name when this is a typed function
	        if (fn.signatures && fn.name != '') {
	          if (name == '') {
	            name = fn.name;
	          } else if (name != fn.name) {
	            var err = new Error('Function names do not match (expected: ' + name + ', actual: ' + fn.name + ')');
	            err.data = {
	              actual: fn.name,
	              expected: name
	            };
	            throw err;
	          }
	        }
	      }

	      return name;
	    }

	    /**
	     * Create an ArgumentsError. Creates messages like:
	     *
	     *   Unexpected type of argument (expected: ..., actual: ..., index: ...)
	     *   Too few arguments (expected: ..., index: ...)
	     *   Too many arguments (expected: ..., actual: ...)
	     *
	     * @param {String} fn         Function name
	     * @param {number} argCount   Number of arguments
	     * @param {Number} index      Current argument index
	     * @param {*} actual          Current argument
	     * @param {string} [expected] An optional, comma separated string with
	     *                            expected types on given index
	     * @extends Error
	     */
	    function createError(fn, argCount, index, actual, expected) {
	      var actualType = getTypeOf(actual);
	      var _expected = expected ? expected.split(',') : null;
	      var _fn = fn || 'unnamed';
	      var anyType = _expected && contains(_expected, 'any');
	      var message;
	      var data = {
	        fn: fn,
	        index: index,
	        actual: actual,
	        expected: _expected
	      };

	      if (_expected) {
	        if (argCount > index && !anyType) {
	          // unexpected type
	          message = 'Unexpected type of argument in function ' + _fn + ' (expected: ' + _expected.join(' or ') + ', actual: ' + actualType + ', index: ' + index + ')';
	        } else {
	          // too few arguments
	          message = 'Too few arguments in function ' + _fn + ' (expected: ' + _expected.join(' or ') + ', index: ' + index + ')';
	        }
	      } else {
	        // too many arguments
	        message = 'Too many arguments in function ' + _fn + ' (expected: ' + index + ', actual: ' + argCount + ')';
	      }

	      var err = new TypeError(message);
	      err.data = data;
	      return err;
	    }

	    /**
	     * Collection with function references (local shortcuts to functions)
	     * @constructor
	     * @param {string} [name='refs']  Optional name for the refs, used to generate
	     *                                JavaScript code
	     */
	    function Refs(name) {
	      this.name = name || 'refs';
	      this.categories = {};
	    }

	    /**
	     * Add a function reference.
	     * @param {Function} fn
	     * @param {string} [category='fn']    A function category, like 'fn' or 'signature'
	     * @returns {string} Returns the function name, for example 'fn0' or 'signature2'
	     */
	    Refs.prototype.add = function (fn, category) {
	      var cat = category || 'fn';
	      if (!this.categories[cat]) this.categories[cat] = [];

	      var index = this.categories[cat].indexOf(fn);
	      if (index == -1) {
	        index = this.categories[cat].length;
	        this.categories[cat].push(fn);
	      }

	      return cat + index;
	    };

	    /**
	     * Create code lines for all function references
	     * @returns {string} Returns the code containing all function references
	     */
	    Refs.prototype.toCode = function () {
	      var code = [];
	      var path = this.name + '.categories';
	      var categories = this.categories;

	      for (var cat in categories) {
	        if (categories.hasOwnProperty(cat)) {
	          var category = categories[cat];

	          for (var i = 0; i < category.length; i++) {
	            code.push('var ' + cat + i + ' = ' + path + '[\'' + cat + '\'][' + i + '];');
	          }
	        }
	      }

	      return code.join('\n');
	    };

	    /**
	     * A function parameter
	     * @param {string | string[] | Param} types    A parameter type like 'string',
	     *                                             'number | boolean'
	     * @param {boolean} [varArgs=false]            Variable arguments if true
	     * @constructor
	     */
	    function Param(types, varArgs) {
	      // parse the types, can be a string with types separated by pipe characters |
	      if (typeof types === 'string') {
	        // parse variable arguments operator (ellipses '...number')
	        var _types = types.trim();
	        var _varArgs = _types.substr(0, 3) === '...';
	        if (_varArgs) {
	          _types = _types.substr(3);
	        }
	        if (_types === '') {
	          this.types = ['any'];
	        } else {
	          this.types = _types.split('|');
	          for (var i = 0; i < this.types.length; i++) {
	            this.types[i] = this.types[i].trim();
	          }
	        }
	      } else if (Array.isArray(types)) {
	        this.types = types;
	      } else if (types instanceof Param) {
	        return types.clone();
	      } else {
	        throw new Error('String or Array expected');
	      }

	      // can hold a type to which to convert when handling this parameter
	      this.conversions = [];
	      // TODO: implement better API for conversions, be able to add conversions via constructor (support a new type Object?)

	      // variable arguments
	      this.varArgs = _varArgs || varArgs || false;

	      // check for any type arguments
	      this.anyType = this.types.indexOf('any') !== -1;
	    }

	    /**
	     * Order Params
	     * any type ('any') will be ordered last, and object as second last (as other
	     * types may be an object as well, like Array).
	     *
	     * @param {Param} a
	     * @param {Param} b
	     * @returns {number} Returns 1 if a > b, -1 if a < b, and else 0.
	     */
	    Param.compare = function (a, b) {
	      // TODO: simplify parameter comparison, it's a mess
	      if (a.anyType) return 1;
	      if (b.anyType) return -1;

	      if (contains(a.types, 'Object')) return 1;
	      if (contains(b.types, 'Object')) return -1;

	      if (a.hasConversions()) {
	        if (b.hasConversions()) {
	          var i, ac, bc;

	          for (i = 0; i < a.conversions.length; i++) {
	            if (a.conversions[i] !== undefined) {
	              ac = a.conversions[i];
	              break;
	            }
	          }

	          for (i = 0; i < b.conversions.length; i++) {
	            if (b.conversions[i] !== undefined) {
	              bc = b.conversions[i];
	              break;
	            }
	          }

	          return typed.conversions.indexOf(ac) - typed.conversions.indexOf(bc);
	        } else {
	          return 1;
	        }
	      } else {
	        if (b.hasConversions()) {
	          return -1;
	        } else {
	          // both params have no conversions
	          var ai, bi;

	          for (i = 0; i < typed.types.length; i++) {
	            if (typed.types[i].name === a.types[0]) {
	              ai = i;
	              break;
	            }
	          }

	          for (i = 0; i < typed.types.length; i++) {
	            if (typed.types[i].name === b.types[0]) {
	              bi = i;
	              break;
	            }
	          }

	          return ai - bi;
	        }
	      }
	    };

	    /**
	     * Test whether this parameters types overlap an other parameters types.
	     * @param {Param} other
	     * @return {boolean} Returns true when there are conflicting types
	     */
	    Param.prototype.overlapping = function (other) {
	      for (var i = 0; i < this.types.length; i++) {
	        if (contains(other.types, this.types[i])) {
	          return true;
	        }
	      }
	      return false;
	    };

	    /**
	     * Create a clone of this param
	     * @returns {Param} Returns a cloned version of this param
	     */
	    Param.prototype.clone = function () {
	      var param = new Param(this.types.slice(), this.varArgs);
	      param.conversions = this.conversions.slice();
	      return param;
	    };

	    /**
	     * Test whether this parameter contains conversions
	     * @returns {boolean} Returns true if the parameter contains one or
	     *                    multiple conversions.
	     */
	    Param.prototype.hasConversions = function () {
	      return this.conversions.length > 0;
	    };

	    /**
	     * Tests whether this parameters contains any of the provided types
	     * @param {Object} types  A Map with types, like {'number': true}
	     * @returns {boolean}     Returns true when the parameter contains any
	     *                        of the provided types
	     */
	    Param.prototype.contains = function (types) {
	      for (var i = 0; i < this.types.length; i++) {
	        if (types[this.types[i]]) {
	          return true;
	        }
	      }
	      return false;
	    };

	    /**
	     * Return a string representation of this params types, like 'string' or
	     * 'number | boolean' or '...number'
	     * @param {boolean} [toConversion]   If true, the returned types string
	     *                                   contains the types where the parameter
	     *                                   will convert to. If false (default)
	     *                                   the "from" types are returned
	     * @returns {string}
	     */
	    Param.prototype.toString = function (toConversion) {
	      var types = [];
	      var keys = {};

	      for (var i = 0; i < this.types.length; i++) {
	        var conversion = this.conversions[i];
	        var type = toConversion && conversion ? conversion.to : this.types[i];
	        if (!(type in keys)) {
	          keys[type] = true;
	          types.push(type);
	        }
	      }

	      return (this.varArgs ? '...' : '') + types.join('|');
	    };

	    /**
	     * A function signature
	     * @param {string | string[] | Param[]} params
	     *                         Array with the type(s) of each parameter,
	     *                         or a comma separated string with types
	     * @param {Function} fn    The actual function
	     * @constructor
	     */
	    function Signature(params, fn) {
	      var _params;
	      if (typeof params === 'string') {
	        _params = params !== '' ? params.split(',') : [];
	      } else if (Array.isArray(params)) {
	        _params = params;
	      } else {
	        throw new Error('string or Array expected');
	      }

	      this.params = new Array(_params.length);
	      for (var i = 0; i < _params.length; i++) {
	        var param = new Param(_params[i]);
	        this.params[i] = param;
	        if (i === _params.length - 1) {
	          // the last argument
	          this.varArgs = param.varArgs;
	        } else {
	          // non-last argument
	          if (param.varArgs) {
	            throw new SyntaxError('Unexpected variable arguments operator "..."');
	          }
	        }
	      }

	      this.fn = fn;
	    }

	    /**
	     * Create a clone of this signature
	     * @returns {Signature} Returns a cloned version of this signature
	     */
	    Signature.prototype.clone = function () {
	      return new Signature(this.params.slice(), this.fn);
	    };

	    /**
	     * Expand a signature: split params with union types in separate signatures
	     * For example split a Signature "string | number" into two signatures.
	     * @return {Signature[]} Returns an array with signatures (at least one)
	     */
	    Signature.prototype.expand = function () {
	      var signatures = [];

	      function recurse(signature, path) {
	        if (path.length < signature.params.length) {
	          var i, newParam, conversion;

	          var param = signature.params[path.length];
	          if (param.varArgs) {
	            // a variable argument. do not split the types in the parameter
	            newParam = param.clone();

	            // add conversions to the parameter
	            // recurse for all conversions
	            for (i = 0; i < typed.conversions.length; i++) {
	              conversion = typed.conversions[i];
	              if (!contains(param.types, conversion.from) && contains(param.types, conversion.to)) {
	                var j = newParam.types.length;
	                newParam.types[j] = conversion.from;
	                newParam.conversions[j] = conversion;
	              }
	            }

	            recurse(signature, path.concat(newParam));
	          } else {
	            // split each type in the parameter
	            for (i = 0; i < param.types.length; i++) {
	              recurse(signature, path.concat(new Param(param.types[i])));
	            }

	            // recurse for all conversions
	            for (i = 0; i < typed.conversions.length; i++) {
	              conversion = typed.conversions[i];
	              if (!contains(param.types, conversion.from) && contains(param.types, conversion.to)) {
	                newParam = new Param(conversion.from);
	                newParam.conversions[0] = conversion;
	                recurse(signature, path.concat(newParam));
	              }
	            }
	          }
	        } else {
	          signatures.push(new Signature(path, signature.fn));
	        }
	      }

	      recurse(this, []);

	      return signatures;
	    };

	    /**
	     * Compare two signatures.
	     *
	     * When two params are equal and contain conversions, they will be sorted
	     * by lowest index of the first conversions.
	     *
	     * @param {Signature} a
	     * @param {Signature} b
	     * @returns {number} Returns 1 if a > b, -1 if a < b, and else 0.
	     */
	    Signature.compare = function (a, b) {
	      if (a.params.length > b.params.length) return 1;
	      if (a.params.length < b.params.length) return -1;

	      // count the number of conversions
	      var i;
	      var len = a.params.length; // a and b have equal amount of params
	      var ac = 0;
	      var bc = 0;
	      for (i = 0; i < len; i++) {
	        if (a.params[i].hasConversions()) ac++;
	        if (b.params[i].hasConversions()) bc++;
	      }

	      if (ac > bc) return 1;
	      if (ac < bc) return -1;

	      // compare the order per parameter
	      for (i = 0; i < a.params.length; i++) {
	        var cmp = Param.compare(a.params[i], b.params[i]);
	        if (cmp !== 0) {
	          return cmp;
	        }
	      }

	      return 0;
	    };

	    /**
	     * Test whether any of the signatures parameters has conversions
	     * @return {boolean} Returns true when any of the parameters contains
	     *                   conversions.
	     */
	    Signature.prototype.hasConversions = function () {
	      for (var i = 0; i < this.params.length; i++) {
	        if (this.params[i].hasConversions()) {
	          return true;
	        }
	      }
	      return false;
	    };

	    /**
	     * Test whether this signature should be ignored.
	     * Checks whether any of the parameters contains a type listed in
	     * typed.ignore
	     * @return {boolean} Returns true when the signature should be ignored
	     */
	    Signature.prototype.ignore = function () {
	      // create a map with ignored types
	      var types = {};
	      for (var i = 0; i < typed.ignore.length; i++) {
	        types[typed.ignore[i]] = true;
	      }

	      // test whether any of the parameters contains this type
	      for (i = 0; i < this.params.length; i++) {
	        if (this.params[i].contains(types)) {
	          return true;
	        }
	      }

	      return false;
	    };

	    /**
	     * Generate the code to invoke this signature
	     * @param {Refs} refs
	     * @param {string} prefix
	     * @returns {string} Returns code
	     */
	    Signature.prototype.toCode = function (refs, prefix) {
	      var code = [];

	      var args = new Array(this.params.length);
	      for (var i = 0; i < this.params.length; i++) {
	        var param = this.params[i];
	        var conversion = param.conversions[0];
	        if (param.varArgs) {
	          args[i] = 'varArgs';
	        } else if (conversion) {
	          args[i] = refs.add(conversion.convert, 'convert') + '(arg' + i + ')';
	        } else {
	          args[i] = 'arg' + i;
	        }
	      }

	      var ref = this.fn ? refs.add(this.fn, 'signature') : undefined;
	      if (ref) {
	        return prefix + 'return ' + ref + '(' + args.join(', ') + '); // signature: ' + this.params.join(', ');
	      }

	      return code.join('\n');
	    };

	    /**
	     * Return a string representation of the signature
	     * @returns {string}
	     */
	    Signature.prototype.toString = function () {
	      return this.params.join(', ');
	    };

	    /**
	     * A group of signatures with the same parameter on given index
	     * @param {Param[]} path
	     * @param {Signature} [signature]
	     * @param {Node[]} childs
	     * @constructor
	     */
	    function Node(path, signature, childs) {
	      this.path = path || [];
	      this.param = path[path.length - 1] || null;
	      this.signature = signature || null;
	      this.childs = childs || [];
	    }

	    /**
	     * Generate code for this group of signatures
	     * @param {Refs} refs
	     * @param {string} prefix
	     * @param {Node | undefined} [anyType]  Sibling of this node with any type parameter
	     * @returns {string} Returns the code as string
	     */
	    Node.prototype.toCode = function (refs, prefix, anyType) {
	      // TODO: split this function in multiple functions, it's too large
	      var code = [];

	      if (this.param) {
	        var index = this.path.length - 1;
	        var conversion = this.param.conversions[0];
	        var comment = '// type: ' + (conversion ? conversion.from + ' (convert to ' + conversion.to + ')' : this.param);

	        // non-root node (path is non-empty)
	        if (this.param.varArgs) {
	          if (this.param.anyType) {
	            // variable arguments with any type
	            code.push(prefix + 'if (arguments.length > ' + index + ') {');
	            code.push(prefix + '  var varArgs = [];');
	            code.push(prefix + '  for (var i = ' + index + '; i < arguments.length; i++) {');
	            code.push(prefix + '    varArgs.push(arguments[i]);');
	            code.push(prefix + '  }');
	            code.push(this.signature.toCode(refs, prefix + '  '));
	            code.push(prefix + '}');
	          } else {
	            // variable arguments with a fixed type
	            var getTests = function (types, arg) {
	              var tests = [];
	              for (var i = 0; i < types.length; i++) {
	                tests[i] = refs.add(getTypeTest(types[i]), 'test') + '(' + arg + ')';
	              }
	              return tests.join(' || ');
	            }.bind(this);

	            var allTypes = this.param.types;
	            var exactTypes = [];
	            for (var i = 0; i < allTypes.length; i++) {
	              if (this.param.conversions[i] === undefined) {
	                exactTypes.push(allTypes[i]);
	              }
	            }

	            code.push(prefix + 'if (' + getTests(allTypes, 'arg' + index) + ') { ' + comment);
	            code.push(prefix + '  var varArgs = [arg' + index + '];');
	            code.push(prefix + '  for (var i = ' + (index + 1) + '; i < arguments.length; i++) {');
	            code.push(prefix + '    if (' + getTests(exactTypes, 'arguments[i]') + ') {');
	            code.push(prefix + '      varArgs.push(arguments[i]);');

	            for (var i = 0; i < allTypes.length; i++) {
	              var conversion_i = this.param.conversions[i];
	              if (conversion_i) {
	                var test = refs.add(getTypeTest(allTypes[i]), 'test');
	                var convert = refs.add(conversion_i.convert, 'convert');
	                code.push(prefix + '    }');
	                code.push(prefix + '    else if (' + test + '(arguments[i])) {');
	                code.push(prefix + '      varArgs.push(' + convert + '(arguments[i]));');
	              }
	            }
	            code.push(prefix + '    } else {');
	            code.push(prefix + '      throw createError(name, arguments.length, i, arguments[i], \'' + exactTypes.join(',') + '\');');
	            code.push(prefix + '    }');
	            code.push(prefix + '  }');
	            code.push(this.signature.toCode(refs, prefix + '  '));
	            code.push(prefix + '}');
	          }
	        } else {
	          if (this.param.anyType) {
	            // any type
	            code.push(prefix + '// type: any');
	            code.push(this._innerCode(refs, prefix, anyType));
	          } else {
	            // regular type
	            var type = this.param.types[0];
	            var test = type !== 'any' ? refs.add(getTypeTest(type), 'test') : null;

	            code.push(prefix + 'if (' + test + '(arg' + index + ')) { ' + comment);
	            code.push(this._innerCode(refs, prefix + '  ', anyType));
	            code.push(prefix + '}');
	          }
	        }
	      } else {
	        // root node (path is empty)
	        code.push(this._innerCode(refs, prefix, anyType));
	      }

	      return code.join('\n');
	    };

	    /**
	     * Generate inner code for this group of signatures.
	     * This is a helper function of Node.prototype.toCode
	     * @param {Refs} refs
	     * @param {string} prefix
	     * @param {Node | undefined} [anyType]  Sibling of this node with any type parameter
	     * @returns {string} Returns the inner code as string
	     * @private
	     */
	    Node.prototype._innerCode = function (refs, prefix, anyType) {
	      var code = [];
	      var i;

	      if (this.signature) {
	        code.push(prefix + 'if (arguments.length === ' + this.path.length + ') {');
	        code.push(this.signature.toCode(refs, prefix + '  '));
	        code.push(prefix + '}');
	      }

	      var nextAnyType;
	      for (i = 0; i < this.childs.length; i++) {
	        if (this.childs[i].param.anyType) {
	          nextAnyType = this.childs[i];
	          break;
	        }
	      }

	      for (i = 0; i < this.childs.length; i++) {
	        code.push(this.childs[i].toCode(refs, prefix, nextAnyType));
	      }

	      if (anyType && !this.param.anyType) {
	        code.push(anyType.toCode(refs, prefix, nextAnyType));
	      }

	      var exceptions = this._exceptions(refs, prefix);
	      if (exceptions) {
	        code.push(exceptions);
	      }

	      return code.join('\n');
	    };

	    /**
	     * Generate code to throw exceptions
	     * @param {Refs} refs
	     * @param {string} prefix
	     * @returns {string} Returns the inner code as string
	     * @private
	     */
	    Node.prototype._exceptions = function (refs, prefix) {
	      var index = this.path.length;

	      if (this.childs.length === 0) {
	        // TODO: can this condition be simplified? (we have a fall-through here)
	        return [prefix + 'if (arguments.length > ' + index + ') {', prefix + '  throw createError(name, arguments.length, ' + index + ', arguments[' + index + ']);', prefix + '}'].join('\n');
	      } else {
	        var keys = {};
	        var types = [];

	        for (var i = 0; i < this.childs.length; i++) {
	          var node = this.childs[i];
	          if (node.param) {
	            for (var j = 0; j < node.param.types.length; j++) {
	              var type = node.param.types[j];
	              if (!(type in keys) && !node.param.conversions[j]) {
	                keys[type] = true;
	                types.push(type);
	              }
	            }
	          }
	        }

	        return prefix + 'throw createError(name, arguments.length, ' + index + ', arguments[' + index + '], \'' + types.join(',') + '\');';
	      }
	    };

	    /**
	     * Split all raw signatures into an array with expanded Signatures
	     * @param {Object.<string, Function>} rawSignatures
	     * @return {Signature[]} Returns an array with expanded signatures
	     */
	    function parseSignatures(rawSignatures) {
	      // FIXME: need to have deterministic ordering of signatures, do not create via object
	      var signature;
	      var keys = {};
	      var signatures = [];
	      var i;

	      for (var types in rawSignatures) {
	        if (rawSignatures.hasOwnProperty(types)) {
	          var fn = rawSignatures[types];
	          signature = new Signature(types, fn);

	          if (signature.ignore()) {
	            continue;
	          }

	          var expanded = signature.expand();

	          for (i = 0; i < expanded.length; i++) {
	            var signature_i = expanded[i];
	            var key = signature_i.toString();
	            var existing = keys[key];
	            if (!existing) {
	              keys[key] = signature_i;
	            } else {
	              var cmp = Signature.compare(signature_i, existing);
	              if (cmp < 0) {
	                // override if sorted first
	                keys[key] = signature_i;
	              } else if (cmp === 0) {
	                throw new Error('Signature "' + key + '" is defined twice');
	              }
	              // else: just ignore
	            }
	          }
	        }
	      }

	      // convert from map to array
	      for (key in keys) {
	        if (keys.hasOwnProperty(key)) {
	          signatures.push(keys[key]);
	        }
	      }

	      // order the signatures
	      signatures.sort(function (a, b) {
	        return Signature.compare(a, b);
	      });

	      // filter redundant conversions from signatures with varArgs
	      // TODO: simplify this loop or move it to a separate function
	      for (i = 0; i < signatures.length; i++) {
	        signature = signatures[i];

	        if (signature.varArgs) {
	          var index = signature.params.length - 1;
	          var param = signature.params[index];

	          var t = 0;
	          while (t < param.types.length) {
	            if (param.conversions[t]) {
	              var type = param.types[t];

	              for (var j = 0; j < signatures.length; j++) {
	                var other = signatures[j];
	                var p = other.params[index];

	                if (other !== signature && p && contains(p.types, type) && !p.conversions[index]) {
	                  // this (conversion) type already exists, remove it
	                  param.types.splice(t, 1);
	                  param.conversions.splice(t, 1);
	                  t--;
	                  break;
	                }
	              }
	            }
	            t++;
	          }
	        }
	      }

	      return signatures;
	    }

	    /**
	     * create a map with normalized signatures as key and the function as value
	     * @param {Signature[]} signatures   An array with split signatures
	     * @return {Object.<string, Function>} Returns a map with normalized
	     *                                     signatures as key, and the function
	     *                                     as value.
	     */
	    function mapSignatures(signatures) {
	      var normalized = {};

	      for (var i = 0; i < signatures.length; i++) {
	        var signature = signatures[i];
	        if (signature.fn && !signature.hasConversions()) {
	          var params = signature.params.join(',');
	          normalized[params] = signature.fn;
	        }
	      }

	      return normalized;
	    }

	    /**
	     * Parse signatures recursively in a node tree.
	     * @param {Signature[]} signatures  Array with expanded signatures
	     * @param {Param[]} path            Traversed path of parameter types
	     * @return {Node}                   Returns a node tree
	     */
	    function parseTree(signatures, path) {
	      var i, signature;
	      var index = path.length;
	      var nodeSignature;

	      var filtered = [];
	      for (i = 0; i < signatures.length; i++) {
	        signature = signatures[i];

	        // filter the first signature with the correct number of params
	        if (signature.params.length === index && !nodeSignature) {
	          nodeSignature = signature;
	        }

	        if (signature.params[index] != undefined) {
	          filtered.push(signature);
	        }
	      }

	      // sort the filtered signatures by param
	      filtered.sort(function (a, b) {
	        return Param.compare(a.params[index], b.params[index]);
	      });

	      // recurse over the signatures
	      var entries = [];
	      for (i = 0; i < filtered.length; i++) {
	        signature = filtered[i];
	        // group signatures with the same param at current index
	        var param = signature.params[index];

	        // TODO: replace the next filter loop
	        var existing = entries.filter(function (entry) {
	          return entry.param.overlapping(param);
	        })[0];

	        //var existing;
	        //for (var j = 0; j < entries.length; j++) {
	        //  if (entries[j].param.overlapping(param)) {
	        //    existing = entries[j];
	        //    break;
	        //  }
	        //}

	        if (existing) {
	          if (existing.param.varArgs) {
	            throw new Error('Conflicting types "' + existing.param + '" and "' + param + '"');
	          }
	          existing.signatures.push(signature);
	        } else {
	          entries.push({
	            param: param,
	            signatures: [signature]
	          });
	        }
	      }

	      // parse the childs
	      var childs = new Array(entries.length);
	      for (i = 0; i < entries.length; i++) {
	        var entry = entries[i];
	        childs[i] = parseTree(entry.signatures, path.concat(entry.param));
	      }

	      return new Node(path, nodeSignature, childs);
	    }

	    /**
	     * Generate an array like ['arg0', 'arg1', 'arg2']
	     * @param {number} count Number of arguments to generate
	     * @returns {Array} Returns an array with argument names
	     */
	    function getArgs(count) {
	      // create an array with all argument names
	      var args = [];
	      for (var i = 0; i < count; i++) {
	        args[i] = 'arg' + i;
	      }

	      return args;
	    }

	    /**
	     * Compose a function from sub-functions each handling a single type signature.
	     * Signatures:
	     *   typed(signature: string, fn: function)
	     *   typed(name: string, signature: string, fn: function)
	     *   typed(signatures: Object.<string, function>)
	     *   typed(name: string, signatures: Object.<string, function>)
	     *
	     * @param {string | null} name
	     * @param {Object.<string, Function>} signatures
	     * @return {Function} Returns the typed function
	     * @private
	     */
	    function _typed(name, signatures) {
	      var refs = new Refs();

	      // parse signatures, expand them
	      var _signatures = parseSignatures(signatures);
	      if (_signatures.length == 0) {
	        throw new Error('No signatures provided');
	      }

	      // parse signatures into a node tree
	      var node = parseTree(_signatures, []);

	      //var util = require('util');
	      //console.log('ROOT');
	      //console.log(util.inspect(node, { depth: null }));

	      // generate code for the typed function
	      var code = [];
	      var _name = name || '';
	      var _args = getArgs(maxParams(_signatures));
	      code.push('function ' + _name + '(' + _args.join(', ') + ') {');
	      code.push('  "use strict";');
	      code.push('  var name = \'' + _name + '\';');
	      code.push(node.toCode(refs, '  '));
	      code.push('}');

	      // generate body for the factory function
	      var body = [refs.toCode(), 'return ' + code.join('\n')].join('\n');

	      // evaluate the JavaScript code and attach function references
	      var factory = new Function(refs.name, 'createError', body);
	      var fn = factory(refs, createError);

	      //console.log('FN\n' + fn.toString()); // TODO: cleanup

	      // attach the signatures with sub-functions to the constructed function
	      fn.signatures = mapSignatures(_signatures);

	      return fn;
	    }

	    /**
	     * Calculate the maximum number of parameters in givens signatures
	     * @param {Signature[]} signatures
	     * @returns {number} The maximum number of parameters
	     */
	    function maxParams(signatures) {
	      var max = 0;

	      for (var i = 0; i < signatures.length; i++) {
	        var len = signatures[i].params.length;
	        if (len > max) {
	          max = len;
	        }
	      }

	      return max;
	    }

	    /**
	     * Get the type of a value
	     * @param {*} x
	     * @returns {string} Returns a string with the type of value
	     */
	    function getTypeOf(x) {
	      var obj;

	      for (var i = 0; i < typed.types.length; i++) {
	        var entry = typed.types[i];

	        if (entry.name === 'Object') {
	          // Array and Date are also Object, so test for Object afterwards
	          obj = entry;
	        } else {
	          if (entry.test(x)) return entry.name;
	        }
	      }

	      // at last, test whether an object
	      if (obj && obj.test(x)) return obj.name;

	      return 'unknown';
	    }

	    /**
	     * Test whether an array contains some entry
	     * @param {Array} array
	     * @param {*} entry
	     * @return {boolean} Returns true if array contains entry, false if not.
	     */
	    function contains(array, entry) {
	      return array.indexOf(entry) !== -1;
	    }

	    // data type tests
	    var types = [{ name: 'number', test: function test(x) {
	        return typeof x === 'number';
	      } }, { name: 'string', test: function test(x) {
	        return typeof x === 'string';
	      } }, { name: 'boolean', test: function test(x) {
	        return typeof x === 'boolean';
	      } }, { name: 'Function', test: function test(x) {
	        return typeof x === 'function';
	      } }, { name: 'Array', test: Array.isArray }, { name: 'Date', test: function test(x) {
	        return x instanceof Date;
	      } }, { name: 'RegExp', test: function test(x) {
	        return x instanceof RegExp;
	      } }, { name: 'Object', test: function test(x) {
	        return (typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object';
	      } }, { name: 'null', test: function test(x) {
	        return x === null;
	      } }, { name: 'undefined', test: function test(x) {
	        return x === undefined;
	      } }];

	    // configuration
	    var config = {};

	    // type conversions. Order is important
	    var conversions = [];

	    // types to be ignored
	    var ignore = [];

	    // temporary object for holding types and conversions, for constructing
	    // the `typed` function itself
	    // TODO: find a more elegant solution for this
	    var typed = {
	      config: config,
	      types: types,
	      conversions: conversions,
	      ignore: ignore
	    };

	    /**
	     * Construct the typed function itself with various signatures
	     *
	     * Signatures:
	     *
	     *   typed(signatures: Object.<string, function>)
	     *   typed(name: string, signatures: Object.<string, function>)
	     */
	    typed = _typed('typed', {
	      'Object': function Object(signatures) {
	        var fns = [];
	        for (var signature in signatures) {
	          if (signatures.hasOwnProperty(signature)) {
	            fns.push(signatures[signature]);
	          }
	        }
	        var name = getName(fns);

	        return _typed(name, signatures);
	      },
	      'string, Object': _typed,
	      // TODO: add a signature 'Array.<function>'
	      '...Function': function Function(fns) {
	        var err;
	        var name = getName(fns);
	        var signatures = {};

	        for (var i = 0; i < fns.length; i++) {
	          var fn = fns[i];

	          // test whether this is a typed-function
	          if (!(_typeof(fn.signatures) === 'object')) {
	            err = new TypeError('Function is no typed-function (index: ' + i + ')');
	            err.data = { index: i };
	            throw err;
	          }

	          // merge the signatures
	          for (var signature in fn.signatures) {
	            if (fn.signatures.hasOwnProperty(signature)) {
	              if (signatures.hasOwnProperty(signature)) {
	                if (fn.signatures[signature] !== signatures[signature]) {
	                  err = new Error('Signature "' + signature + '" is defined twice');
	                  err.data = { signature: signature };
	                  throw err;
	                }
	                // else: both signatures point to the same function, that's fine
	              } else {
	                signatures[signature] = fn.signatures[signature];
	              }
	            }
	          }
	        }

	        return _typed(name, signatures);
	      }
	    });

	    /**
	     * Find a specific signature from a (composed) typed function, for
	     * example:
	     *
	     *   typed.find(fn, ['number', 'string'])
	     *   typed.find(fn, 'number, string')
	     *
	     * Function find only only works for exact matches.
	     *
	     * @param {Function} fn                   A typed-function
	     * @param {string | string[]} signature   Signature to be found, can be
	     *                                        an array or a comma separated string.
	     * @return {Function}                     Returns the matching signature, or
	     *                                        throws an errror when no signature
	     *                                        is found.
	     */
	    function find(fn, signature) {
	      if (!fn.signatures) {
	        throw new TypeError('Function is no typed-function');
	      }

	      // normalize input
	      var arr;
	      if (typeof signature === 'string') {
	        arr = signature.split(',');
	        for (var i = 0; i < arr.length; i++) {
	          arr[i] = arr[i].trim();
	        }
	      } else if (Array.isArray(signature)) {
	        arr = signature;
	      } else {
	        throw new TypeError('String array or a comma separated string expected');
	      }

	      var str = arr.join(',');

	      // find an exact match
	      var match = fn.signatures[str];
	      if (match) {
	        return match;
	      }

	      // TODO: extend find to match non-exact signatures

	      throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + arr.join(', ') + '))');
	    }

	    /**
	     * Convert a given value to another data type.
	     * @param {*} value
	     * @param {string} type
	     */
	    function convert(value, type) {
	      var from = getTypeOf(value);

	      // check conversion is needed
	      if (type === from) {
	        return value;
	      }

	      for (var i = 0; i < typed.conversions.length; i++) {
	        var conversion = typed.conversions[i];
	        if (conversion.from === from && conversion.to === type) {
	          return conversion.convert(value);
	        }
	      }

	      throw new Error('Cannot convert from ' + from + ' to ' + type);
	    }

	    // attach types and conversions to the final `typed` function
	    typed.config = config;
	    typed.types = types;
	    typed.conversions = conversions;
	    typed.ignore = ignore;
	    typed.create = create;
	    typed.find = find;
	    typed.convert = convert;

	    // add a type
	    typed.addType = function (type) {
	      if (!type || typeof type.name !== 'string' || typeof type.test !== 'function') {
	        throw new TypeError('Object with properties {name: string, test: function} expected');
	      }

	      typed.types.push(type);
	    };

	    // add a conversion
	    typed.addConversion = function (conversion) {
	      if (!conversion || typeof conversion.from !== 'string' || typeof conversion.to !== 'string' || typeof conversion.convert !== 'function') {
	        throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');
	      }

	      typed.conversions.push(conversion);
	    };

	    return typed;
	  }

	  return create();
	});

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var NumberFormatter = __webpack_require__(167);

	/**
	 * Test whether value is a number
	 * @param {*} value
	 * @return {boolean} isNumber
	 */
	exports.isNumber = function (value) {
	  return typeof value === 'number';
	};

	/**
	 * Check if a number is integer
	 * @param {number | boolean} value
	 * @return {boolean} isInteger
	 */
	exports.isInteger = function (value) {
	  return isFinite(value) ? value == Math.round(value) : false;
	  // Note: we use ==, not ===, as we can have Booleans as well
	};

	/**
	 * Calculate the sign of a number
	 * @param {number} x
	 * @returns {*}
	 */
	exports.sign = Math.sign || function (x) {
	  if (x > 0) {
	    return 1;
	  } else if (x < 0) {
	    return -1;
	  } else {
	    return 0;
	  }
	};

	/**
	 * Convert a number to a formatted string representation.
	 *
	 * Syntax:
	 *
	 *    format(value)
	 *    format(value, options)
	 *    format(value, precision)
	 *    format(value, fn)
	 *
	 * Where:
	 *
	 *    {number} value   The value to be formatted
	 *    {Object} options An object with formatting options. Available options:
	 *                     {string} notation
	 *                         Number notation. Choose from:
	 *                         'fixed'          Always use regular number notation.
	 *                                          For example '123.40' and '14000000'
	 *                         'exponential'    Always use exponential notation.
	 *                                          For example '1.234e+2' and '1.4e+7'
	 *                         'engineering'    Always use engineering notation.
	 *                                          For example '123.4e+0' and '14.0e+6'
	 *                         'auto' (default) Regular number notation for numbers
	 *                                          having an absolute value between
	 *                                          `lower` and `upper` bounds, and uses
	 *                                          exponential notation elsewhere.
	 *                                          Lower bound is included, upper bound
	 *                                          is excluded.
	 *                                          For example '123.4' and '1.4e7'.
	 *                     {number} precision   A number between 0 and 16 to round
	 *                                          the digits of the number.
	 *                                          In case of notations 'exponential' and
	 *                                          'auto', `precision` defines the total
	 *                                          number of significant digits returned
	 *                                          and is undefined by default.
	 *                                          In case of notation 'fixed',
	 *                                          `precision` defines the number of
	 *                                          significant digits after the decimal
	 *                                          point, and is 0 by default.
	 *                     {Object} exponential An object containing two parameters,
	 *                                          {number} lower and {number} upper,
	 *                                          used by notation 'auto' to determine
	 *                                          when to return exponential notation.
	 *                                          Default values are `lower=1e-3` and
	 *                                          `upper=1e5`.
	 *                                          Only applicable for notation `auto`.
	 *    {Function} fn    A custom formatting function. Can be used to override the
	 *                     built-in notations. Function `fn` is called with `value` as
	 *                     parameter and must return a string. Is useful for example to
	 *                     format all values inside a matrix in a particular way.
	 *
	 * Examples:
	 *
	 *    format(6.4);                                        // '6.4'
	 *    format(1240000);                                    // '1.24e6'
	 *    format(1/3);                                        // '0.3333333333333333'
	 *    format(1/3, 3);                                     // '0.333'
	 *    format(21385, 2);                                   // '21000'
	 *    format(12.071, {notation: 'fixed'});                // '12'
	 *    format(2.3,    {notation: 'fixed', precision: 2});  // '2.30'
	 *    format(52.8,   {notation: 'exponential'});          // '5.28e+1'
	 *    format(12345678, {notation: 'engineering'});        // '12.345678e+6'
	 *
	 * @param {number} value
	 * @param {Object | Function | number} [options]
	 * @return {string} str The formatted value
	 */
	exports.format = function (value, options) {
	  if (typeof options === 'function') {
	    // handle format(value, fn)
	    return options(value);
	  }

	  // handle special cases
	  if (value === Infinity) {
	    return 'Infinity';
	  } else if (value === -Infinity) {
	    return '-Infinity';
	  } else if (isNaN(value)) {
	    return 'NaN';
	  }

	  // default values for options
	  var notation = 'auto';
	  var precision = undefined;

	  if (options) {
	    // determine notation from options
	    if (options.notation) {
	      notation = options.notation;
	    }

	    // determine precision from options
	    if (exports.isNumber(options)) {
	      precision = options;
	    } else if (options.precision) {
	      precision = options.precision;
	    }
	  }

	  // handle the various notations
	  switch (notation) {
	    case 'fixed':
	      return exports.toFixed(value, precision);

	    case 'exponential':
	      return exports.toExponential(value, precision);

	    case 'engineering':
	      return exports.toEngineering(value, precision);

	    case 'auto':
	      return exports.toPrecision(value, precision, options && options.exponential)

	      // remove trailing zeros after the decimal point
	      .replace(/((\.\d*?)(0+))($|e)/, function () {
	        var digits = arguments[2];
	        var e = arguments[4];
	        return digits !== '.' ? digits + e : e;
	      });

	    default:
	      throw new Error('Unknown notation "' + notation + '". ' + 'Choose "auto", "exponential", or "fixed".');
	  }
	};

	/**
	 * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
	 * @param {number} value
	 * @param {number} [precision]  Number of digits in formatted output.
	 *                              If not provided, the maximum available digits
	 *                              is used.
	 * @returns {string} str
	 */
	exports.toExponential = function (value, precision) {
	  return new NumberFormatter(value).toExponential(precision);
	};

	/**
	 * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'
	 * @param {number} value
	 * @param {number} [precision]  Number of digits in formatted output.
	 *                              If not provided, the maximum available digits
	 *                              is used.
	 * @returns {string} str
	 */
	exports.toEngineering = function (value, precision) {
	  return new NumberFormatter(value).toEngineering(precision);
	};

	/**
	 * Format a number with fixed notation.
	 * @param {number} value
	 * @param {number} [precision=0]        Optional number of decimals after the
	 *                                      decimal point. Zero by default.
	 */
	exports.toFixed = function (value, precision) {
	  return new NumberFormatter(value).toFixed(precision);
	};

	/**
	 * Format a number with a certain precision
	 * @param {number} value
	 * @param {number} [precision=undefined] Optional number of digits.
	 * @param {{lower: number, upper: number}} [options]  By default:
	 *                                                    lower = 1e-3 (excl)
	 *                                                    upper = 1e+5 (incl)
	 * @return {string}
	 */
	exports.toPrecision = function (value, precision, options) {
	  return new NumberFormatter(value).toPrecision(precision, options);
	};

	/**
	 * Count the number of significant digits of a number.
	 *
	 * For example:
	 *   2.34 returns 3
	 *   0.0034 returns 2
	 *   120.5e+30 returns 4
	 *
	 * @param {number} value
	 * @return {number} digits   Number of significant digits
	 */
	exports.digits = function (value) {
	  return value.toExponential().replace(/e.*$/, '') // remove exponential notation
	  .replace(/^0\.?0*|\./, '') // remove decimal point and leading zeros
	  .length;
	};

	/**
	 * Minimum number added to one that makes the result different than one
	 */
	exports.DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;

	/**
	 * Compares two floating point numbers.
	 * @param {number} x          First value to compare
	 * @param {number} y          Second value to compare
	 * @param {number} [epsilon]  The maximum relative difference between x and y
	 *                            If epsilon is undefined or null, the function will
	 *                            test whether x and y are exactly equal.
	 * @return {boolean} whether the two numbers are nearly equal
	*/
	exports.nearlyEqual = function (x, y, epsilon) {
	  // if epsilon is null or undefined, test whether x and y are exactly equal
	  if (epsilon == null) {
	    return x == y;
	  }

	  // use "==" operator, handles infinities
	  if (x == y) {
	    return true;
	  }

	  // NaN
	  if (isNaN(x) || isNaN(y)) {
	    return false;
	  }

	  // at this point x and y should be finite
	  if (isFinite(x) && isFinite(y)) {
	    // check numbers are very close, needed when comparing numbers near zero
	    var diff = Math.abs(x - y);
	    if (diff < exports.DBL_EPSILON) {
	      return true;
	    } else {
	      // use relative error
	      return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;
	    }
	  }

	  // Infinite and Number or negative Infinite and positive Infinite cases
	  return false;
	};

/***/ },
/* 167 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Format a number using methods toPrecision, toFixed, toExponential.
	 * @param {number | string} value
	 * @constructor
	 */

	function NumberFormatter(value) {
	  // parse the input value
	  var match = String(value).toLowerCase().match(/^0*?(-?)(\d+\.?\d*)(e([+-]?\d+))?$/);
	  if (!match) {
	    throw new SyntaxError('Invalid number');
	  }

	  var sign = match[1];
	  var coefficients = match[2];
	  var exponent = parseFloat(match[4] || '0');

	  var dot = coefficients.indexOf('.');
	  exponent += dot !== -1 ? dot - 1 : coefficients.length - 1;

	  this.sign = sign;
	  this.coefficients = coefficients.replace('.', '') // remove the dot (must be removed before removing leading zeros)
	  .replace(/^0*/, function (zeros) {
	    // remove leading zeros, add their count to the exponent
	    exponent -= zeros.length;
	    return '';
	  }).replace(/0*$/, '') // remove trailing zeros
	  .split('').map(function (d) {
	    return parseInt(d);
	  });

	  if (this.coefficients.length === 0) {
	    this.coefficients.push(0);
	    exponent++;
	  }

	  this.exponent = exponent;
	}

	/**
	 * Format a number with engineering notation.
	 * @param {number} [precision=0]        Optional number of decimals after the
	 *                                      decimal point. Zero by default.
	 */
	NumberFormatter.prototype.toEngineering = function (precision) {
	  var rounded = this.roundDigits(precision);

	  var e = rounded.exponent;
	  var c = rounded.coefficients;

	  // find nearest lower multiple of 3 for exponent
	  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3;

	  // concatenate coefficients with necessary zeros
	  var significandsDiff = e >= 0 ? e : Math.abs(newExp);

	  // add zeros if necessary (for ex: 1e+8)
	  if (c.length - 1 < significandsDiff) c = c.concat(zeros(significandsDiff - (c.length - 1)));

	  // find difference in exponents
	  var expDiff = Math.abs(e - newExp);

	  var decimalIdx = 1;
	  var str = '';

	  // push decimal index over by expDiff times
	  while (--expDiff >= 0) {
	    decimalIdx++;
	  } // if all coefficient values are zero after the decimal point, don't add a decimal value. 
	  // otherwise concat with the rest of the coefficients
	  var decimals = c.slice(decimalIdx).join('');
	  var decimalVal = decimals.match(/[1-9]/) ? '.' + decimals : '';

	  str = c.slice(0, decimalIdx).join('') + decimalVal;

	  str += 'e' + (e >= 0 ? '+' : '') + newExp.toString();
	  return rounded.sign + str;
	};

	/**
	 * Format a number with fixed notation.
	 * @param {number} [precision=0]        Optional number of decimals after the
	 *                                      decimal point. Zero by default.
	 */
	NumberFormatter.prototype.toFixed = function (precision) {
	  var rounded = this.roundDigits(this.exponent + 1 + (precision || 0));
	  var c = rounded.coefficients;
	  var p = rounded.exponent + 1; // exponent may have changed

	  // append zeros if needed
	  var pp = p + (precision || 0);
	  if (c.length < pp) {
	    c = c.concat(zeros(pp - c.length));
	  }

	  // prepend zeros if needed
	  if (p < 0) {
	    c = zeros(-p + 1).concat(c);
	    p = 1;
	  }

	  // insert a dot if needed
	  if (precision) {
	    c.splice(p, 0, p === 0 ? '0.' : '.');
	  }

	  return this.sign + c.join('');
	};

	/**
	 * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
	 * @param {number} [precision]  Number of digits in formatted output.
	 *                              If not provided, the maximum available digits
	 *                              is used.
	 */
	NumberFormatter.prototype.toExponential = function (precision) {
	  // round if needed, else create a clone
	  var rounded = precision ? this.roundDigits(precision) : this.clone();
	  var c = rounded.coefficients;
	  var e = rounded.exponent;

	  // append zeros if needed
	  if (c.length < precision) {
	    c = c.concat(zeros(precision - c.length));
	  }

	  // format as `C.CCCe+EEE` or `C.CCCe-EEE`
	  var first = c.shift();
	  return this.sign + first + (c.length > 0 ? '.' + c.join('') : '') + 'e' + (e >= 0 ? '+' : '') + e;
	};

	/**
	 * Format a number with a certain precision
	 * @param {number} [precision=undefined] Optional number of digits.
	 * @param {{lower: number | undefined, upper: number | undefined}} [options]
	 *                                       By default:
	 *                                         lower = 1e-3 (excl)
	 *                                         upper = 1e+5 (incl)
	 * @return {string}
	 */
	NumberFormatter.prototype.toPrecision = function (precision, options) {
	  // determine lower and upper bound for exponential notation.
	  var lower = options && options.lower !== undefined ? options.lower : 1e-3;
	  var upper = options && options.upper !== undefined ? options.upper : 1e+5;

	  var abs = Math.abs(Math.pow(10, this.exponent));
	  if (abs < lower || abs >= upper) {
	    // exponential notation
	    return this.toExponential(precision);
	  } else {
	    var rounded = precision ? this.roundDigits(precision) : this.clone();
	    var c = rounded.coefficients;
	    var e = rounded.exponent;

	    // append trailing zeros
	    if (c.length < precision) {
	      c = c.concat(zeros(precision - c.length));
	    }

	    // append trailing zeros
	    // TODO: simplify the next statement
	    c = c.concat(zeros(e - c.length + 1 + (c.length < precision ? precision - c.length : 0)));

	    // prepend zeros
	    c = zeros(-e).concat(c);

	    var dot = e > 0 ? e : 0;
	    if (dot < c.length - 1) {
	      c.splice(dot + 1, 0, '.');
	    }

	    return this.sign + c.join('');
	  }
	};

	/**
	 * Crete a clone of the NumberFormatter
	 * @return {NumberFormatter} Returns a clone of the NumberFormatter
	 */
	NumberFormatter.prototype.clone = function () {
	  var clone = new NumberFormatter('0');
	  clone.sign = this.sign;
	  clone.coefficients = this.coefficients.slice(0);
	  clone.exponent = this.exponent;
	  return clone;
	};

	/**
	 * Round the number of digits of a number *
	 * @param {number} precision  A positive integer
	 * @return {NumberFormatter}  Returns a new NumberFormatter with the rounded
	 *                            digits
	 */
	NumberFormatter.prototype.roundDigits = function (precision) {
	  var rounded = this.clone();
	  var c = rounded.coefficients;

	  // prepend zeros if needed
	  while (precision <= 0) {
	    c.unshift(0);
	    rounded.exponent++;
	    precision++;
	  }

	  if (c.length > precision) {
	    var removed = c.splice(precision, c.length - precision);

	    if (removed[0] >= 5) {
	      var i = precision - 1;
	      c[i]++;
	      while (c[i] === 10) {
	        c.pop();
	        if (i === 0) {
	          c.unshift(0);
	          rounded.exponent++;
	          i++;
	        }
	        i--;
	        c[i]++;
	      }
	    }
	  }

	  return rounded;
	};

	/**
	 * Create an array filled with zeros.
	 * @param {number} length
	 * @return {Array}
	 */
	function zeros(length) {
	  var arr = [];
	  for (var i = 0; i < length; i++) {
	    arr.push(0);
	  }
	  return arr;
	}

	module.exports = NumberFormatter;

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Emitter = __webpack_require__(169);

	/**
	 * Extend given object with emitter functions `on`, `off`, `once`, `emit`
	 * @param {Object} obj
	 * @return {Object} obj
	 */
	exports.mixin = function (obj) {
	  // create event emitter
	  var emitter = new Emitter();

	  // bind methods to obj (we don't want to expose the emitter.e Array...)
	  obj.on = emitter.on.bind(emitter);
	  obj.off = emitter.off.bind(emitter);
	  obj.once = emitter.once.bind(emitter);
	  obj.emit = emitter.emit.bind(emitter);

	  return obj;
	};

/***/ },
/* 169 */
/***/ function(module, exports) {

	"use strict";

	function E() {
	  // Keep this empty so it's easier to inherit from
	  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
	}

	E.prototype = {
	  on: function on(name, callback, ctx) {
	    var e = this.e || (this.e = {});

	    (e[name] || (e[name] = [])).push({
	      fn: callback,
	      ctx: ctx
	    });

	    return this;
	  },

	  once: function once(name, callback, ctx) {
	    var self = this;
	    function listener() {
	      self.off(name, listener);
	      callback.apply(ctx, arguments);
	    };

	    listener._ = callback;
	    return this.on(name, listener, ctx);
	  },

	  emit: function emit(name) {
	    var data = [].slice.call(arguments, 1);
	    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
	    var i = 0;
	    var len = evtArr.length;

	    for (i; i < len; i++) {
	      evtArr[i].fn.apply(evtArr[i].ctx, data);
	    }

	    return this;
	  },

	  off: function off(name, callback) {
	    var e = this.e || (this.e = {});
	    var evts = e[name];
	    var liveEvents = [];

	    if (evts && callback) {
	      for (var i = 0, len = evts.length; i < len; i++) {
	        if (evts[i].fn !== callback && evts[i].fn._ !== callback) liveEvents.push(evts[i]);
	      }
	    }

	    // Remove event from queue to prevent memory leak
	    // Suggested by https://github.com/lazd
	    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910

	    liveEvents.length ? e[name] = liveEvents : delete e[name];

	    return this;
	  }
	};

		module.exports = E;

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var lazy = __webpack_require__(163).lazy;
	var isFactory = __webpack_require__(163).isFactory;
	var traverse = __webpack_require__(163).traverse;
	var extend = __webpack_require__(163).extend;
	var ArgumentsError = __webpack_require__(171);

	function factory(type, config, load, typed, math) {
	  /**
	   * Import functions from an object or a module
	   *
	   * Syntax:
	   *
	   *    math.import(object)
	   *    math.import(object, options)
	   *
	   * Where:
	   *
	   * - `object: Object`
	   *   An object with functions to be imported.
	   * - `options: Object` An object with import options. Available options:
	   *   - `override: boolean`
	   *     If true, existing functions will be overwritten. False by default.
	   *   - `silent: boolean`
	   *     If true, the function will not throw errors on duplicates or invalid
	   *     types. False by default.
	   *   - `wrap: boolean`
	   *     If true, the functions will be wrapped in a wrapper function
	   *     which converts data types like Matrix to primitive data types like Array.
	   *     The wrapper is needed when extending math.js with libraries which do not
	   *     support these data type. False by default.
	   *
	   * Examples:
	   *
	   *    // define new functions and variables
	   *    math.import({
	   *      myvalue: 42,
	   *      hello: function (name) {
	   *        return 'hello, ' + name + '!';
	   *      }
	   *    });
	   *
	   *    // use the imported function and variable
	   *    math.myvalue * 2;               // 84
	   *    math.hello('user');             // 'hello, user!'
	   *
	   *    // import the npm module 'numbers'
	   *    // (must be installed first with `npm install numbers`)
	   *    math.import(require('numbers'), {wrap: true});
	   *
	   *    math.fibonacci(7); // returns 13
	   *
	   * @param {Object | Array} object   Object with functions to be imported.
	   * @param {Object} [options]        Import options.
	   */
	  function math_import(object, options) {
	    var num = arguments.length;
	    if (num != 1 && num != 2) {
	      throw new ArgumentsError('import', num, 1, 2);
	    }

	    if (!options) {
	      options = {};
	    }

	    if (isFactory(object)) {
	      _importFactory(object, options);
	    }
	    // TODO: allow a typed-function with name too
	    else if (Array.isArray(object)) {
	        object.forEach(function (entry) {
	          math_import(entry, options);
	        });
	      } else if ((typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object') {
	        // a map with functions
	        for (var name in object) {
	          if (object.hasOwnProperty(name)) {
	            var value = object[name];
	            if (isSupportedType(value)) {
	              _import(name, value, options);
	            } else if (isFactory(object)) {
	              _importFactory(object, options);
	            } else {
	              math_import(value, options);
	            }
	          }
	        }
	      } else {
	        if (!options.silent) {
	          throw new TypeError('Factory, Object, or Array expected');
	        }
	      }
	  }

	  /**
	   * Add a property to the math namespace and create a chain proxy for it.
	   * @param {string} name
	   * @param {*} value
	   * @param {Object} options  See import for a description of the options
	   * @private
	   */
	  function _import(name, value, options) {
	    if (options.wrap && typeof value === 'function') {
	      // create a wrapper around the function
	      value = _wrap(value);
	    }

	    if (isTypedFunction(math[name]) && isTypedFunction(value)) {
	      if (options.override) {
	        // give the typed function the right name
	        value = typed(name, value.signatures);
	      } else {
	        // merge the existing and typed function
	        value = typed(math[name], value);
	      }

	      math[name] = value;
	      _importTransform(name, value);
	      math.emit('import', name, function resolver() {
	        return value;
	      });
	      return;
	    }

	    if (math[name] === undefined || options.override) {
	      math[name] = value;
	      _importTransform(name, value);
	      math.emit('import', name, function resolver() {
	        return value;
	      });
	      return;
	    }

	    if (!options.silent) {
	      throw new Error('Cannot import "' + name + '": already exists');
	    }
	  }

	  function _importTransform(name, value) {
	    if (value && typeof value.transform === 'function') {
	      math.expression.transform[name] = value.transform;
	    }
	  }

	  /**
	   * Create a wrapper a round an function which converts the arguments
	   * to their primitive values (like convert a Matrix to Array)
	   * @param {Function} fn
	   * @return {Function} Returns the wrapped function
	   * @private
	   */
	  function _wrap(fn) {
	    var wrapper = function wrapper() {
	      var args = [];
	      for (var i = 0, len = arguments.length; i < len; i++) {
	        var arg = arguments[i];
	        args[i] = arg && arg.valueOf();
	      }
	      return fn.apply(math, args);
	    };

	    if (fn.transform) {
	      wrapper.transform = fn.transform;
	    }

	    return wrapper;
	  }

	  /**
	   * Import an instance of a factory into math.js
	   * @param {{factory: Function, name: string, path: string, math: boolean}} factory
	   * @param {Object} options  See import for a description of the options
	   * @private
	   */
	  function _importFactory(factory, options) {
	    if (typeof factory.name === 'string') {
	      var name = factory.name;
	      var namespace = factory.path ? traverse(math, factory.path) : math;
	      var existing = namespace.hasOwnProperty(name) ? namespace[name] : undefined;

	      var resolver = function resolver() {
	        var instance = load(factory);

	        if (isTypedFunction(existing) && isTypedFunction(instance)) {
	          if (options.override) {
	            // replace the existing typed function (nothing to do)
	          } else {
	            // merge the existing and new typed function
	            instance = typed(existing, instance);
	          }

	          return instance;
	        }

	        if (existing === undefined || options.override) {
	          return instance;
	        }

	        if (!options.silent) {
	          throw new Error('Cannot import "' + name + '": already exists');
	        }
	      };

	      if (factory.lazy !== false) {
	        lazy(namespace, name, resolver);
	      } else {
	        namespace[name] = resolver();
	      }

	      math.emit('import', name, resolver, factory.path);
	    } else {
	      // unnamed factory.
	      // no lazy loading
	      load(factory);
	    }
	  }

	  /**
	   * Check whether given object is a type which can be imported
	   * @param {Function | number | string | boolean | null | Unit | Complex} object
	   * @return {boolean}
	   * @private
	   */
	  function isSupportedType(object) {
	    return typeof object == 'function' || typeof object === 'number' || typeof object === 'string' || typeof object === 'boolean' || object === null || object && object.isUnit === true || object && object.isComplex === true || object && object.isBigNumber === true || object && object.isFraction === true || object && object.isMatrix === true || object && Array.isArray(object) === true;
	  }

	  /**
	   * Test whether a given thing is a typed-function
	   * @param {*} fn
	   * @return {boolean} Returns true when `fn` is a typed-function
	   */
	  function isTypedFunction(fn) {
	    return typeof fn === 'function' && _typeof(fn.signatures) === 'object';
	  }

	  return math_import;
	}

	exports.math = true; // request access to the math namespace as 5th argument of the factory function
	exports.name = 'import';
	exports.factory = factory;
	exports.lazy = true;

/***/ },
/* 171 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Create a syntax error with the message:
	 *     'Wrong number of arguments in function <fn> (<count> provided, <min>-<max> expected)'
	 * @param {string} fn     Function name
	 * @param {number} count  Actual argument count
	 * @param {number} min    Minimum required argument count
	 * @param {number} [max]  Maximum required argument count
	 * @extends Error
	 */

	function ArgumentsError(fn, count, min, max) {
	  if (!(this instanceof ArgumentsError)) {
	    throw new SyntaxError('Constructor must be called with the new operator');
	  }

	  this.fn = fn;
	  this.count = count;
	  this.min = min;
	  this.max = max;

	  this.message = 'Wrong number of arguments in function ' + fn + ' (' + count + ' provided, ' + min + (max != undefined ? '-' + max : '') + ' expected)';

	  this.stack = new Error().stack;
	}

	ArgumentsError.prototype = new Error();
	ArgumentsError.prototype.constructor = Error;
	ArgumentsError.prototype.name = 'ArgumentsError';
	ArgumentsError.prototype.isArgumentsError = true;

	module.exports = ArgumentsError;

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var object = __webpack_require__(163);

	function factory(type, config, load, typed, math) {
	  var MATRIX = ['Matrix', 'Array']; // valid values for option matrix
	  var NUMBER = ['number', 'BigNumber', 'Fraction']; // valid values for option number

	  /**
	   * Set configuration options for math.js, and get current options.
	   * Will emit a 'config' event, with arguments (curr, prev).
	   *
	   * Syntax:
	   *
	   *     math.config(config: Object): Object
	   *
	   * Examples:
	   *
	   *     math.config().number;                // outputs 'number'
	   *     math.eval('0.4');                    // outputs number 0.4
	   *     math.config({number: 'Fraction'});
	   *     math.eval('0.4');                    // outputs Fraction 2/5
	   *
	   * @param {Object} [options] Available options:
	   *                            {number} epsilon
	   *                              Minimum relative difference between two
	   *                              compared values, used by all comparison functions.
	   *                            {string} matrix
	   *                              A string 'Matrix' (default) or 'Array'.
	   *                            {string} number
	   *                              A string 'number' (default), 'BigNumber', or 'Fraction'
	   *                            {number} precision
	   *                              The number of significant digits for BigNumbers.
	   *                              Not applicable for Numbers.
	   *                            {string} parenthesis
	   *                              How to display parentheses in LaTeX and string
	   *                              output.
	   * @return {Object} Returns the current configuration
	   */
	  function _config(options) {
	    if (options) {
	      var prev = object.clone(config);

	      // validate some of the options
	      validateOption(options, 'matrix', MATRIX);
	      validateOption(options, 'number', NUMBER);

	      // merge options
	      object.deepExtend(config, options);

	      var curr = object.clone(config);

	      // emit 'config' event
	      math.emit('config', curr, prev);

	      return curr;
	    } else {
	      return object.clone(config);
	    }
	  }

	  // attach the valid options to the function so they can be extended
	  _config.MATRIX = MATRIX;
	  _config.NUMBER = NUMBER;

	  return _config;
	}

	/**
	 * Test whether an Array contains a specific item.
	 * @param {Array.<string>} array
	 * @param {string} item
	 * @return {boolean}
	 */
	function contains(array, item) {
	  return array.indexOf(item) !== -1;
	}

	/**
	 * Find a string in an array. Case insensitive search
	 * @param {Array.<string>} array
	 * @param {string} item
	 * @return {number} Returns the index when found. Returns -1 when not found
	 */
	function findIndex(array, item) {
	  return array.map(function (i) {
	    return i.toLowerCase();
	  }).indexOf(item.toLowerCase());
	}

	/**
	 * Validate an option
	 * @param {Object} options         Object with options
	 * @param {string} name            Name of the option to validate
	 * @param {Array.<string>} values  Array with valid values for this option
	 */
	function validateOption(options, name, values) {
	  if (options[name] !== undefined && !contains(values, options[name])) {
	    var index = findIndex(values, options[name]);
	    if (index !== -1) {
	      // right value, wrong casing
	      // TODO: lower case values are deprecated since v3, remove this warning some day.
	      console.warn('Warning: Wrong casing for configuration option "' + name + '", should be "' + values[index] + '" instead of "' + options[name] + '".');

	      options[name] = values[index]; // change the option to the right casing
	    } else {
	      // unknown value
	      console.warn('Warning: Unknown value "' + options[name] + '" for configuration option "' + name + '". Available options: ' + values.map(JSON.stringify).join(', ') + '.');
	    }
	  }
	}

	exports.name = 'config';
	exports.math = true; // request the math namespace as fifth argument
	exports.factory = factory;

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = [__webpack_require__(174), // data types (Matrix, Complex, Unit, ...)
	__webpack_require__(260), // constants
	__webpack_require__(262), // expression parsing
	__webpack_require__(495), // functions
	__webpack_require__(659), // serialization utility (math.json.reviver)
	__webpack_require__(661) // errors
		];

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

		module.exports = [__webpack_require__(175), __webpack_require__(180), __webpack_require__(181), __webpack_require__(186), __webpack_require__(193), __webpack_require__(197), __webpack_require__(230), __webpack_require__(231), __webpack_require__(233), __webpack_require__(234)];

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = [
	// type
	__webpack_require__(176),

	// construction function
	__webpack_require__(178)];

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Decimal = __webpack_require__(177);

	function factory(type, config, load, typed, math) {
	  var BigNumber = Decimal.clone({ precision: config.precision });

	  /**
	   * Attach type information
	   */
	  BigNumber.prototype.type = 'BigNumber';
	  BigNumber.prototype.isBigNumber = true;

	  /**
	   * Get a JSON representation of a BigNumber containing
	   * type information
	   * @returns {Object} Returns a JSON object structured as:
	   *                   `{"mathjs": "BigNumber", "value": "0.2"}`
	   */
	  BigNumber.prototype.toJSON = function () {
	    return {
	      mathjs: 'BigNumber',
	      value: this.toString()
	    };
	  };

	  /**
	   * Instantiate a BigNumber from a JSON object
	   * @param {Object} json  a JSON object structured as:
	   *                       `{"mathjs": "BigNumber", "value": "0.2"}`
	   * @return {BigNumber}
	   */
	  BigNumber.fromJSON = function (json) {
	    return new BigNumber(json.value);
	  };

	  // listen for changed in the configuration, automatically apply changed precision
	  math.on('config', function (curr, prev) {
	    if (curr.precision !== prev.precision) {
	      BigNumber.config({ precision: curr.precision });
	    }
	  });

	  return BigNumber;
	}

	exports.name = 'BigNumber';
	exports.path = 'type';
	exports.factory = factory;
	exports.math = true; // request access to the math namespace

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol?"symbol":typeof obj;};/*! decimal.js v5.0.8 https://github.com/MikeMcl/decimal.js/LICENCE */;(function(globalScope){'use strict';/*
	   *  decimal.js v5.0.8
	   *  An arbitrary-precision Decimal type for JavaScript.
	   *  https://github.com/MikeMcl/decimal.js
	   *  Copyright (c) 2016 Michael Mclaughlin <M8ch88l@gmail.com>
	   *  MIT Expat Licence
	   */// -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //
	// The maximum exponent magnitude.
	// The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.
	var EXP_LIMIT=9e15,// 0 to 9e15
	// The limit on the value of `precision`, and on the value of the first argument to
	// `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.
	MAX_DIGITS=1e9,// 0 to 1e9
	// The base 88 alphabet used by `toJSON` and `fromJSON`.
	// 7 printable ASCII characters omitted (space) \ " & ' < >
	NUMERALS='0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%()*+,-./:;=?@[]^_`{|}~',// The natural logarithm of 10 (1025 digits).
	LN10='2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',// Pi (1025 digits).
	PI='3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',// The initial configuration properties of the Decimal constructor.
	Decimal={// These values must be integers within the stated ranges (inclusive).
	// Most of these values can be changed during run-time using `Decimal.config`.
	// The maximum number of significant digits of the result of a calculation or base conversion.
	// E.g. `Decimal.config({ precision: 20 });`
	precision:20,// 1 to MAX_DIGITS
	// The rounding mode used when rounding to `precision`.
	//
	// ROUND_UP         0 Away from zero.
	// ROUND_DOWN       1 Towards zero.
	// ROUND_CEIL       2 Towards +Infinity.
	// ROUND_FLOOR      3 Towards -Infinity.
	// ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
	// ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
	// ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
	// ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
	// ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
	//
	// E.g.
	// `Decimal.rounding = 4;`
	// `Decimal.rounding = Decimal.ROUND_HALF_UP;`
	rounding:4,// 0 to 8
	// The modulo mode used when calculating the modulus: a mod n.
	// The quotient (q = a / n) is calculated according to the corresponding rounding mode.
	// The remainder (r) is calculated as: r = a - n * q.
	//
	// UP         0 The remainder is positive if the dividend is negative, else is negative.
	// DOWN       1 The remainder has the same sign as the dividend (JavaScript %).
	// FLOOR      3 The remainder has the same sign as the divisor (Python %).
	// HALF_EVEN  6 The IEEE 754 remainder function.
	// EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.
	//
	// Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian
	// division (9) are commonly used for the modulus operation. The other rounding modes can also
	// be used, but they may not give useful results.
	modulo:1,// 0 to 9
	// The exponent value at and beneath which `toString` returns exponential notation.
	// JavaScript numbers: -7
	toExpNeg:-7,// 0 to -EXP_LIMIT
	// The exponent value at and above which `toString` returns exponential notation.
	// JavaScript numbers: 21
	toExpPos:21,// 0 to EXP_LIMIT
	// The minimum exponent value, beneath which underflow to zero occurs.
	// JavaScript numbers: -324  (5e-324)
	minE:-EXP_LIMIT,// -1 to -EXP_LIMIT
	// The maximum exponent value, above which overflow to Infinity occurs.
	// JavaScript numbers: 308  (1.7976931348623157e+308)
	maxE:EXP_LIMIT,// 1 to EXP_LIMIT
	// Whether to use cryptographically-secure random number generation, if available.
	crypto:void 0// true/false/undefined
	},// ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //
	inexact,noConflict,quadrant,cryptoObject=typeof crypto!='undefined'?crypto:null,external=true,decimalError='[DecimalError] ',invalidArgument=decimalError+'Invalid argument: ',precisionLimitExceeded=decimalError+'Precision limit exceeded',mathfloor=Math.floor,mathpow=Math.pow,isBinary=/^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i,isHex=/^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i,isOctal=/^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i,isDecimal=/^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,BASE=1e7,LOG_BASE=7,MAX_SAFE_INTEGER=9007199254740991,LN10_PRECISION=LN10.length-1,PI_PRECISION=PI.length-1,// Decimal.prototype object
	P={};// Decimal prototype methods
	/*
	   *  absoluteValue             abs
	   *  ceil
	   *  comparedTo                cmp
	   *  cosine                    cos
	   *  cubeRoot                  cbrt
	   *  decimalPlaces             dp
	   *  dividedBy                 div
	   *  dividedToIntegerBy        divToInt
	   *  equals                    eq
	   *  floor
	   *  greaterThan               gt
	   *  greaterThanOrEqualTo      gte
	   *  hyperbolicCosine          cosh
	   *  hyperbolicSine            sinh
	   *  hyperbolicTangent         tanh
	   *  inverseCosine             acos
	   *  inverseHyperbolicCosine   acosh
	   *  inverseHyperbolicSine     asinh
	   *  inverseHyperbolicTangent  atanh
	   *  inverseSine               asin
	   *  inverseTangent            atan
	   *  isFinite
	   *  isInteger                 isInt
	   *  isNaN
	   *  isNegative                isNeg
	   *  isPositive                isPos
	   *  isZero
	   *  lessThan                  lt
	   *  lessThanOrEqualTo         lte
	   *  logarithm                 log
	   *  [maximum]                 [max]
	   *  [minimum]                 [min]
	   *  minus                     sub
	   *  modulo                    mod
	   *  naturalExponential        exp
	   *  naturalLogarithm          ln
	   *  negated                   neg
	   *  plus                      add
	   *  precision                 sd
	   *  round
	   *  sine                      sin
	   *  squareRoot                sqrt
	   *  tangent                   tan
	   *  times                     mul
	   *  toBinary
	   *  toDecimalPlaces           toDP
	   *  toExponential
	   *  toFixed
	   *  toFraction
	   *  toHexadecimal             toHex
	   *  toJSON
	   *  toNearest
	   *  toNumber
	   *  toOctal
	   *  toPower                   pow
	   *  toPrecision
	   *  toSignificantDigits       toSD
	   *  toString
	   *  truncated                 trunc
	   *  valueOf
	   *//*
	   * Return a new Decimal whose value is the absolute value of this Decimal.
	   *
	   */P.absoluteValue=P.abs=function(){var x=new this.constructor(this);if(x.s<0)x.s=1;return finalise(x);};/*
	   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
	   * direction of positive Infinity.
	   *
	   */P.ceil=function(){return finalise(new this.constructor(this),this.e+1,2);};/*
	   * Return
	   *   1    if the value of this Decimal is greater than the value of `y`,
	   *  -1    if the value of this Decimal is less than the value of `y`,
	   *   0    if they have the same value,
	   *   NaN  if the value of either Decimal is NaN.
	   *
	   */P.comparedTo=P.cmp=function(y){var i,j,xdL,ydL,x=this,xd=x.d,yd=(y=new x.constructor(y)).d,xs=x.s,ys=y.s;// Either NaN or ±Infinity?
	if(!xd||!yd){return!xs||!ys?NaN:xs!==ys?xs:xd===yd?0:!xd^xs<0?1:-1;}// Either zero?
	if(!xd[0]||!yd[0])return xd[0]?xs:yd[0]?-ys:0;// Signs differ?
	if(xs!==ys)return xs;// Compare exponents.
	if(x.e!==y.e)return x.e>y.e^xs<0?1:-1;xdL=xd.length;ydL=yd.length;// Compare digit by digit.
	for(i=0,j=xdL<ydL?xdL:ydL;i<j;++i){if(xd[i]!==yd[i])return xd[i]>yd[i]^xs<0?1:-1;}// Compare lengths.
	return xdL===ydL?0:xdL>ydL^xs<0?1:-1;};/*
	   * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.
	   *
	   * Domain: [-Infinity, Infinity]
	   * Range: [-1, 1]
	   *
	   * cos(0)         = 1
	   * cos(-0)        = 1
	   * cos(Infinity)  = NaN
	   * cos(-Infinity) = NaN
	   * cos(NaN)       = NaN
	   *
	   */P.cosine=P.cos=function(){var pr,rm,x=this,Ctor=x.constructor;if(!x.d)return new Ctor(NaN);// cos(0) = cos(-0) = 1
	if(!x.d[0])return new Ctor(1);pr=Ctor.precision;rm=Ctor.rounding;Ctor.precision=pr+Math.max(x.e,x.sd())+LOG_BASE;Ctor.rounding=1;x=cosine(Ctor,toLessThanHalfPi(Ctor,x));Ctor.precision=pr;Ctor.rounding=rm;return finalise(quadrant==2||quadrant==3?x.neg():x,pr,rm,true);};/*
	   *
	   * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to
	   * `precision` significant digits using rounding mode `rounding`.
	   *
	   *  cbrt(0)  =  0
	   *  cbrt(-0) = -0
	   *  cbrt(1)  =  1
	   *  cbrt(-1) = -1
	   *  cbrt(N)  =  N
	   *  cbrt(-I) = -I
	   *  cbrt(I)  =  I
	   *
	   * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))
	   *
	   */P.cubeRoot=P.cbrt=function(){var e,m,n,r,rep,s,sd,t,t3,t3plusx,x=this,Ctor=x.constructor;if(!x.isFinite()||x.isZero())return new Ctor(x);external=false;// Initial estimate.
	s=x.s*Math.pow(x.s*x,1/3);// Math.cbrt underflow/overflow?
	// Pass x to Math.pow as integer, then adjust the exponent of the result.
	if(!s||Math.abs(s)==1/0){n=digitsToString(x.d);e=x.e;// Adjust n exponent so it is a multiple of 3 away from x exponent.
	if(s=(e-n.length+1)%3)n+=s==1||s==-2?'0':'00';s=Math.pow(n,1/3);// Rarely, e may be one less than the result exponent value.
	e=mathfloor((e+1)/3)-(e%3==(e<0?-1:2));if(s==1/0){n='5e'+e;}else{n=s.toExponential();n=n.slice(0,n.indexOf('e')+1)+e;}r=new Ctor(n);r.s=x.s;}else{r=new Ctor(s.toString());}sd=(e=Ctor.precision)+3;// Halley's method.
	// TODO? Compare Newton's method.
	for(;;){t=r;t3=t.times(t).times(t);t3plusx=t3.plus(x);r=divide(t3plusx.plus(x).times(t),t3plusx.plus(t3),sd+2,1);// TODO? Replace with for-loop and checkRoundingDigits.
	if(digitsToString(t.d).slice(0,sd)===(n=digitsToString(r.d)).slice(0,sd)){n=n.slice(sd-3,sd+1);// The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999
	// , i.e. approaching a rounding boundary, continue the iteration.
	if(n=='9999'||!rep&&n=='4999'){// On the first iteration only, check to see if rounding up gives the exact result as the
	// nines may infinitely repeat.
	if(!rep){finalise(t,e+1,0);if(t.times(t).times(t).eq(x)){r=t;break;}}sd+=4;rep=1;}else{// If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
	// If not, then there are further digits and m will be truthy.
	if(!+n||!+n.slice(1)&&n.charAt(0)=='5'){// Truncate to the first rounding digit.
	finalise(r,e+1,1);m=!r.times(r).times(r).eq(x);}break;}}}external=true;return finalise(r,e,Ctor.rounding,m);};/*
	   * Return the number of decimal places of the value of this Decimal.
	   *
	   */P.decimalPlaces=P.dp=function(){var w,d=this.d,n=NaN;if(d){w=d.length-1;n=(w-mathfloor(this.e/LOG_BASE))*LOG_BASE;// Subtract the number of trailing zeros of the last word.
	w=d[w];if(w)for(;w%10==0;w/=10){n--;}if(n<0)n=0;}return n;};/*
	   *  n / 0 = I
	   *  n / N = N
	   *  n / I = 0
	   *  0 / n = 0
	   *  0 / 0 = N
	   *  0 / N = N
	   *  0 / I = 0
	   *  N / n = N
	   *  N / 0 = N
	   *  N / N = N
	   *  N / I = N
	   *  I / n = I
	   *  I / 0 = I
	   *  I / N = N
	   *  I / I = N
	   *
	   * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to
	   * `precision` significant digits using rounding mode `rounding`.
	   *
	   */P.dividedBy=P.div=function(y){return divide(this,new this.constructor(y));};/*
	   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal
	   * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.
	   *
	   */P.dividedToIntegerBy=P.divToInt=function(y){var x=this,Ctor=x.constructor;return finalise(divide(x,new Ctor(y),0,1,1),Ctor.precision,Ctor.rounding);};/*
	   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.
	   *
	   */P.equals=P.eq=function(y){return this.cmp(y)===0;};/*
	   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
	   * direction of negative Infinity.
	   *
	   */P.floor=function(){return finalise(new this.constructor(this),this.e+1,3);};/*
	   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return
	   * false.
	   *
	   */P.greaterThan=P.gt=function(y){return this.cmp(y)>0;};/*
	   * Return true if the value of this Decimal is greater than or equal to the value of `y`,
	   * otherwise return false.
	   *
	   */P.greaterThanOrEqualTo=P.gte=function(y){var k=this.cmp(y);return k==1||k===0;};/*
	   * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this
	   * Decimal.
	   *
	   * Domain: [-Infinity, Infinity]
	   * Range: [1, Infinity]
	   *
	   * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...
	   *
	   * cosh(0)         = 1
	   * cosh(-0)        = 1
	   * cosh(Infinity)  = Infinity
	   * cosh(-Infinity) = Infinity
	   * cosh(NaN)       = NaN
	   *
	   *  x        time taken (ms)   result
	   * 1000      9                 9.8503555700852349694e+433
	   * 10000     25                4.4034091128314607936e+4342
	   * 100000    171               1.4033316802130615897e+43429
	   * 1000000   3817              1.5166076984010437725e+434294
	   * 10000000  abandoned after 2 minute wait
	   *
	   * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))
	   *
	   */P.hyperbolicCosine=P.cosh=function(){var k,n,pr,rm,len,x=this,Ctor=x.constructor,one=new Ctor(1);if(!x.isFinite())return new Ctor(x.s?1/0:NaN);if(x.isZero())return one;pr=Ctor.precision;rm=Ctor.rounding;Ctor.precision=pr+Math.max(x.e,x.sd())+4;Ctor.rounding=1;len=x.d.length;// Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1
	// i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))
	// Estimate the optimum number of times to use the argument reduction.
	// TODO? Estimation reused from cosine() and may not be optimal here.
	if(len<32){k=Math.ceil(len/3);n=Math.pow(4,-k).toString();}else{k=16;n='2.3283064365386962890625e-10';}x=taylorSeries(Ctor,1,x.times(n),new Ctor(1),true);// Reverse argument reduction
	var cosh2_x,i=k,d8=new Ctor(8);for(;i--;){cosh2_x=x.times(x);x=one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));}return finalise(x,Ctor.precision=pr,Ctor.rounding=rm,true);};/*
	   * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this
	   * Decimal.
	   *
	   * Domain: [-Infinity, Infinity]
	   * Range: [-Infinity, Infinity]
	   *
	   * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...
	   *
	   * sinh(0)         = 0
	   * sinh(-0)        = -0
	   * sinh(Infinity)  = Infinity
	   * sinh(-Infinity) = -Infinity
	   * sinh(NaN)       = NaN
	   *
	   * x        time taken (ms)
	   * 10       2 ms
	   * 100      5 ms
	   * 1000     14 ms
	   * 10000    82 ms
	   * 100000   886 ms            1.4033316802130615897e+43429
	   * 200000   2613 ms
	   * 300000   5407 ms
	   * 400000   8824 ms
	   * 500000   13026 ms          8.7080643612718084129e+217146
	   * 1000000  48543 ms
	   *
	   * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))
	   *
	   */P.hyperbolicSine=P.sinh=function(){var k,pr,rm,len,x=this,Ctor=x.constructor;if(!x.isFinite()||x.isZero())return new Ctor(x);pr=Ctor.precision;rm=Ctor.rounding;Ctor.precision=pr+Math.max(x.e,x.sd())+4;Ctor.rounding=1;len=x.d.length;if(len<3){x=taylorSeries(Ctor,2,x,x,true);}else{// Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))
	// i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))
	// 3 multiplications and 1 addition
	// Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))
	// i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))
	// 4 multiplications and 2 additions
	// Estimate the optimum number of times to use the argument reduction.
	k=1.4*Math.sqrt(len);k=k>16?16:k|0;x=x.times(Math.pow(5,-k));x=taylorSeries(Ctor,2,x,x,true);// Reverse argument reduction
	var sinh2_x,d5=new Ctor(5),d16=new Ctor(16),d20=new Ctor(20);for(;k--;){sinh2_x=x.times(x);x=x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));}}Ctor.precision=pr;Ctor.rounding=rm;return finalise(x,pr,rm,true);};/*
	   * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this
	   * Decimal.
	   *
	   * Domain: [-Infinity, Infinity]
	   * Range: [-1, 1]
	   *
	   * tanh(x) = sinh(x) / cosh(x)
	   *
	   * tanh(0)         = 0
	   * tanh(-0)        = -0
	   * tanh(Infinity)  = 1
	   * tanh(-Infinity) = -1
	   * tanh(NaN)       = NaN
	   *
	   */P.hyperbolicTangent=P.tanh=function(){var pr,rm,x=this,Ctor=x.constructor;if(!x.isFinite())return new Ctor(x.s);if(x.isZero())return new Ctor(x);pr=Ctor.precision;rm=Ctor.rounding;Ctor.precision=pr+7;Ctor.rounding=1;return divide(x.sinh(),x.cosh(),Ctor.precision=pr,Ctor.rounding=rm);};/*
	   * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of
	   * this Decimal.
	   *
	   * Domain: [-1, 1]
	   * Range: [0, pi]
	   *
	   * acos(x) = pi/2 - asin(x)
	   *
	   * acos(0)       = pi/2
	   * acos(-0)      = pi/2
	   * acos(1)       = 0
	   * acos(-1)      = pi
	   * acos(1/2)     = pi/3
	   * acos(-1/2)    = 2*pi/3
	   * acos(|x| > 1) = NaN
	   * acos(NaN)     = NaN
	   *
	   */P.inverseCosine=P.acos=function(){var halfPi,x=this,Ctor=x.constructor,k=x.abs().cmp(1),pr=Ctor.precision,rm=Ctor.rounding;if(k!==-1){return k===0// |x| is 1
	?x.isNeg()?getPi(Ctor,pr,rm):new Ctor(0)// |x| > 1 or x is NaN
	:new Ctor(NaN);}if(x.isZero())return getPi(Ctor,pr+4,rm).times(0.5);// TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3
	Ctor.precision=pr+6;Ctor.rounding=1;x=x.asin();halfPi=getPi(Ctor,pr+4,rm).times(0.5);Ctor.precision=pr;Ctor.rounding=rm;return halfPi.minus(x);};/*
	   * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the
	   * value of this Decimal.
	   *
	   * Domain: [1, Infinity]
	   * Range: [0, Infinity]
	   *
	   * acosh(x) = ln(x + sqrt(x^2 - 1))
	   *
	   * acosh(x < 1)     = NaN
	   * acosh(NaN)       = NaN
	   * acosh(Infinity)  = Infinity
	   * acosh(-Infinity) = NaN
	   * acosh(0)         = NaN
	   * acosh(-0)        = NaN
	   * acosh(1)         = 0
	   * acosh(-1)        = NaN
	   *
	   */P.inverseHyperbolicCosine=P.acosh=function(){var pr,rm,x=this,Ctor=x.constructor;if(x.lte(1))return new Ctor(x.eq(1)?0:NaN);if(!x.isFinite())return new Ctor(x);pr=Ctor.precision;rm=Ctor.rounding;Ctor.precision=pr+Math.max(Math.abs(x.e),x.sd())+4;Ctor.rounding=1;external=false;x=x.times(x).minus(1).sqrt().plus(x);external=true;Ctor.precision=pr;Ctor.rounding=rm;return x.ln();};/*
	   * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value
	   * of this Decimal.
	   *
	   * Domain: [-Infinity, Infinity]
	   * Range: [-Infinity, Infinity]
	   *
	   * asinh(x) = ln(x + sqrt(x^2 + 1))
	   *
	   * asinh(NaN)       = NaN
	   * asinh(Infinity)  = Infinity
	   * asinh(-Infinity) = -Infinity
	   * asinh(0)         = 0
	   * asinh(-0)        = -0
	   *
	   */P.inverseHyperbolicSine=P.asinh=function(){var pr,rm,x=this,Ctor=x.constructor;if(!x.isFinite()||x.isZero())return new Ctor(x);pr=Ctor.precision;rm=Ctor.rounding;Ctor.precision=pr+2*Math.max(Math.abs(x.e),x.sd())+6;Ctor.rounding=1;external=false;x=x.times(x).plus(1).sqrt().plus(x);external=true;Ctor.precision=pr;Ctor.rounding=rm;return x.ln();};/*
	   * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the
	   * value of this Decimal.
	   *
	   * Domain: [-1, 1]
	   * Range: [-Infinity, Infinity]
	   *
	   * atanh(x) = 0.5 * ln((1 + x) / (1 - x))
	   *
	   * atanh(|x| > 1)   = NaN
	   * atanh(NaN)       = NaN
	   * atanh(Infinity)  = NaN
	   * atanh(-Infinity) = NaN
	   * atanh(0)         = 0
	   * atanh(-0)        = -0
	   * atanh(1)         = Infinity
	   * atanh(-1)        = -Infinity
	   *
	   */P.inverseHyperbolicTangent=P.atanh=function(){var pr,rm,wpr,xsd,x=this,Ctor=x.constructor;if(!x.isFinite())return new Ctor(NaN);if(x.e>=0)return new Ctor(x.abs().eq(1)?x.s/0:x.isZero()?x:NaN);pr=Ctor.precision;rm=Ctor.rounding;xsd=x.sd();if(Math.max(xsd,pr)<2*-x.e-1)return finalise(new Ctor(x),pr,rm,true);Ctor.precision=wpr=xsd-x.e;x=divide(x.plus(1),new Ctor(1).minus(x),wpr+pr,1);Ctor.precision=pr+4;Ctor.rounding=1;x=x.ln();Ctor.precision=pr;Ctor.rounding=rm;return x.times(0.5);};/*
	   * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this
	   * Decimal.
	   *
	   * Domain: [-Infinity, Infinity]
	   * Range: [-pi/2, pi/2]
	   *
	   * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))
	   *
	   * asin(0)       = 0
	   * asin(-0)      = -0
	   * asin(1/2)     = pi/6
	   * asin(-1/2)    = -pi/6
	   * asin(1)       = pi/2
	   * asin(-1)      = -pi/2
	   * asin(|x| > 1) = NaN
	   * asin(NaN)     = NaN
	   *
	   * TODO? Compare performance of Taylor series.
	   *
	   */P.inverseSine=P.asin=function(){var halfPi,k,pr,rm,x=this,Ctor=x.constructor;if(x.isZero())return new Ctor(x);k=x.abs().cmp(1);pr=Ctor.precision;rm=Ctor.rounding;if(k!==-1){// |x| is 1
	if(k===0){halfPi=getPi(Ctor,pr+4,rm).times(0.5);halfPi.s=x.s;return halfPi;}// |x| > 1 or x is NaN
	return new Ctor(NaN);}// TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6
	Ctor.precision=pr+6;Ctor.rounding=1;x=x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();Ctor.precision=pr;Ctor.rounding=rm;return x.times(2);};/*
	   * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value
	   * of this Decimal.
	   *
	   * Domain: [-Infinity, Infinity]
	   * Range: [-pi/2, pi/2]
	   *
	   * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
	   *
	   * atan(0)         = 0
	   * atan(-0)        = -0
	   * atan(1)         = pi/4
	   * atan(-1)        = -pi/4
	   * atan(Infinity)  = pi/2
	   * atan(-Infinity) = -pi/2
	   * atan(NaN)       = NaN
	   *
	   */P.inverseTangent=P.atan=function(){var i,j,k,n,px,t,r,wpr,x2,x=this,Ctor=x.constructor,pr=Ctor.precision,rm=Ctor.rounding;if(!x.isFinite()){if(!x.s)return new Ctor(NaN);if(pr+4<=PI_PRECISION){r=getPi(Ctor,pr+4,rm).times(0.5);r.s=x.s;return r;}}else if(x.isZero()){return new Ctor(x);}else if(x.abs().eq(1)&&pr+4<=PI_PRECISION){r=getPi(Ctor,pr+4,rm).times(0.25);r.s=x.s;return r;}Ctor.precision=wpr=pr+10;Ctor.rounding=1;// TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);
	// Argument reduction
	// Ensure |x| < 0.42
	// atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))
	k=Math.min(28,wpr/LOG_BASE+2|0);for(i=k;i;--i){x=x.div(x.times(x).plus(1).sqrt().plus(1));}external=false;j=Math.ceil(wpr/LOG_BASE);n=1;x2=x.times(x);r=new Ctor(x);px=x;// atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
	for(;i!==-1;){px=px.times(x2);t=r.minus(px.div(n+=2));px=px.times(x2);r=t.plus(px.div(n+=2));if(r.d[j]!==void 0)for(i=j;r.d[i]===t.d[i]&&i--;){}}if(k)r=r.times(2<<k-1);external=true;return finalise(r,Ctor.precision=pr,Ctor.rounding=rm,true);};/*
	   * Return true if the value of this Decimal is a finite number, otherwise return false.
	   *
	   */P.isFinite=function(){return!!this.d;};/*
	   * Return true if the value of this Decimal is an integer, otherwise return false.
	   *
	   */P.isInteger=P.isInt=function(){return!!this.d&&mathfloor(this.e/LOG_BASE)>this.d.length-2;};/*
	   * Return true if the value of this Decimal is NaN, otherwise return false.
	   *
	   */P.isNaN=function(){return!this.s;};/*
	   * Return true if the value of this Decimal is negative, otherwise return false.
	   *
	   */P.isNegative=P.isNeg=function(){return this.s<0;};/*
	   * Return true if the value of this Decimal is positive, otherwise return false.
	   *
	   */P.isPositive=P.isPos=function(){return this.s>0;};/*
	   * Return true if the value of this Decimal is 0 or -0, otherwise return false.
	   *
	   */P.isZero=function(){return!!this.d&&this.d[0]===0;};/*
	   * Return true if the value of this Decimal is less than `y`, otherwise return false.
	   *
	   */P.lessThan=P.lt=function(y){return this.cmp(y)<0;};/*
	   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.
	   *
	   */P.lessThanOrEqualTo=P.lte=function(y){return this.cmp(y)<1;};/*
	   * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`
	   * significant digits using rounding mode `rounding`.
	   *
	   * If no base is specified, return log[10](arg).
	   *
	   * log[base](arg) = ln(arg) / ln(base)
	   *
	   * The result will always be correctly rounded if the base of the log is 10, and 'almost always'
	   * otherwise:
	   *
	   * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen
	   * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error
	   * between the result and the correctly rounded result will be one ulp (unit in the last place).
	   *
	   * log[-b](a)       = NaN
	   * log[0](a)        = NaN
	   * log[1](a)        = NaN
	   * log[NaN](a)      = NaN
	   * log[Infinity](a) = NaN
	   * log[b](0)        = -Infinity
	   * log[b](-0)       = -Infinity
	   * log[b](-a)       = NaN
	   * log[b](1)        = 0
	   * log[b](Infinity) = Infinity
	   * log[b](NaN)      = NaN
	   *
	   * [base] {number|string|Decimal} The base of the logarithm.
	   *
	   */P.logarithm=P.log=function(base){var isBase10,d,denominator,k,inf,num,sd,r,arg=this,Ctor=arg.constructor,pr=Ctor.precision,rm=Ctor.rounding,guard=5;// Default base is 10.
	if(base==null){base=new Ctor(10);isBase10=true;}else{base=new Ctor(base);d=base.d;// Return NaN if base is negative, or non-finite, or is 0 or 1.
	if(base.s<0||!d||!d[0]||base.eq(1))return new Ctor(NaN);isBase10=base.eq(10);}d=arg.d;// Is arg negative, non-finite, 0 or 1?
	if(arg.s<0||!d||!d[0]||arg.eq(1)){return new Ctor(d&&!d[0]?-1/0:arg.s!=1?NaN:d?0:1/0);}// The result will have a non-terminating decimal expansion if base is 10 and arg is not an
	// integer power of 10.
	if(isBase10){if(d.length>1){inf=true;}else{for(k=d[0];k%10===0;){k/=10;}inf=k!==1;}}external=false;sd=pr+guard;num=naturalLogarithm(arg,sd);denominator=isBase10?getLn10(Ctor,sd+10):naturalLogarithm(base,sd);// The result will have 5 rounding digits.
	r=divide(num,denominator,sd,1);// If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,
	// calculate 10 further digits.
	//
	// If the result is known to have an infinite decimal expansion, repeat this until it is clear
	// that the result is above or below the boundary. Otherwise, if after calculating the 10
	// further digits, the last 14 are nines, round up and assume the result is exact.
	// Also assume the result is exact if the last 14 are zero.
	//
	// Example of a result that will be incorrectly rounded:
	// log[1048576](4503599627370502) = 2.60000000000000009610279511444746...
	// The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it
	// will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so
	// the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal
	// place is still 2.6.
	if(checkRoundingDigits(r.d,k=pr,rm)){do{sd+=10;num=naturalLogarithm(arg,sd);denominator=isBase10?getLn10(Ctor,sd+10):naturalLogarithm(base,sd);r=divide(num,denominator,sd,1);if(!inf){// Check for 14 nines from the 2nd rounding digit, as the first may be 4.
	if(+digitsToString(r.d).slice(k+1,k+15)+1==1e14){r=finalise(r,pr+1,0);}break;}}while(checkRoundingDigits(r.d,k+=10,rm));}external=true;return finalise(r,pr,rm);};/*
	   * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.
	   *
	   * arguments {number|string|Decimal}
	   *
	  P.max = function () {
	    Array.prototype.push.call(arguments, this);
	    return maxOrMin(this.constructor, arguments, 'lt');
	  };
	   *//*
	   * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.
	   *
	   * arguments {number|string|Decimal}
	   *
	  P.min = function () {
	    Array.prototype.push.call(arguments, this);
	    return maxOrMin(this.constructor, arguments, 'gt');
	  };
	   *//*
	   *  n - 0 = n
	   *  n - N = N
	   *  n - I = -I
	   *  0 - n = -n
	   *  0 - 0 = 0
	   *  0 - N = N
	   *  0 - I = -I
	   *  N - n = N
	   *  N - 0 = N
	   *  N - N = N
	   *  N - I = N
	   *  I - n = I
	   *  I - 0 = I
	   *  I - N = N
	   *  I - I = N
	   *
	   * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`
	   * significant digits using rounding mode `rounding`.
	   *
	   */P.minus=P.sub=function(y){var d,e,i,j,k,len,pr,rm,xd,xe,xLTy,yd,x=this,Ctor=x.constructor;y=new Ctor(y);// If either is not finite...
	if(!x.d||!y.d){// Return NaN if either is NaN.
	if(!x.s||!y.s)y=new Ctor(NaN);// Return y negated if x is finite and y is ±Infinity.
	else if(x.d)y.s=-y.s;// Return x if y is finite and x is ±Infinity.
	// Return x if both are ±Infinity with different signs.
	// Return NaN if both are ±Infinity with the same sign.
	else y=new Ctor(y.d||x.s!==y.s?x:NaN);return y;}// If signs differ...
	if(x.s!=y.s){y.s=-y.s;return x.plus(y);}xd=x.d;yd=y.d;pr=Ctor.precision;rm=Ctor.rounding;// If either is zero...
	if(!xd[0]||!yd[0]){// Return y negated if x is zero and y is non-zero.
	if(yd[0])y.s=-y.s;// Return x if y is zero and x is non-zero.
	else if(xd[0])y=new Ctor(x);// Return zero if both are zero.
	// From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.
	else return new Ctor(rm===3?-0:0);return external?finalise(y,pr,rm):y;}// x and y are finite, non-zero numbers with the same sign.
	// Calculate base 1e7 exponents.
	e=mathfloor(y.e/LOG_BASE);xe=mathfloor(x.e/LOG_BASE);xd=xd.slice();k=xe-e;// If base 1e7 exponents differ...
	if(k){xLTy=k<0;if(xLTy){d=xd;k=-k;len=yd.length;}else{d=yd;e=xe;len=xd.length;}// Numbers with massively different exponents would result in a very high number of
	// zeros needing to be prepended, but this can be avoided while still ensuring correct
	// rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.
	i=Math.max(Math.ceil(pr/LOG_BASE),len)+2;if(k>i){k=i;d.length=1;}// Prepend zeros to equalise exponents.
	d.reverse();for(i=k;i--;){d.push(0);}d.reverse();// Base 1e7 exponents equal.
	}else{// Check digits to determine which is the bigger number.
	i=xd.length;len=yd.length;xLTy=i<len;if(xLTy)len=i;for(i=0;i<len;i++){if(xd[i]!=yd[i]){xLTy=xd[i]<yd[i];break;}}k=0;}if(xLTy){d=xd;xd=yd;yd=d;y.s=-y.s;}len=xd.length;// Append zeros to `xd` if shorter.
	// Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.
	for(i=yd.length-len;i>0;--i){xd[len++]=0;}// Subtract yd from xd.
	for(i=yd.length;i>k;){if(xd[--i]<yd[i]){for(j=i;j&&xd[--j]===0;){xd[j]=BASE-1;}--xd[j];xd[i]+=BASE;}xd[i]-=yd[i];}// Remove trailing zeros.
	for(;xd[--len]===0;){xd.pop();}// Remove leading zeros and adjust exponent accordingly.
	for(;xd[0]===0;xd.shift()){--e;}// Zero?
	if(!xd[0])return new Ctor(rm===3?-0:0);y.d=xd;y.e=getBase10Exponent(xd,e);return external?finalise(y,pr,rm):y;};/*
	   *   n % 0 =  N
	   *   n % N =  N
	   *   n % I =  n
	   *   0 % n =  0
	   *  -0 % n = -0
	   *   0 % 0 =  N
	   *   0 % N =  N
	   *   0 % I =  0
	   *   N % n =  N
	   *   N % 0 =  N
	   *   N % N =  N
	   *   N % I =  N
	   *   I % n =  N
	   *   I % 0 =  N
	   *   I % N =  N
	   *   I % I =  N
	   *
	   * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to
	   * `precision` significant digits using rounding mode `rounding`.
	   *
	   * The result depends on the modulo mode.
	   *
	   */P.modulo=P.mod=function(y){var q,x=this,Ctor=x.constructor;y=new Ctor(y);// Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.
	if(!x.d||!y.s||y.d&&!y.d[0])return new Ctor(NaN);// Return x if y is ±Infinity or x is ±0.
	if(!y.d||x.d&&!x.d[0]){return finalise(new Ctor(x),Ctor.precision,Ctor.rounding);}// Prevent rounding of intermediate calculations.
	external=false;if(Ctor.modulo==9){// Euclidian division: q = sign(y) * floor(x / abs(y))
	// result = x - q * y    where  0 <= result < abs(y)
	q=divide(x,y.abs(),0,3,1);q.s*=y.s;}else{q=divide(x,y,0,Ctor.modulo,1);}q=q.times(y);external=true;return x.minus(q);};/*
	   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,
	   * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`
	   * significant digits using rounding mode `rounding`.
	   *
	   */P.naturalExponential=P.exp=function(){return naturalExponential(this);};/*
	   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,
	   * rounded to `precision` significant digits using rounding mode `rounding`.
	   *
	   */P.naturalLogarithm=P.ln=function(){return naturalLogarithm(this);};/*
	   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by
	   * -1.
	   *
	   */P.negated=P.neg=function(){var x=new this.constructor(this);x.s=-x.s;return finalise(x);};/*
	   *  n + 0 = n
	   *  n + N = N
	   *  n + I = I
	   *  0 + n = n
	   *  0 + 0 = 0
	   *  0 + N = N
	   *  0 + I = I
	   *  N + n = N
	   *  N + 0 = N
	   *  N + N = N
	   *  N + I = N
	   *  I + n = I
	   *  I + 0 = I
	   *  I + N = N
	   *  I + I = I
	   *
	   * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`
	   * significant digits using rounding mode `rounding`.
	   *
	   */P.plus=P.add=function(y){var carry,d,e,i,k,len,pr,rm,xd,yd,x=this,Ctor=x.constructor;y=new Ctor(y);// If either is not finite...
	if(!x.d||!y.d){// Return NaN if either is NaN.
	if(!x.s||!y.s)y=new Ctor(NaN);// Return x if y is finite and x is ±Infinity.
	// Return x if both are ±Infinity with the same sign.
	// Return NaN if both are ±Infinity with different signs.
	// Return y if x is finite and y is ±Infinity.
	else if(!x.d)y=new Ctor(y.d||x.s===y.s?x:NaN);return y;}// If signs differ...
	if(x.s!=y.s){y.s=-y.s;return x.minus(y);}xd=x.d;yd=y.d;pr=Ctor.precision;rm=Ctor.rounding;// If either is zero...
	if(!xd[0]||!yd[0]){// Return x if y is zero.
	// Return y if y is non-zero.
	if(!yd[0])y=new Ctor(x);return external?finalise(y,pr,rm):y;}// x and y are finite, non-zero numbers with the same sign.
	// Calculate base 1e7 exponents.
	k=mathfloor(x.e/LOG_BASE);e=mathfloor(y.e/LOG_BASE);xd=xd.slice();i=k-e;// If base 1e7 exponents differ...
	if(i){if(i<0){d=xd;i=-i;len=yd.length;}else{d=yd;e=k;len=xd.length;}// Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.
	k=Math.ceil(pr/LOG_BASE);len=k>len?k+1:len+1;if(i>len){i=len;d.length=1;}// Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.
	d.reverse();for(;i--;){d.push(0);}d.reverse();}len=xd.length;i=yd.length;// If yd is longer than xd, swap xd and yd so xd points to the longer array.
	if(len-i<0){i=len;d=yd;yd=xd;xd=d;}// Only start adding at yd.length - 1 as the further digits of xd can be left as they are.
	for(carry=0;i;){carry=(xd[--i]=xd[i]+yd[i]+carry)/BASE|0;xd[i]%=BASE;}if(carry){xd.unshift(carry);++e;}// Remove trailing zeros.
	// No need to check for zero, as +x + +y != 0 && -x + -y != 0
	for(len=xd.length;xd[--len]==0;){xd.pop();}y.d=xd;y.e=getBase10Exponent(xd,e);return external?finalise(y,pr,rm):y;};/*
	   * Return the number of significant digits of the value of this Decimal.
	   *
	   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
	   *
	   */P.precision=P.sd=function(z){var k,x=this;if(z!==void 0&&z!==!!z&&z!==1&&z!==0)throw Error(invalidArgument+z);if(x.d){k=getPrecision(x.d);if(z&&x.e+1>k)k=x.e+1;}else{k=NaN;}return k;};/*
	   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using
	   * rounding mode `rounding`.
	   *
	   */P.round=function(){var x=this,Ctor=x.constructor;return finalise(new Ctor(x),x.e+1,Ctor.rounding);};/*
	   * Return a new Decimal whose value is the sine of the value in radians of this Decimal.
	   *
	   * Domain: [-Infinity, Infinity]
	   * Range: [-1, 1]
	   *
	   * sin(x) = x - x^3/3! + x^5/5! - ...
	   *
	   * sin(0)         = 0
	   * sin(-0)        = -0
	   * sin(Infinity)  = NaN
	   * sin(-Infinity) = NaN
	   * sin(NaN)       = NaN
	   *
	   */P.sine=P.sin=function(){var pr,rm,x=this,Ctor=x.constructor;if(!x.isFinite())return new Ctor(NaN);if(x.isZero())return new Ctor(x);pr=Ctor.precision;rm=Ctor.rounding;Ctor.precision=pr+Math.max(x.e,x.sd())+LOG_BASE;Ctor.rounding=1;x=sine(Ctor,toLessThanHalfPi(Ctor,x));Ctor.precision=pr;Ctor.rounding=rm;return finalise(quadrant>2?x.neg():x,pr,rm,true);};/*
	   * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`
	   * significant digits using rounding mode `rounding`.
	   *
	   *  sqrt(-n) =  N
	   *  sqrt(N)  =  N
	   *  sqrt(-I) =  N
	   *  sqrt(I)  =  I
	   *  sqrt(0)  =  0
	   *  sqrt(-0) = -0
	   *
	   */P.squareRoot=P.sqrt=function(){var m,n,sd,r,rep,t,x=this,d=x.d,e=x.e,s=x.s,Ctor=x.constructor;// Negative/NaN/Infinity/zero?
	if(s!==1||!d||!d[0]){return new Ctor(!s||s<0&&(!d||d[0])?NaN:d?x:1/0);}external=false;// Initial estimate.
	s=Math.sqrt(+x);// Math.sqrt underflow/overflow?
	// Pass x to Math.sqrt as integer, then adjust the exponent of the result.
	if(s==0||s==1/0){n=digitsToString(d);if((n.length+e)%2==0)n+='0';s=Math.sqrt(n);e=mathfloor((e+1)/2)-(e<0||e%2);if(s==1/0){n='1e'+e;}else{n=s.toExponential();n=n.slice(0,n.indexOf('e')+1)+e;}r=new Ctor(n);}else{r=new Ctor(s.toString());}sd=(e=Ctor.precision)+3;// Newton-Raphson iteration.
	for(;;){t=r;r=t.plus(divide(x,t,sd+2,1)).times(0.5);// TODO? Replace with for-loop and checkRoundingDigits.
	if(digitsToString(t.d).slice(0,sd)===(n=digitsToString(r.d)).slice(0,sd)){n=n.slice(sd-3,sd+1);// The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or
	// 4999, i.e. approaching a rounding boundary, continue the iteration.
	if(n=='9999'||!rep&&n=='4999'){// On the first iteration only, check to see if rounding up gives the exact result as the
	// nines may infinitely repeat.
	if(!rep){finalise(t,e+1,0);if(t.times(t).eq(x)){r=t;break;}}sd+=4;rep=1;}else{// If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
	// If not, then there are further digits and m will be truthy.
	if(!+n||!+n.slice(1)&&n.charAt(0)=='5'){// Truncate to the first rounding digit.
	finalise(r,e+1,1);m=!r.times(r).eq(x);}break;}}}external=true;return finalise(r,e,Ctor.rounding,m);};/*
	   * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.
	   *
	   * Domain: [-Infinity, Infinity]
	   * Range: [-Infinity, Infinity]
	   *
	   * tan(0)         = 0
	   * tan(-0)        = -0
	   * tan(Infinity)  = NaN
	   * tan(-Infinity) = NaN
	   * tan(NaN)       = NaN
	   *
	   */P.tangent=P.tan=function(){var pr,rm,x=this,Ctor=x.constructor;if(!x.isFinite())return new Ctor(NaN);if(x.isZero())return new Ctor(x);pr=Ctor.precision;rm=Ctor.rounding;Ctor.precision=pr+10;Ctor.rounding=1;x=x.sin();x.s=1;x=divide(x,new Ctor(1).minus(x.times(x)).sqrt(),pr+10,0);Ctor.precision=pr;Ctor.rounding=rm;return finalise(quadrant==2||quadrant==4?x.neg():x,pr,rm,true);};/*
	   *  n * 0 = 0
	   *  n * N = N
	   *  n * I = I
	   *  0 * n = 0
	   *  0 * 0 = 0
	   *  0 * N = N
	   *  0 * I = N
	   *  N * n = N
	   *  N * 0 = N
	   *  N * N = N
	   *  N * I = N
	   *  I * n = I
	   *  I * 0 = N
	   *  I * N = N
	   *  I * I = I
	   *
	   * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant
	   * digits using rounding mode `rounding`.
	   *
	   */P.times=P.mul=function(y){var carry,e,i,k,r,rL,t,xdL,ydL,x=this,Ctor=x.constructor,xd=x.d,yd=(y=new Ctor(y)).d;y.s*=x.s;// If either is NaN, ±Infinity or ±0...
	if(!xd||!xd[0]||!yd||!yd[0]){return new Ctor(!y.s||xd&&!xd[0]&&!yd||yd&&!yd[0]&&!xd// Return NaN if either is NaN.
	// Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.
	?NaN// Return ±Infinity if either is ±Infinity.
	// Return ±0 if either is ±0.
	:!xd||!yd?y.s/0:y.s*0);}e=mathfloor(x.e/LOG_BASE)+mathfloor(y.e/LOG_BASE);xdL=xd.length;ydL=yd.length;// Ensure xd points to the longer array.
	if(xdL<ydL){r=xd;xd=yd;yd=r;rL=xdL;xdL=ydL;ydL=rL;}// Initialise the result array with zeros.
	r=[];rL=xdL+ydL;for(i=rL;i--;){r.push(0);}// Multiply!
	for(i=ydL;--i>=0;){carry=0;for(k=xdL+i;k>i;){t=r[k]+yd[i]*xd[k-i-1]+carry;r[k--]=t%BASE|0;carry=t/BASE|0;}r[k]=(r[k]+carry)%BASE|0;}// Remove trailing zeros.
	for(;!r[--rL];){r.pop();}if(carry)++e;else r.shift();// Remove trailing zeros.
	for(i=r.length;!r[--i];){r.pop();}y.d=r;y.e=getBase10Exponent(r,e);return external?finalise(y,Ctor.precision,Ctor.rounding):y;};/*
	   * Return a string representing the value of this Decimal in base 2, round to `sd` significant
	   * digits using rounding mode `rm`.
	   *
	   * If the optional `sd` argument is present then return binary exponential notation.
	   *
	   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   *
	   */P.toBinary=function(sd,rm){return toStringBinary(this,2,sd,rm);};/*
	   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`
	   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.
	   *
	   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.
	   *
	   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   *
	   */P.toDecimalPlaces=P.toDP=function(dp,rm){var x=this,Ctor=x.constructor;x=new Ctor(x);if(dp===void 0)return x;checkInt32(dp,0,MAX_DIGITS);if(rm===void 0)rm=Ctor.rounding;else checkInt32(rm,0,8);return finalise(x,dp+x.e+1,rm);};/*
	   * Return a string representing the value of this Decimal in exponential notation rounded to
	   * `dp` fixed decimal places using rounding mode `rounding`.
	   *
	   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   *
	   */P.toExponential=function(dp,rm){var str,x=this,Ctor=x.constructor;if(dp===void 0){str=finiteToString(x,true);}else{checkInt32(dp,0,MAX_DIGITS);if(rm===void 0)rm=Ctor.rounding;else checkInt32(rm,0,8);x=finalise(new Ctor(x),dp+1,rm);str=finiteToString(x,true,dp+1);}return x.isNeg()&&!x.isZero()?'-'+str:str;};/*
	   * Return a string representing the value of this Decimal in normal (fixed-point) notation to
	   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is
	   * omitted.
	   *
	   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.
	   *
	   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   *
	   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
	   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
	   * (-0).toFixed(3) is '0.000'.
	   * (-0.5).toFixed(0) is '-0'.
	   *
	   */P.toFixed=function(dp,rm){var str,y,x=this,Ctor=x.constructor;if(dp===void 0){str=finiteToString(x);}else{checkInt32(dp,0,MAX_DIGITS);if(rm===void 0)rm=Ctor.rounding;else checkInt32(rm,0,8);y=finalise(new Ctor(x),dp+x.e+1,rm);str=finiteToString(y,false,dp+y.e+1);}// To determine whether to add the minus sign look at the value before it was rounded,
	// i.e. look at `x` rather than `y`.
	return x.isNeg()&&!x.isZero()?'-'+str:str;};/*
	   * Return an array representing the value of this Decimal as a simple fraction with an integer
	   * numerator and an integer denominator.
	   *
	   * The denominator will be a positive non-zero value less than or equal to the specified maximum
	   * denominator. If a maximum denominator is not specified, the denominator will be the lowest
	   * value necessary to represent the number exactly.
	   *
	   * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.
	   *
	   */P.toFraction=function(maxD){var d,d0,d1,d2,e,k,n,n0,n1,pr,q,r,x=this,xd=x.d,Ctor=x.constructor;if(!xd)return new Ctor(x);n1=d0=new Ctor(1);d1=n0=new Ctor(0);d=new Ctor(d1);e=d.e=getPrecision(xd)-x.e-1;k=e%LOG_BASE;d.d[0]=mathpow(10,k<0?LOG_BASE+k:k);if(maxD==null){// d is 10**e, the minimum max-denominator needed.
	maxD=e>0?d:n1;}else{n=new Ctor(maxD);if(!n.isInt()||n.lt(n1))throw Error(invalidArgument+n);maxD=n.gt(d)?e>0?d:n1:n;}external=false;n=new Ctor(digitsToString(xd));pr=Ctor.precision;Ctor.precision=e=xd.length*LOG_BASE*2;for(;;){q=divide(n,d,0,1,1);d2=d0.plus(q.times(d1));if(d2.cmp(maxD)==1)break;d0=d1;d1=d2;d2=n1;n1=n0.plus(q.times(d2));n0=d2;d2=d;d=n.minus(q.times(d2));n=d2;}d2=divide(maxD.minus(d0),d1,0,1,1);n0=n0.plus(d2.times(n1));d0=d0.plus(d2.times(d1));n0.s=n1.s=x.s;// Determine which fraction is closer to x, n0/d0 or n1/d1?
	r=divide(n1,d1,e,1).minus(x).abs().cmp(divide(n0,d0,e,1).minus(x).abs())<1?[n1,d1]:[n0,d0];Ctor.precision=pr;external=true;return r;};/*
	   * Return a string representing the value of this Decimal in base 16, round to `sd` significant
	   * digits using rounding mode `rm`.
	   *
	   * If the optional `sd` argument is present then return binary exponential notation.
	   *
	   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   *
	   */P.toHexadecimal=P.toHex=function(sd,rm){return toStringBinary(this,16,sd,rm);};/*
	   * Return a string representing the exact value of this Decimal in a compact base-88 based format.
	   *
	   * The number of characters of the string will always be equal to or less than the number of
	   * characters returned by `toString` or `toExponential` - usually just over half as many.
	   *
	   * The original Decimal value can be recreated by passing the string to `Decimal.fromJSON`.
	   *
	   * Base 88 alphabet:
	   * 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%()*+,-./:;=?@[]^_`{|}~
	   *
	   * The following 7 printable ASCII characters are not used
	   * (space) \ " & ' < >
	   * so the return value is safe for strings, HTML, JSON, and XML.
	   *
	   *     0   0     g  16    w  32    M  48    $  64    ]  80
	   *     1   1     h  17    x  33    N  49    %  65    ^  81
	   *     2   2     i  18    y  34    O  50    (  66    _  82
	   *     3   3     j  19    z  35    P  51    )  67    `  83
	   *     4   4     k  20    A  36    Q  52    *  68    {  84
	   *     5   5     l  21    B  37    R  53    +  69    |  85
	   *     6   6     m  22    C  38    S  54    ,  70    }  86
	   *     7   7     n  23    D  39    T  55    -  71    ~  87
	   *     8   8     o  24    E  40    U  56    .  72
	   *     9   9     p  25    F  41    V  57    /  73
	   *     a  10     q  26    G  42    W  58    :  74
	   *     b  11     r  27    H  43    X  59    ;  75
	   *     c  12     s  28    I  44    Y  60    =  76
	   *     d  13     t  29    J  45    Z  61    ?  77
	   *     e  14     u  30    K  46    !  62    @  78
	   *     f  15     v  31    L  47    #  63    [  79
	   *
	   * If the return value is just one character, it represents:
	   * 0-81  [[0, 40][-0, -40]]
	   * 82    -Infinity
	   * 83    +Infinity
	   * 84    NaN
	   * 85-87 free
	   *
	   *   64 32 16  8  4  2  1
	   *    1  0  1  0  1  1  1 = 87
	   *
	   */P.toJSON=function(){var arr,e,i,k,len,n,r,str,x=this,isNeg=x.s<0;// -Infinity/Infinity/NaN.
	if(!x.d)return NUMERALS.charAt(x.s?isNeg?82:83:84);e=x.e;// Small integer.
	if(x.d.length===1&&e<4&&e>=0){n=x.d[0];if(n<2857){// One character.
	// [[0, 40][-0, -40]]
	if(n<41)return NUMERALS.charAt(isNeg?n+41:n);// Two characters. High bit of first character unset.
	// 0XXXXXX
	// 63*88 + 87 = 5631 = 5632 values, 5632/2 = 2816
	// [[0, 2815][2816, 5631]]  (2816 * 2 = 5632 values)
	// [[0, 2815][-0, -2815]]
	// [[41, 2856][-41, -2856]]
	n-=41;if(isNeg)n+=2816;k=n/88|0;return NUMERALS.charAt(k)+NUMERALS.charAt(n-k*88);}}str=digitsToString(x.d);r='';// Values with a small exponent. Set high bit.
	// Positive value: 100XXXX
	// 1 0 0 {exponent [0, 15] -> [-7, 8]}
	if(!isNeg&&e<=8&&e>=-7){k=64+e+7;// Negative value: 1010XXX
	// 1 0 1 0 {exponent [0, 7] -> [-3, 4]}
	}else if(isNeg&&e<=4&&e>=-3){k=64+16+e+3;// Integer without trailing zeros: 0X00000
	// 0 {is negative} 0 0 0 0 0
	}else if(str.length===e+1){k=32*isNeg;// All remaining values: 0XXXXXX
	// Result will have at least 3 characters.
	// 0 {is negative} {is exponent negative} {exponent character count [1, 15]}
	}else{k=32*isNeg+16*(e<0);e=Math.abs(e);// One character to represent the exponent.
	if(e<88){k+=1;r=NUMERALS.charAt(e);// Two characters to represent the exponent.
	// 87*88 + 87 = 7743
	}else if(e<7744){k+=2;n=e/88|0;r=NUMERALS.charAt(n)+NUMERALS.charAt(e-n*88);// More than two characters to represent the exponent.
	}else{arr=convertBase(String(e),10,88);len=arr.length;k+=len;for(i=0;i<len;i++){r+=NUMERALS.charAt(arr[i]);}}}// At this point r contains the characters in base 88 representing the exponent value.
	// Prepend the first character, which describes the sign, the exponent sign, and the number of
	// characters that follow which represent the exponent value.
	r=NUMERALS.charAt(k)+r;arr=convertBase(str,10,88);len=arr.length;// Add the base 88 characters that represent the significand.
	for(i=0;i<len;i++){r+=NUMERALS.charAt(arr[i]);}return r;};/*
	   * Returns a new Decimal whose value is the nearest multiple of the magnitude of `y` to the value
	   * of this Decimal.
	   *
	   * If the value of this Decimal is equidistant from two multiples of `y`, the rounding mode `rm`,
	   * or `Decimal.rounding` if `rm` is omitted, determines the direction of the nearest multiple.
	   *
	   * In the context of this method, rounding mode 4 (ROUND_HALF_UP) is the same as rounding mode 0
	   * (ROUND_UP), and so on.
	   *
	   * The return value will always have the same sign as this Decimal, unless either this Decimal
	   * or `y` is NaN, in which case the return value will be also be NaN.
	   *
	   * The return value is not affected by the value of `precision`.
	   *
	   * y {number|string|Decimal} The magnitude to round to a multiple of.
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   *
	   * 'toNearest() rounding mode not an integer: {rm}'
	   * 'toNearest() rounding mode out of range: {rm}'
	   *
	   */P.toNearest=function(y,rm){var x=this,Ctor=x.constructor;x=new Ctor(x);if(y==null){// If x is not finite, return x.
	if(!x.d)return x;y=new Ctor(1);rm=Ctor.rounding;}else{y=new Ctor(y);if(rm!==void 0)checkInt32(rm,0,8);// If x is not finite, return x if y is not NaN, else NaN.
	if(!x.d)return y.s?x:y;// If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.
	if(!y.d){if(y.s)y.s=x.s;return y;}}// If y is not zero, calculate the nearest multiple of y to x.
	if(y.d[0]){external=false;if(rm<4)rm=[4,5,7,8][rm];x=divide(x,y,0,rm,1).times(y);external=true;finalise(x);// If y is zero, return zero with the sign of x.
	}else{y.s=x.s;x=y;}return x;};/*
	   * Return the value of this Decimal converted to a number primitive.
	   * Zero keeps its sign.
	   *
	   */P.toNumber=function(){return+this;};/*
	   * Return a string representing the value of this Decimal in base 8, round to `sd` significant
	   * digits using rounding mode `rm`.
	   *
	   * If the optional `sd` argument is present then return binary exponential notation.
	   *
	   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   *
	   */P.toOctal=function(sd,rm){return toStringBinary(this,8,sd,rm);};/*
	   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded
	   * to `precision` significant digits using rounding mode `rounding`.
	   *
	   * ECMAScript compliant.
	   *
	   *   pow(x, NaN)                           = NaN
	   *   pow(x, ±0)                            = 1

	   *   pow(NaN, non-zero)                    = NaN
	   *   pow(abs(x) > 1, +Infinity)            = +Infinity
	   *   pow(abs(x) > 1, -Infinity)            = +0
	   *   pow(abs(x) == 1, ±Infinity)           = NaN
	   *   pow(abs(x) < 1, +Infinity)            = +0
	   *   pow(abs(x) < 1, -Infinity)            = +Infinity
	   *   pow(+Infinity, y > 0)                 = +Infinity
	   *   pow(+Infinity, y < 0)                 = +0
	   *   pow(-Infinity, odd integer > 0)       = -Infinity
	   *   pow(-Infinity, even integer > 0)      = +Infinity
	   *   pow(-Infinity, odd integer < 0)       = -0
	   *   pow(-Infinity, even integer < 0)      = +0
	   *   pow(+0, y > 0)                        = +0
	   *   pow(+0, y < 0)                        = +Infinity
	   *   pow(-0, odd integer > 0)              = -0
	   *   pow(-0, even integer > 0)             = +0
	   *   pow(-0, odd integer < 0)              = -Infinity
	   *   pow(-0, even integer < 0)             = +Infinity
	   *   pow(finite x < 0, finite non-integer) = NaN
	   *
	   * For non-integer or very large exponents pow(x, y) is calculated using
	   *
	   *   x^y = exp(y*ln(x))
	   *
	   * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the
	   * probability of an incorrectly rounded result
	   * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14
	   * i.e. 1 in 250,000,000,000,000
	   *
	   * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).
	   *
	   * y {number|string|Decimal} The power to which to raise this Decimal.
	   *
	   */P.toPower=P.pow=function(y){var e,k,pr,r,rm,sign,yIsInt,x=this,Ctor=x.constructor,yn=+(y=new Ctor(y));// Either ±Infinity, NaN or ±0?
	if(!x.d||!y.d||!x.d[0]||!y.d[0])return new Ctor(mathpow(+x,yn));x=new Ctor(x);if(x.eq(1))return x;pr=Ctor.precision;rm=Ctor.rounding;if(y.eq(1))return finalise(x,pr,rm);e=mathfloor(y.e/LOG_BASE);k=y.d.length-1;yIsInt=e>=k;sign=x.s;if(!yIsInt){if(sign<0)return new Ctor(NaN);// If y is a small integer use the 'exponentiation by squaring' algorithm.
	}else if((k=yn<0?-yn:yn)<=MAX_SAFE_INTEGER){r=intPow(Ctor,x,k,pr);return y.s<0?new Ctor(1).div(r):finalise(r,pr,rm);}// Result is negative if x is negative and the last digit of integer y is odd.
	sign=sign<0&&y.d[Math.max(e,k)]&1?-1:1;// Estimate result exponent.
	// x^y = 10^e,  where e = y * log10(x)
	// log10(x) = log10(x_significand) + x_exponent
	// log10(x_significand) = ln(x_significand) / ln(10)
	k=mathpow(+x,yn);e=k==0||!isFinite(k)?mathfloor(yn*(Math.log('0.'+digitsToString(x.d))/Math.LN10+x.e+1)):new Ctor(k+'').e;// Estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.
	// Overflow/underflow?
	if(e>Ctor.maxE+1||e<Ctor.minE-1)return new Ctor(e>0?sign/0:0);external=false;Ctor.rounding=x.s=1;// Estimate the extra guard digits needed to ensure five correct rounding digits from
	// naturalLogarithm(x). Example of failure without these extra digits (precision: 10):
	// new Decimal(2.32456).pow('2087987436534566.46411')
	// should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815
	k=Math.min(12,(e+'').length);// r = x^y = exp(y*ln(x))
	r=naturalExponential(y.times(naturalLogarithm(x,pr+k)),pr);// Truncate to the required precision plus five rounding digits.
	r=finalise(r,pr+5,1);// If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate
	// the result.
	if(checkRoundingDigits(r.d,pr,rm)){e=pr+10;// Truncate to the increased precision plus five rounding digits.
	r=finalise(naturalExponential(y.times(naturalLogarithm(x,e+k)),e),e+5,1);// Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).
	if(+digitsToString(r.d).slice(pr+1,pr+15)+1==1e14){r=finalise(r,pr+1,0);}}r.s=sign;external=true;Ctor.rounding=rm;return finalise(r,pr,rm);};/*
	   * Return a string representing the value of this Decimal rounded to `sd` significant digits
	   * using rounding mode `rounding`.
	   *
	   * Return exponential notation if `sd` is less than the number of digits necessary to represent
	   * the integer part of the value in normal notation.
	   *
	   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   *
	   */P.toPrecision=function(sd,rm){var str,x=this,Ctor=x.constructor;if(sd===void 0){str=finiteToString(x,x.e<=Ctor.toExpNeg||x.e>=Ctor.toExpPos);}else{checkInt32(sd,1,MAX_DIGITS);if(rm===void 0)rm=Ctor.rounding;else checkInt32(rm,0,8);x=finalise(new Ctor(x),sd,rm);str=finiteToString(x,sd<=x.e||x.e<=Ctor.toExpNeg,sd);}return x.isNeg()&&!x.isZero()?'-'+str:str;};/*
	   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`
	   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if
	   * omitted.
	   *
	   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   *
	   * 'toSD() digits out of range: {sd}'
	   * 'toSD() digits not an integer: {sd}'
	   * 'toSD() rounding mode not an integer: {rm}'
	   * 'toSD() rounding mode out of range: {rm}'
	   *
	   */P.toSignificantDigits=P.toSD=function(sd,rm){var x=this,Ctor=x.constructor;if(sd===void 0){sd=Ctor.precision;rm=Ctor.rounding;}else{checkInt32(sd,1,MAX_DIGITS);if(rm===void 0)rm=Ctor.rounding;else checkInt32(rm,0,8);}return finalise(new Ctor(x),sd,rm);};/*
	   * Return a string representing the value of this Decimal.
	   *
	   * Return exponential notation if this Decimal has a positive exponent equal to or greater than
	   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.
	   *
	   */P.toString=function(){var x=this,Ctor=x.constructor,str=finiteToString(x,x.e<=Ctor.toExpNeg||x.e>=Ctor.toExpPos);return x.isNeg()&&!x.isZero()?'-'+str:str;};/*
	   * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.
	   *
	   */P.truncated=P.trunc=function(){return finalise(new this.constructor(this),this.e+1,1);};/*
	   * Return a string representing the value of this Decimal.
	   * Unlike `toString`, negative zero will include the minus sign.
	   *
	   */P.valueOf=function(){var x=this,Ctor=x.constructor,str=finiteToString(x,x.e<=Ctor.toExpNeg||x.e>=Ctor.toExpPos);return x.isNeg()?'-'+str:str;};/*
	  // Add aliases to match BigDecimal method names.
	  // P.add = P.plus;
	  P.subtract = P.minus;
	  P.multiply = P.times;
	  P.divide = P.div;
	  P.remainder = P.mod;
	  P.compareTo = P.cmp;
	  P.negate = P.neg;
	   */// Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.
	/*
	   *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toJSON,
	   *                           P.toPower, finiteToString, naturalExponential, naturalLogarithm
	   *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,
	   *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random
	   *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm
	   *  convertBase              P.toJSON, toStringBinary, fromJSON, parseOther
	   *  cos                      P.cos
	   *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,
	   *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,
	   *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,
	   *                           taylorSeries, atan2, parseOther
	   *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,
	   *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,
	   *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,
	   *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,
	   *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,
	   *                           P.truncated, divide, getLn10, getPi, naturalExponential,
	   *                           naturalLogarithm, ceil, floor, round, trunc
	   *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,
	   *                           toStringBinary
	   *  getBase10Exponent        P.minus, P.plus, P.times, parseOther
	   *  getLn10                  P.logarithm, naturalLogarithm
	   *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2
	   *  getPrecision             P.precision, P.toFraction
	   *  getZeroString            digitsToString, finiteToString
	   *  intPow                   P.toPower, parseOther
	   *  isOdd                    toLessThanHalfPi
	   *  maxOrMin                 max, min
	   *  naturalExponential       P.naturalExponential, P.toPower
	   *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,
	   *                           P.toPower, naturalExponential
	   *  nonFiniteToString        finiteToString, toStringBinary
	   *  parseDecimal             Decimal
	   *  parseOther               Decimal
	   *  sin                      P.sin
	   *  taylorSeries             P.cosh, P.sinh, cos, sin
	   *  toLessThanHalfPi         P.cos, P.sin
	   *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal
	   *  truncate                 intPow
	   *
	   *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,
	   *                           naturalLogarithm, config, fromJSON, parseOther, random, Decimal           *
	   */function digitsToString(d){var i,k,ws,indexOfLastWord=d.length-1,str='',w=d[0];if(indexOfLastWord>0){str+=w;for(i=1;i<indexOfLastWord;i++){ws=d[i]+'';k=LOG_BASE-ws.length;if(k)str+=getZeroString(k);str+=ws;}w=d[i];ws=w+'';k=LOG_BASE-ws.length;if(k)str+=getZeroString(k);}else if(w===0){return'0';}// Remove trailing zeros of last w.
	for(;w%10===0;){w/=10;}return str+w;}function checkInt32(i,min,max){if(i!==~~i||i<min||i>max){throw Error(invalidArgument+i);}}/*
	   * Check 5 rounding digits if `repeating` is null, 4 otherwise.
	   * `repeating == null` if caller is `log` or `pow`,
	   * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.
	   */function checkRoundingDigits(d,i,rm,repeating){var di,k,r,rd;// Get the length of the first word of the array d.
	for(k=d[0];k>=10;k/=10){--i;}// Is the rounding digit in the first word of d?
	if(--i<0){i+=LOG_BASE;di=0;}else{di=Math.ceil((i+1)/LOG_BASE);i%=LOG_BASE;}// i is the index (0 - 6) of the rounding digit.
	// E.g. if within the word 3487563 the first rounding digit is 5,
	// then i = 4, k = 1000, rd = 3487563 % 1000 = 563
	k=mathpow(10,LOG_BASE-i);rd=d[di]%k|0;if(repeating==null){if(i<3){if(i==0)rd=rd/100|0;else if(i==1)rd=rd/10|0;r=rm<4&&rd==99999||rm>3&&rd==49999||rd==50000||rd==0;}else{r=(rm<4&&rd+1==k||rm>3&&rd+1==k/2)&&(d[di+1]/k/100|0)==mathpow(10,i-2)-1||(rd==k/2||rd==0)&&(d[di+1]/k/100|0)==0;}}else{if(i<4){if(i==0)rd=rd/1000|0;else if(i==1)rd=rd/100|0;else if(i==2)rd=rd/10|0;r=(repeating||rm<4)&&rd==9999||!repeating&&rm>3&&rd==4999;}else{r=((repeating||rm<4)&&rd+1==k||!repeating&&rm>3&&rd+1==k/2)&&(d[di+1]/k/1000|0)==mathpow(10,i-3)-1;}}return r;}// Convert string of `baseIn` to an array of numbers of `baseOut`.
	// Eg. convertBase('255', 10, 16) returns [15, 15].
	// Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
	function convertBase(str,baseIn,baseOut){var j,arr=[0],arrL,i=0,strL=str.length;for(;i<strL;){for(arrL=arr.length;arrL--;){arr[arrL]*=baseIn;}arr[0]+=NUMERALS.indexOf(str.charAt(i++));for(j=0;j<arr.length;j++){if(arr[j]>baseOut-1){if(arr[j+1]===void 0)arr[j+1]=0;arr[j+1]+=arr[j]/baseOut|0;arr[j]%=baseOut;}}}return arr.reverse();}/*
	   * cos(x) = 1 - x^2/2! + x^4/4! - ...
	   * |x| < pi/2
	   *
	   */function cosine(Ctor,x){var k,y,len=x.d.length;// Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1
	// i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1
	// Estimate the optimum number of times to use the argument reduction.
	if(len<32){k=Math.ceil(len/3);y=Math.pow(4,-k).toString();}else{k=16;y='2.3283064365386962890625e-10';}Ctor.precision+=k;x=taylorSeries(Ctor,1,x.times(y),new Ctor(1));// Reverse argument reduction
	for(var i=k;i--;){var cos2x=x.times(x);x=cos2x.times(cos2x).minus(cos2x).times(8).plus(1);}Ctor.precision-=k;return x;}/*
	   * Perform division in the specified base.
	   */var divide=function(){// Assumes non-zero x and k, and hence non-zero result.
	function multiplyInteger(x,k,base){var temp,carry=0,i=x.length;for(x=x.slice();i--;){temp=x[i]*k+carry;x[i]=temp%base|0;carry=temp/base|0;}if(carry)x.unshift(carry);return x;}function compare(a,b,aL,bL){var i,r;if(aL!=bL){r=aL>bL?1:-1;}else{for(i=r=0;i<aL;i++){if(a[i]!=b[i]){r=a[i]>b[i]?1:-1;break;}}}return r;}function subtract(a,b,aL,base){var i=0;// Subtract b from a.
	for(;aL--;){a[aL]-=i;i=a[aL]<b[aL]?1:0;a[aL]=i*base+a[aL]-b[aL];}// Remove leading zeros.
	for(;!a[0]&&a.length>1;){a.shift();}}return function(x,y,pr,rm,dp,base){var cmp,e,i,k,logBase,more,prod,prodL,q,qd,rem,remL,rem0,sd,t,xi,xL,yd0,yL,yz,Ctor=x.constructor,sign=x.s==y.s?1:-1,xd=x.d,yd=y.d;// Either NaN, Infinity or 0?
	if(!xd||!xd[0]||!yd||!yd[0]){return new Ctor(// Return NaN if either NaN, or both Infinity or 0.
	!x.s||!y.s||(xd?yd&&xd[0]==yd[0]:!yd)?NaN:// Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.
	xd&&xd[0]==0||!yd?sign*0:sign/0);}if(base){logBase=1;e=x.e-y.e;}else{base=BASE;logBase=LOG_BASE;e=mathfloor(x.e/logBase)-mathfloor(y.e/logBase);}yL=yd.length;xL=xd.length;q=new Ctor(sign);qd=q.d=[];// Result exponent may be one less than e.
	// The digit array of a Decimal from toStringBinary may have trailing zeros.
	for(i=0;yd[i]==(xd[i]||0);i++){}if(yd[i]>(xd[i]||0))e--;if(pr==null){sd=pr=Ctor.precision;rm=Ctor.rounding;}else if(dp){sd=pr+(x.e-y.e)+1;}else{sd=pr;}if(sd<0){qd.push(1);more=true;}else{// Convert precision in number of base 10 digits to base 1e7 digits.
	sd=sd/logBase+2|0;i=0;// divisor < 1e7
	if(yL==1){k=0;yd=yd[0];sd++;// k is the carry.
	for(;(i<xL||k)&&sd--;i++){t=k*base+(xd[i]||0);qd[i]=t/yd|0;k=t%yd|0;}more=k||i<xL;// divisor >= 1e7
	}else{// Normalise xd and yd so highest order digit of yd is >= base/2
	k=base/(yd[0]+1)|0;if(k>1){yd=multiplyInteger(yd,k,base);xd=multiplyInteger(xd,k,base);yL=yd.length;xL=xd.length;}xi=yL;rem=xd.slice(0,yL);remL=rem.length;// Add zeros to make remainder as long as divisor.
	for(;remL<yL;){rem[remL++]=0;}yz=yd.slice();yz.unshift(0);yd0=yd[0];if(yd[1]>=base/2)++yd0;do{k=0;// Compare divisor and remainder.
	cmp=compare(yd,rem,yL,remL);// If divisor < remainder.
	if(cmp<0){// Calculate trial digit, k.
	rem0=rem[0];if(yL!=remL)rem0=rem0*base+(rem[1]||0);// k will be how many times the divisor goes into the current remainder.
	k=rem0/yd0|0;//  Algorithm:
	//  1. product = divisor * trial digit (k)
	//  2. if product > remainder: product -= divisor, k--
	//  3. remainder -= product
	//  4. if product was < remainder at 2:
	//    5. compare new remainder and divisor
	//    6. If remainder > divisor: remainder -= divisor, k++
	if(k>1){if(k>=base)k=base-1;// product = divisor * trial digit.
	prod=multiplyInteger(yd,k,base);prodL=prod.length;remL=rem.length;// Compare product and remainder.
	cmp=compare(prod,rem,prodL,remL);// product > remainder.
	if(cmp==1){k--;// Subtract divisor from product.
	subtract(prod,yL<prodL?yz:yd,prodL,base);}}else{// cmp is -1.
	// If k is 0, there is no need to compare yd and rem again below, so change cmp to 1
	// to avoid it. If k is 1 there is a need to compare yd and rem again below.
	if(k==0)cmp=k=1;prod=yd.slice();}prodL=prod.length;if(prodL<remL)prod.unshift(0);// Subtract product from remainder.
	subtract(rem,prod,remL,base);// If product was < previous remainder.
	if(cmp==-1){remL=rem.length;// Compare divisor and new remainder.
	cmp=compare(yd,rem,yL,remL);// If divisor < new remainder, subtract divisor from remainder.
	if(cmp<1){k++;// Subtract divisor from remainder.
	subtract(rem,yL<remL?yz:yd,remL,base);}}remL=rem.length;}else if(cmp===0){k++;rem=[0];}// if cmp === 1, k will be 0
	// Add the next digit, k, to the result array.
	qd[i++]=k;// Update the remainder.
	if(cmp&&rem[0]){rem[remL++]=xd[xi]||0;}else{rem=[xd[xi]];remL=1;}}while((xi++<xL||rem[0]!==void 0)&&sd--);more=rem[0]!==void 0;}// Leading zero?
	if(!qd[0])qd.shift();}// logBase is 1 when divide is being used for base conversion.
	if(logBase==1){q.e=e;inexact=more;}else{// To calculate q.e, first get the number of digits of qd[0].
	for(i=1,k=qd[0];k>=10;k/=10){i++;}q.e=i+e*logBase-1;finalise(q,dp?pr+q.e+1:pr,rm,more);}return q;};}();/*
	   * Round `x` to `sd` significant digits using rounding mode `rm`.
	   * Check for over/under-flow.
	   */function finalise(x,sd,rm,isTruncated){var digits,i,j,k,rd,roundUp,w,xd,xdi,Ctor=x.constructor;// Don't round if sd is null or undefined.
	out:if(sd!=null){xd=x.d;// Infinity/NaN.
	if(!xd)return x;// rd: the rounding digit, i.e. the digit after the digit that may be rounded up.
	// w: the word of xd containing rd, a base 1e7 number.
	// xdi: the index of w within xd.
	// digits: the number of digits of w.
	// i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if
	// they had leading zeros)
	// j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).
	// Get the length of the first word of the digits array xd.
	for(digits=1,k=xd[0];k>=10;k/=10){digits++;}i=sd-digits;// Is the rounding digit in the first word of xd?
	if(i<0){i+=LOG_BASE;j=sd;w=xd[xdi=0];// Get the rounding digit at index j of w.
	rd=w/mathpow(10,digits-j-1)%10|0;}else{xdi=Math.ceil((i+1)/LOG_BASE);k=xd.length;if(xdi>=k){if(isTruncated){// Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.
	for(;k++<=xdi;){xd.push(0);}w=rd=0;digits=1;i%=LOG_BASE;j=i-LOG_BASE+1;}else{break out;}}else{w=k=xd[xdi];// Get the number of digits of w.
	for(digits=1;k>=10;k/=10){digits++;}// Get the index of rd within w.
	i%=LOG_BASE;// Get the index of rd within w, adjusted for leading zeros.
	// The number of leading zeros of w is given by LOG_BASE - digits.
	j=i-LOG_BASE+digits;// Get the rounding digit at index j of w.
	rd=j<0?0:w/mathpow(10,digits-j-1)%10|0;}}// Are there any non-zero digits after the rounding digit?
	isTruncated=isTruncated||sd<0||xd[xdi+1]!==void 0||(j<0?w:w%mathpow(10,digits-j-1));// The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right
	// of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression
	// will give 714.
	roundUp=rm<4?(rd||isTruncated)&&(rm==0||rm==(x.s<0?3:2)):rd>5||rd==5&&(rm==4||isTruncated||rm==6&&// Check whether the digit to the left of the rounding digit is odd.
	(i>0?j>0?w/mathpow(10,digits-j):0:xd[xdi-1])%10&1||rm==(x.s<0?8:7));if(sd<1||!xd[0]){xd.length=0;if(roundUp){// Convert sd to decimal places.
	sd-=x.e+1;// 1, 0.1, 0.01, 0.001, 0.0001 etc.
	xd[0]=mathpow(10,(LOG_BASE-sd%LOG_BASE)%LOG_BASE);x.e=-sd||0;}else{// Zero.
	xd[0]=x.e=0;}return x;}// Remove excess digits.
	if(i==0){xd.length=xdi;k=1;xdi--;}else{xd.length=xdi+1;k=mathpow(10,LOG_BASE-i);// E.g. 56700 becomes 56000 if 7 is the rounding digit.
	// j > 0 means i > number of leading zeros of w.
	xd[xdi]=j>0?(w/mathpow(10,digits-j)%mathpow(10,j)|0)*k:0;}if(roundUp){for(;;){// Is the digit to be rounded up in the first word of xd?
	if(xdi==0){// i will be the length of xd[0] before k is added.
	for(i=1,j=xd[0];j>=10;j/=10){i++;}j=xd[0]+=k;for(k=1;j>=10;j/=10){k++;}// if i != k the length has increased.
	if(i!=k){x.e++;if(xd[0]==BASE)xd[0]=1;}break;}else{xd[xdi]+=k;if(xd[xdi]!=BASE)break;xd[xdi--]=0;k=1;}}}// Remove trailing zeros.
	for(i=xd.length;xd[--i]===0;){xd.pop();}}if(external){// Overflow?
	if(x.e>Ctor.maxE){// Infinity.
	x.d=null;x.e=NaN;// Underflow?
	}else if(x.e<Ctor.minE){// Zero.
	x.e=0;x.d=[0];// Ctor.underflow = true;
	}// else Ctor.underflow = false;
	}return x;}function finiteToString(x,isExp,sd){if(!x.isFinite())return nonFiniteToString(x);var k,e=x.e,str=digitsToString(x.d),len=str.length;if(isExp){if(sd&&(k=sd-len)>0){str=str.charAt(0)+'.'+str.slice(1)+getZeroString(k);}else if(len>1){str=str.charAt(0)+'.'+str.slice(1);}str=str+(x.e<0?'e':'e+')+x.e;}else if(e<0){str='0.'+getZeroString(-e-1)+str;if(sd&&(k=sd-len)>0)str+=getZeroString(k);}else if(e>=len){str+=getZeroString(e+1-len);if(sd&&(k=sd-e-1)>0)str=str+'.'+getZeroString(k);}else{if((k=e+1)<len)str=str.slice(0,k)+'.'+str.slice(k);if(sd&&(k=sd-len)>0){if(e+1===len)str+='.';str+=getZeroString(k);}}return str;}// Calculate the base 10 exponent from the base 1e7 exponent.
	function getBase10Exponent(digits,e){// First get the number of digits of the first word of the digits array.
	for(var i=1,w=digits[0];w>=10;w/=10){i++;}return i+e*LOG_BASE-1;}function getLn10(Ctor,sd,pr){if(sd>LN10_PRECISION){// Reset global state in case the exception is caught.
	external=true;if(pr)Ctor.precision=pr;throw Error(precisionLimitExceeded);}return finalise(new Ctor(LN10),sd,1,true);}function getPi(Ctor,sd,rm){if(sd>PI_PRECISION)throw Error(precisionLimitExceeded);return finalise(new Ctor(PI),sd,rm,true);}function getPrecision(digits){var w=digits.length-1,len=w*LOG_BASE+1;w=digits[w];// If non-zero...
	if(w){// Subtract the number of trailing zeros of the last word.
	for(;w%10==0;w/=10){len--;}// Add the number of digits of the first word.
	for(w=digits[0];w>=10;w/=10){len++;}}return len;}function getZeroString(k){var zs='';for(;k--;){zs+='0';}return zs;}/*
	   * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an
	   * integer of type number.
	   *
	   * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.
	   *
	   */function intPow(Ctor,x,n,pr){var isTruncated,r=new Ctor(1),// Max n of 9007199254740991 takes 53 loop iterations.
	// Maximum digits array length; leaves [28, 34] guard digits.
	k=Math.ceil(pr/LOG_BASE+4);external=false;for(;;){if(n%2){r=r.times(x);if(truncate(r.d,k))isTruncated=true;}n=mathfloor(n/2);if(n===0){// To ensure correct rounding when r.d is truncated, increment the last word if it is zero.
	n=r.d.length-1;if(isTruncated&&r.d[n]===0)++r.d[n];break;}x=x.times(x);truncate(x.d,k);}external=true;return r;}function isOdd(n){return n.d[n.d.length-1]&1;}/*
	   * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.
	   */function maxOrMin(Ctor,args,ltgt){var y,x=new Ctor(args[0]),i=0;for(;++i<args.length;){y=new Ctor(args[i]);if(!y.s){x=y;break;}else if(x[ltgt](y)){x=y;}}return x;}/*
	   * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant
	   * digits.
	   *
	   * Taylor/Maclaurin series.
	   *
	   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...
	   *
	   * Argument reduction:
	   *   Repeat x = x / 32, k += 5, until |x| < 0.1
	   *   exp(x) = exp(x / 2^k)^(2^k)
	   *
	   * Previously, the argument was initially reduced by
	   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)
	   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was
	   * found to be slower than just dividing repeatedly by 32 as above.
	   *
	   * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000
	   * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000
	   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)
	   *
	   *  exp(Infinity)  = Infinity
	   *  exp(-Infinity) = 0
	   *  exp(NaN)       = NaN
	   *  exp(±0)        = 1
	   *
	   *  exp(x) is non-terminating for any finite, non-zero x.
	   *
	   *  The result will always be correctly rounded.
	   *
	   */function naturalExponential(x,sd){var denominator,guard,j,pow,sum,t,wpr,rep=0,i=0,k=0,Ctor=x.constructor,rm=Ctor.rounding,pr=Ctor.precision;// 0/NaN/Infinity?
	if(!x.d||!x.d[0]||x.e>17){return new Ctor(x.d?!x.d[0]?1:x.s<0?0:1/0:x.s?x.s<0?0:x:0/0);}if(sd==null){external=false;wpr=pr;}else{wpr=sd;}t=new Ctor(0.03125);// while abs(x) >= 0.1
	while(x.e>-2){// x = x / 2^5
	x=x.times(t);k+=5;}// Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision
	// necessary to ensure the first 4 rounding digits are correct.
	guard=Math.log(mathpow(2,k))/Math.LN10*2+5|0;wpr+=guard;denominator=pow=sum=new Ctor(1);Ctor.precision=wpr;for(;;){pow=finalise(pow.times(x),wpr,1);denominator=denominator.times(++i);t=sum.plus(divide(pow,denominator,wpr,1));if(digitsToString(t.d).slice(0,wpr)===digitsToString(sum.d).slice(0,wpr)){j=k;while(j--){sum=finalise(sum.times(sum),wpr,1);}// Check to see if the first 4 rounding digits are [49]999.
	// If so, repeat the summation with a higher precision, otherwise
	// e.g. with precision: 18, rounding: 1
	// exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)
	// `wpr - guard` is the index of first rounding digit.
	if(sd==null){if(rep<3&&checkRoundingDigits(sum.d,wpr-guard,rm,rep)){Ctor.precision=wpr+=10;denominator=pow=t=new Ctor(1);i=0;rep++;}else{return finalise(sum,Ctor.precision=pr,rm,external=true);}}else{Ctor.precision=pr;return sum;}}sum=t;}}/*
	   * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant
	   * digits.
	   *
	   *  ln(-n)        = NaN
	   *  ln(0)         = -Infinity
	   *  ln(-0)        = -Infinity
	   *  ln(1)         = 0
	   *  ln(Infinity)  = Infinity
	   *  ln(-Infinity) = NaN
	   *  ln(NaN)       = NaN
	   *
	   *  ln(n) (n != 1) is non-terminating.
	   *
	   */function naturalLogarithm(y,sd){var c,c0,denominator,e,numerator,rep,sum,t,wpr,x1,x2,n=1,guard=10,x=y,xd=x.d,Ctor=x.constructor,rm=Ctor.rounding,pr=Ctor.precision;// Is x negative or Infinity, NaN, 0 or 1?
	if(x.s<0||!xd||!xd[0]||!x.e&&xd[0]==1&&xd.length==1){return new Ctor(xd&&!xd[0]?-1/0:x.s!=1?NaN:xd?0:x);}if(sd==null){external=false;wpr=pr;}else{wpr=sd;}Ctor.precision=wpr+=guard;c=digitsToString(xd);c0=c.charAt(0);if(Math.abs(e=x.e)<1.5e15){// Argument reduction.
	// The series converges faster the closer the argument is to 1, so using
	// ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b
	// multiply the argument by itself until the leading digits of the significand are 7, 8, 9,
	// 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can
	// later be divided by this number, then separate out the power of 10 using
	// ln(a*10^b) = ln(a) + b*ln(10).
	// max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).
	//while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {
	// max n is 6 (gives 0.7 - 1.3)
	while(c0<7&&c0!=1||c0==1&&c.charAt(1)>3){x=x.times(y);c=digitsToString(x.d);c0=c.charAt(0);n++;}e=x.e;if(c0>1){x=new Ctor('0.'+c);e++;}else{x=new Ctor(c0+'.'+c.slice(1));}}else{// The argument reduction method above may result in overflow if the argument y is a massive
	// number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this
	// function using ln(x*10^e) = ln(x) + e*ln(10).
	t=getLn10(Ctor,wpr+2,pr).times(e+'');x=naturalLogarithm(new Ctor(c0+'.'+c.slice(1)),wpr-guard).plus(t);Ctor.precision=pr;return sd==null?finalise(x,pr,rm,external=true):x;}// x1 is x reduced to a value near 1.
	x1=x;// Taylor series.
	// ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)
	// where x = (y - 1)/(y + 1)    (|x| < 1)
	sum=numerator=x=divide(x.minus(1),x.plus(1),wpr,1);x2=finalise(x.times(x),wpr,1);denominator=3;for(;;){numerator=finalise(numerator.times(x2),wpr,1);t=sum.plus(divide(numerator,new Ctor(denominator),wpr,1));if(digitsToString(t.d).slice(0,wpr)===digitsToString(sum.d).slice(0,wpr)){sum=sum.times(2);// Reverse the argument reduction. Check that e is not 0 because, besides preventing an
	// unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.
	if(e!==0)sum=sum.plus(getLn10(Ctor,wpr+2,pr).times(e+''));sum=divide(sum,new Ctor(n),wpr,1);// Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has
	// been repeated previously) and the first 4 rounding digits 9999?
	// If so, restart the summation with a higher precision, otherwise
	// e.g. with precision: 12, rounding: 1
	// ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.
	// `wpr - guard` is the index of first rounding digit.
	if(sd==null){if(checkRoundingDigits(sum.d,wpr-guard,rm,rep)){Ctor.precision=wpr+=guard;t=numerator=x=divide(x1.minus(1),x1.plus(1),wpr,1);x2=finalise(x.times(x),wpr,1);denominator=rep=1;}else{return finalise(sum,Ctor.precision=pr,rm,external=true);}}else{Ctor.precision=pr;return sum;}}sum=t;denominator+=2;}}// ±Infinity, NaN.
	function nonFiniteToString(x){// Unsigned.
	return String(x.s*x.s/0);}/*
	   * Parse the value of a new Decimal `x` from string `str`.
	   */function parseDecimal(x,str){var e,i,len;// Decimal point?
	if((e=str.indexOf('.'))>-1)str=str.replace('.','');// Exponential form?
	if((i=str.search(/e/i))>0){// Determine exponent.
	if(e<0)e=i;e+=+str.slice(i+1);str=str.substring(0,i);}else if(e<0){// Integer.
	e=str.length;}// Determine leading zeros.
	for(i=0;str.charCodeAt(i)===48;i++){}// Determine trailing zeros.
	for(len=str.length;str.charCodeAt(len-1)===48;--len){}str=str.slice(i,len);if(str){len-=i;x.e=e=e-i-1;x.d=[];// Transform base
	// e is the base 10 exponent.
	// i is where to slice str to get the first word of the digits array.
	i=(e+1)%LOG_BASE;if(e<0)i+=LOG_BASE;if(i<len){if(i)x.d.push(+str.slice(0,i));for(len-=LOG_BASE;i<len;){x.d.push(+str.slice(i,i+=LOG_BASE));}str=str.slice(i);i=LOG_BASE-str.length;}else{i-=len;}for(;i--;){str+='0';}x.d.push(+str);if(external){// Overflow?
	if(x.e>x.constructor.maxE){// Infinity.
	x.d=null;x.e=NaN;// Underflow?
	}else if(x.e<x.constructor.minE){// Zero.
	x.e=0;x.d=[0];// x.constructor.underflow = true;
	}// else x.constructor.underflow = false;
	}}else{// Zero.
	x.e=0;x.d=[0];}return x;}/*
	   * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.
	   */function parseOther(x,str){var base,Ctor,divisor,i,isFloat,len,p,xd,xe;if(str==='Infinity'||str==='NaN'){if(!+str)x.s=NaN;x.e=NaN;x.d=null;return x;}if(isHex.test(str)){base=16;str=str.toLowerCase();}else if(isBinary.test(str)){base=2;}else if(isOctal.test(str)){base=8;}else{throw Error(invalidArgument+str);}// Is there a binary exponent part?
	i=str.search(/p/i);if(i>0){p=+str.slice(i+1);str=str.substring(2,i);}else{str=str.slice(2);}// Convert `str` as an integer then divide the result by `base` raised to a power such that the
	// fraction part will be restored.
	i=str.indexOf('.');isFloat=i>=0;Ctor=x.constructor;if(isFloat){str=str.replace('.','');len=str.length;i=len-i;// log[10](16) = 1.2041... , log[10](88) = 1.9444....
	divisor=intPow(Ctor,new Ctor(base),i,i*2);}xd=convertBase(str,base,BASE);xe=xd.length-1;// Remove trailing zeros.
	for(i=xe;xd[i]===0;--i){xd.pop();}if(i<0)return new Ctor(x.s*0);x.e=getBase10Exponent(xd,xe);x.d=xd;external=false;// At what precision to perform the division to ensure exact conversion?
	// maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)
	// log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412
	// E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.
	// maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount
	// Therefore using 4 * the number of digits of str will always be enough.
	if(isFloat)x=divide(x,divisor,len*4);// Multiply by the binary exponent part if present.
	if(p)x=x.times(Math.abs(p)<54?Math.pow(2,p):Decimal.pow(2,p));external=true;return x;}/*
	   * sin(x) = x - x^3/3! + x^5/5! - ...
	   * |x| < pi/2
	   *
	   */function sine(Ctor,x){var k,len=x.d.length;if(len<3)return taylorSeries(Ctor,2,x,x);// Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)
	// i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)
	// and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))
	// Estimate the optimum number of times to use the argument reduction.
	k=1.4*Math.sqrt(len);k=k>16?16:k|0;// Max k before Math.pow precision loss is 22
	x=x.times(Math.pow(5,-k));x=taylorSeries(Ctor,2,x,x);// Reverse argument reduction
	var sin2_x,d5=new Ctor(5),d16=new Ctor(16),d20=new Ctor(20);for(;k--;){sin2_x=x.times(x);x=x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));}return x;}// Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.
	function taylorSeries(Ctor,n,x,y,isHyperbolic){var j,t,u,x2,i=1,pr=Ctor.precision,k=Math.ceil(pr/LOG_BASE);external=false;x2=x.times(x);u=new Ctor(y);for(;;){t=divide(u.times(x2),new Ctor(n++*n++),pr,1);u=isHyperbolic?y.plus(t):y.minus(t);y=divide(t.times(x2),new Ctor(n++*n++),pr,1);t=u.plus(y);if(t.d[k]!==void 0){for(j=k;t.d[j]===u.d[j]&&j--;){}if(j==-1)break;}j=u;u=y;y=t;t=j;i++;}external=true;t.d.length=k+1;return t;}// Return the absolute value of `x` reduced to less than or equal to half pi.
	function toLessThanHalfPi(Ctor,x){var t,isNeg=x.s<0,pi=getPi(Ctor,Ctor.precision,1),halfPi=pi.times(0.5);x=x.abs();if(x.lte(halfPi)){quadrant=isNeg?4:1;return x;}t=x.divToInt(pi);if(t.isZero()){quadrant=isNeg?3:2;}else{x=x.minus(t.times(pi));// 0 <= x < pi
	if(x.lte(halfPi)){quadrant=isOdd(t)?isNeg?2:3:isNeg?4:1;return x;}quadrant=isOdd(t)?isNeg?1:4:isNeg?3:2;}return x.minus(pi).abs();}/*
	   * Return the value of Decimal `x` as a string in base `baseOut`.
	   *
	   * If the optional `sd` argument is present include a binary exponent suffix.
	   */function toStringBinary(x,baseOut,sd,rm){var base,e,i,k,len,roundUp,str,xd,y,Ctor=x.constructor,isExp=sd!==void 0;if(isExp){checkInt32(sd,1,MAX_DIGITS);if(rm===void 0)rm=Ctor.rounding;else checkInt32(rm,0,8);}else{sd=Ctor.precision;rm=Ctor.rounding;}if(!x.isFinite()){str=nonFiniteToString(x);}else{str=finiteToString(x);i=str.indexOf('.');// Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:
	// maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))
	// minBinaryExponent = floor(decimalExponent * log[2](10))
	// log[2](10) = 3.321928094887362347870319429489390175864
	if(isExp){base=2;if(baseOut==16){sd=sd*4-3;}else if(baseOut==8){sd=sd*3-2;}}else{base=baseOut;}// Convert the number as an integer then divide the result by its base raised to a power such
	// that the fraction part will be restored.
	// Non-integer.
	if(i>=0){str=str.replace('.','');y=new Ctor(1);y.e=str.length-i;y.d=convertBase(finiteToString(y),10,base);y.e=y.d.length;}xd=convertBase(str,10,base);e=len=xd.length;// Remove trailing zeros.
	for(;xd[--len]==0;){xd.pop();}if(!xd[0]){str=isExp?'0p+0':'0';}else{if(i<0){e--;}else{x=new Ctor(x);x.d=xd;x.e=e;x=divide(x,y,sd,rm,0,base);xd=x.d;e=x.e;roundUp=inexact;}// The rounding digit, i.e. the digit after the digit that may be rounded up.
	i=xd[sd];k=base/2;roundUp=roundUp||xd[sd+1]!==void 0;roundUp=rm<4?(i!==void 0||roundUp)&&(rm===0||rm===(x.s<0?3:2)):i>k||i===k&&(rm===4||roundUp||rm===6&&xd[sd-1]&1||rm===(x.s<0?8:7));xd.length=sd;if(roundUp){// Rounding up may mean the previous digit has to be rounded up and so on.
	for(;++xd[--sd]>base-1;){xd[sd]=0;if(!sd){++e;xd.unshift(1);}}}// Determine trailing zeros.
	for(len=xd.length;!xd[len-1];--len){}// E.g. [4, 11, 15] becomes 4bf.
	for(i=0,str='';i<len;i++){str+=NUMERALS.charAt(xd[i]);}// Add binary exponent suffix?
	if(isExp){if(len>1){if(baseOut==16||baseOut==8){i=baseOut==16?4:3;for(--len;len%i;len++){str+='0';}xd=convertBase(str,base,baseOut);for(len=xd.length;!xd[len-1];--len){}// xd[0] will always be be 1
	for(i=1,str='1.';i<len;i++){str+=NUMERALS.charAt(xd[i]);}}else{str=str.charAt(0)+'.'+str.slice(1);}}str=str+(e<0?'p':'p+')+e;}else if(e<0){for(;++e;){str='0'+str;}str='0.'+str;}else{if(++e>len)for(e-=len;e--;){str+='0';}else if(e<len)str=str.slice(0,e)+'.'+str.slice(e);}}str=(baseOut==16?'0x':baseOut==2?'0b':baseOut==8?'0o':'')+str;}return x.s<0?'-'+str:str;}// Does not strip trailing zeros.
	function truncate(arr,len){if(arr.length>len){arr.length=len;return true;}}// Decimal methods
	/*
	   *  abs
	   *  acos
	   *  acosh
	   *  add
	   *  asin
	   *  asinh
	   *  atan
	   *  atanh
	   *  atan2
	   *  cbrt
	   *  ceil
	   *  clone
	   *  config
	   *  cos
	   *  cosh
	   *  div
	   *  exp
	   *  floor
	   *  fromJSON
	   *  hypot
	   *  ln
	   *  log
	   *  log2
	   *  log10
	   *  max
	   *  min
	   *  mod
	   *  mul
	   *  pow
	   *  random
	   *  round
	   *  sign
	   *  sin
	   *  sinh
	   *  sqrt
	   *  sub
	   *  tan
	   *  tanh
	   *  trunc
	   *//*
	   * Return a new Decimal whose value is the absolute value of `x`.
	   *
	   * x {number|string|Decimal}
	   *
	   */function abs(x){return new this(x).abs();}/*
	   * Return a new Decimal whose value is the arccosine in radians of `x`.
	   *
	   * x {number|string|Decimal}
	   *
	   */function acos(x){return new this(x).acos();}/*
	   * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to
	   * `precision` significant digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal} A value in radians.
	   *
	   */function acosh(x){return new this(x).acosh();}/*
	   * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant
	   * digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal}
	   * y {number|string|Decimal}
	   *
	   */function add(x,y){return new this(x).plus(y);}/*
	   * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`
	   * significant digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal}
	   *
	   */function asin(x){return new this(x).asin();}/*
	   * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to
	   * `precision` significant digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal} A value in radians.
	   *
	   */function asinh(x){return new this(x).asinh();}/*
	   * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`
	   * significant digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal}
	   *
	   */function atan(x){return new this(x).atan();}/*
	   * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to
	   * `precision` significant digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal} A value in radians.
	   *
	   */function atanh(x){return new this(x).atanh();}/*
	   * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi
	   * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.
	   *
	   * Domain: [-Infinity, Infinity]
	   * Range: [-pi, pi]
	   *
	   * y {number|string|Decimal} The y-coordinate.
	   * x {number|string|Decimal} The x-coordinate.
	   *
	   * atan2(±0, -0)               = ±pi
	   * atan2(±0, +0)               = ±0
	   * atan2(±0, -x)               = ±pi for x > 0
	   * atan2(±0, x)                = ±0 for x > 0
	   * atan2(-y, ±0)               = -pi/2 for y > 0
	   * atan2(y, ±0)                = pi/2 for y > 0
	   * atan2(±y, -Infinity)        = ±pi for finite y > 0
	   * atan2(±y, +Infinity)        = ±0 for finite y > 0
	   * atan2(±Infinity, x)         = ±pi/2 for finite x
	   * atan2(±Infinity, -Infinity) = ±3*pi/4
	   * atan2(±Infinity, +Infinity) = ±pi/4
	   * atan2(NaN, x) = NaN
	   * atan2(y, NaN) = NaN
	   *
	   */function atan2(y,x){y=new this(y);x=new this(x);var r,pr=this.precision,rm=this.rounding,wpr=pr+4;// Either NaN
	if(!y.s||!x.s){r=new this(NaN);// Both ±Infinity
	}else if(!y.d&&!x.d){r=getPi(this,wpr,1).times(x.s>0?0.25:0.75);r.s=y.s;// x is ±Infinity or y is ±0
	}else if(!x.d||y.isZero()){r=x.s<0?getPi(this,pr,rm):new this(0);r.s=y.s;// y is ±Infinity or x is ±0
	}else if(!y.d||x.isZero()){r=getPi(this,wpr,1).times(0.5);r.s=y.s;// Both non-zero and finite
	}else if(x.s<0){this.precision=wpr;this.rounding=1;r=this.atan(divide(y,x,wpr,1));x=getPi(this,wpr,1);this.precision=pr;this.rounding=rm;r=y.s<0?r.minus(x):r.plus(x);}else{r=this.atan(divide(y,x,wpr,1));}return r;}/*
	   * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant
	   * digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal}
	   *
	   */function cbrt(x){return new this(x).cbrt();}/*
	   * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.
	   *
	   * x {number|string|Decimal}
	   *
	   */function ceil(x){return finalise(x=new this(x),x.e+1,2);}/*
	   * Configure global settings for a Decimal constructor.
	   *
	   * `obj` is an object with one or more of the following properties,
	   *
	   *   precision  {number}
	   *   rounding   {number}
	   *   toExpNeg   {number}
	   *   toExpPos   {number}
	   *   maxE       {number}
	   *   minE       {number}
	   *   modulo     {number}
	   *   crypto     {boolean|number|undefined}
	   *
	   * E.g. Decimal.config({ precision: 20, rounding: 4 })
	   *
	   */function config(obj){if(!obj||(typeof obj==='undefined'?'undefined':_typeof(obj))!=='object')throw Error(decimalError+'Object expected');var i,p,v,ps=['precision',1,MAX_DIGITS,'rounding',0,8,'toExpNeg',-EXP_LIMIT,0,'toExpPos',0,EXP_LIMIT,'maxE',0,EXP_LIMIT,'minE',-EXP_LIMIT,0,'modulo',0,9];for(i=0;i<ps.length;i+=3){if((v=obj[p=ps[i]])!==void 0){if(mathfloor(v)===v&&v>=ps[i+1]&&v<=ps[i+2])this[p]=v;else throw Error(invalidArgument+p+': '+v);}}if(obj.hasOwnProperty(p='crypto')){if((v=obj[p])===void 0){this[p]=v;}else if(v===true||v===false||v===0||v===1){this[p]=!!(v&&cryptoObject&&(cryptoObject.getRandomValues||cryptoObject.randomBytes));}else{throw Error(invalidArgument+p+': '+v);}}return this;}/*
	   * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant
	   * digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal} A value in radians.
	   *
	   */function cos(x){return new this(x).cos();}/*
	   * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision
	   * significant digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal} A value in radians.
	   *
	   */function cosh(x){return new this(x).cosh();}/*
	   * Create and return a Decimal constructor with the same configuration properties as this Decimal
	   * constructor.
	   *
	   */function clone(obj){var i,p,ps;/*
	     * The Decimal constructor and exported function.
	     * Return a new Decimal instance.
	     *
	     * v {number|string|Decimal} A numeric value.
	     *
	     */function Decimal(v){var e,i,t,x=this;// Decimal called without new.
	if(!(x instanceof Decimal))return new Decimal(v);// Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor
	// which points to Object.
	x.constructor=Decimal;// Duplicate.
	if(v instanceof Decimal){x.s=v.s;x.e=v.e;x.d=(v=v.d)?v.slice():v;return;}t=typeof v==='undefined'?'undefined':_typeof(v);if(t==='number'){if(v===0){x.s=1/v<0?-1:1;x.e=0;x.d=[0];return;}if(v<0){v=-v;x.s=-1;}else{x.s=1;}// Fast path for small integers.
	if(v===~~v&&v<1e7){for(e=0,i=v;i>=10;i/=10){e++;}x.e=e;x.d=[v];return;// Infinity, NaN.
	}else if(v*0!==0){if(!v)x.s=NaN;x.e=NaN;x.d=null;return;}return parseDecimal(x,v.toString());}else if(t!=='string'){throw Error(invalidArgument+v);}// Minus sign?
	if(v.charCodeAt(0)===45){v=v.slice(1);x.s=-1;}else{x.s=1;}return isDecimal.test(v)?parseDecimal(x,v):parseOther(x,v);}Decimal.prototype=P;Decimal.ROUND_UP=0;Decimal.ROUND_DOWN=1;Decimal.ROUND_CEIL=2;Decimal.ROUND_FLOOR=3;Decimal.ROUND_HALF_UP=4;Decimal.ROUND_HALF_DOWN=5;Decimal.ROUND_HALF_EVEN=6;Decimal.ROUND_HALF_CEIL=7;Decimal.ROUND_HALF_FLOOR=8;Decimal.EUCLID=9;Decimal.config=config;Decimal.clone=clone;Decimal.abs=abs;Decimal.acos=acos;Decimal.acosh=acosh;// ES6
	Decimal.add=add;Decimal.asin=asin;Decimal.asinh=asinh;// ES6
	Decimal.atan=atan;Decimal.atanh=atanh;// ES6
	Decimal.atan2=atan2;Decimal.cbrt=cbrt;// ES6
	Decimal.ceil=ceil;Decimal.cos=cos;Decimal.cosh=cosh;// ES6
	Decimal.div=div;Decimal.exp=exp;Decimal.floor=floor;Decimal.fromJSON=fromJSON;Decimal.hypot=hypot;// ES6
	Decimal.ln=ln;Decimal.log=log;Decimal.log10=log10;// ES6
	Decimal.log2=log2;// ES6
	Decimal.max=max;Decimal.min=min;Decimal.mod=mod;Decimal.mul=mul;Decimal.pow=pow;Decimal.random=random;Decimal.round=round;Decimal.sign=sign;// ES6
	Decimal.sin=sin;Decimal.sinh=sinh;// ES6
	Decimal.sqrt=sqrt;Decimal.sub=sub;Decimal.tan=tan;Decimal.tanh=tanh;// ES6
	Decimal.trunc=trunc;// ES6
	if(obj===void 0)obj={};if(obj){ps=['precision','rounding','toExpNeg','toExpPos','maxE','minE','modulo','crypto'];for(i=0;i<ps.length;){if(!obj.hasOwnProperty(p=ps[i++]))obj[p]=this[p];}}Decimal.config(obj);return Decimal;}/*
	   * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant
	   * digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal}
	   * y {number|string|Decimal}
	   *
	   */function div(x,y){return new this(x).div(y);}/*
	   * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`
	   * significant digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal} The power to which to raise the base of the natural log.
	   *
	   */function exp(x){return new this(x).exp();}/*
	   * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.
	   *
	   * x {number|string|Decimal}
	   *
	   */function floor(x){return finalise(x=new this(x),x.e+1,3);}/*
	   * Return a new Decimal from `str`, a string value created by `toJSON`.
	   *
	   * Base 88 alphabet:
	   * 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%()*+,-./:;=?@[]^_`{|}~
	   *
	   * If `str` is just one character:
	   * 0-81  [[0, 40][-0, -40]]
	   * 82    -Infinity
	   * 83    +Infinity
	   * 84    NaN
	   *
	   *   64 32 16  8  4  2  1
	   *    1  0  1  0  1  1  1 = 87
	   *
	   */function fromJSON(str){var e,isNeg,k,n;if(typeof str!=='string'||!str)throw Error(invalidArgument+str);k=str.length;n=NUMERALS.indexOf(str.charAt(0));//  [0, 81] -> [[0, 40][-0, -40]]
	if(k===1){return new this(n>81?[-1/0,1/0,0/0][n-82]:n>40?-(n-41):n);}else if(n&64){isNeg=n&16;// e = isNeg ? [-3, 4] : [-7, 8]
	e=isNeg?(n&7)-3:(n&15)-7;k=1;}else if(k===2){n=n*88+NUMERALS.indexOf(str.charAt(1));// [0, 5631] -> [[0, 2815][-0, -2815]] -> [[41, 2856][-41, -2856]]
	return new this(n>=2816?-(n-2816)-41:n+41);}else{// 0XXXXXX
	// 0 {is negative} {is exponent negative} {exponent digit count [0, 15]}
	isNeg=n&32;// Has an exponent been specified?
	if(n&31){e=n&15;// Exponent character count [1, 15]
	k=e+1;// Index of first character of the significand.
	if(e===1){e=NUMERALS.indexOf(str.charAt(1));}else if(e===2){e=NUMERALS.indexOf(str.charAt(1))*88+NUMERALS.indexOf(str.charAt(2));}else{e=+convertBase(str.slice(1,k),88,10).join('');}// Negative exponent?
	if(n&16)e=-e;}else{// Integer without trailing zeros.
	// 0X00000
	// 0 {is negative} 0 0 0 0 0
	str=convertBase(str.slice(1),88,10).join('');return new this(isNeg?'-'+str:str);}}str=convertBase(str.slice(k),88,10).join('');e=e-str.length+1;str=str+'e'+e;return new this(isNeg?'-'+str:str);}/*
	   * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,
	   * rounded to `precision` significant digits using rounding mode `rounding`.
	   *
	   * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)
	   *
	   */function hypot(){var i,n,t=new this(0);external=false;for(i=0;i<arguments.length;){n=new this(arguments[i++]);if(!n.d){if(n.s){external=true;return new this(1/0);}t=n;}else if(t.d){t=t.plus(n.times(n));}}external=true;return t.sqrt();}/*
	   * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`
	   * significant digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal}
	   *
	   */function ln(x){return new this(x).ln();}/*
	   * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base
	   * is specified, rounded to `precision` significant digits using rounding mode `rounding`.
	   *
	   * log[y](x)
	   *
	   * x {number|string|Decimal} The argument of the logarithm.
	   * y {number|string|Decimal} The base of the logarithm.
	   *
	   */function log(x,y){return new this(x).log(y);}/*
	   * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`
	   * significant digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal}
	   *
	   */function log2(x){return new this(x).log(2);}/*
	   * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`
	   * significant digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal}
	   *
	   */function log10(x){return new this(x).log(10);}/*
	   * Return a new Decimal whose value is the maximum of the arguments.
	   *
	   * arguments {number|string|Decimal}
	   *
	   */function max(){return maxOrMin(this,arguments,'lt');}/*
	   * Return a new Decimal whose value is the minimum of the arguments.
	   *
	   * arguments {number|string|Decimal}
	   *
	   */function min(){return maxOrMin(this,arguments,'gt');}/*
	   * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits
	   * using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal}
	   * y {number|string|Decimal}
	   *
	   */function mod(x,y){return new this(x).mod(y);}/*
	   * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant
	   * digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal}
	   * y {number|string|Decimal}
	   *
	   */function mul(x,y){return new this(x).mul(y);}/*
	   * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision
	   * significant digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal} The base.
	   * y {number|string|Decimal} The exponent.
	   *
	   */function pow(x,y){return new this(x).pow(y);}/*
	   * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with
	   * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros
	   * are produced).
	   *
	   * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.
	   *
	   */function random(sd){var d,e,k,n,i=0,r=new this(1),rd=[];if(sd===void 0)sd=this.precision;else checkInt32(sd,1,MAX_DIGITS);k=Math.ceil(sd/LOG_BASE);if(this.crypto===false){for(;i<k;){rd[i++]=Math.random()*1e7|0;}// Browsers supporting crypto.getRandomValues.
	}else if(cryptoObject&&cryptoObject.getRandomValues){d=cryptoObject.getRandomValues(new Uint32Array(k));for(;i<k;){n=d[i];// 0 <= n < 4294967296
	// Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).
	if(n>=4.29e9){d[i]=cryptoObject.getRandomValues(new Uint32Array(1))[0];}else{// 0 <= n <= 4289999999
	// 0 <= (n % 1e7) <= 9999999
	rd[i++]=n%1e7;}}// Node.js supporting crypto.randomBytes.
	}else if(cryptoObject&&cryptoObject.randomBytes){// buffer
	d=cryptoObject.randomBytes(k*=4);for(;i<k;){// 0 <= n < 2147483648
	n=d[i]+(d[i+1]<<8)+(d[i+2]<<16)+((d[i+3]&0x7f)<<24);// Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).
	if(n>=2.14e9){cryptoObject.randomBytes(4).copy(d,i);}else{// 0 <= n <= 2139999999
	// 0 <= (n % 1e7) <= 9999999
	rd.push(n%1e7);i+=4;}}i=k/4;}else if(this.crypto){throw Error(decimalError+'crypto unavailable');}else{for(;i<k;){rd[i++]=Math.random()*1e7|0;}}k=rd[--i];sd%=LOG_BASE;// Convert trailing digits to zeros according to sd.
	if(k&&sd){n=mathpow(10,LOG_BASE-sd);rd[i]=(k/n|0)*n;}// Remove trailing words which are zero.
	for(;rd[i]===0;i--){rd.pop();}// Zero?
	if(i<0){e=0;rd=[0];}else{e=-1;// Remove leading words which are zero and adjust exponent accordingly.
	for(;rd[0]===0;e-=LOG_BASE){rd.shift();}// Count the digits of the first word of rd to determine leading zeros.
	for(k=1,n=rd[0];n>=10;n/=10){k++;}// Adjust the exponent for leading zeros of the first word of rd.
	if(k<LOG_BASE)e-=LOG_BASE-k;}r.e=e;r.d=rd;return r;}/*
	   * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.
	   *
	   * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).
	   *
	   * x {number|string|Decimal}
	   *
	   */function round(x){return finalise(x=new this(x),x.e+1,this.rounding);}/*
	   * Return
	   *   1    if x > 0,
	   *  -1    if x < 0,
	   *   0    if x is 0,
	   *  -0    if x is -0,
	   *   NaN  otherwise
	   *
	   */function sign(x){x=new this(x);return x.d?x.d[0]?x.s:0*x.s:x.s||NaN;}/*
	   * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits
	   * using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal} A value in radians.
	   *
	   */function sin(x){return new this(x).sin();}/*
	   * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`
	   * significant digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal} A value in radians.
	   *
	   */function sinh(x){return new this(x).sinh();}/*
	   * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant
	   * digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal}
	   *
	   */function sqrt(x){return new this(x).sqrt();}/*
	   * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits
	   * using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal}
	   * y {number|string|Decimal}
	   *
	   */function sub(x,y){return new this(x).sub(y);}/*
	   * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant
	   * digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal} A value in radians.
	   *
	   */function tan(x){return new this(x).tan();}/*
	   * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`
	   * significant digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal} A value in radians.
	   *
	   */function tanh(x){return new this(x).tanh();}/*
	   * Return a new Decimal whose value is `x` truncated to an integer.
	   *
	   * x {number|string|Decimal}
	   *
	   */function trunc(x){return finalise(x=new this(x),x.e+1,1);}// Create and configure initial Decimal constructor.
	Decimal=clone(Decimal);// Create the internal constants from their string values.
	LN10=new Decimal(LN10);PI=new Decimal(PI);// Export.
	// AMD.
	if(true){!(__WEBPACK_AMD_DEFINE_RESULT__ = function(){return Decimal;}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));// Node and other environments that support module.exports.
	}else if(typeof module!='undefined'&&module.exports){module.exports=Decimal;if(!cryptoObject){try{cryptoObject=require('cry'+'pto');}catch(e){// Ignore.
	}}// Browser.
		}else{if(!globalScope){globalScope=typeof self!='undefined'&&self&&self.self==self?self:Function('return this')();}noConflict=globalScope.Decimal;Decimal.noConflict=function(){globalScope.Decimal=noConflict;return Decimal;};globalScope.Decimal=Decimal;}})(undefined);

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  /**
	   * Create a BigNumber, which can store numbers with arbitrary precision.
	   * When a matrix is provided, all elements will be converted to BigNumber.
	   *
	   * Syntax:
	   *
	   *    math.bignumber(x)
	   *
	   * Examples:
	   *
	   *    0.1 + 0.2;                                  // returns number 0.30000000000000004
	   *    math.bignumber(0.1) + math.bignumber(0.2);  // returns BigNumber 0.3
	   *
	   *
	   *    7.2e500;                                    // returns number Infinity
	   *    math.bignumber('7.2e500');                  // returns BigNumber 7.2e500
	   *
	   * See also:
	   *
	   *    boolean, complex, index, matrix, string, unit
	   *
	   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,
	   *                                                    0 by default.
	   * @returns {BigNumber} The created bignumber
	   */
	  var bignumber = typed('bignumber', {
	    '': function _() {
	      return new type.BigNumber(0);
	    },

	    'number': function number(x) {
	      // convert to string to prevent errors in case of >15 digits
	      return new type.BigNumber(x + '');
	    },

	    'string': function string(x) {
	      return new type.BigNumber(x);
	    },

	    'BigNumber': function BigNumber(x) {
	      // we assume a BigNumber is immutable
	      return x;
	    },

	    'Fraction': function Fraction(x) {
	      return new type.BigNumber(x.n).div(x.d);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, bignumber);
	    }
	  });

	  bignumber.toTex = {
	    0: '0',
	    1: '\\left(${args[0]}\\right)'
	  };

	  return bignumber;
	}

	exports.name = 'bignumber';
	exports.factory = factory;

/***/ },
/* 179 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Execute the callback function element wise for each element in array and any
	 * nested array
	 * Returns an array with the results
	 * @param {Array | Matrix} array
	 * @param {Function} callback   The callback is called with two parameters:
	 *                              value1 and value2, which contain the current
	 *                              element of both arrays.
	 * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
	 *
	 * @return {Array | Matrix} res
	 */

	module.exports = function deepMap(array, callback, skipZeros) {
	  if (array && typeof array.map === 'function') {
	    // TODO: replace array.map with a for loop to improve performance
	    return array.map(function (x) {
	      return deepMap(x, callback, skipZeros);
	    });
	  } else {
	    return callback(array);
	  }
	};

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  /**
	   * Create a boolean or convert a string or number to a boolean.
	   * In case of a number, `true` is returned for non-zero numbers, and `false` in
	   * case of zero.
	   * Strings can be `'true'` or `'false'`, or can contain a number.
	   * When value is a matrix, all elements will be converted to boolean.
	   *
	   * Syntax:
	   *
	   *    math.boolean(x)
	   *
	   * Examples:
	   *
	   *    math.boolean(0);     // returns false
	   *    math.boolean(1);     // returns true
	   *    math.boolean(-3);     // returns true
	   *    math.boolean('true');     // returns true
	   *    math.boolean('false');     // returns false
	   *    math.boolean([1, 0, 1, 1]);     // returns [true, false, true, true]
	   *
	   * See also:
	   *
	   *    bignumber, complex, index, matrix, string, unit
	   *
	   * @param {string | number | boolean | Array | Matrix | null} value  A value of any type
	   * @return {boolean | Array | Matrix} The boolean value
	   */
	  var bool = typed('bool', {
	    '': function _() {
	      return false;
	    },

	    'boolean': function boolean(x) {
	      return x;
	    },

	    'number': function number(x) {
	      return !!x;
	    },

	    'BigNumber': function BigNumber(x) {
	      return !x.isZero();
	    },

	    'string': function string(x) {
	      // try case insensitive
	      var lcase = x.toLowerCase();
	      if (lcase === 'true') {
	        return true;
	      } else if (lcase === 'false') {
	        return false;
	      }

	      // test whether value is a valid number
	      var num = Number(x);
	      if (x != '' && !isNaN(num)) {
	        return !!num;
	      }

	      throw new Error('Cannot convert "' + x + '" to a boolean');
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, bool);
	    }
	  });

	  return bool;
	}

	exports.name = 'boolean';
	exports.factory = factory;

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = [
	// type
	__webpack_require__(182),

	// construction function
	__webpack_require__(185)];

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var format = __webpack_require__(183).format;
	var lazy = __webpack_require__(163).lazy;

	function factory(type, config, load, typed, math) {
	  /**
	   * @constructor Chain
	   * Wrap any value in a chain, allowing to perform chained operations on
	   * the value.
	   *
	   * All methods available in the math.js library can be called upon the chain,
	   * and then will be evaluated with the value itself as first argument.
	   * The chain can be closed by executing chain.done(), which will return
	   * the final value.
	   *
	   * The Chain has a number of special functions:
	   * - done()             Finalize the chained operation and return the
	   *                      chain's value.
	   * - valueOf()          The same as done()
	   * - toString()         Returns a string representation of the chain's value.
	   *
	   * @param {*} [value]
	   */
	  function Chain(value) {
	    if (!(this instanceof Chain)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    if (value && value.isChain) {
	      this.value = value.value;
	    } else {
	      this.value = value;
	    }
	  }

	  /**
	   * Attach type information
	   */
	  Chain.prototype.type = 'Chain';
	  Chain.prototype.isChain = true;

	  /**
	   * Close the chain. Returns the final value.
	   * Does the same as method valueOf()
	   * @returns {*} value
	   */
	  Chain.prototype.done = function () {
	    return this.value;
	  };

	  /**
	   * Close the chain. Returns the final value.
	   * Does the same as method done()
	   * @returns {*} value
	   */
	  Chain.prototype.valueOf = function () {
	    return this.value;
	  };

	  /**
	   * Get a string representation of the value in the chain
	   * @returns {string}
	   */
	  Chain.prototype.toString = function () {
	    return format(this.value);
	  };

	  /**
	   * Create a proxy method for the chain
	   * @param {string} name
	   * @param {Function} fn      The function to be proxied
	   *                           If fn is no function, it is silently ignored.
	   * @private
	   */
	  function createProxy(name, fn) {
	    if (typeof fn === 'function') {
	      Chain.prototype[name] = chainify(fn);
	    }
	  }

	  /**
	   * Create a proxy method for the chain
	   * @param {string} name
	   * @param {function} resolver   The function resolving with the
	   *                              function to be proxied
	   * @private
	   */
	  function createLazyProxy(name, resolver) {
	    lazy(Chain.prototype, name, function outerResolver() {
	      var fn = resolver();
	      if (typeof fn === 'function') {
	        return chainify(fn);
	      }

	      return undefined; // if not a function, ignore
	    });
	  }

	  /**
	   * Make a function chainable
	   * @param {function} fn
	   * @return {Function} chain function
	   * @private
	   */
	  function chainify(fn) {
	    return function () {
	      var args = [this.value]; // `this` will be the context of a Chain instance
	      for (var i = 0; i < arguments.length; i++) {
	        args[i + 1] = arguments[i];
	      }

	      return new Chain(fn.apply(fn, args));
	    };
	  }

	  /**
	   * Create a proxy for a single method, or an object with multiple methods.
	   * Example usage:
	   *
	   *   Chain.createProxy('add', function add (x, y) {...});
	   *   Chain.createProxy({
	   *     add:      function add (x, y) {...},
	   *     subtract: function subtract (x, y) {...}
	   *   }
	   *
	   * @param {string | Object} arg0   A name (string), or an object with
	   *                                 functions
	   * @param {*} [arg1]               A function, when arg0 is a name
	   */
	  Chain.createProxy = function (arg0, arg1) {
	    if (typeof arg0 === 'string') {
	      // createProxy(name, value)
	      createProxy(arg0, arg1);
	    } else {
	      // createProxy(values)
	      for (var prop in arg0) {
	        if (arg0.hasOwnProperty(prop)) {
	          createProxy(prop, arg0[prop]);
	        }
	      }
	    }
	  };

	  // create proxy for everything that is in math.js
	  Chain.createProxy(math);

	  // register on the import event, automatically add a proxy for every imported function.
	  math.on('import', function (name, resolver, path) {
	    if (path === undefined) {
	      // an imported function (not a data type or something special)
	      createLazyProxy(name, resolver);
	    }
	  });

	  return Chain;
	}

	exports.name = 'Chain';
	exports.path = 'type';
	exports.factory = factory;
	exports.math = true; // require providing the math namespace as 5th argument
	exports.lazy = false; // we need to register a listener on the import events, so no lazy loading

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var formatNumber = __webpack_require__(166).format;
	var formatBigNumber = __webpack_require__(184).format;

	/**
	 * Test whether value is a string
	 * @param {*} value
	 * @return {boolean} isString
	 */
	exports.isString = function (value) {
	  return typeof value === 'string';
	};

	/**
	 * Check if a text ends with a certain string.
	 * @param {string} text
	 * @param {string} search
	 */
	exports.endsWith = function (text, search) {
	  var start = text.length - search.length;
	  var end = text.length;
	  return text.substring(start, end) === search;
	};

	/**
	 * Format a value of any type into a string.
	 *
	 * Usage:
	 *     math.format(value)
	 *     math.format(value, precision)
	 *
	 * When value is a function:
	 *
	 * - When the function has a property `syntax`, it returns this
	 *   syntax description.
	 * - In other cases, a string `'function'` is returned.
	 *
	 * When `value` is an Object:
	 *
	 * - When the object contains a property `format` being a function, this
	 *   function is invoked as `value.format(options)` and the result is returned.
	 * - When the object has its own `toString` method, this method is invoked
	 *   and the result is returned.
	 * - In other cases the function will loop over all object properties and
	 *   return JSON object notation like '{"a": 2, "b": 3}'.
	 *
	 * Example usage:
	 *     math.format(2/7);                // '0.2857142857142857'
	 *     math.format(math.pi, 3);         // '3.14'
	 *     math.format(new Complex(2, 3));  // '2 + 3i'
	 *     math.format('hello');            // '"hello"'
	 *
	 * @param {*} value             Value to be stringified
	 * @param {Object | number | Function} [options]  Formatting options. See
	 *                                                lib/utils/number:format for a
	 *                                                description of the available
	 *                                                options.
	 * @return {string} str
	 */
	exports.format = function (value, options) {
	  if (typeof value === 'number') {
	    return formatNumber(value, options);
	  }

	  if (value && value.isBigNumber === true) {
	    return formatBigNumber(value, options);
	  }

	  if (value && value.isFraction === true) {
	    if (!options || options.fraction !== 'decimal') {
	      // output as ratio, like '1/3'
	      return value.s * value.n + '/' + value.d;
	    } else {
	      // output as decimal, like '0.(3)'
	      return value.toString();
	    }
	  }

	  if (Array.isArray(value)) {
	    return formatArray(value, options);
	  }

	  if (exports.isString(value)) {
	    return '"' + value + '"';
	  }

	  if (typeof value === 'function') {
	    return value.syntax ? String(value.syntax) : 'function';
	  }

	  if (value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
	    if (typeof value.format === 'function') {
	      return value.format(options);
	    } else if (value && value.toString() !== {}.toString()) {
	      // this object has a non-native toString method, use that one
	      return value.toString();
	    } else {
	      var entries = [];

	      for (var key in value) {
	        if (value.hasOwnProperty(key)) {
	          entries.push('"' + key + '": ' + exports.format(value[key], options));
	        }
	      }

	      return '{' + entries.join(', ') + '}';
	    }
	  }

	  return String(value);
	};

	/**
	 * Recursively format an n-dimensional matrix
	 * Example output: "[[1, 2], [3, 4]]"
	 * @param {Array} array
	 * @param {Object | number | Function} [options]  Formatting options. See
	 *                                                lib/utils/number:format for a
	 *                                                description of the available
	 *                                                options.
	 * @returns {string} str
	 */
	function formatArray(array, options) {
	  if (Array.isArray(array)) {
	    var str = '[';
	    var len = array.length;
	    for (var i = 0; i < len; i++) {
	      if (i != 0) {
	        str += ', ';
	      }
	      str += formatArray(array[i], options);
	    }
	    str += ']';
	    return str;
	  } else {
	    return exports.format(array, options);
	  }
	}

/***/ },
/* 184 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Convert a BigNumber to a formatted string representation.
	 *
	 * Syntax:
	 *
	 *    format(value)
	 *    format(value, options)
	 *    format(value, precision)
	 *    format(value, fn)
	 *
	 * Where:
	 *
	 *    {number} value   The value to be formatted
	 *    {Object} options An object with formatting options. Available options:
	 *                     {string} notation
	 *                         Number notation. Choose from:
	 *                         'fixed'          Always use regular number notation.
	 *                                          For example '123.40' and '14000000'
	 *                         'exponential'    Always use exponential notation.
	 *                                          For example '1.234e+2' and '1.4e+7'
	 *                         'auto' (default) Regular number notation for numbers
	 *                                          having an absolute value between
	 *                                          `lower` and `upper` bounds, and uses
	 *                                          exponential notation elsewhere.
	 *                                          Lower bound is included, upper bound
	 *                                          is excluded.
	 *                                          For example '123.4' and '1.4e7'.
	 *                     {number} precision   A number between 0 and 16 to round
	 *                                          the digits of the number.
	 *                                          In case of notations 'exponential' and
	 *                                          'auto', `precision` defines the total
	 *                                          number of significant digits returned
	 *                                          and is undefined by default.
	 *                                          In case of notation 'fixed',
	 *                                          `precision` defines the number of
	 *                                          significant digits after the decimal
	 *                                          point, and is 0 by default.
	 *                     {Object} exponential An object containing two parameters,
	 *                                          {number} lower and {number} upper,
	 *                                          used by notation 'auto' to determine
	 *                                          when to return exponential notation.
	 *                                          Default values are `lower=1e-3` and
	 *                                          `upper=1e5`.
	 *                                          Only applicable for notation `auto`.
	 *    {Function} fn    A custom formatting function. Can be used to override the
	 *                     built-in notations. Function `fn` is called with `value` as
	 *                     parameter and must return a string. Is useful for example to
	 *                     format all values inside a matrix in a particular way.
	 *
	 * Examples:
	 *
	 *    format(6.4);                                        // '6.4'
	 *    format(1240000);                                    // '1.24e6'
	 *    format(1/3);                                        // '0.3333333333333333'
	 *    format(1/3, 3);                                     // '0.333'
	 *    format(21385, 2);                                   // '21000'
	 *    format(12.071, {notation: 'fixed'});                // '12'
	 *    format(2.3,    {notation: 'fixed', precision: 2});  // '2.30'
	 *    format(52.8,   {notation: 'exponential'});          // '5.28e+1'
	 *
	 * @param {BigNumber} value
	 * @param {Object | Function | number} [options]
	 * @return {string} str The formatted value
	 */
	exports.format = function (value, options) {
	  if (typeof options === 'function') {
	    // handle format(value, fn)
	    return options(value);
	  }

	  // handle special cases
	  if (!value.isFinite()) {
	    return value.isNaN() ? 'NaN' : value.gt(0) ? 'Infinity' : '-Infinity';
	  }

	  // default values for options
	  var notation = 'auto';
	  var precision = undefined;

	  if (options !== undefined) {
	    // determine notation from options
	    if (options.notation) {
	      notation = options.notation;
	    }

	    // determine precision from options
	    if (typeof options === 'number') {
	      precision = options;
	    } else if (options.precision) {
	      precision = options.precision;
	    }
	  }

	  // handle the various notations
	  switch (notation) {
	    case 'fixed':
	      return exports.toFixed(value, precision);

	    case 'exponential':
	      return exports.toExponential(value, precision);

	    case 'auto':
	      // determine lower and upper bound for exponential notation.
	      // TODO: implement support for upper and lower to be BigNumbers themselves
	      var lower = 1e-3;
	      var upper = 1e5;
	      if (options && options.exponential) {
	        if (options.exponential.lower !== undefined) {
	          lower = options.exponential.lower;
	        }
	        if (options.exponential.upper !== undefined) {
	          upper = options.exponential.upper;
	        }
	      }

	      // adjust the configuration of the BigNumber constructor (yeah, this is quite tricky...)
	      var oldConfig = {
	        toExpNeg: value.constructor.toExpNeg,
	        toExpPos: value.constructor.toExpPos
	      };

	      value.constructor.config({
	        toExpNeg: Math.round(Math.log(lower) / Math.LN10),
	        toExpPos: Math.round(Math.log(upper) / Math.LN10)
	      });

	      // handle special case zero
	      if (value.isZero()) return '0';

	      // determine whether or not to output exponential notation
	      var str;
	      var abs = value.abs();
	      if (abs.gte(lower) && abs.lt(upper)) {
	        // normal number notation
	        str = value.toSignificantDigits(precision).toFixed();
	      } else {
	        // exponential notation
	        str = exports.toExponential(value, precision);
	      }

	      // remove trailing zeros after the decimal point
	      return str.replace(/((\.\d*?)(0+))($|e)/, function () {
	        var digits = arguments[2];
	        var e = arguments[4];
	        return digits !== '.' ? digits + e : e;
	      });

	    default:
	      throw new Error('Unknown notation "' + notation + '". ' + 'Choose "auto", "exponential", or "fixed".');
	  }
	};

	/**
	 * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
	 * @param {BigNumber} value
	 * @param {number} [precision]  Number of digits in formatted output.
	 *                              If not provided, the maximum available digits
	 *                              is used.
	 * @returns {string} str
	 */
	exports.toExponential = function (value, precision) {
	  if (precision !== undefined) {
	    return value.toExponential(precision - 1); // Note the offset of one
	  } else {
	    return value.toExponential();
	  }
	};

	/**
	 * Format a number with fixed notation.
	 * @param {BigNumber} value
	 * @param {number} [precision=0]        Optional number of decimals after the
	 *                                      decimal point. Zero by default.
	 */
	exports.toFixed = function (value, precision) {
	  return value.toFixed(precision || 0);
	  // Note: the (precision || 0) is needed as the toFixed of BigNumber has an
	  // undefined default precision instead of 0.
	};

/***/ },
/* 185 */
/***/ function(module, exports) {

	'use strict';

	function factory(type, config, load, typed) {
	  /**
	   * Wrap any value in a chain, allowing to perform chained operations on
	   * the value.
	   *
	   * All methods available in the math.js library can be called upon the chain,
	   * and then will be evaluated with the value itself as first argument.
	   * The chain can be closed by executing `chain.done()`, which returns
	   * the final value.
	   *
	   * The chain has a number of special functions:
	   *
	   * - `done()`     Finalize the chain and return the chain's value.
	   * - `valueOf()`  The same as `done()`
	   * - `toString()` Executes `math.format()` onto the chain's value, returning
	   *                a string representation of the value.
	   *
	   * Syntax:
	   *
	   *    math.chain(value)
	   *
	   * Examples:
	   *
	   *     math.chain(3)
	   *         .add(4)
	   *         .subtract(2)
	   *         .done();     // 5
	   *
	   *     math.chain( [[1, 2], [3, 4]] )
	   *         .subset(math.index(0, 0), 8)
	   *         .multiply(3)
	   *         .done();     // [[24, 6], [9, 12]]
	   *
	   * @param {*} [value]   A value of any type on which to start a chained operation.
	   * @return {math.type.Chain} The created chain
	   */
	  return typed('chain', {
	    '': function _() {
	      return new type.Chain();
	    },

	    'any': function any(value) {
	      return new type.Chain(value);
	    }
	  });
	}

	exports.name = 'chain';
	exports.factory = factory;

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = [
	// type
	__webpack_require__(187),

	// construction function
	__webpack_require__(191)];

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var Complex = __webpack_require__(188);
	var format = __webpack_require__(166).format;
	var isNumber = __webpack_require__(166).isNumber;

	function factory(type, config, load, typed, math) {

	  /**
	   * Attach type information
	   */
	  Complex.prototype.type = 'Complex';
	  Complex.prototype.isComplex = true;

	  /**
	   * Get a JSON representation of the complex number
	   * @returns {Object} Returns a JSON object structured as:
	   *                   `{"mathjs": "Complex", "re": 2, "im": 3}`
	   */
	  Complex.prototype.toJSON = function () {
	    return {
	      mathjs: 'Complex',
	      re: this.re,
	      im: this.im
	    };
	  };

	  /*
	   * Return the value of the complex number in polar notation
	   * The angle phi will be set in the interval of [-pi, pi].
	   * @return {{r: number, phi: number}} Returns and object with properties r and phi.
	   */
	  Complex.prototype.toPolar = function () {
	    return {
	      r: this.abs(),
	      phi: this.arg()
	    };
	  };

	  /**
	   * Get a string representation of the complex number,
	   * with optional formatting options.
	   * @param {Object | number | Function} [options]  Formatting options. See
	   *                                                lib/utils/number:format for a
	   *                                                description of the available
	   *                                                options.
	   * @return {string} str
	   */
	  Complex.prototype.format = function (options) {
	    var str = '';
	    var im = this.im;
	    var re = this.re;
	    var strRe = format(this.re, options);
	    var strIm = format(this.im, options);

	    // round either re or im when smaller than the configured precision
	    var precision = isNumber(options) ? options : options ? options.precision : null;
	    if (precision !== null) {
	      var epsilon = Math.pow(10, -precision);
	      if (Math.abs(re / im) < epsilon) {
	        re = 0;
	      }
	      if (Math.abs(im / re) < epsilon) {
	        im = 0;
	      }
	    }

	    if (im == 0) {
	      // real value
	      str = strRe;
	    } else if (re == 0) {
	      // purely complex value
	      if (im == 1) {
	        str = 'i';
	      } else if (im == -1) {
	        str = '-i';
	      } else {
	        str = strIm + 'i';
	      }
	    } else {
	      // complex value
	      if (im > 0) {
	        if (im == 1) {
	          str = strRe + ' + i';
	        } else {
	          str = strRe + ' + ' + strIm + 'i';
	        }
	      } else {
	        if (im == -1) {
	          str = strRe + ' - i';
	        } else {
	          str = strRe + ' - ' + strIm.substring(1) + 'i';
	        }
	      }
	    }
	    return str;
	  };

	  /**
	   * Create a complex number from polar coordinates
	   *
	   * Usage:
	   *
	   *     Complex.fromPolar(r: number, phi: number) : Complex
	   *     Complex.fromPolar({r: number, phi: number}) : Complex
	   *
	   * @param {*} args...
	   * @return {Complex}
	   */
	  Complex.fromPolar = function (args) {
	    switch (arguments.length) {
	      case 1:
	        var arg = arguments[0];
	        if ((typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object') {
	          return Complex(arg);
	        }
	        throw new TypeError('Input has to be an object with r and phi keys.');

	      case 2:
	        var r = arguments[0],
	            phi = arguments[1];
	        if (isNumber(r)) {
	          if (phi && phi.isUnit && phi.hasBase('ANGLE')) {
	            // convert unit to a number in radians
	            phi = phi.toNumber('rad');
	          }

	          if (isNumber(phi)) {
	            return new Complex({ r: r, phi: phi });
	          }

	          throw new TypeError('Phi is not a number nor an angle unit.');
	        } else {
	          throw new TypeError('Radius r is not a number.');
	        }

	      default:
	        throw new SyntaxError('Wrong number of arguments in function fromPolar');
	    }
	  };

	  Complex.prototype.valueOf = Complex.prototype.toString;

	  /**
	   * Create a Complex number from a JSON object
	   * @param {Object} json  A JSON Object structured as
	   *                       {"mathjs": "Complex", "re": 2, "im": 3}
	   *                       All properties are optional, default values
	   *                       for `re` and `im` are 0.
	   * @return {Complex} Returns a new Complex number
	   */
	  Complex.fromJSON = function (json) {
	    return new Complex(json);
	  };

	  // apply the current epsilon
	  Complex.EPSILON = config.epsilon;

	  // listen for changed in the configuration, automatically apply changed epsilon
	  math.on('config', function (curr, prev) {
	    if (curr.epsilon !== prev.epsilon) {
	      Complex.EPSILON = curr.epsilon;
	    }
	  });

	  return Complex;
	}

	exports.name = 'Complex';
	exports.path = 'type';
	exports.factory = factory;
	exports.math = true; // request access to the math namespace

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	/**
	 * @license Complex.js v2.0.1 11/02/2016
	 *
	 * Copyright (c) 2016, Robert Eisele (robert@xarg.org)
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 **/

	/**
	 *
	 * This class allows the manipilation of complex numbers.
	 * You can pass a complex number in different formats. Either as object, double, string or two integer parameters.
	 *
	 * Object form
	 * { re: <real>, im: <imaginary> }
	 * { arg: <angle>, abs: <radius> }
	 * { phi: <angle>, r: <radius> }
	 *
	 * Double form
	 * 99.3 - Single double value
	 *
	 * String form
	 * "23.1337" - Simple real number
	 * "15+3i" - a simple complex number
	 * "3-i" - a simple complex number
	 *
	 * Example:
	 *
	 * var c = new Complex("99.3+8i");
	 * c.mul({r: 3, i: 9}).div(4.9).sub(3, 2);
	 *
	 */

	(function (root) {

	  "use strict";

	  var P = { 're': 0, 'im': 0 };

	  Math.cosh = Math.cosh || function (x) {
	    return (Math.exp(x) + Math.exp(-x)) * 0.5;
	  };

	  Math.sinh = Math.sinh || function (x) {
	    return (Math.exp(x) - Math.exp(-x)) * 0.5;
	  };

	  var parser_exit = function parser_exit() {
	    throw SyntaxError("Invalid Param");
	  };

	  /**
	   * Calculates log(sqrt(a^2+b^2)) in a way to avoid overflows
	   *
	   * @param {number} a
	   * @param {number} b
	   * @returns {number}
	   */
	  function logHypot(a, b) {

	    var _a = Math.abs(a);
	    var _b = Math.abs(b);

	    if (a === 0) {
	      return Math.log(_b);
	    }

	    if (b === 0) {
	      return Math.log(_a);
	    }

	    if (_a < 3000 && _b < 3000) {
	      return Math.log(a * a + b * b) * 0.5;
	    }

	    /* I got 4 ideas to compute this property without overflow:
	     *
	     * Testing 1000000 times with random samples for a,b ∈ [1, 1000000000] against a big decimal library to get an error estimate
	     *
	     * 1. Only eliminate the square root: (OVERALL ERROR: 3.9122483030951116e-11)
	      Math.log(a * a + b * b) / 2
	      *
	     *
	     * 2. Try to use the non-overflowing pythagoras: (OVERALL ERROR: 8.889760039210159e-10)
	      var fn = function(a, b) {
	     a = Math.abs(a);
	     b = Math.abs(b);
	     var t = Math.min(a, b);
	     a = Math.max(a, b);
	     t = t / a;
	      return Math.log(a) + Math.log(1 + t * t) / 2;
	     };
	      * 3. Abuse the identity cos(atan(y/x) = x / sqrt(x^2+y^2): (OVERALL ERROR: 3.4780178737037204e-10)
	      Math.log(a / Math.cos(Math.atan2(b, a)))
	      * 4. Use 3. and apply log rules: (OVERALL ERROR: 1.2014087502620896e-9)
	      Math.log(a) - Math.log(Math.cos(Math.atan2(b, a)))
	      */

	    return Math.log(a / Math.cos(Math.atan2(b, a)));
	  }

	  var parse = function parse(a, b) {

	    if (a === undefined || a === null) {
	      P["re"] = P["im"] = 0;
	    } else if (b !== undefined) {
	      P["re"] = a;
	      P["im"] = b;
	    } else switch (typeof a === 'undefined' ? 'undefined' : _typeof(a)) {

	      case "object":

	        if ("im" in a && "re" in a) {
	          P["re"] = a["re"];
	          P["im"] = a["im"];
	        } else if ("abs" in a && "arg" in a) {
	          P["re"] = a["abs"] * Math.cos(a["arg"]);
	          P["im"] = a["abs"] * Math.sin(a["arg"]);
	        } else if ("r" in a && "phi" in a) {
	          P["re"] = a["r"] * Math.cos(a["phi"]);
	          P["im"] = a["r"] * Math.sin(a["phi"]);
	        } else {
	          parser_exit();
	        }
	        break;

	      case "string":

	        P["im"] = /* void */
	        P["re"] = 0;

	        var tokens = a.match(/\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g);
	        var plus = 1;
	        var minus = 0;

	        if (tokens === null) {
	          parser_exit();
	        }

	        for (var i = 0; i < tokens.length; i++) {

	          var c = tokens[i];

	          if (c === ' ' || c === '\t' || c === '\n') {
	            /* void */
	          } else if (c === '+') {
	            plus++;
	          } else if (c === '-') {
	            minus++;
	          } else if (c === 'i' || c === 'I') {

	            if (plus + minus === 0) {
	              parser_exit();
	            }

	            if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
	              P["im"] += parseFloat((minus % 2 ? "-" : "") + tokens[i + 1]);
	              i++;
	            } else {
	              P["im"] += parseFloat((minus % 2 ? "-" : "") + "1");
	            }
	            plus = minus = 0;
	          } else {

	            if (plus + minus === 0 || isNaN(c)) {
	              parser_exit();
	            }

	            if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {
	              P["im"] += parseFloat((minus % 2 ? "-" : "") + c);
	              i++;
	            } else {
	              P["re"] += parseFloat((minus % 2 ? "-" : "") + c);
	            }
	            plus = minus = 0;
	          }
	        }

	        // Still something on the stack
	        if (plus + minus > 0) {
	          parser_exit();
	        }
	        break;

	      case "number":
	        P["im"] = 0;
	        P["re"] = a;
	        break;

	      default:
	        parser_exit();
	    }

	    if (isNaN(P["re"]) || isNaN(P["im"])) {
	      // If a calculation is NaN, we treat it as NaN and don't throw
	      //parser_exit();
	    }
	  };

	  /**
	   * @constructor
	   * @returns {Complex}
	   */
	  function Complex(a, b) {

	    if (!(this instanceof Complex)) {
	      return new Complex(a, b);
	    }

	    parse(a, b); // mutates P

	    this["re"] = P["re"];
	    this["im"] = P["im"];
	  }

	  Complex.prototype = {

	    "re": 0,
	    "im": 0,

	    /**
	     * Calculates the sign of a complex number
	     *
	     * @returns {Complex}
	     */
	    "sign": function sign() {

	      var abs = this["abs"]();

	      return new Complex(this["re"] / abs, this["im"] / abs);
	    },

	    /**
	     * Adds two complex numbers
	     *
	     * @returns {Complex}
	     */
	    "add": function add(a, b) {

	      parse(a, b); // mutates P

	      return new Complex(this["re"] + P["re"], this["im"] + P["im"]);
	    },

	    /**
	     * Subtracts two complex numbers
	     *
	     * @returns {Complex}
	     */
	    "sub": function sub(a, b) {

	      parse(a, b); // mutates P

	      return new Complex(this["re"] - P["re"], this["im"] - P["im"]);
	    },

	    /**
	     * Multiplies two complex numbers
	     *
	     * @returns {Complex}
	     */
	    "mul": function mul(a, b) {

	      parse(a, b); // mutates P

	      // Besides the addition/subtraction, this helps having a solution for rational Infinity
	      if (P['im'] === 0 && this['im'] === 0) {
	        return new Complex(this['re'] * P['re'], 0);
	      }

	      return new Complex(this["re"] * P["re"] - this["im"] * P["im"], this["re"] * P["im"] + this["im"] * P["re"]);
	    },

	    /**
	     * Divides two complex numbers
	     *
	     * @returns {Complex}
	     */
	    "div": function div(a, b) {

	      parse(a, b); // mutates P

	      a = this["re"];
	      b = this["im"];

	      var c = P["re"];
	      var d = P["im"];
	      var t, x;

	      // Divisor is zero
	      if (0 === c && 0 === d) {
	        return new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? b / 0 : 0);
	      }

	      // Divisor is rational
	      if (0 === d) {
	        return new Complex(a / c, b / c);
	      }

	      if (Math.abs(c) < Math.abs(d)) {

	        x = c / d;
	        t = c * x + d;

	        return new Complex((a * x + b) / t, (b * x - a) / t);
	      } else {

	        x = d / c;
	        t = d * x + c;

	        return new Complex((a + b * x) / t, (b - a * x) / t);
	      }
	    },

	    /**
	     * Calculate the power of two complex numbers
	     *
	     * @returns {Complex}
	     */
	    "pow": function pow(a, b) {

	      parse(a, b); // mutates P

	      a = this["re"];
	      b = this["im"];

	      if (a === 0 && b === 0) {
	        return new Complex(0, 0);
	      }

	      var arg = Math.atan2(b, a);
	      var loh = logHypot(a, b);

	      if (P["im"] === 0) {

	        if (b === 0 && a >= 0) {

	          return new Complex(Math.pow(a, P["re"]), 0);
	        } else if (a === 0) {

	          switch (P["re"] % 4) {
	            case 0:
	              return new Complex(Math.pow(b, P["re"]), 0);
	            case 1:
	              return new Complex(0, Math.pow(b, P["re"]));
	            case 2:
	              return new Complex(-Math.pow(b, P["re"]), 0);
	            case 3:
	              return new Complex(0, -Math.pow(b, P["re"]));
	          }
	        }
	      }

	      /* I couldn"t find a good formula, so here is a derivation and optimization
	       *
	       * z_1^z_2 = (a + bi)^(c + di)
	       *         = exp((c + di) * log(a + bi)
	       *         = pow(a^2 + b^2, (c + di) / 2) * exp(i(c + di)atan2(b, a))
	       * =>...
	       * Re = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * cos(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
	       * Im = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * sin(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
	       *
	       * =>...
	       * Re = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * cos(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
	       * Im = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * sin(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
	       *
	       * =>
	       * Re = exp(c * logsq2 - d * arg(z_1)) * cos(d * logsq2 + c * arg(z_1))
	       * Im = exp(c * logsq2 - d * arg(z_1)) * sin(d * logsq2 + c * arg(z_1))
	       *
	       */

	      a = Math.exp(P["re"] * loh - P["im"] * arg);
	      b = P["im"] * loh + P["re"] * arg;
	      return new Complex(a * Math.cos(b), a * Math.sin(b));
	    },

	    /**
	     * Calculate the complex square root
	     *
	     * @returns {Complex}
	     */
	    "sqrt": function sqrt() {

	      var a = this["re"];
	      var b = this["im"];
	      var r = this["abs"]();

	      var re, im;

	      if (a >= 0 && b === 0) {
	        return new Complex(Math.sqrt(a), 0);
	      }

	      if (a >= 0) {
	        re = 0.5 * Math.sqrt(2.0 * (r + a));
	      } else {
	        re = Math.abs(b) / Math.sqrt(2 * (r - a));
	      }

	      if (a <= 0) {
	        im = 0.5 * Math.sqrt(2.0 * (r - a));
	      } else {
	        im = Math.abs(b) / Math.sqrt(2 * (r + a));
	      }

	      return new Complex(re, b >= 0 ? im : -im);
	    },

	    /**
	     * Calculate the complex exponent
	     *
	     * @returns {Complex}
	     */
	    "exp": function exp() {

	      var tmp = Math.exp(this["re"]);

	      if (this["im"] === 0) {
	        //return new Complex(tmp, 0);
	      }
	      return new Complex(tmp * Math.cos(this["im"]), tmp * Math.sin(this["im"]));
	    },

	    /**
	     * Calculate the natural log
	     *
	     * @returns {Complex}
	     */
	    "log": function log() {

	      var a = this["re"];
	      var b = this["im"];

	      if (b === 0 && a > 0) {
	        //return new Complex(Math.log(a), 0);
	      }

	      return new Complex(logHypot(a, b), Math.atan2(b, a));
	    },

	    /**
	     * Calculate the magniture of the complex number
	     *
	     * @returns {number}
	     */
	    "abs": function abs() {

	      var a = Math.abs(this["re"]);
	      var b = Math.abs(this["im"]);

	      if (a < 3000 && b < 3000) {
	        return Math.sqrt(a * a + b * b);
	      }

	      if (a < b) {
	        a = b;
	        b = this["re"] / this["im"];
	      } else {
	        b = this["im"] / this["re"];
	      }
	      return a * Math.sqrt(1 + b * b);
	    },

	    /**
	     * Calculate the angle of the complex number
	     *
	     * @returns {number}
	     */
	    "arg": function arg() {

	      return Math.atan2(this["im"], this["re"]);
	    },

	    /**
	     * Calculate the sine of the complex number
	     *
	     * @returns {Complex}
	     */
	    "sin": function sin() {

	      var a = this["re"];
	      var b = this["im"];

	      return new Complex(Math.sin(a) * Math.cosh(b), Math.cos(a) * Math.sinh(b));
	    },

	    /**
	     * Calculate the cosine
	     *
	     * @returns {Complex}
	     */
	    "cos": function cos() {

	      var a = this["re"];
	      var b = this["im"];

	      return new Complex(Math.cos(a) * Math.cosh(b), -Math.sin(a) * Math.sinh(b));
	    },

	    /**
	     * Calculate the tangent
	     *
	     * @returns {Complex}
	     */
	    "tan": function tan() {

	      var a = 2 * this["re"];
	      var b = 2 * this["im"];
	      var d = Math.cos(a) + Math.cosh(b);

	      return new Complex(Math.sin(a) / d, Math.sinh(b) / d);
	    },

	    /**
	     * Calculate the cotangent
	     *
	     * @returns {Complex}
	     */
	    "cot": function cot() {

	      var a = 2 * this["re"];
	      var b = 2 * this["im"];
	      var d = Math.cos(a) - Math.cosh(b);

	      return new Complex(-Math.sin(a) / d, Math.sinh(b) / d);
	    },

	    /**
	     * Calculate the secant
	     *
	     * @returns {Complex}
	     */
	    "sec": function sec() {

	      var a = this["re"];
	      var b = this["im"];
	      var d = 0.5 * Math.cosh(2 * b) + 0.5 * Math.cos(2 * a);

	      return new Complex(Math.cos(a) * Math.cosh(b) / d, Math.sin(a) * Math.sinh(b) / d);
	    },

	    /**
	     * Calculate the cosecans
	     *
	     * @returns {Complex}
	     */
	    "csc": function csc() {

	      var a = this["re"];
	      var b = this["im"];
	      var d = 0.5 * Math.cosh(2 * b) - 0.5 * Math.cos(2 * a);

	      return new Complex(Math.sin(a) * Math.cosh(b) / d, -Math.cos(a) * Math.sinh(b) / d);
	    },

	    /**
	     * Calculate the complex arcus sinus
	     *
	     * @returns {Complex}
	     */
	    "asin": function asin() {

	      var a = this["re"];
	      var b = this["im"];

	      var t1 = new Complex(b * b - a * a + 1, -2 * a * b)['sqrt']();

	      var t2 = new Complex(t1['re'] - b, t1['im'] + a)['log']();

	      return new Complex(t2['im'], -t2['re']);
	    },

	    /**
	     * Calculate the complex arcus cosinus
	     *
	     * @returns {Complex}
	     */
	    "acos": function acos() {

	      var a = this["re"];
	      var b = this["im"];

	      var t1 = new Complex(b * b - a * a + 1, -2 * a * b)['sqrt']();

	      var t2 = new Complex(t1["re"] - b, t1["im"] + a)['log']();

	      return new Complex(Math.PI / 2 - t2["im"], t2["re"]);
	    },

	    /**
	     * Calculate the complex arcus tangent
	     *
	     * @returns {Complex}
	     */
	    "atan": function atan() {

	      var a = this["re"];
	      var b = this["im"];

	      if (a === 0) {

	        if (b === 1) {
	          return new Complex(0, Infinity);
	        }

	        if (b === -1) {
	          return new Complex(0, -Infinity);
	        }
	      }

	      var d = a * a + (1.0 - b) * (1.0 - b);

	      var t1 = new Complex((1 - b * b - a * a) / d, -2 * a / d).log();

	      return new Complex(-0.5 * t1["im"], 0.5 * t1["re"]);
	    },

	    /**
	     * Calculate the complex arcus cotangent
	     *
	     * @returns {Complex}
	     */
	    "acot": function acot() {

	      var a = this["re"];
	      var b = this["im"];

	      if (b === 0) {
	        return new Complex(Math.atan2(1, a), 0);
	      }

	      var d = a * a + b * b;
	      return d !== 0 ? new Complex(a / d, -b / d).atan() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).atan();
	    },

	    /**
	     * Calculate the complex arcus secant
	     *
	     * @returns {Complex}
	     */
	    "asec": function asec() {

	      var a = this["re"];
	      var b = this["im"];

	      if (a === 0 && b === 0) {
	        return new Complex(0, Infinity);
	      }

	      var d = a * a + b * b;
	      return d !== 0 ? new Complex(a / d, -b / d).acos() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).acos();
	    },

	    /**
	     * Calculate the complex arcus cosecans
	     *
	     * @returns {Complex}
	     */
	    "acsc": function acsc() {

	      var a = this["re"];
	      var b = this["im"];

	      if (a === 0 && b === 0) {
	        return new Complex(Math.PI / 2, Infinity);
	      }

	      var d = a * a + b * b;
	      return d !== 0 ? new Complex(a / d, -b / d).asin() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).asin();
	    },

	    /**
	     * Calculate the complex sinh
	     *
	     * @returns {Complex}
	     */
	    "sinh": function sinh() {

	      var a = this["re"];
	      var b = this["im"];

	      return new Complex(Math.sinh(a) * Math.cos(b), Math.cosh(a) * Math.sin(b));
	    },

	    /**
	     * Calculate the complex cosh
	     *
	     * @returns {Complex}
	     */
	    "cosh": function cosh() {

	      var a = this["re"];
	      var b = this["im"];

	      return new Complex(Math.cosh(a) * Math.cos(b), Math.sinh(a) * Math.sin(b));
	    },

	    /**
	     * Calculate the complex tanh
	     *
	     * @returns {Complex}
	     */
	    "tanh": function tanh() {

	      var a = 2 * this["re"];
	      var b = 2 * this["im"];
	      var d = Math.cosh(a) + Math.cos(b);

	      return new Complex(Math.sinh(a) / d, Math.sin(b) / d);
	    },

	    /**
	     * Calculate the complex coth
	     *
	     * @returns {Complex}
	     */
	    "coth": function coth() {

	      var a = 2 * this["re"];
	      var b = 2 * this["im"];
	      var d = Math.cosh(a) - Math.cos(b);

	      return new Complex(Math.sinh(a) / d, -Math.sin(b) / d);
	    },

	    /**
	     * Calculate the complex coth
	     *
	     * @returns {Complex}
	     */
	    "csch": function csch() {

	      var a = this["re"];
	      var b = this["im"];
	      var d = Math.cos(2 * b) - Math.cosh(2 * a);

	      return new Complex(-2 * Math.sinh(a) * Math.cos(b) / d, 2 * Math.cosh(a) * Math.sin(b) / d);
	    },

	    /**
	     * Calculate the complex sech
	     *
	     * @returns {Complex}
	     */
	    "sech": function sech() {

	      var a = this["re"];
	      var b = this["im"];
	      var d = Math.cos(2 * b) + Math.cosh(2 * a);

	      return new Complex(2 * Math.cosh(a) * Math.cos(b) / d, -2 * Math.sinh(a) * Math.sin(b) / d);
	    },

	    /**
	     * Calculate the complex asinh
	     *
	     * @returns {Complex}
	     */
	    "asinh": function asinh() {

	      var tmp = this["im"];
	      this["im"] = -this["re"];
	      this["re"] = tmp;
	      var res = this["asin"]();

	      this["re"] = -this["im"];
	      this["im"] = tmp;
	      tmp = res["re"];

	      res["re"] = -res["im"];
	      res["im"] = tmp;
	      return res;
	    },

	    /**
	     * Calculate the complex asinh
	     *
	     * @returns {Complex}
	     */
	    "acosh": function acosh() {

	      var tmp;
	      var res = this["acos"]();
	      if (res["im"] <= 0) {
	        tmp = res["re"];
	        res["re"] = -res["im"];
	        res["im"] = tmp;
	      } else {
	        tmp = res["im"];
	        res["im"] = -res["re"];
	        res["re"] = tmp;
	      }
	      return res;
	    },

	    /**
	     * Calculate the complex atanh
	     *
	     * @returns {Complex}
	     */
	    "atanh": function atanh() {

	      var a = this["re"];
	      var b = this["im"];

	      var noIM = a > 1 && b === 0;
	      var oneMinus = 1 - a;
	      var onePlus = 1 + a;
	      var d = oneMinus * oneMinus + b * b;

	      var x = d !== 0 ? new Complex((onePlus * oneMinus - b * b) / d, (b * oneMinus + onePlus * b) / d) : new Complex(a !== -1 ? a / 0 : 0, b !== 0 ? b / 0 : 0);

	      var temp = x["re"];
	      x["re"] = logHypot(x["re"], x["im"]) / 2;
	      x["im"] = Math.atan2(x["im"], temp) / 2;
	      if (noIM) {
	        x["im"] = -x["im"];
	      }
	      return x;
	    },

	    /**
	     * Calculate the complex acoth
	     *
	     * @returns {Complex}
	     */
	    "acoth": function acoth() {

	      var a = this["re"];
	      var b = this["im"];

	      if (a === 0 && b === 0) {

	        return new Complex(0, Math.PI / 2);
	      }

	      var d = a * a + b * b;
	      return d !== 0 ? new Complex(a / d, -b / d).atanh() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).atanh();
	    },

	    /**
	     * Calculate the complex acsch
	     *
	     * @returns {Complex}
	     */
	    "acsch": function acsch() {

	      var a = this["re"];
	      var b = this["im"];

	      if (b === 0) {

	        return new Complex(a !== 0 ? Math.log(a + Math.sqrt(a * a + 1)) : Infinity, 0);
	      }

	      var d = a * a + b * b;
	      return d !== 0 ? new Complex(a / d, -b / d).asinh() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).asinh();
	    },

	    /**
	     * Calculate the complex asech
	     *
	     * @returns {Complex}
	     */
	    "asech": function asech() {

	      var a = this["re"];
	      var b = this["im"];

	      if (a === 0 && b === 0) {
	        return new Complex(Infinity, 0);
	      }

	      var d = a * a + b * b;
	      return d !== 0 ? new Complex(a / d, -b / d).acosh() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).acosh();
	    },

	    /**
	     * Calculate the complex inverse 1/z
	     *
	     * @returns {Complex}
	     */
	    "inverse": function inverse() {

	      var a = this["re"];
	      var b = this["im"];

	      var d = a * a + b * b;

	      return new Complex(a !== 0 ? a / d : 0, b !== 0 ? -b / d : 0);
	    },

	    /**
	     * Returns the complex conjugate
	     *
	     * @returns {Complex}
	     */
	    "conjugate": function conjugate() {

	      return new Complex(this["re"], -this["im"]);
	    },

	    /**
	     * Gets the negated complex number
	     *
	     * @returns {Complex}
	     */
	    "neg": function neg() {

	      return new Complex(-this["re"], -this["im"]);
	    },

	    /**
	     * Ceils the actual complex number
	     *
	     * @returns {Complex}
	     */
	    "ceil": function ceil(places) {

	      places = Math.pow(10, places || 0);

	      return new Complex(Math.ceil(this["re"] * places) / places, Math.ceil(this["im"] * places) / places);
	    },

	    /**
	     * Floors the actual complex number
	     *
	     * @returns {Complex}
	     */
	    "floor": function floor(places) {

	      places = Math.pow(10, places || 0);

	      return new Complex(Math.floor(this["re"] * places) / places, Math.floor(this["im"] * places) / places);
	    },

	    /**
	     * Ceils the actual complex number
	     *
	     * @returns {Complex}
	     */
	    "round": function round(places) {

	      places = Math.pow(10, places || 0);

	      return new Complex(Math.round(this["re"] * places) / places, Math.round(this["im"] * places) / places);
	    },

	    /**
	     * Compares two complex numbers
	     *
	     * @returns {boolean}
	     */
	    "equals": function equals(a, b) {

	      parse(a, b); // mutates P

	      return Math.abs(P["re"] - this["re"]) <= Complex["EPSILON"] && Math.abs(P["im"] - this["im"]) <= Complex["EPSILON"];
	    },

	    /**
	     * Clones the actual object
	     *
	     * @returns {Complex}
	     */
	    "clone": function clone() {

	      return new Complex(this["re"], this["im"]);
	    },

	    /**
	     * Gets a string of the actual complex number
	     *
	     * @returns {string}
	     */
	    "toString": function toString() {

	      var a = this["re"];
	      var b = this["im"];
	      var ret = "";

	      if (isNaN(a) || isNaN(b)) {
	        return "NaN";
	      }

	      if (a !== 0) {
	        ret += a;
	      }

	      if (b !== 0) {

	        if (a !== 0) {
	          ret += b < 0 ? " - " : " + ";
	        } else if (b < 0) {
	          ret += "-";
	        }

	        b = Math.abs(b);

	        if (1 !== b) {
	          ret += b;
	        }
	        ret += "i";
	      }

	      if (!ret) return "0";

	      return ret;
	    },

	    /**
	     * Returns the actual number as a vector
	     *
	     * @returns {Array}
	     */
	    "toVector": function toVector() {

	      return [this["re"], this["im"]];
	    },

	    /**
	     * Returns the actual real value of the current object
	     *
	     * @returns {number|null}
	     */
	    "valueOf": function valueOf() {

	      if (this["im"] === 0) {
	        return this["re"];
	      }
	      return null;
	    },

	    /**
	     * Checks if the given complex number is not a number
	     *
	     * @returns {boolean}
	     */
	    isNaN: function (_isNaN) {
	      function isNaN() {
	        return _isNaN.apply(this, arguments);
	      }

	      isNaN.toString = function () {
	        return _isNaN.toString();
	      };

	      return isNaN;
	    }(function () {
	      return isNaN(this['re']) || isNaN(this['im']);
	    })
	  };

	  Complex["ZERO"] = new Complex(0, 0);
	  Complex["ONE"] = new Complex(1, 0);
	  Complex["I"] = new Complex(0, 1);
	  Complex["PI"] = new Complex(Math.PI, 0);
	  Complex["E"] = new Complex(Math.E, 0);
	  Complex['EPSILON'] = 1e-16;

	  if ("function" === "function" && __webpack_require__(190)["amd"]) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
	      return Complex;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (( false ? 'undefined' : _typeof(exports)) === "object") {
	    module["exports"] = Complex;
	  } else {
	    root["Complex"] = Complex;
	  }
		})(undefined);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(189)(module)))

/***/ },
/* 189 */
/***/ function(module, exports) {

	"use strict";

	module.exports = function (module) {
		if (!module.webpackPolyfill) {
			module.deprecate = function () {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
		};

/***/ },
/* 190 */
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  var latex = __webpack_require__(192);

	  /**
	   * Create a complex value or convert a value to a complex value.
	   *
	   * Syntax:
	   *
	   *     math.complex()                           // creates a complex value with zero
	   *                                              // as real and imaginary part.
	   *     math.complex(re : number, im : string)   // creates a complex value with provided
	   *                                              // values for real and imaginary part.
	   *     math.complex(re : number)                // creates a complex value with provided
	   *                                              // real value and zero imaginary part.
	   *     math.complex(complex : Complex)          // clones the provided complex value.
	   *     math.complex(arg : string)               // parses a string into a complex value.
	   *     math.complex(array : Array)              // converts the elements of the array
	   *                                              // or matrix element wise into a
	   *                                              // complex value.
	   *     math.complex({re: number, im: number})   // creates a complex value with provided
	   *                                              // values for real an imaginary part.
	   *     math.complex({r: number, phi: number})   // creates a complex value with provided
	   *                                              // polar coordinates
	   *
	   * Examples:
	   *
	   *    var a = math.complex(3, -4);     // a = Complex 3 - 4i
	   *    a.re = 5;                        // a = Complex 5 - 4i
	   *    var i = a.im;                    // Number -4;
	   *    var b = math.complex('2 + 6i');  // Complex 2 + 6i
	   *    var c = math.complex();          // Complex 0 + 0i
	   *    var d = math.add(a, b);          // Complex 5 + 2i
	   *
	   * See also:
	   *
	   *    bignumber, boolean, index, matrix, number, string, unit
	   *
	   * @param {* | Array | Matrix} [args]
	   *            Arguments specifying the real and imaginary part of the complex number
	   * @return {Complex | Array | Matrix} Returns a complex value
	   */
	  var complex = typed('complex', {
	    '': function _() {
	      return type.Complex.ZERO;
	    },

	    'number': function number(x) {
	      return new type.Complex(x, 0);
	    },

	    'number, number': function numberNumber(re, im) {
	      return new type.Complex(re, im);
	    },

	    // TODO: this signature should be redundant
	    'BigNumber, BigNumber': function BigNumberBigNumber(re, im) {
	      return new type.Complex(re.toNumber(), im.toNumber());
	    },

	    'Complex': function Complex(x) {
	      return x.clone();
	    },

	    'string': function string(x) {
	      return type.Complex(x); // for example '2 + 3i'
	    },

	    'Object': function Object(x) {
	      if ('re' in x && 'im' in x) {
	        return new type.Complex(x.re, x.im);
	      }

	      if ('r' in x && 'phi' in x) {
	        return new type.Complex(x);
	      }

	      throw new Error('Expected object with either properties re and im, or properties r and phi.');
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, complex);
	    }
	  });

	  complex.toTex = {
	    0: '0',
	    1: '\\left(${args[0]}\\right)',
	    2: '\\left(\\left(${args[0]}\\right)+' + latex.symbols['i'] + '\\cdot\\left(${args[1]}\\right)\\right)'
	  };

	  return complex;
	}

	exports.name = 'complex';
	exports.factory = factory;

/***/ },
/* 192 */
/***/ function(module, exports) {

	'use strict';

	exports.symbols = {
	  // GREEK LETTERS
	  Alpha: 'A', alpha: '\\alpha',
	  Beta: 'B', beta: '\\beta',
	  Gamma: '\\Gamma', gamma: '\\gamma',
	  Delta: '\\Delta', delta: '\\delta',
	  Epsilon: 'E', epsilon: '\\epsilon', varepsilon: '\\varepsilon',
	  Zeta: 'Z', zeta: '\\zeta',
	  Eta: 'H', eta: '\\eta',
	  Theta: '\\Theta', theta: '\\theta', vartheta: '\\vartheta',
	  Iota: 'I', iota: '\\iota',
	  Kappa: 'K', kappa: '\\kappa', varkappa: '\\varkappa',
	  Lambda: '\\Lambda', lambda: '\\lambda',
	  Mu: 'M', mu: '\\mu',
	  Nu: 'N', nu: '\\nu',
	  Xi: '\\Xi', xi: '\\xi',
	  Omicron: 'O', omicron: 'o',
	  Pi: '\\Pi', pi: '\\pi', varpi: '\\varpi',
	  Rho: 'P', rho: '\\rho', varrho: '\\varrho',
	  Sigma: '\\Sigma', sigma: '\\sigma', varsigma: '\\varsigma',
	  Tau: 'T', tau: '\\tau',
	  Upsilon: '\\Upsilon', upsilon: '\\upsilon',
	  Phi: '\\Phi', phi: '\\phi', varphi: '\\varphi',
	  Chi: 'X', chi: '\\chi',
	  Psi: '\\Psi', psi: '\\psi',
	  Omega: '\\Omega', omega: '\\omega',
	  //logic
	  'true': '\\mathrm{True}',
	  'false': '\\mathrm{False}',
	  //other
	  i: 'i', //TODO use \i ??
	  inf: '\\infty',
	  Inf: '\\infty',
	  infinity: '\\infty',
	  Infinity: '\\infty',
	  oo: '\\infty',
	  lim: '\\lim',
	  'undefined': '\\mathbf{?}'
	};

	exports.operators = {
	  'transpose': '^\\top',
	  'factorial': '!',
	  'pow': '^',
	  'dotPow': '.^\\wedge', //TODO find ideal solution
	  'unaryPlus': '+',
	  'unaryMinus': '-',
	  'bitNot': '~', //TODO find ideal solution
	  'not': '\\neg',
	  'multiply': '\\cdot',
	  'divide': '\\frac', //TODO how to handle that properly?
	  'dotMultiply': '.\\cdot', //TODO find ideal solution
	  'dotDivide': '.:', //TODO find ideal solution
	  'mod': '\\mod',
	  'add': '+',
	  'subtract': '-',
	  'to': '\\rightarrow',
	  'leftShift': '<<',
	  'rightArithShift': '>>',
	  'rightLogShift': '>>>',
	  'equal': '=',
	  'unequal': '\\neq',
	  'smaller': '<',
	  'larger': '>',
	  'smallerEq': '\\leq',
	  'largerEq': '\\geq',
	  'bitAnd': '\\&',
	  'bitXor': '\\underline{|}',
	  'bitOr': '|',
	  'and': '\\wedge',
	  'xor': '\\veebar',
	  'or': '\\vee'
	};

	exports.defaultTemplate = '\\mathrm{${name}}\\left(${args}\\right)';

	var units = {
	  deg: '^\\circ'
	};

	//@param {string} name
	//@param {boolean} isUnit
	exports.toSymbol = function (name, isUnit) {
	  isUnit = typeof isUnit === 'undefined' ? false : isUnit;
	  if (isUnit) {
	    if (units.hasOwnProperty(name)) {
	      return units[name];
	    }
	    return '\\mathrm{' + name + '}';
	  }

	  if (exports.symbols.hasOwnProperty(name)) {
	    return exports.symbols[name];
	  } else if (name.indexOf('_') !== -1) {
	    //symbol with index (eg. alpha_1)
	    var index = name.indexOf('_');
	    return exports.toSymbol(name.substring(0, index)) + '_{' + exports.toSymbol(name.substring(index + 1)) + '}';
	  }
	  return name;
	};

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = [
	// type
	__webpack_require__(194),

	// construction function
	__webpack_require__(196)];

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Fraction = __webpack_require__(195);

	/**
	 * Attach type information
	 */
	Fraction.prototype.type = 'Fraction';
	Fraction.prototype.isFraction = true;

	/**
	 * Get a JSON representation of a Fraction containing type information
	 * @returns {Object} Returns a JSON object structured as:
	 *                   `{"mathjs": "Fraction", "n": 3, "d": 8}`
	 */
	Fraction.prototype.toJSON = function () {
	  return {
	    mathjs: 'Fraction',
	    n: this.s * this.n,
	    d: this.d
	  };
	};

	/**
	 * Instantiate a Fraction from a JSON object
	 * @param {Object} json  a JSON object structured as:
	 *                       `{"mathjs": "Fraction", "n": 3, "d": 8}`
	 * @return {BigNumber}
	 */
	Fraction.fromJSON = function (json) {
	  return new Fraction(json);
	};

	function factory(type, config, load, typed) {
	  return Fraction;
	}

	exports.name = 'Fraction';
	exports.path = 'type';
	exports.factory = factory;

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	/**
	 * @license Fraction.js v3.3.1 09/09/2015
	 * http://www.xarg.org/2014/03/precise-calculations-in-javascript/
	 *
	 * Copyright (c) 2015, Robert Eisele (robert@xarg.org)
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 **/

	/**
	 *
	 * This class offers the possibility to calculate fractions.
	 * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.
	 *
	 * Array/Object form
	 * [ 0 => <nominator>, 1 => <denominator> ]
	 * [ n => <nominator>, d => <denominator> ]
	 *
	 * Integer form
	 * - Single integer value
	 *
	 * Double form
	 * - Single double value
	 *
	 * String form
	 * 123.456 - a simple double
	 * 123/456 - a string fraction
	 * 123.'456' - a double with repeating decimal places
	 * 123.(456) - synonym
	 * 123.45'6' - a double with repeating last place
	 * 123.45(6) - synonym
	 *
	 * Example:
	 *
	 * var f = new Fraction("9.4'31'");
	 * f.mul([-4, 3]).div(4.9);
	 *
	 */

	(function (root) {

	  "use strict";

	  // Maximum search depth for cyclic rational numbers. 2000 should be more than enough. 
	  // Example: 1/7 = 0.(142857) has 6 repeating decimal places.
	  // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits

	  var MAX_CYCLE_LEN = 2000;

	  // Parsed data to avoid calling "new" all the time
	  var P = {
	    "s": 1,
	    "n": 0,
	    "d": 1
	  };

	  function assign(n, s) {

	    if (isNaN(n = parseInt(n, 10))) {
	      throwInvalidParam();
	    }
	    return n * s;
	  }

	  function throwInvalidParam() {
	    throw "Invalid Param";
	  }

	  var parse = function parse(p1, p2) {

	    var n = 0,
	        d = 1,
	        s = 1;
	    var v = 0,
	        w = 0,
	        x = 0,
	        y = 1,
	        z = 1;

	    var A = 0,
	        B = 1;
	    var C = 1,
	        D = 1;

	    var N = 10000000;
	    var M;

	    if (p1 === undefined || p1 === null) {
	      /* void */
	    } else if (p2 !== undefined) {
	      n = p1;
	      d = p2;
	      s = n * d;
	    } else switch (typeof p1 === "undefined" ? "undefined" : _typeof(p1)) {

	      case "object":
	        {
	          if ("d" in p1 && "n" in p1) {
	            n = p1["n"];
	            d = p1["d"];
	            if ("s" in p1) n *= p1["s"];
	          } else if (0 in p1) {
	            n = p1[0];
	            if (1 in p1) d = p1[1];
	          } else {
	            throwInvalidParam();
	          }
	          s = n * d;
	          break;
	        }
	      case "number":
	        {
	          if (p1 < 0) {
	            s = p1;
	            p1 = -p1;
	          }

	          if (p1 % 1 === 0) {
	            n = p1;
	          } else if (p1 > 0) {
	            // check for != 0, scale would become NaN (log(0)), which converges really slow

	            if (p1 >= 1) {
	              z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));
	              p1 /= z;
	            }

	            // Using Farey Sequences
	            // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/

	            while (B <= N && D <= N) {
	              M = (A + C) / (B + D);

	              if (p1 === M) {
	                if (B + D <= N) {
	                  n = A + C;
	                  d = B + D;
	                } else if (D > B) {
	                  n = C;
	                  d = D;
	                } else {
	                  n = A;
	                  d = B;
	                }
	                break;
	              } else {

	                if (p1 > M) {
	                  A += C;
	                  B += D;
	                } else {
	                  C += A;
	                  D += B;
	                }

	                if (B > N) {
	                  n = C;
	                  d = D;
	                } else {
	                  n = A;
	                  d = B;
	                }
	              }
	            }
	            n *= z;
	          } else if (isNaN(p1) || isNaN(p2)) {
	            d = n = NaN;
	          }
	          break;
	        }
	      case "string":
	        {
	          B = p1.match(/\d+|./g);

	          if (B[A] === '-') {
	            // Check for minus sign at the beginning
	            s = -1;
	            A++;
	          } else if (B[A] === '+') {
	            // Check for plus sign at the beginning
	            A++;
	          }

	          if (B.length === A + 1) {
	            // Check if it's just a simple number "1234"
	            w = assign(B[A++], s);
	          } else if (B[A + 1] === '.' || B[A] === '.') {
	            // Check if it's a decimal number

	            if (B[A] !== '.') {
	              // Handle 0.5 and .5
	              v = assign(B[A++], s);
	            }
	            A++;

	            // Check for decimal places
	            if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === "'" && B[A + 3] === "'") {
	              w = assign(B[A], s);
	              y = Math.pow(10, B[A].length);
	              A++;
	            }

	            // Check for repeating places
	            if (B[A] === '(' && B[A + 2] === ')' || B[A] === "'" && B[A + 2] === "'") {
	              x = assign(B[A + 1], s);
	              z = Math.pow(10, B[A + 1].length) - 1;
	              A += 3;
	            }
	          } else if (B[A + 1] === '/' || B[A + 1] === ':') {
	            // Check for a simple fraction "123/456" or "123:456"
	            w = assign(B[A], s);
	            y = assign(B[A + 2], 1);
	            A += 3;
	          } else if (B[A + 3] === '/' && B[A + 1] === ' ') {
	            // Check for a complex fraction "123 1/2"
	            v = assign(B[A], s);
	            w = assign(B[A + 2], s);
	            y = assign(B[A + 4], 1);
	            A += 5;
	          }

	          if (B.length <= A) {
	            // Check for more tokens on the stack
	            d = y * z;
	            s = /* void */
	            n = x + d * v + z * w;
	            break;
	          }

	          /* Fall through on error */
	        }
	      default:
	        throwInvalidParam();
	    }

	    if (d === 0) {
	      throw "DIV/0";
	    }

	    P["s"] = s < 0 ? -1 : 1;
	    P["n"] = Math.abs(n);
	    P["d"] = Math.abs(d);
	  };

	  var modpow = function modpow(b, e, m) {

	    for (var r = 1; e > 0; b = b * b % m, e >>= 1) {

	      if (e & 1) {
	        r = r * b % m;
	      }
	    }
	    return r;
	  };

	  var cycleLen = function cycleLen(n, d) {

	    for (; d % 2 === 0; d /= 2) {}

	    for (; d % 5 === 0; d /= 5) {}

	    if (d === 1) // Catch non-cyclic numbers
	      return 0;

	    // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:
	    // 10^(d-1) % d == 1
	    // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone, 
	    // as we want to translate the numbers to strings.

	    var rem = 10 % d;

	    for (var t = 1; rem !== 1; t++) {
	      rem = rem * 10 % d;

	      if (t > MAX_CYCLE_LEN) return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`
	    }
	    return t;
	  };

	  var cycleStart = function cycleStart(n, d, len) {

	    var rem1 = 1;
	    var rem2 = modpow(10, len, d);

	    for (var t = 0; t < 300; t++) {
	      // s < ~log10(Number.MAX_VALUE)
	      // Solve 10^s == 10^(s+t) (mod d)

	      if (rem1 === rem2) return t;

	      rem1 = rem1 * 10 % d;
	      rem2 = rem2 * 10 % d;
	    }
	    return 0;
	  };

	  var _gcd = function _gcd(a, b) {

	    if (!a) return b;
	    if (!b) return a;

	    while (1) {
	      a %= b;
	      if (!a) return b;
	      b %= a;
	      if (!b) return a;
	    }
	  };

	  /**
	   * Module constructor
	   *
	   * @constructor
	   * @param {number|Fraction} a
	   * @param {number=} b
	   */
	  function Fraction(a, b) {

	    if (!(this instanceof Fraction)) {
	      return new Fraction(a, b);
	    }

	    parse(a, b);

	    if (Fraction['REDUCE']) {
	      a = _gcd(P["d"], P["n"]); // Abuse a
	    } else {
	      a = 1;
	    }

	    this["s"] = P["s"];
	    this["n"] = P["n"] / a;
	    this["d"] = P["d"] / a;
	  }

	  /**
	   * Boolean global variable to be able to disable automatic reduction of the fraction
	   *
	   */
	  Fraction['REDUCE'] = 1;

	  Fraction.prototype = {

	    "s": 1,
	    "n": 0,
	    "d": 1,

	    /**
	     * Calculates the absolute value
	     *
	     * Ex: new Fraction(-4).abs() => 4
	     **/
	    "abs": function abs() {

	      return new Fraction(this["n"], this["d"]);
	    },

	    /**
	     * Inverts the sign of the current fraction
	     *
	     * Ex: new Fraction(-4).neg() => 4
	     **/
	    "neg": function neg() {

	      return new Fraction(-this["s"] * this["n"], this["d"]);
	    },

	    /**
	     * Adds two rational numbers
	     *
	     * Ex: new Fraction({n: 2, d: 3}).add("14.9") => 467 / 30
	     **/
	    "add": function add(a, b) {

	      parse(a, b);
	      return new Fraction(this["s"] * this["n"] * P["d"] + P["s"] * this["d"] * P["n"], this["d"] * P["d"]);
	    },

	    /**
	     * Subtracts two rational numbers
	     *
	     * Ex: new Fraction({n: 2, d: 3}).add("14.9") => -427 / 30
	     **/
	    "sub": function sub(a, b) {

	      parse(a, b);
	      return new Fraction(this["s"] * this["n"] * P["d"] - P["s"] * this["d"] * P["n"], this["d"] * P["d"]);
	    },

	    /**
	     * Multiplies two rational numbers
	     *
	     * Ex: new Fraction("-17.(345)").mul(3) => 5776 / 111
	     **/
	    "mul": function mul(a, b) {

	      parse(a, b);
	      return new Fraction(this["s"] * P["s"] * this["n"] * P["n"], this["d"] * P["d"]);
	    },

	    /**
	     * Divides two rational numbers
	     *
	     * Ex: new Fraction("-17.(345)").inverse().div(3)
	     **/
	    "div": function div(a, b) {

	      parse(a, b);
	      return new Fraction(this["s"] * P["s"] * this["n"] * P["d"], this["d"] * P["n"]);
	    },

	    /**
	     * Clones the actual object
	     *
	     * Ex: new Fraction("-17.(345)").clone()
	     **/
	    "clone": function clone() {
	      return new Fraction(this);
	    },

	    /**
	     * Calculates the modulo of two rational numbers - a more precise fmod
	     *
	     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)
	     **/
	    "mod": function mod(a, b) {

	      if (isNaN(this['n']) || isNaN(this['d'])) {
	        return new Fraction(NaN);
	      }

	      if (a === undefined) {
	        return new Fraction(this["s"] * this["n"] % this["d"], 1);
	      }

	      parse(a, b);
	      if (0 === P["n"] && 0 === this["d"]) {
	        Fraction(0, 0); // Throw div/0
	      }

	      /*
	       * First silly attempt, kinda slow
	       *
	       return that["sub"]({
	       "n": num["n"] * Math.floor((this.n / this.d) / (num.n / num.d)),
	       "d": num["d"],
	       "s": this["s"]
	       });*/

	      /*
	       * New attempt: a1 / b1 = a2 / b2 * q + r
	       * => b2 * a1 = a2 * b1 * q + b1 * b2 * r
	       * => (b2 * a1 % a2 * b1) / (b1 * b2)
	       */
	      return new Fraction(this["s"] * P["d"] * this["n"] % (P["n"] * this["d"]), P["d"] * this["d"]);
	    },

	    /**
	     * Calculates the fractional gcd of two rational numbers
	     *
	     * Ex: new Fraction(5,8).gcd(3,7) => 1/56
	     */
	    "gcd": function gcd(a, b) {

	      parse(a, b);

	      // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)

	      return new Fraction(_gcd(P["n"], this["n"]), P["d"] * this["d"] / _gcd(P["d"], this["d"]));
	    },

	    /**
	     * Calculates the fractional lcm of two rational numbers
	     *
	     * Ex: new Fraction(5,8).lcm(3,7) => 15
	     */
	    "lcm": function lcm(a, b) {

	      parse(a, b);

	      // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)

	      if (P["n"] === 0 && this["n"] === 0) {
	        return new Fraction();
	      }
	      return new Fraction(P["n"] * this["n"] / _gcd(P["n"], this["n"]), _gcd(P["d"], this["d"]));
	    },

	    /**
	     * Calculates the ceil of a rational number
	     *
	     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)
	     **/
	    "ceil": function ceil(places) {

	      places = Math.pow(10, places || 0);

	      if (isNaN(this["n"]) || isNaN(this["d"])) {
	        return new Fraction(NaN);
	      }
	      return new Fraction(Math.ceil(places * this["s"] * this["n"] / this["d"]), places);
	    },

	    /**
	     * Calculates the floor of a rational number
	     *
	     * Ex: new Fraction('4.(3)').floor() => (4 / 1)
	     **/
	    "floor": function floor(places) {

	      places = Math.pow(10, places || 0);

	      if (isNaN(this["n"]) || isNaN(this["d"])) {
	        return new Fraction(NaN);
	      }
	      return new Fraction(Math.floor(places * this["s"] * this["n"] / this["d"]), places);
	    },

	    /**
	     * Rounds a rational numbers
	     *
	     * Ex: new Fraction('4.(3)').round() => (4 / 1)
	     **/
	    "round": function round(places) {

	      places = Math.pow(10, places || 0);

	      if (isNaN(this["n"]) || isNaN(this["d"])) {
	        return new Fraction(NaN);
	      }
	      return new Fraction(Math.round(places * this["s"] * this["n"] / this["d"]), places);
	    },

	    /**
	     * Gets the inverse of the fraction, means numerator and denumerator are exchanged
	     *
	     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3
	     **/
	    "inverse": function inverse() {

	      return new Fraction(this["s"] * this["d"], this["n"]);
	    },

	    /**
	     * Calculates the fraction to some integer exponent
	     *
	     * Ex: new Fraction(-1,2).pow(-3) => -8
	     */
	    "pow": function pow(m) {

	      if (m < 0) {
	        return new Fraction(Math.pow(this['s'] * this["d"], -m), Math.pow(this["n"], -m));
	      } else {
	        return new Fraction(Math.pow(this['s'] * this["n"], m), Math.pow(this["d"], m));
	      }
	    },

	    /**
	     * Check if two rational numbers are the same
	     *
	     * Ex: new Fraction(19.6).equals([98, 5]);
	     **/
	    "equals": function equals(a, b) {

	      parse(a, b);
	      return this["s"] * this["n"] * P["d"] === P["s"] * P["n"] * this["d"]; // Same as compare() === 0
	    },

	    /**
	     * Check if two rational numbers are the same
	     *
	     * Ex: new Fraction(19.6).equals([98, 5]);
	     **/
	    "compare": function compare(a, b) {

	      parse(a, b);
	      var t = this["s"] * this["n"] * P["d"] - P["s"] * P["n"] * this["d"];
	      return (0 < t) - (t < 0);
	    },

	    /**
	     * Check if two rational numbers are divisible
	     *
	     * Ex: new Fraction(19.6).divisible(1.5);
	     */
	    "divisible": function divisible(a, b) {

	      parse(a, b);
	      return !(!(P["n"] * this["d"]) || this["n"] * P["d"] % (P["n"] * this["d"]));
	    },

	    /**
	     * Returns a decimal representation of the fraction
	     *
	     * Ex: new Fraction("100.'91823'").valueOf() => 100.91823918239183
	     **/
	    'valueOf': function valueOf() {

	      return this["s"] * this["n"] / this["d"];
	    },

	    /**
	     * Returns a string-fraction representation of a Fraction object
	     *
	     * Ex: new Fraction("1.'3'").toFraction() => "4 1/3"
	     **/
	    'toFraction': function toFraction(excludeWhole) {

	      var whole,
	          str = "";
	      var n = this["n"];
	      var d = this["d"];
	      if (this["s"] < 0) {
	        str += '-';
	      }

	      if (d === 1) {
	        str += n;
	      } else {

	        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
	          str += whole;
	          str += " ";
	          n %= d;
	        }

	        str += n;
	        str += '/';
	        str += d;
	      }
	      return str;
	    },

	    /**
	     * Returns a latex representation of a Fraction object
	     *
	     * Ex: new Fraction("1.'3'").toLatex() => "\frac{4}{3}"
	     **/
	    'toLatex': function toLatex(excludeWhole) {

	      var whole,
	          str = "";
	      var n = this["n"];
	      var d = this["d"];
	      if (this["s"] < 0) {
	        str += '-';
	      }

	      if (d === 1) {
	        str += n;
	      } else {

	        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
	          str += whole;
	          n %= d;
	        }

	        str += "\\frac{";
	        str += n;
	        str += '}{';
	        str += d;
	        str += '}';
	      }
	      return str;
	    },

	    /**
	     * Returns an array of continued fraction elements
	     * 
	     * Ex: new Fraction("7/8").toContinued() => [0,1,7]
	     */
	    'toContinued': function toContinued() {

	      var t;
	      var a = this['n'];
	      var b = this['d'];
	      var res = [];

	      do {
	        res.push(Math.floor(a / b));
	        t = a % b;
	        a = b;
	        b = t;
	      } while (a !== 1);

	      return res;
	    },

	    /**
	     * Creates a string representation of a fraction with all digits
	     *
	     * Ex: new Fraction("100.'91823'").toString() => "100.(91823)"
	     **/
	    'toString': function toString() {

	      var g;
	      var N = this["n"];
	      var D = this["d"];

	      if (isNaN(N) || isNaN(D)) {
	        return "NaN";
	      }

	      if (!Fraction['REDUCE']) {
	        g = _gcd(N, D);
	        N /= g;
	        D /= g;
	      }

	      var p = String(N).split(""); // Numerator chars
	      var t = 0; // Tmp var

	      var ret = [~this["s"] ? "" : "-", "", ""]; // Return array, [0] is zero sign, [1] before comma, [2] after
	      var zeros = ""; // Collection variable for zeros

	      var cycLen = cycleLen(N, D); // Cycle length
	      var cycOff = cycleStart(N, D, cycLen); // Cycle start

	      var j = -1;
	      var n = 1; // str index

	      // rough estimate to fill zeros
	      var length = 15 + cycLen + cycOff + p.length; // 15 = decimal places when no repitation

	      for (var i = 0; i < length; i++, t *= 10) {

	        if (i < p.length) {
	          t += Number(p[i]);
	        } else {
	          n = 2;
	          j++; // Start now => after comma
	        }

	        if (cycLen > 0) {
	          // If we have a repeating part
	          if (j === cycOff) {
	            ret[n] += zeros + "(";
	            zeros = "";
	          } else if (j === cycLen + cycOff) {
	            ret[n] += zeros + ")";
	            break;
	          }
	        }

	        if (t >= D) {
	          ret[n] += zeros + (t / D | 0); // Flush zeros, Add current digit
	          zeros = "";
	          t = t % D;
	        } else if (n > 1) {
	          // Add zeros to the zero buffer
	          zeros += "0";
	        } else if (ret[n]) {
	          // If before comma, add zero only if already something was added
	          ret[n] += "0";
	        }
	      }

	      // If it's empty, it's a leading zero only
	      ret[0] += ret[1] || "0";

	      // If there is something after the comma, add the comma sign
	      if (ret[2]) {
	        return ret[0] + "." + ret[2];
	      }
	      return ret[0];
	    }
	  };

	  if ("function" === "function" && __webpack_require__(190)["amd"]) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
	      return Fraction;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (( false ? "undefined" : _typeof(exports)) === "object") {
	    module["exports"] = Fraction;
	  } else {
	    root['Fraction'] = Fraction;
	  }
		})(undefined);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(189)(module)))

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  /**
	   * Create a fraction convert a value to a fraction.
	   *
	   * Syntax:
	   *     math.fraction(numerator, denominator)
	   *     math.fraction({n: numerator, d: denominator})
	   *     math.fraction(matrix: Array | Matrix)         Turn all matrix entries
	   *                                                   into fractions
	   *
	   * Examples:
	   *
	   *     math.fraction(1, 3);
	   *     math.fraction('2/3');
	   *     math.fraction({n: 2, d: 3});
	   *     math.fraction([0.2, 0.25, 1.25]);
	   *
	   * See also:
	   *
	   *    bignumber, number, string, unit
	   *
	   * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]
	   *            Arguments specifying the numerator and denominator of
	   *            the fraction
	   * @return {Fraction | Array | Matrix} Returns a fraction
	   */
	  var fraction = typed('fraction', {
	    'number': function number(x) {
	      if (!isFinite(x) || isNaN(x)) {
	        throw new Error(x + ' cannot be represented as a fraction');
	      }

	      return new type.Fraction(x);
	    },

	    'string': function string(x) {
	      return new type.Fraction(x);
	    },

	    'number, number': function numberNumber(numerator, denominator) {
	      return new type.Fraction(numerator, denominator);
	    },

	    'BigNumber': function BigNumber(x) {
	      return new type.Fraction(x.toString());
	    },

	    'Fraction': function Fraction(x) {
	      return x; // fractions are immutable
	    },

	    'Object': function Object(x) {
	      return new type.Fraction(x);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, fraction);
	    }
	  });

	  return fraction;
	}

	exports.name = 'fraction';
	exports.factory = factory;

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = [
	// types
	__webpack_require__(198), __webpack_require__(206), __webpack_require__(207), __webpack_require__(210), __webpack_require__(219), __webpack_require__(225), __webpack_require__(226), __webpack_require__(227),

	// construction functions
	__webpack_require__(228), __webpack_require__(212), __webpack_require__(229)];

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__(199);

	var string = util.string;

	var isString = string.isString;

	function factory(type, config, load, typed) {
	  /**
	   * @constructor Matrix
	   *
	   * A Matrix is a wrapper around an Array. A matrix can hold a multi dimensional
	   * array. A matrix can be constructed as:
	   *     var matrix = math.matrix(data)
	   *
	   * Matrix contains the functions to resize, get and set values, get the size,
	   * clone the matrix and to convert the matrix to a vector, array, or scalar.
	   * Furthermore, one can iterate over the matrix using map and forEach.
	   * The internal Array of the Matrix can be accessed using the function valueOf.
	   *
	   * Example usage:
	   *     var matrix = math.matrix([[1, 2], [3, 4]]);
	   *     matix.size();              // [2, 2]
	   *     matrix.resize([3, 2], 5);
	   *     matrix.valueOf();          // [[1, 2], [3, 4], [5, 5]]
	   *     matrix.subset([1,2])       // 3 (indexes are zero-based)
	   *
	   */
	  function Matrix() {
	    if (!(this instanceof Matrix)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	  }

	  /**
	   * Attach type information
	   */
	  Matrix.prototype.type = 'Matrix';
	  Matrix.prototype.isMatrix = true;

	  /**
	   * Get the Matrix storage constructor for the given format.
	   *
	   * @param {string} format       The Matrix storage format.
	   *
	   * @return {Function}           The Matrix storage constructor.
	   */
	  Matrix.storage = function (format) {
	    // check storage format is a string
	    if (!isString(format)) {
	      throw new TypeError('format must be a string value');
	    }

	    // get storage format constructor
	    var constructor = Matrix._storage[format];
	    if (!constructor) {
	      throw new SyntaxError('Unsupported matrix storage format: ' + format);
	    }

	    // return storage constructor
	    return constructor;
	  };

	  // a map with all constructors for all storage types
	  Matrix._storage = {};

	  /**
	   * Get the storage format used by the matrix.
	   *
	   * Usage:
	   *     var format = matrix.storage()                   // retrieve storage format
	   *
	   * @return {string}           The storage format.
	   */
	  Matrix.prototype.storage = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke storage on a Matrix interface');
	  };

	  /**
	   * Get the datatype of the data stored in the matrix.
	   *
	   * Usage:
	   *     var format = matrix.datatype()                   // retrieve matrix datatype
	   *
	   * @return {string}           The datatype.
	   */
	  Matrix.prototype.datatype = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke datatype on a Matrix interface');
	  };

	  /**
	   * Create a new Matrix With the type of the current matrix instance
	   * @param {Array | Object} data
	   * @param {string} [datatype]
	   */
	  Matrix.prototype.create = function (data, datatype) {
	    throw new Error('Cannot invoke create on a Matrix interface');
	  };

	  /**
	   * Get a subset of the matrix, or replace a subset of the matrix.
	   *
	   * Usage:
	   *     var subset = matrix.subset(index)               // retrieve subset
	   *     var value = matrix.subset(index, replacement)   // replace subset
	   *
	   * @param {Index} index
	   * @param {Array | Matrix | *} [replacement]
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be filled with zeros.
	   */
	  Matrix.prototype.subset = function (index, replacement, defaultValue) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke subset on a Matrix interface');
	  };

	  /**
	   * Get a single element from the matrix.
	   * @param {number[]} index   Zero-based index
	   * @return {*} value
	   */
	  Matrix.prototype.get = function (index) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke get on a Matrix interface');
	  };

	  /**
	   * Replace a single element in the matrix.
	   * @param {number[]} index   Zero-based index
	   * @param {*} value
	   * @param {*} [defaultValue]        Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be left undefined.
	   * @return {Matrix} self
	   */
	  Matrix.prototype.set = function (index, value, defaultValue) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke set on a Matrix interface');
	  };

	  /**
	   * Resize the matrix to the given size. Returns a copy of the matrix when 
	   * `copy=true`, otherwise return the matrix itself (resize in place).
	   *
	   * @param {number[]} size           The new size the matrix should have.
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
	   *                                  If not provided, the matrix elements will
	   *                                  be filled with zeros.
	   * @param {boolean} [copy]          Return a resized copy of the matrix
	   *
	   * @return {Matrix}                 The resized matrix
	   */
	  Matrix.prototype.resize = function (size, defaultValue) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke resize on a Matrix interface');
	  };

	  /**
	   * Create a clone of the matrix
	   * @return {Matrix} clone
	   */
	  Matrix.prototype.clone = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke clone on a Matrix interface');
	  };

	  /**
	   * Retrieve the size of the matrix.
	   * @returns {number[]} size
	   */
	  Matrix.prototype.size = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke size on a Matrix interface');
	  };

	  /**
	   * Create a new matrix with the results of the callback function executed on
	   * each entry of the matrix.
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
	   *
	   * @return {Matrix} matrix
	   */
	  Matrix.prototype.map = function (callback, skipZeros) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke map on a Matrix interface');
	  };

	  /**
	   * Execute a callback function on each entry of the matrix.
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   */
	  Matrix.prototype.forEach = function (callback) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke forEach on a Matrix interface');
	  };

	  /**
	   * Create an Array with a copy of the data of the Matrix
	   * @returns {Array} array
	   */
	  Matrix.prototype.toArray = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke toArray on a Matrix interface');
	  };

	  /**
	   * Get the primitive value of the Matrix: a multidimensional array
	   * @returns {Array} array
	   */
	  Matrix.prototype.valueOf = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke valueOf on a Matrix interface');
	  };

	  /**
	   * Get a string representation of the matrix, with optional formatting options.
	   * @param {Object | number | Function} [options]  Formatting options. See
	   *                                                lib/utils/number:format for a
	   *                                                description of the available
	   *                                                options.
	   * @returns {string} str
	   */
	  Matrix.prototype.format = function (options) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke format on a Matrix interface');
	  };

	  /**
	   * Get a string representation of the matrix
	   * @returns {string} str
	   */
	  Matrix.prototype.toString = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke toString on a Matrix interface');
	  };

	  // exports
	  return Matrix;
	}

	exports.name = 'Matrix';
	exports.path = 'type';
	exports.factory = factory;

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.array = __webpack_require__(200);
	exports['boolean'] = __webpack_require__(204);
	exports['function'] = __webpack_require__(205);
	exports.number = __webpack_require__(166);
	exports.object = __webpack_require__(163);
	exports.string = __webpack_require__(183);
	exports.types = __webpack_require__(201);
	exports.emitter = __webpack_require__(168);

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var number = __webpack_require__(166);
	var string = __webpack_require__(183);
	var object = __webpack_require__(163);
	var types = __webpack_require__(201);

	var DimensionError = __webpack_require__(202);
	var IndexError = __webpack_require__(203);

	/**
	 * Calculate the size of a multi dimensional array.
	 * This function checks the size of the first entry, it does not validate
	 * whether all dimensions match. (use function `validate` for that)
	 * @param {Array} x
	 * @Return {Number[]} size
	 */
	exports.size = function (x) {
	  var s = [];

	  while (Array.isArray(x)) {
	    s.push(x.length);
	    x = x[0];
	  }

	  return s;
	};

	/**
	 * Recursively validate whether each element in a multi dimensional array
	 * has a size corresponding to the provided size array.
	 * @param {Array} array    Array to be validated
	 * @param {number[]} size  Array with the size of each dimension
	 * @param {number} dim   Current dimension
	 * @throws DimensionError
	 * @private
	 */
	function _validate(array, size, dim) {
	  var i;
	  var len = array.length;

	  if (len != size[dim]) {
	    throw new DimensionError(len, size[dim]);
	  }

	  if (dim < size.length - 1) {
	    // recursively validate each child array
	    var dimNext = dim + 1;
	    for (i = 0; i < len; i++) {
	      var child = array[i];
	      if (!Array.isArray(child)) {
	        throw new DimensionError(size.length - 1, size.length, '<');
	      }
	      _validate(array[i], size, dimNext);
	    }
	  } else {
	    // last dimension. none of the childs may be an array
	    for (i = 0; i < len; i++) {
	      if (Array.isArray(array[i])) {
	        throw new DimensionError(size.length + 1, size.length, '>');
	      }
	    }
	  }
	}

	/**
	 * Validate whether each element in a multi dimensional array has
	 * a size corresponding to the provided size array.
	 * @param {Array} array    Array to be validated
	 * @param {number[]} size  Array with the size of each dimension
	 * @throws DimensionError
	 */
	exports.validate = function (array, size) {
	  var isScalar = size.length == 0;
	  if (isScalar) {
	    // scalar
	    if (Array.isArray(array)) {
	      throw new DimensionError(array.length, 0);
	    }
	  } else {
	    // array
	    _validate(array, size, 0);
	  }
	};

	/**
	 * Test whether index is an integer number with index >= 0 and index < length
	 * when length is provided
	 * @param {number} index    Zero-based index
	 * @param {number} [length] Length of the array
	 */
	exports.validateIndex = function (index, length) {
	  if (!number.isNumber(index) || !number.isInteger(index)) {
	    throw new TypeError('Index must be an integer (value: ' + index + ')');
	  }
	  if (index < 0 || typeof length === 'number' && index >= length) {
	    throw new IndexError(index, length);
	  }
	};

	// a constant used to specify an undefined defaultValue
	exports.UNINITIALIZED = {};

	/**
	 * Resize a multi dimensional array. The resized array is returned.
	 * @param {Array} array         Array to be resized
	 * @param {Array.<number>} size Array with the size of each dimension
	 * @param {*} [defaultValue=0]  Value to be filled in in new entries,
	 *                              zero by default. To leave new entries undefined,
	 *                              specify array.UNINITIALIZED as defaultValue
	 * @return {Array} array         The resized array
	 */
	exports.resize = function (array, size, defaultValue) {
	  // TODO: add support for scalars, having size=[] ?

	  // check the type of the arguments
	  if (!Array.isArray(array) || !Array.isArray(size)) {
	    throw new TypeError('Array expected');
	  }
	  if (size.length === 0) {
	    throw new Error('Resizing to scalar is not supported');
	  }

	  // check whether size contains positive integers
	  size.forEach(function (value) {
	    if (!number.isNumber(value) || !number.isInteger(value) || value < 0) {
	      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + string.format(size) + ')');
	    }
	  });

	  // recursively resize the array
	  var _defaultValue = defaultValue !== undefined ? defaultValue : 0;
	  _resize(array, size, 0, _defaultValue);

	  return array;
	};

	/**
	 * Recursively resize a multi dimensional array
	 * @param {Array} array         Array to be resized
	 * @param {number[]} size       Array with the size of each dimension
	 * @param {number} dim          Current dimension
	 * @param {*} [defaultValue]    Value to be filled in in new entries,
	 *                              undefined by default.
	 * @private
	 */
	function _resize(array, size, dim, defaultValue) {
	  var i;
	  var elem;
	  var oldLen = array.length;
	  var newLen = size[dim];
	  var minLen = Math.min(oldLen, newLen);

	  // apply new length
	  array.length = newLen;

	  if (dim < size.length - 1) {
	    // non-last dimension
	    var dimNext = dim + 1;

	    // resize existing child arrays
	    for (i = 0; i < minLen; i++) {
	      // resize child array
	      elem = array[i];
	      if (!Array.isArray(elem)) {
	        elem = [elem]; // add a dimension
	        array[i] = elem;
	      }
	      _resize(elem, size, dimNext, defaultValue);
	    }

	    // create new child arrays
	    for (i = minLen; i < newLen; i++) {
	      // get child array
	      elem = [];
	      array[i] = elem;

	      // resize new child array
	      _resize(elem, size, dimNext, defaultValue);
	    }
	  } else {
	    // last dimension

	    // remove dimensions of existing values
	    for (i = 0; i < minLen; i++) {
	      while (Array.isArray(array[i])) {
	        array[i] = array[i][0];
	      }
	    }

	    if (defaultValue !== exports.UNINITIALIZED) {
	      // fill new elements with the default value
	      for (i = minLen; i < newLen; i++) {
	        array[i] = defaultValue;
	      }
	    }
	  }
	}

	/**
	 * Squeeze a multi dimensional array
	 * @param {Array} array
	 * @param {Array} [size]
	 * @returns {Array} returns the array itself
	 */
	exports.squeeze = function (array, size) {
	  var s = size || exports.size(array);

	  // squeeze outer dimensions
	  while (Array.isArray(array) && array.length === 1) {
	    array = array[0];
	    s.shift();
	  }

	  // find the first dimension to be squeezed
	  var dims = s.length;
	  while (s[dims - 1] === 1) {
	    dims--;
	  }

	  // squeeze inner dimensions
	  if (dims < s.length) {
	    array = _squeeze(array, dims, 0);
	    s.length = dims;
	  }

	  return array;
	};

	/**
	 * Recursively squeeze a multi dimensional array
	 * @param {Array} array
	 * @param {number} dims Required number of dimensions
	 * @param {number} dim  Current dimension
	 * @returns {Array | *} Returns the squeezed array
	 * @private
	 */
	function _squeeze(array, dims, dim) {
	  var i, ii;

	  if (dim < dims) {
	    var next = dim + 1;
	    for (i = 0, ii = array.length; i < ii; i++) {
	      array[i] = _squeeze(array[i], dims, next);
	    }
	  } else {
	    while (Array.isArray(array)) {
	      array = array[0];
	    }
	  }

	  return array;
	}

	/**
	 * Unsqueeze a multi dimensional array: add dimensions when missing
	 * 
	 * Paramter `size` will be mutated to match the new, unqueezed matrix size.
	 * 
	 * @param {Array} array
	 * @param {number} dims     Desired number of dimensions of the array
	 * @param {number} [outer]  Number of outer dimensions to be added
	 * @param {Array} [size]    Current size of array.
	 * @returns {Array} returns the array itself
	 * @private
	 */
	exports.unsqueeze = function (array, dims, outer, size) {
	  var s = size || exports.size(array);

	  // unsqueeze outer dimensions
	  if (outer) {
	    for (var i = 0; i < outer; i++) {
	      array = [array];
	      s.unshift(1);
	    }
	  }

	  // unsqueeze inner dimensions
	  array = _unsqueeze(array, dims, 0);
	  while (s.length < dims) {
	    s.push(1);
	  }

	  return array;
	};

	/**
	 * Recursively unsqueeze a multi dimensional array
	 * @param {Array} array
	 * @param {number} dims Required number of dimensions
	 * @param {number} dim  Current dimension
	 * @returns {Array | *} Returns the squeezed array
	 * @private
	 */
	function _unsqueeze(array, dims, dim) {
	  var i, ii;

	  if (Array.isArray(array)) {
	    var next = dim + 1;
	    for (i = 0, ii = array.length; i < ii; i++) {
	      array[i] = _unsqueeze(array[i], dims, next);
	    }
	  } else {
	    for (var d = dim; d < dims; d++) {
	      array = [array];
	    }
	  }

	  return array;
	}
	/**
	 * Flatten a multi dimensional array, put all elements in a one dimensional
	 * array
	 * @param {Array} array   A multi dimensional array
	 * @return {Array}        The flattened array (1 dimensional)
	 */
	exports.flatten = function (array) {
	  if (!Array.isArray(array)) {
	    //if not an array, return as is
	    return array;
	  }
	  var flat = [];

	  array.forEach(function callback(value) {
	    if (Array.isArray(value)) {
	      value.forEach(callback); //traverse through sub-arrays recursively
	    } else {
	      flat.push(value);
	    }
	  });

	  return flat;
	};

	/**
	 * Test whether an object is an array
	 * @param {*} value
	 * @return {boolean} isArray
	 */
		exports.isArray = Array.isArray;

/***/ },
/* 201 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Determine the type of a variable
	 *
	 *     type(x)
	 *
	 * The following types are recognized:
	 *
	 *     'undefined'
	 *     'null'
	 *     'boolean'
	 *     'number'
	 *     'string'
	 *     'Array'
	 *     'Function'
	 *     'Date'
	 *     'RegExp'
	 *     'Object'
	 *
	 * @param {*} x
	 * @return {string} Returns the name of the type. Primitive types are lower case,
	 *                  non-primitive types are upper-camel-case.
	 *                  For example 'number', 'string', 'Array', 'Date'.
	 */

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	exports.type = function (x) {
	  var type = typeof x === 'undefined' ? 'undefined' : _typeof(x);

	  if (type === 'object') {
	    if (x === null) return 'null';
	    if (x instanceof Boolean) return 'boolean';
	    if (x instanceof Number) return 'number';
	    if (x instanceof String) return 'string';
	    if (Array.isArray(x)) return 'Array';
	    if (x instanceof Date) return 'Date';
	    if (x instanceof RegExp) return 'RegExp';

	    return 'Object';
	  }

	  if (type === 'function') return 'Function';

	  return type;
	};

	/**
	 * Test whether a value is a scalar
	 * @param x
	 * @return {boolean} Returns true when x is a scalar, returns false when
	 *                   x is a Matrix or Array.
	 */
	exports.isScalar = function (x) {
	  return !(x && x.isMatrix || Array.isArray(x));
	};

/***/ },
/* 202 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Create a range error with the message:
	 *     'Dimension mismatch (<actual size> != <expected size>)'
	 * @param {number | number[]} actual        The actual size
	 * @param {number | number[]} expected      The expected size
	 * @param {string} [relation='!=']          Optional relation between actual
	 *                                          and expected size: '!=', '<', etc.
	 * @extends RangeError
	 */

	function DimensionError(actual, expected, relation) {
	  if (!(this instanceof DimensionError)) {
	    throw new SyntaxError('Constructor must be called with the new operator');
	  }

	  this.actual = actual;
	  this.expected = expected;
	  this.relation = relation;

	  this.message = 'Dimension mismatch (' + (Array.isArray(actual) ? '[' + actual.join(', ') + ']' : actual) + ' ' + (this.relation || '!=') + ' ' + (Array.isArray(expected) ? '[' + expected.join(', ') + ']' : expected) + ')';

	  this.stack = new Error().stack;
	}

	DimensionError.prototype = new RangeError();
	DimensionError.prototype.constructor = RangeError;
	DimensionError.prototype.name = 'DimensionError';
	DimensionError.prototype.isDimensionError = true;

	module.exports = DimensionError;

/***/ },
/* 203 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Create a range error with the message:
	 *     'Index out of range (index < min)'
	 *     'Index out of range (index < max)'
	 *
	 * @param {number} index     The actual index
	 * @param {number} [min=0]   Minimum index (included)
	 * @param {number} [max]     Maximum index (excluded)
	 * @extends RangeError
	 */

	function IndexError(index, min, max) {
	  if (!(this instanceof IndexError)) {
	    throw new SyntaxError('Constructor must be called with the new operator');
	  }

	  this.index = index;
	  if (arguments.length < 3) {
	    this.min = 0;
	    this.max = min;
	  } else {
	    this.min = min;
	    this.max = max;
	  }

	  if (this.min !== undefined && this.index < this.min) {
	    this.message = 'Index out of range (' + this.index + ' < ' + this.min + ')';
	  } else if (this.max !== undefined && this.index >= this.max) {
	    this.message = 'Index out of range (' + this.index + ' > ' + (this.max - 1) + ')';
	  } else {
	    this.message = 'Index out of range (' + this.index + ')';
	  }

	  this.stack = new Error().stack;
	}

	IndexError.prototype = new RangeError();
	IndexError.prototype.constructor = RangeError;
	IndexError.prototype.name = 'IndexError';
	IndexError.prototype.isIndexError = true;

	module.exports = IndexError;

/***/ },
/* 204 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Test whether value is a boolean
	 * @param {*} value
	 * @return {boolean} isBoolean
	 */

	exports.isBoolean = function (value) {
	  return typeof value == 'boolean';
	};

/***/ },
/* 205 */
/***/ function(module, exports) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	// function utils

	/*
	 * Memoize a given function by caching the computed result.
	 * The cache of a memoized function can be cleared by deleting the `cache`
	 * property of the function.
	 *
	 * @param {function} fn                     The function to be memoized.
	 *                                          Must be a pure function.
	 * @param {function(args: Array)} [hasher]  A custom hash builder.
	 *                                          Is JSON.stringify by default.
	 * @return {function}                       Returns the memoized function
	 */
	exports.memoize = function (fn, hasher) {
	  return function memoize() {
	    if (_typeof(memoize.cache) !== 'object') {
	      memoize.cache = {};
	    }

	    var args = [];
	    for (var i = 0; i < arguments.length; i++) {
	      args[i] = arguments[i];
	    }

	    var hash = hasher ? hasher(args) : JSON.stringify(args);
	    if (!(hash in memoize.cache)) {
	      return memoize.cache[hash] = fn.apply(fn, args);
	    }
	    return memoize.cache[hash];
	  };
	};

	/**
	 * Find the maximum number of arguments expected by a typed function.
	 * @param {function} fn   A typed function
	 * @return {number} Returns the maximum number of expected arguments.
	 *                  Returns -1 when no signatures where found on the function.
	 */
	exports.maxArgumentCount = function (fn) {
	  return Object.keys(fn.signatures || {}).reduce(function (args, signature) {
	    var count = (signature.match(/,/g) || []).length + 1;
	    return Math.max(args, count);
	  }, -1);
	};

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__(199);
	var DimensionError = __webpack_require__(202);

	var string = util.string;
	var array = util.array;
	var object = util.object;
	var number = util.number;

	var isArray = Array.isArray;
	var isNumber = number.isNumber;
	var isInteger = number.isInteger;
	var isString = string.isString;

	var validateIndex = array.validateIndex;

	function factory(type, config, load, typed) {
	  var Matrix = load(__webpack_require__(198)); // force loading Matrix (do not use via type.Matrix)

	  /**
	   * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.
	   * @class DenseMatrix
	   */
	  function DenseMatrix(data, datatype) {
	    if (!(this instanceof DenseMatrix)) throw new SyntaxError('Constructor must be called with the new operator');
	    if (datatype && !isString(datatype)) throw new Error('Invalid datatype: ' + datatype);

	    if (data && data.isMatrix === true) {
	      // check data is a DenseMatrix
	      if (data.type === 'DenseMatrix') {
	        // clone data & size
	        this._data = object.clone(data._data);
	        this._size = object.clone(data._size);
	        this._datatype = datatype || data._datatype;
	      } else {
	        // build data from existing matrix
	        this._data = data.toArray();
	        this._size = data.size();
	        this._datatype = datatype || data._datatype;
	      }
	    } else if (data && isArray(data.data) && isArray(data.size)) {
	      // initialize fields from JSON representation
	      this._data = data.data;
	      this._size = data.size;
	      this._datatype = datatype || data.datatype;
	    } else if (isArray(data)) {
	      // replace nested Matrices with Arrays
	      this._data = preprocess(data);
	      // get the dimensions of the array
	      this._size = array.size(this._data);
	      // verify the dimensions of the array, TODO: compute size while processing array
	      array.validate(this._data, this._size);
	      // data type unknown
	      this._datatype = datatype;
	    } else if (data) {
	      // unsupported type
	      throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');
	    } else {
	      // nothing provided
	      this._data = [];
	      this._size = [0];
	      this._datatype = datatype;
	    }
	  }

	  DenseMatrix.prototype = new Matrix();

	  /**
	   * Attach type information
	   */
	  DenseMatrix.prototype.type = 'DenseMatrix';
	  DenseMatrix.prototype.isDenseMatrix = true;

	  /**
	   * Get the storage format used by the matrix.
	   *
	   * Usage:
	   *     var format = matrix.storage()                   // retrieve storage format
	   *
	   * @memberof DenseMatrix
	   * @return {string}           The storage format.
	   */
	  DenseMatrix.prototype.storage = function () {
	    return 'dense';
	  };

	  /**
	   * Get the datatype of the data stored in the matrix.
	   *
	   * Usage:
	   *     var format = matrix.datatype()                   // retrieve matrix datatype
	   *
	   * @memberof DenseMatrix
	   * @return {string}           The datatype.
	   */
	  DenseMatrix.prototype.datatype = function () {
	    return this._datatype;
	  };

	  /**
	   * Create a new DenseMatrix
	   * @memberof DenseMatrix
	   * @param {Array} data
	   * @param {string} [datatype]
	   */
	  DenseMatrix.prototype.create = function (data, datatype) {
	    return new DenseMatrix(data, datatype);
	  };

	  /**
	   * Get a subset of the matrix, or replace a subset of the matrix.
	   *
	   * Usage:
	   *     var subset = matrix.subset(index)               // retrieve subset
	   *     var value = matrix.subset(index, replacement)   // replace subset
	   *
	   * @memberof DenseMatrix
	   * @param {Index} index
	   * @param {Array | DenseMatrix | *} [replacement]
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be filled with zeros.
	   */
	  DenseMatrix.prototype.subset = function (index, replacement, defaultValue) {
	    switch (arguments.length) {
	      case 1:
	        return _get(this, index);

	      // intentional fall through
	      case 2:
	      case 3:
	        return _set(this, index, replacement, defaultValue);

	      default:
	        throw new SyntaxError('Wrong number of arguments');
	    }
	  };

	  /**
	   * Get a single element from the matrix.
	   * @memberof DenseMatrix
	   * @param {number[]} index   Zero-based index
	   * @return {*} value
	   */
	  DenseMatrix.prototype.get = function (index) {
	    if (!isArray(index)) throw new TypeError('Array expected');
	    if (index.length != this._size.length) throw new DimensionError(index.length, this._size.length);

	    // check index
	    for (var x = 0; x < index.length; x++) {
	      validateIndex(index[x], this._size[x]);
	    }var data = this._data;
	    for (var i = 0, ii = index.length; i < ii; i++) {
	      var index_i = index[i];
	      validateIndex(index_i, data.length);
	      data = data[index_i];
	    }

	    return data;
	  };

	  /**
	   * Replace a single element in the matrix.
	   * @memberof DenseMatrix
	   * @param {number[]} index   Zero-based index
	   * @param {*} value
	   * @param {*} [defaultValue]        Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be left undefined.
	   * @return {DenseMatrix} self
	   */
	  DenseMatrix.prototype.set = function (index, value, defaultValue) {
	    if (!isArray(index)) throw new TypeError('Array expected');
	    if (index.length < this._size.length) throw new DimensionError(index.length, this._size.length, '<');

	    var i, ii, index_i;

	    // enlarge matrix when needed
	    var size = index.map(function (i) {
	      return i + 1;
	    });
	    _fit(this, size, defaultValue);

	    // traverse over the dimensions
	    var data = this._data;
	    for (i = 0, ii = index.length - 1; i < ii; i++) {
	      index_i = index[i];
	      validateIndex(index_i, data.length);
	      data = data[index_i];
	    }

	    // set new value
	    index_i = index[index.length - 1];
	    validateIndex(index_i, data.length);
	    data[index_i] = value;

	    return this;
	  };

	  /**
	   * Get a submatrix of this matrix
	   * @memberof DenseMatrix
	   * @param {DenseMatrix} matrix
	   * @param {Index} index   Zero-based index
	   * @private
	   */
	  function _get(matrix, index) {
	    if (!index || index.isIndex !== true) {
	      throw new TypeError('Invalid index');
	    }

	    var isScalar = index.isScalar();
	    if (isScalar) {
	      // return a scalar
	      return matrix.get(index.min());
	    } else {
	      // validate dimensions
	      var size = index.size();
	      if (size.length != matrix._size.length) {
	        throw new DimensionError(size.length, matrix._size.length);
	      }

	      // validate if any of the ranges in the index is out of range
	      var min = index.min();
	      var max = index.max();
	      for (var i = 0, ii = matrix._size.length; i < ii; i++) {
	        validateIndex(min[i], matrix._size[i]);
	        validateIndex(max[i], matrix._size[i]);
	      }

	      // retrieve submatrix
	      // TODO: more efficient when creating an empty matrix and setting _data and _size manually
	      return new DenseMatrix(_getSubmatrix(matrix._data, index, size.length, 0), matrix._datatype);
	    }
	  }

	  /**
	   * Recursively get a submatrix of a multi dimensional matrix.
	   * Index is not checked for correct number or length of dimensions.
	   * @memberof DenseMatrix
	   * @param {Array} data
	   * @param {Index} index
	   * @param {number} dims   Total number of dimensions
	   * @param {number} dim    Current dimension
	   * @return {Array} submatrix
	   * @private
	   */
	  function _getSubmatrix(data, index, dims, dim) {
	    var last = dim == dims - 1;
	    var range = index.dimension(dim);

	    if (last) {
	      return range.map(function (i) {
	        return data[i];
	      }).valueOf();
	    } else {
	      return range.map(function (i) {
	        var child = data[i];
	        return _getSubmatrix(child, index, dims, dim + 1);
	      }).valueOf();
	    }
	  }

	  /**
	   * Replace a submatrix in this matrix
	   * Indexes are zero-based.
	   * @memberof DenseMatrix
	   * @param {DenseMatrix} matrix
	   * @param {Index} index
	   * @param {DenseMatrix | Array | *} submatrix
	   * @param {*} defaultValue          Default value, filled in on new entries when
	   *                                  the matrix is resized.
	   * @return {DenseMatrix} matrix
	   * @private
	   */
	  function _set(matrix, index, submatrix, defaultValue) {
	    if (!index || index.isIndex !== true) {
	      throw new TypeError('Invalid index');
	    }

	    // get index size and check whether the index contains a single value
	    var iSize = index.size(),
	        isScalar = index.isScalar();

	    // calculate the size of the submatrix, and convert it into an Array if needed
	    var sSize;
	    if (submatrix && submatrix.isMatrix === true) {
	      sSize = submatrix.size();
	      submatrix = submatrix.valueOf();
	    } else {
	      sSize = array.size(submatrix);
	    }

	    if (isScalar) {
	      // set a scalar

	      // check whether submatrix is a scalar
	      if (sSize.length !== 0) {
	        throw new TypeError('Scalar expected');
	      }

	      matrix.set(index.min(), submatrix, defaultValue);
	    } else {
	      // set a submatrix

	      // validate dimensions
	      if (iSize.length < matrix._size.length) {
	        throw new DimensionError(iSize.length, matrix._size.length, '<');
	      }

	      if (sSize.length < iSize.length) {
	        // calculate number of missing outer dimensions
	        var i = 0;
	        var outer = 0;
	        while (iSize[i] === 1 && sSize[i] === 1) {
	          i++;
	        }
	        while (iSize[i] === 1) {
	          outer++;
	          i++;
	        }

	        // unsqueeze both outer and inner dimensions
	        submatrix = array.unsqueeze(submatrix, iSize.length, outer, sSize);
	      }

	      // check whether the size of the submatrix matches the index size
	      if (!object.deepEqual(iSize, sSize)) {
	        throw new DimensionError(iSize, sSize, '>');
	      }

	      // enlarge matrix when needed
	      var size = index.max().map(function (i) {
	        return i + 1;
	      });
	      _fit(matrix, size, defaultValue);

	      // insert the sub matrix
	      var dims = iSize.length,
	          dim = 0;
	      _setSubmatrix(matrix._data, index, submatrix, dims, dim);
	    }

	    return matrix;
	  }

	  /**
	   * Replace a submatrix of a multi dimensional matrix.
	   * @memberof DenseMatrix
	   * @param {Array} data
	   * @param {Index} index
	   * @param {Array} submatrix
	   * @param {number} dims   Total number of dimensions
	   * @param {number} dim
	   * @private
	   */
	  function _setSubmatrix(data, index, submatrix, dims, dim) {
	    var last = dim == dims - 1,
	        range = index.dimension(dim);

	    if (last) {
	      range.forEach(function (dataIndex, subIndex) {
	        validateIndex(dataIndex);
	        data[dataIndex] = submatrix[subIndex[0]];
	      });
	    } else {
	      range.forEach(function (dataIndex, subIndex) {
	        validateIndex(dataIndex);
	        _setSubmatrix(data[dataIndex], index, submatrix[subIndex[0]], dims, dim + 1);
	      });
	    }
	  }

	  /**
	   * Resize the matrix to the given size. Returns a copy of the matrix when
	   * `copy=true`, otherwise return the matrix itself (resize in place).
	   *
	   * @memberof DenseMatrix
	   * @param {number[]} size           The new size the matrix should have.
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
	   *                                  If not provided, the matrix elements will
	   *                                  be filled with zeros.
	   * @param {boolean} [copy]          Return a resized copy of the matrix
	   *
	   * @return {Matrix}                 The resized matrix
	   */
	  DenseMatrix.prototype.resize = function (size, defaultValue, copy) {
	    // validate arguments
	    if (!isArray(size)) throw new TypeError('Array expected');

	    // matrix to resize
	    var m = copy ? this.clone() : this;
	    // resize matrix
	    return _resize(m, size, defaultValue);
	  };

	  var _resize = function _resize(matrix, size, defaultValue) {
	    // check size
	    if (size.length === 0) {
	      // first value in matrix
	      var v = matrix._data;
	      // go deep
	      while (isArray(v)) {
	        v = v[0];
	      }
	      return v;
	    }
	    // resize matrix
	    matrix._size = size.slice(0); // copy the array
	    matrix._data = array.resize(matrix._data, matrix._size, defaultValue);
	    // return matrix
	    return matrix;
	  };

	  /**
	   * Enlarge the matrix when it is smaller than given size.
	   * If the matrix is larger or equal sized, nothing is done.
	   * @memberof DenseMatrix
	   * @param {DenseMatrix} matrix           The matrix to be resized
	   * @param {number[]} size
	   * @param {*} defaultValue          Default value, filled in on new entries.
	   * @private
	   */
	  function _fit(matrix, size, defaultValue) {
	    var newSize = matrix._size.slice(0),
	        // copy the array
	    changed = false;

	    // add dimensions when needed
	    while (newSize.length < size.length) {
	      newSize.push(0);
	      changed = true;
	    }

	    // enlarge size when needed
	    for (var i = 0, ii = size.length; i < ii; i++) {
	      if (size[i] > newSize[i]) {
	        newSize[i] = size[i];
	        changed = true;
	      }
	    }

	    if (changed) {
	      // resize only when size is changed
	      _resize(matrix, newSize, defaultValue);
	    }
	  }

	  /**
	   * Create a clone of the matrix
	   * @memberof DenseMatrix
	   * @return {DenseMatrix} clone
	   */
	  DenseMatrix.prototype.clone = function () {
	    var m = new DenseMatrix({
	      data: object.clone(this._data),
	      size: object.clone(this._size),
	      datatype: this._datatype
	    });
	    return m;
	  };

	  /**
	   * Retrieve the size of the matrix.
	   * @memberof DenseMatrix
	   * @returns {number[]} size
	   */
	  DenseMatrix.prototype.size = function () {
	    return this._size.slice(0); // return a clone of _size
	  };

	  /**
	   * Create a new matrix with the results of the callback function executed on
	   * each entry of the matrix.
	   * @memberof DenseMatrix
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   *
	   * @return {DenseMatrix} matrix
	   */
	  DenseMatrix.prototype.map = function (callback) {
	    // matrix instance
	    var me = this;
	    var recurse = function recurse(value, index) {
	      if (isArray(value)) {
	        return value.map(function (child, i) {
	          return recurse(child, index.concat(i));
	        });
	      } else {
	        return callback(value, index, me);
	      }
	    };
	    // return dense format
	    return new DenseMatrix({
	      data: recurse(this._data, []),
	      size: object.clone(this._size),
	      datatype: this._datatype
	    });
	  };

	  /**
	   * Execute a callback function on each entry of the matrix.
	   * @memberof DenseMatrix
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   */
	  DenseMatrix.prototype.forEach = function (callback) {
	    // matrix instance
	    var me = this;
	    var recurse = function recurse(value, index) {
	      if (isArray(value)) {
	        value.forEach(function (child, i) {
	          recurse(child, index.concat(i));
	        });
	      } else {
	        callback(value, index, me);
	      }
	    };
	    recurse(this._data, []);
	  };

	  /**
	   * Create an Array with a copy of the data of the DenseMatrix
	   * @memberof DenseMatrix
	   * @returns {Array} array
	   */
	  DenseMatrix.prototype.toArray = function () {
	    return object.clone(this._data);
	  };

	  /**
	   * Get the primitive value of the DenseMatrix: a multidimensional array
	   * @memberof DenseMatrix
	   * @returns {Array} array
	   */
	  DenseMatrix.prototype.valueOf = function () {
	    return this._data;
	  };

	  /**
	   * Get a string representation of the matrix, with optional formatting options.
	   * @memberof DenseMatrix
	   * @param {Object | number | Function} [options]  Formatting options. See
	   *                                                lib/utils/number:format for a
	   *                                                description of the available
	   *                                                options.
	   * @returns {string} str
	   */
	  DenseMatrix.prototype.format = function (options) {
	    return string.format(this._data, options);
	  };

	  /**
	   * Get a string representation of the matrix
	   * @memberof DenseMatrix
	   * @returns {string} str
	   */
	  DenseMatrix.prototype.toString = function () {
	    return string.format(this._data);
	  };

	  /**
	   * Get a JSON representation of the matrix
	   * @memberof DenseMatrix
	   * @returns {Object}
	   */
	  DenseMatrix.prototype.toJSON = function () {
	    return {
	      mathjs: 'DenseMatrix',
	      data: this._data,
	      size: this._size,
	      datatype: this._datatype
	    };
	  };

	  /**
	   * Get the kth Matrix diagonal.
	   *
	   * @memberof DenseMatrix
	   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.
	   *
	   * @returns {Array}                      The array vector with the diagonal values.
	   */
	  DenseMatrix.prototype.diagonal = function (k) {
	    // validate k if any
	    if (k) {
	      // convert BigNumber to a number
	      if (k.isBigNumber === true) k = k.toNumber();
	      // is must be an integer
	      if (!isNumber(k) || !isInteger(k)) {
	        throw new TypeError('The parameter k must be an integer number');
	      }
	    } else {
	      // default value
	      k = 0;
	    }

	    var kSuper = k > 0 ? k : 0;
	    var kSub = k < 0 ? -k : 0;

	    // rows & columns
	    var rows = this._size[0];
	    var columns = this._size[1];

	    // number diagonal values
	    var n = Math.min(rows - kSub, columns - kSuper);

	    // x is a matrix get diagonal from matrix
	    var data = [];

	    // loop rows
	    for (var i = 0; i < n; i++) {
	      data[i] = this._data[i + kSub][i + kSuper];
	    }

	    // create DenseMatrix
	    return new DenseMatrix({
	      data: data,
	      size: [n],
	      datatype: this._datatype
	    });
	  };

	  /**
	   * Create a diagonal matrix.
	   *
	   * @memberof DenseMatrix
	   * @param {Array} size                   The matrix size.
	   * @param {number | Array} value          The values for the diagonal.
	   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will be filled in.
	   * @param {number} [defaultValue]        The default value for non-diagonal
	   *
	   * @returns {DenseMatrix}
	   */
	  DenseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {
	    if (!isArray(size)) throw new TypeError('Array expected, size parameter');
	    if (size.length !== 2) throw new Error('Only two dimensions matrix are supported');

	    // map size & validate
	    size = size.map(function (s) {
	      // check it is a big number
	      if (s && s.isBigNumber === true) {
	        // convert it
	        s = s.toNumber();
	      }
	      // validate arguments
	      if (!isNumber(s) || !isInteger(s) || s < 1) {
	        throw new Error('Size values must be positive integers');
	      }
	      return s;
	    });

	    // validate k if any
	    if (k) {
	      // convert BigNumber to a number
	      if (k && k.isBigNumber === true) k = k.toNumber();
	      // is must be an integer
	      if (!isNumber(k) || !isInteger(k)) {
	        throw new TypeError('The parameter k must be an integer number');
	      }
	    } else {
	      // default value
	      k = 0;
	    }

	    if (defaultValue && isString(datatype)) {
	      // convert defaultValue to the same datatype
	      defaultValue = typed.convert(defaultValue, datatype);
	    }

	    var kSuper = k > 0 ? k : 0;
	    var kSub = k < 0 ? -k : 0;

	    // rows and columns
	    var rows = size[0];
	    var columns = size[1];

	    // number of non-zero items
	    var n = Math.min(rows - kSub, columns - kSuper);

	    // value extraction function
	    var _value;

	    // check value
	    if (isArray(value)) {
	      // validate array
	      if (value.length !== n) {
	        // number of values in array must be n
	        throw new Error('Invalid value array length');
	      }
	      // define function
	      _value = function _value(i) {
	        // return value @ i
	        return value[i];
	      };
	    } else if (value && value.isMatrix === true) {
	      // matrix size
	      var ms = value.size();
	      // validate matrix
	      if (ms.length !== 1 || ms[0] !== n) {
	        // number of values in array must be n
	        throw new Error('Invalid matrix length');
	      }
	      // define function
	      _value = function _value(i) {
	        // return value @ i
	        return value.get([i]);
	      };
	    } else {
	      // define function
	      _value = function _value() {
	        // return value
	        return value;
	      };
	    }

	    // discover default value if needed
	    if (!defaultValue) {
	      // check first value in array
	      defaultValue = _value(0) && _value(0).isBigNumber === true ? new type.BigNumber(0) : 0;
	    }

	    // empty array
	    var data = [];

	    // check we need to resize array
	    if (size.length > 0) {
	      // resize array
	      data = array.resize(data, size, defaultValue);
	      // fill diagonal
	      for (var d = 0; d < n; d++) {
	        data[d + kSub][d + kSuper] = _value(d);
	      }
	    }

	    // create DenseMatrix
	    return new DenseMatrix({
	      data: data,
	      size: [rows, columns]
	    });
	  };

	  /**
	   * Generate a matrix from a JSON object
	   * @memberof DenseMatrix
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "DenseMatrix", data: [], size: []}`,
	   *                       where mathjs is optional
	   * @returns {DenseMatrix}
	   */
	  DenseMatrix.fromJSON = function (json) {
	    return new DenseMatrix(json);
	  };

	  /**
	   * Swap rows i and j in Matrix.
	   *
	   * @memberof DenseMatrix
	   * @param {number} i       Matrix row index 1
	   * @param {number} j       Matrix row index 2
	   *
	   * @return {Matrix}        The matrix reference
	   */
	  DenseMatrix.prototype.swapRows = function (i, j) {
	    // check index
	    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {
	      throw new Error('Row index must be positive integers');
	    }
	    // check dimensions
	    if (this._size.length !== 2) {
	      throw new Error('Only two dimensional matrix is supported');
	    }
	    // validate index
	    validateIndex(i, this._size[0]);
	    validateIndex(j, this._size[0]);

	    // swap rows
	    DenseMatrix._swapRows(i, j, this._data);
	    // return current instance
	    return this;
	  };

	  /**
	   * Swap rows i and j in Dense Matrix data structure.
	   *
	   * @param {number} i       Matrix row index 1
	   * @param {number} j       Matrix row index 2
	   */
	  DenseMatrix._swapRows = function (i, j, data) {
	    // swap values i <-> j
	    var vi = data[i];
	    data[i] = data[j];
	    data[j] = vi;
	  };

	  /**
	   * Preprocess data, which can be an Array or DenseMatrix with nested Arrays and
	   * Matrices. Replaces all nested Matrices with Arrays
	   * @memberof DenseMatrix
	   * @param {Array} data
	   * @return {Array} data
	   */
	  function preprocess(data) {
	    for (var i = 0, ii = data.length; i < ii; i++) {
	      var elem = data[i];
	      if (isArray(elem)) {
	        data[i] = preprocess(elem);
	      } else if (elem && elem.isMatrix === true) {
	        data[i] = preprocess(elem.valueOf());
	      }
	    }

	    return data;
	  }

	  // register this type in the base class Matrix
	  type.Matrix._storage.dense = DenseMatrix;
	  type.Matrix._storage['default'] = DenseMatrix;

	  // exports
	  return DenseMatrix;
	}

	exports.name = 'DenseMatrix';
	exports.path = 'type';
	exports.factory = factory;
	exports.lazy = false; // no lazy loading, as we alter type.Matrix._storage

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__(199);
	var DimensionError = __webpack_require__(202);

	var array = util.array;
	var object = util.object;
	var string = util.string;
	var number = util.number;

	var isArray = Array.isArray;
	var isNumber = number.isNumber;
	var isInteger = number.isInteger;
	var isString = string.isString;

	var validateIndex = array.validateIndex;

	function factory(type, config, load, typed) {
	  var Matrix = load(__webpack_require__(198)); // force loading Matrix (do not use via type.Matrix)
	  var equalScalar = load(__webpack_require__(208));

	  /**
	   * Sparse Matrix implementation. This type implements a Compressed Column Storage format
	   * for sparse matrices.
	   * @class SparseMatrix
	   */
	  function SparseMatrix(data, datatype) {
	    if (!(this instanceof SparseMatrix)) throw new SyntaxError('Constructor must be called with the new operator');
	    if (datatype && !isString(datatype)) throw new Error('Invalid datatype: ' + datatype);

	    if (data && data.isMatrix === true) {
	      // create from matrix
	      _createFromMatrix(this, data, datatype);
	    } else if (data && isArray(data.index) && isArray(data.ptr) && isArray(data.size)) {
	      // initialize fields
	      this._values = data.values;
	      this._index = data.index;
	      this._ptr = data.ptr;
	      this._size = data.size;
	      this._datatype = datatype || data.datatype;
	    } else if (isArray(data)) {
	      // create from array
	      _createFromArray(this, data, datatype);
	    } else if (data) {
	      // unsupported type
	      throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');
	    } else {
	      // nothing provided
	      this._values = [];
	      this._index = [];
	      this._ptr = [0];
	      this._size = [0, 0];
	      this._datatype = datatype;
	    }
	  }

	  var _createFromMatrix = function _createFromMatrix(matrix, source, datatype) {
	    // check matrix type
	    if (source.type === 'SparseMatrix') {
	      // clone arrays
	      matrix._values = source._values ? object.clone(source._values) : undefined;
	      matrix._index = object.clone(source._index);
	      matrix._ptr = object.clone(source._ptr);
	      matrix._size = object.clone(source._size);
	      matrix._datatype = datatype || source._datatype;
	    } else {
	      // build from matrix data
	      _createFromArray(matrix, source.valueOf(), datatype || source._datatype);
	    }
	  };

	  var _createFromArray = function _createFromArray(matrix, data, datatype) {
	    // initialize fields
	    matrix._values = [];
	    matrix._index = [];
	    matrix._ptr = [];
	    matrix._datatype = datatype;
	    // discover rows & columns, do not use math.size() to avoid looping array twice
	    var rows = data.length;
	    var columns = 0;

	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;

	    if (isString(datatype)) {
	      // find signature that matches (datatype, datatype)
	      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar;
	      // convert 0 to the same datatype
	      zero = typed.convert(0, datatype);
	    }

	    // check we have rows (empty array)
	    if (rows > 0) {
	      // column index
	      var j = 0;
	      do {
	        // store pointer to values index
	        matrix._ptr.push(matrix._index.length);
	        // loop rows
	        for (var i = 0; i < rows; i++) {
	          // current row
	          var row = data[i];
	          // check row is an array
	          if (isArray(row)) {
	            // update columns if needed (only on first column)
	            if (j === 0 && columns < row.length) columns = row.length;
	            // check row has column
	            if (j < row.length) {
	              // value
	              var v = row[j];
	              // check value != 0
	              if (!eq(v, zero)) {
	                // store value
	                matrix._values.push(v);
	                // index
	                matrix._index.push(i);
	              }
	            }
	          } else {
	            // update columns if needed (only on first column)
	            if (j === 0 && columns < 1) columns = 1;
	            // check value != 0 (row is a scalar)
	            if (!eq(row, zero)) {
	              // store value
	              matrix._values.push(row);
	              // index
	              matrix._index.push(i);
	            }
	          }
	        }
	        // increment index
	        j++;
	      } while (j < columns);
	    }
	    // store number of values in ptr
	    matrix._ptr.push(matrix._index.length);
	    // size
	    matrix._size = [rows, columns];
	  };

	  SparseMatrix.prototype = new Matrix();

	  /**
	   * Attach type information
	   */
	  SparseMatrix.prototype.type = 'SparseMatrix';
	  SparseMatrix.prototype.isSparseMatrix = true;

	  /**
	   * Get the storage format used by the matrix.
	   *
	   * Usage:
	   *     var format = matrix.storage()                   // retrieve storage format
	   *
	   * @memberof SparseMatrix
	   * @return {string}           The storage format.
	   */
	  SparseMatrix.prototype.storage = function () {
	    return 'sparse';
	  };

	  /**
	   * Get the datatype of the data stored in the matrix.
	   *
	   * Usage:
	   *     var format = matrix.datatype()                   // retrieve matrix datatype
	   *
	   * @memberof SparseMatrix
	   * @return {string}           The datatype.
	   */
	  SparseMatrix.prototype.datatype = function () {
	    return this._datatype;
	  };

	  /**
	   * Create a new SparseMatrix
	   * @memberof SparseMatrix
	   * @param {Array} data
	   * @param {string} [datatype]
	   */
	  SparseMatrix.prototype.create = function (data, datatype) {
	    return new SparseMatrix(data, datatype);
	  };

	  /**
	   * Get the matrix density.
	   *
	   * Usage:
	   *     var density = matrix.density()                   // retrieve matrix density
	   *
	   * @memberof SparseMatrix
	   * @return {number}           The matrix density.
	   */
	  SparseMatrix.prototype.density = function () {
	    // rows & columns
	    var rows = this._size[0];
	    var columns = this._size[1];
	    // calculate density
	    return rows !== 0 && columns !== 0 ? this._index.length / (rows * columns) : 0;
	  };

	  /**
	   * Get a subset of the matrix, or replace a subset of the matrix.
	   *
	   * Usage:
	   *     var subset = matrix.subset(index)               // retrieve subset
	   *     var value = matrix.subset(index, replacement)   // replace subset
	   *
	   * @memberof SparseMatrix
	   * @param {Index} index
	   * @param {Array | Maytrix | *} [replacement]
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be filled with zeros.
	   */
	  SparseMatrix.prototype.subset = function (index, replacement, defaultValue) {
	    // check it is a pattern matrix
	    if (!this._values) throw new Error('Cannot invoke subset on a Pattern only matrix');

	    // check arguments
	    switch (arguments.length) {
	      case 1:
	        return _getsubset(this, index);

	      // intentional fall through
	      case 2:
	      case 3:
	        return _setsubset(this, index, replacement, defaultValue);

	      default:
	        throw new SyntaxError('Wrong number of arguments');
	    }
	  };

	  var _getsubset = function _getsubset(matrix, idx) {
	    // check idx
	    if (!idx || idx.isIndex !== true) {
	      throw new TypeError('Invalid index');
	    }

	    var isScalar = idx.isScalar();
	    if (isScalar) {
	      // return a scalar
	      return matrix.get(idx.min());
	    }
	    // validate dimensions
	    var size = idx.size();
	    if (size.length != matrix._size.length) {
	      throw new DimensionError(size.length, matrix._size.length);
	    }

	    // vars
	    var i, ii, k, kk;

	    // validate if any of the ranges in the index is out of range
	    var min = idx.min();
	    var max = idx.max();
	    for (i = 0, ii = matrix._size.length; i < ii; i++) {
	      validateIndex(min[i], matrix._size[i]);
	      validateIndex(max[i], matrix._size[i]);
	    }

	    // matrix arrays
	    var mvalues = matrix._values;
	    var mindex = matrix._index;
	    var mptr = matrix._ptr;

	    // rows & columns dimensions for result matrix
	    var rows = idx.dimension(0);
	    var columns = idx.dimension(1);

	    // workspace & permutation vector
	    var w = [];
	    var pv = [];

	    // loop rows in resulting matrix
	    rows.forEach(function (i, r) {
	      // update permutation vector
	      pv[i] = r[0];
	      // mark i in workspace
	      w[i] = true;
	    });

	    // result matrix arrays
	    var values = mvalues ? [] : undefined;
	    var index = [];
	    var ptr = [];

	    // loop columns in result matrix
	    columns.forEach(function (j) {
	      // update ptr
	      ptr.push(index.length);
	      // loop values in column j
	      for (k = mptr[j], kk = mptr[j + 1]; k < kk; k++) {
	        // row
	        i = mindex[k];
	        // check row is in result matrix
	        if (w[i] === true) {
	          // push index
	          index.push(pv[i]);
	          // check we need to process values
	          if (values) values.push(mvalues[k]);
	        }
	      }
	    });
	    // update ptr
	    ptr.push(index.length);

	    // return matrix
	    return new SparseMatrix({
	      values: values,
	      index: index,
	      ptr: ptr,
	      size: size,
	      datatype: matrix._datatype
	    });
	  };

	  var _setsubset = function _setsubset(matrix, index, submatrix, defaultValue) {
	    // check index
	    if (!index || index.isIndex !== true) {
	      throw new TypeError('Invalid index');
	    }

	    // get index size and check whether the index contains a single value
	    var iSize = index.size(),
	        isScalar = index.isScalar();

	    // calculate the size of the submatrix, and convert it into an Array if needed
	    var sSize;
	    if (submatrix && submatrix.isMatrix === true) {
	      // submatrix size
	      sSize = submatrix.size();
	      // use array representation
	      submatrix = submatrix.toArray();
	    } else {
	      // get submatrix size (array, scalar)
	      sSize = array.size(submatrix);
	    }

	    // check index is a scalar
	    if (isScalar) {
	      // verify submatrix is a scalar
	      if (sSize.length !== 0) {
	        throw new TypeError('Scalar expected');
	      }
	      // set value
	      matrix.set(index.min(), submatrix, defaultValue);
	    } else {
	      // validate dimensions, index size must be one or two dimensions
	      if (iSize.length !== 1 && iSize.length !== 2) {
	        throw new DimensionError(iSize.length, matrix._size.length, '<');
	      }

	      // check submatrix and index have the same dimensions
	      if (sSize.length < iSize.length) {
	        // calculate number of missing outer dimensions
	        var i = 0;
	        var outer = 0;
	        while (iSize[i] === 1 && sSize[i] === 1) {
	          i++;
	        }
	        while (iSize[i] === 1) {
	          outer++;
	          i++;
	        }
	        // unsqueeze both outer and inner dimensions
	        submatrix = array.unsqueeze(submatrix, iSize.length, outer, sSize);
	      }

	      // check whether the size of the submatrix matches the index size
	      if (!object.deepEqual(iSize, sSize)) {
	        throw new DimensionError(iSize, sSize, '>');
	      }

	      // offsets
	      var x0 = index.min()[0];
	      var y0 = index.min()[1];

	      // submatrix rows and columns
	      var m = sSize[0];
	      var n = sSize[1];

	      // loop submatrix
	      for (var x = 0; x < m; x++) {
	        // loop columns
	        for (var y = 0; y < n; y++) {
	          // value at i, j
	          var v = submatrix[x][y];
	          // invoke set (zero value will remove entry from matrix)
	          matrix.set([x + x0, y + y0], v, defaultValue);
	        }
	      }
	    }
	    return matrix;
	  };

	  /**
	   * Get a single element from the matrix.
	   * @memberof SparseMatrix
	   * @param {number[]} index   Zero-based index
	   * @return {*} value
	   */
	  SparseMatrix.prototype.get = function (index) {
	    if (!isArray(index)) throw new TypeError('Array expected');
	    if (index.length != this._size.length) throw new DimensionError(index.length, this._size.length);

	    // check it is a pattern matrix
	    if (!this._values) throw new Error('Cannot invoke get on a Pattern only matrix');

	    // row and column
	    var i = index[0];
	    var j = index[1];

	    // check i, j are valid
	    validateIndex(i, this._size[0]);
	    validateIndex(j, this._size[1]);

	    // find value index
	    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);
	    // check k is prior to next column k and it is in the correct row
	    if (k < this._ptr[j + 1] && this._index[k] === i) return this._values[k];

	    return 0;
	  };

	  /**
	   * Replace a single element in the matrix.
	   * @memberof SparseMatrix
	   * @param {number[]} index   Zero-based index
	   * @param {*} value
	   * @param {*} [defaultValue]        Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be set to zero.
	   * @return {SparseMatrix} self
	   */
	  SparseMatrix.prototype.set = function (index, v, defaultValue) {
	    if (!isArray(index)) throw new TypeError('Array expected');
	    if (index.length != this._size.length) throw new DimensionError(index.length, this._size.length);

	    // check it is a pattern matrix
	    if (!this._values) throw new Error('Cannot invoke set on a Pattern only matrix');

	    // row and column
	    var i = index[0];
	    var j = index[1];

	    // rows & columns
	    var rows = this._size[0];
	    var columns = this._size[1];

	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;

	    if (isString(this._datatype)) {
	      // find signature that matches (datatype, datatype)
	      eq = typed.find(equalScalar, [this._datatype, this._datatype]) || equalScalar;
	      // convert 0 to the same datatype
	      zero = typed.convert(0, this._datatype);
	    }

	    // check we need to resize matrix
	    if (i > rows - 1 || j > columns - 1) {
	      // resize matrix
	      _resize(this, Math.max(i + 1, rows), Math.max(j + 1, columns), defaultValue);
	      // update rows & columns
	      rows = this._size[0];
	      columns = this._size[1];
	    }

	    // check i, j are valid
	    validateIndex(i, rows);
	    validateIndex(j, columns);

	    // find value index
	    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);
	    // check k is prior to next column k and it is in the correct row
	    if (k < this._ptr[j + 1] && this._index[k] === i) {
	      // check value != 0
	      if (!eq(v, zero)) {
	        // update value
	        this._values[k] = v;
	      } else {
	        // remove value from matrix
	        _remove(k, j, this._values, this._index, this._ptr);
	      }
	    } else {
	      // insert value @ (i, j)
	      _insert(k, i, j, v, this._values, this._index, this._ptr);
	    }

	    return this;
	  };

	  var _getValueIndex = function _getValueIndex(i, top, bottom, index) {
	    // check row is on the bottom side
	    if (bottom - top === 0) return bottom;
	    // loop rows [top, bottom[
	    for (var r = top; r < bottom; r++) {
	      // check we found value index
	      if (index[r] === i) return r;
	    }
	    // we did not find row
	    return top;
	  };

	  var _remove = function _remove(k, j, values, index, ptr) {
	    // remove value @ k
	    values.splice(k, 1);
	    index.splice(k, 1);
	    // update pointers
	    for (var x = j + 1; x < ptr.length; x++) {
	      ptr[x]--;
	    }
	  };

	  var _insert = function _insert(k, i, j, v, values, index, ptr) {
	    // insert value
	    values.splice(k, 0, v);
	    // update row for k
	    index.splice(k, 0, i);
	    // update column pointers
	    for (var x = j + 1; x < ptr.length; x++) {
	      ptr[x]++;
	    }
	  };

	  /**
	   * Resize the matrix to the given size. Returns a copy of the matrix when 
	   * `copy=true`, otherwise return the matrix itself (resize in place).
	   *
	   * @memberof SparseMatrix
	   * @param {number[]} size           The new size the matrix should have.
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
	   *                                  If not provided, the matrix elements will
	   *                                  be filled with zeros.
	   * @param {boolean} [copy]          Return a resized copy of the matrix
	   *
	   * @return {Matrix}                 The resized matrix
	   */
	  SparseMatrix.prototype.resize = function (size, defaultValue, copy) {
	    // validate arguments
	    if (!isArray(size)) throw new TypeError('Array expected');
	    if (size.length !== 2) throw new Error('Only two dimensions matrix are supported');

	    // check sizes
	    size.forEach(function (value) {
	      if (!number.isNumber(value) || !number.isInteger(value) || value < 0) {
	        throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + string.format(size) + ')');
	      }
	    });

	    // matrix to resize
	    var m = copy ? this.clone() : this;
	    // resize matrix
	    return _resize(m, size[0], size[1], defaultValue);
	  };

	  var _resize = function _resize(matrix, rows, columns, defaultValue) {
	    // value to insert at the time of growing matrix
	    var value = defaultValue || 0;

	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;

	    if (isString(matrix._datatype)) {
	      // find signature that matches (datatype, datatype)
	      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar;
	      // convert 0 to the same datatype
	      zero = typed.convert(0, matrix._datatype);
	      // convert value to the same datatype
	      value = typed.convert(value, matrix._datatype);
	    }

	    // should we insert the value?
	    var ins = !eq(value, zero);

	    // old columns and rows
	    var r = matrix._size[0];
	    var c = matrix._size[1];

	    var i, j, k;

	    // check we need to increase columns
	    if (columns > c) {
	      // loop new columns
	      for (j = c; j < columns; j++) {
	        // update matrix._ptr for current column
	        matrix._ptr[j] = matrix._values.length;
	        // check we need to insert matrix._values
	        if (ins) {
	          // loop rows
	          for (i = 0; i < r; i++) {
	            // add new matrix._values
	            matrix._values.push(value);
	            // update matrix._index
	            matrix._index.push(i);
	          }
	        }
	      }
	      // store number of matrix._values in matrix._ptr
	      matrix._ptr[columns] = matrix._values.length;
	    } else if (columns < c) {
	      // truncate matrix._ptr
	      matrix._ptr.splice(columns + 1, c - columns);
	      // truncate matrix._values and matrix._index
	      matrix._values.splice(matrix._ptr[columns], matrix._values.length);
	      matrix._index.splice(matrix._ptr[columns], matrix._index.length);
	    }
	    // update columns
	    c = columns;

	    // check we need to increase rows
	    if (rows > r) {
	      // check we have to insert values
	      if (ins) {
	        // inserts
	        var n = 0;
	        // loop columns
	        for (j = 0; j < c; j++) {
	          // update matrix._ptr for current column
	          matrix._ptr[j] = matrix._ptr[j] + n;
	          // where to insert matrix._values
	          k = matrix._ptr[j + 1] + n;
	          // pointer
	          var p = 0;
	          // loop new rows, initialize pointer
	          for (i = r; i < rows; i++, p++) {
	            // add value
	            matrix._values.splice(k + p, 0, value);
	            // update matrix._index
	            matrix._index.splice(k + p, 0, i);
	            // increment inserts
	            n++;
	          }
	        }
	        // store number of matrix._values in matrix._ptr
	        matrix._ptr[c] = matrix._values.length;
	      }
	    } else if (rows < r) {
	      // deletes
	      var d = 0;
	      // loop columns
	      for (j = 0; j < c; j++) {
	        // update matrix._ptr for current column
	        matrix._ptr[j] = matrix._ptr[j] - d;
	        // where matrix._values start for next column
	        var k0 = matrix._ptr[j];
	        var k1 = matrix._ptr[j + 1] - d;
	        // loop matrix._index
	        for (k = k0; k < k1; k++) {
	          // row
	          i = matrix._index[k];
	          // check we need to delete value and matrix._index
	          if (i > rows - 1) {
	            // remove value
	            matrix._values.splice(k, 1);
	            // remove item from matrix._index
	            matrix._index.splice(k, 1);
	            // increase deletes
	            d++;
	          }
	        }
	      }
	      // update matrix._ptr for current column
	      matrix._ptr[j] = matrix._values.length;
	    }
	    // update matrix._size
	    matrix._size[0] = rows;
	    matrix._size[1] = columns;
	    // return matrix
	    return matrix;
	  };

	  /**
	   * Create a clone of the matrix
	   * @memberof SparseMatrix
	   * @return {SparseMatrix} clone
	   */
	  SparseMatrix.prototype.clone = function () {
	    var m = new SparseMatrix({
	      values: this._values ? object.clone(this._values) : undefined,
	      index: object.clone(this._index),
	      ptr: object.clone(this._ptr),
	      size: object.clone(this._size),
	      datatype: this._datatype
	    });
	    return m;
	  };

	  /**
	   * Retrieve the size of the matrix.
	   * @memberof SparseMatrix
	   * @returns {number[]} size
	   */
	  SparseMatrix.prototype.size = function () {
	    return this._size.slice(0); // copy the Array
	  };

	  /**
	   * Create a new matrix with the results of the callback function executed on
	   * each entry of the matrix.
	   * @memberof SparseMatrix
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
	   *
	   * @return {SparseMatrix} matrix
	   */
	  SparseMatrix.prototype.map = function (callback, skipZeros) {
	    // check it is a pattern matrix
	    if (!this._values) throw new Error('Cannot invoke map on a Pattern only matrix');
	    // matrix instance
	    var me = this;
	    // rows and columns
	    var rows = this._size[0];
	    var columns = this._size[1];
	    // invoke callback
	    var invoke = function invoke(v, i, j) {
	      // invoke callback
	      return callback(v, [i, j], me);
	    };
	    // invoke _map
	    return _map(this, 0, rows - 1, 0, columns - 1, invoke, skipZeros);
	  };

	  /**
	   * Create a new matrix with the results of the callback function executed on the interval
	   * [minRow..maxRow, minColumn..maxColumn].
	   */
	  var _map = function _map(matrix, minRow, maxRow, minColumn, maxColumn, callback, skipZeros) {
	    // result arrays
	    var values = [];
	    var index = [];
	    var ptr = [];

	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;

	    if (isString(matrix._datatype)) {
	      // find signature that matches (datatype, datatype)
	      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar;
	      // convert 0 to the same datatype
	      zero = typed.convert(0, matrix._datatype);
	    }

	    // invoke callback
	    var invoke = function invoke(v, x, y) {
	      // invoke callback
	      v = callback(v, x, y);
	      // check value != 0
	      if (!eq(v, zero)) {
	        // store value
	        values.push(v);
	        // index
	        index.push(x);
	      }
	    };
	    // loop columns
	    for (var j = minColumn; j <= maxColumn; j++) {
	      // store pointer to values index
	      ptr.push(values.length);
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = matrix._ptr[j];
	      var k1 = matrix._ptr[j + 1];
	      // row pointer
	      var p = minRow;
	      // loop k within [k0, k1[
	      for (var k = k0; k < k1; k++) {
	        // row index
	        var i = matrix._index[k];
	        // check i is in range
	        if (i >= minRow && i <= maxRow) {
	          // zero values
	          if (!skipZeros) {
	            for (var x = p; x < i; x++) {
	              invoke(0, x - minRow, j - minColumn);
	            }
	          }
	          // value @ k
	          invoke(matrix._values[k], i - minRow, j - minColumn);
	        }
	        // update pointer
	        p = i + 1;
	      }
	      // zero values
	      if (!skipZeros) {
	        for (var y = p; y <= maxRow; y++) {
	          invoke(0, y - minRow, j - minColumn);
	        }
	      }
	    }
	    // store number of values in ptr
	    ptr.push(values.length);
	    // return sparse matrix
	    return new SparseMatrix({
	      values: values,
	      index: index,
	      ptr: ptr,
	      size: [maxRow - minRow + 1, maxColumn - minColumn + 1]
	    });
	  };

	  /**
	   * Execute a callback function on each entry of the matrix.
	   * @memberof SparseMatrix
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
	   */
	  SparseMatrix.prototype.forEach = function (callback, skipZeros) {
	    // check it is a pattern matrix
	    if (!this._values) throw new Error('Cannot invoke forEach on a Pattern only matrix');
	    // matrix instance
	    var me = this;
	    // rows and columns
	    var rows = this._size[0];
	    var columns = this._size[1];
	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = this._ptr[j];
	      var k1 = this._ptr[j + 1];
	      // column pointer
	      var p = 0;
	      // loop k within [k0, k1[
	      for (var k = k0; k < k1; k++) {
	        // row index
	        var i = this._index[k];
	        // check we need to process zeros
	        if (!skipZeros) {
	          // zero values
	          for (var x = p; x < i; x++) {
	            callback(0, [x, j], me);
	          }
	        }
	        // value @ k
	        callback(this._values[k], [i, j], me);
	        // update pointer
	        p = i + 1;
	      }
	      // check we need to process zeros
	      if (!skipZeros) {
	        // zero values
	        for (var y = p; y < rows; y++) {
	          callback(0, [y, j], me);
	        }
	      }
	    }
	  };

	  /**
	   * Create an Array with a copy of the data of the SparseMatrix
	   * @memberof SparseMatrix
	   * @returns {Array} array
	   */
	  SparseMatrix.prototype.toArray = function () {
	    return _toArray(this._values, this._index, this._ptr, this._size, true);
	  };

	  /**
	   * Get the primitive value of the SparseMatrix: a two dimensions array
	   * @memberof SparseMatrix
	   * @returns {Array} array
	   */
	  SparseMatrix.prototype.valueOf = function () {
	    return _toArray(this._values, this._index, this._ptr, this._size, false);
	  };

	  var _toArray = function _toArray(values, index, ptr, size, copy) {
	    // rows and columns
	    var rows = size[0];
	    var columns = size[1];
	    // result
	    var a = [];
	    // vars
	    var i, j;
	    // initialize array
	    for (i = 0; i < rows; i++) {
	      a[i] = [];
	      for (j = 0; j < columns; j++) {
	        a[i][j] = 0;
	      }
	    }

	    // loop columns
	    for (j = 0; j < columns; j++) {
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = ptr[j];
	      var k1 = ptr[j + 1];
	      // loop k within [k0, k1[
	      for (var k = k0; k < k1; k++) {
	        // row index
	        i = index[k];
	        // set value (use one for pattern matrix)
	        a[i][j] = values ? copy ? object.clone(values[k]) : values[k] : 1;
	      }
	    }
	    return a;
	  };

	  /**
	   * Get a string representation of the matrix, with optional formatting options.
	   * @memberof SparseMatrix
	   * @param {Object | number | Function} [options]  Formatting options. See
	   *                                                lib/utils/number:format for a
	   *                                                description of the available
	   *                                                options.
	   * @returns {string} str
	   */
	  SparseMatrix.prototype.format = function (options) {
	    // rows and columns
	    var rows = this._size[0];
	    var columns = this._size[1];
	    // density
	    var density = this.density();
	    // rows & columns
	    var str = 'Sparse Matrix [' + string.format(rows, options) + ' x ' + string.format(columns, options) + '] density: ' + string.format(density, options) + '\n';
	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = this._ptr[j];
	      var k1 = this._ptr[j + 1];
	      // loop k within [k0, k1[
	      for (var k = k0; k < k1; k++) {
	        // row index
	        var i = this._index[k];
	        // append value
	        str += '\n    (' + string.format(i, options) + ', ' + string.format(j, options) + ') ==> ' + (this._values ? string.format(this._values[k], options) : 'X');
	      }
	    }
	    return str;
	  };

	  /**
	   * Get a string representation of the matrix
	   * @memberof SparseMatrix
	   * @returns {string} str
	   */
	  SparseMatrix.prototype.toString = function () {
	    return string.format(this.toArray());
	  };

	  /**
	   * Get a JSON representation of the matrix
	   * @memberof SparseMatrix
	   * @returns {Object}
	   */
	  SparseMatrix.prototype.toJSON = function () {
	    return {
	      mathjs: 'SparseMatrix',
	      values: this._values,
	      index: this._index,
	      ptr: this._ptr,
	      size: this._size,
	      datatype: this._datatype
	    };
	  };

	  /**
	   * Get the kth Matrix diagonal.
	   *
	   * @memberof SparseMatrix
	   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.
	   *
	   * @returns {Matrix}                     The matrix vector with the diagonal values.
	   */
	  SparseMatrix.prototype.diagonal = function (k) {
	    // validate k if any
	    if (k) {
	      // convert BigNumber to a number
	      if (k.isBigNumber === true) k = k.toNumber();
	      // is must be an integer
	      if (!isNumber(k) || !isInteger(k)) {
	        throw new TypeError('The parameter k must be an integer number');
	      }
	    } else {
	      // default value
	      k = 0;
	    }

	    var kSuper = k > 0 ? k : 0;
	    var kSub = k < 0 ? -k : 0;

	    // rows & columns
	    var rows = this._size[0];
	    var columns = this._size[1];

	    // number diagonal values
	    var n = Math.min(rows - kSub, columns - kSuper);

	    // diagonal arrays
	    var values = [];
	    var index = [];
	    var ptr = [];
	    // initial ptr value
	    ptr[0] = 0;
	    // loop columns
	    for (var j = kSuper; j < columns && values.length < n; j++) {
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = this._ptr[j];
	      var k1 = this._ptr[j + 1];
	      // loop x within [k0, k1[
	      for (var x = k0; x < k1; x++) {
	        // row index
	        var i = this._index[x];
	        // check row
	        if (i === j - kSuper + kSub) {
	          // value on this column
	          values.push(this._values[x]);
	          // store row
	          index[values.length - 1] = i - kSub;
	          // exit loop
	          break;
	        }
	      }
	    }
	    // close ptr
	    ptr.push(values.length);
	    // return matrix
	    return new SparseMatrix({
	      values: values,
	      index: index,
	      ptr: ptr,
	      size: [n, 1]
	    });
	  };

	  /**
	   * Generate a matrix from a JSON object
	   * @memberof SparseMatrix
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "SparseMatrix", "values": [], "index": [], "ptr": [], "size": []}`,
	   *                       where mathjs is optional
	   * @returns {SparseMatrix}
	   */
	  SparseMatrix.fromJSON = function (json) {
	    return new SparseMatrix(json);
	  };

	  /**
	   * Create a diagonal matrix.
	   *
	   * @memberof SparseMatrix
	   * @param {Array} size                       The matrix size.
	   * @param {number | Array | Matrix } value   The values for the diagonal.
	   * @param {number | BigNumber} [k=0]         The kth diagonal where the vector will be filled in.
	   * @param {string} [datatype]                The Matrix datatype, values must be of this datatype.
	   *
	   * @returns {SparseMatrix}
	   */
	  SparseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {
	    if (!isArray(size)) throw new TypeError('Array expected, size parameter');
	    if (size.length !== 2) throw new Error('Only two dimensions matrix are supported');

	    // map size & validate
	    size = size.map(function (s) {
	      // check it is a big number
	      if (s && s.isBigNumber === true) {
	        // convert it
	        s = s.toNumber();
	      }
	      // validate arguments
	      if (!isNumber(s) || !isInteger(s) || s < 1) {
	        throw new Error('Size values must be positive integers');
	      }
	      return s;
	    });

	    // validate k if any
	    if (k) {
	      // convert BigNumber to a number
	      if (k.isBigNumber === true) k = k.toNumber();
	      // is must be an integer
	      if (!isNumber(k) || !isInteger(k)) {
	        throw new TypeError('The parameter k must be an integer number');
	      }
	    } else {
	      // default value
	      k = 0;
	    }

	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;

	    if (isString(datatype)) {
	      // find signature that matches (datatype, datatype)
	      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar;
	      // convert 0 to the same datatype
	      zero = typed.convert(0, datatype);
	    }

	    var kSuper = k > 0 ? k : 0;
	    var kSub = k < 0 ? -k : 0;

	    // rows and columns
	    var rows = size[0];
	    var columns = size[1];

	    // number of non-zero items
	    var n = Math.min(rows - kSub, columns - kSuper);

	    // value extraction function
	    var _value;

	    // check value
	    if (isArray(value)) {
	      // validate array
	      if (value.length !== n) {
	        // number of values in array must be n
	        throw new Error('Invalid value array length');
	      }
	      // define function
	      _value = function _value(i) {
	        // return value @ i
	        return value[i];
	      };
	    } else if (value && value.isMatrix === true) {
	      // matrix size
	      var ms = value.size();
	      // validate matrix
	      if (ms.length !== 1 || ms[0] !== n) {
	        // number of values in array must be n
	        throw new Error('Invalid matrix length');
	      }
	      // define function
	      _value = function _value(i) {
	        // return value @ i
	        return value.get([i]);
	      };
	    } else {
	      // define function
	      _value = function _value() {
	        // return value
	        return value;
	      };
	    }

	    // create arrays
	    var values = [];
	    var index = [];
	    var ptr = [];

	    // loop items
	    for (var j = 0; j < columns; j++) {
	      // number of rows with value
	      ptr.push(values.length);
	      // diagonal index
	      var i = j - kSuper;
	      // check we need to set diagonal value
	      if (i >= 0 && i < n) {
	        // get value @ i
	        var v = _value(i);
	        // check for zero
	        if (!eq(v, zero)) {
	          // column
	          index.push(i + kSub);
	          // add value
	          values.push(v);
	        }
	      }
	    }
	    // last value should be number of values
	    ptr.push(values.length);
	    // create SparseMatrix
	    return new SparseMatrix({
	      values: values,
	      index: index,
	      ptr: ptr,
	      size: [rows, columns]
	    });
	  };

	  /**
	   * Swap rows i and j in Matrix.
	   *
	   * @memberof SparseMatrix
	   * @param {number} i       Matrix row index 1
	   * @param {number} j       Matrix row index 2
	   *
	   * @return {Matrix}        The matrix reference
	   */
	  SparseMatrix.prototype.swapRows = function (i, j) {
	    // check index
	    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {
	      throw new Error('Row index must be positive integers');
	    }
	    // check dimensions
	    if (this._size.length !== 2) {
	      throw new Error('Only two dimensional matrix is supported');
	    }
	    // validate index
	    validateIndex(i, this._size[0]);
	    validateIndex(j, this._size[0]);

	    // swap rows
	    SparseMatrix._swapRows(i, j, this._size[1], this._values, this._index, this._ptr);
	    // return current instance
	    return this;
	  };

	  /**
	   * Loop rows with data in column j.
	   *
	   * @param {number} j            Column
	   * @param {Array} values        Matrix values
	   * @param {Array} index         Matrix row indeces
	   * @param {Array} ptr           Matrix column pointers
	   * @param {Function} callback   Callback function invoked for every row in column j
	   */
	  SparseMatrix._forEachRow = function (j, values, index, ptr, callback) {
	    // indeces for column j
	    var k0 = ptr[j];
	    var k1 = ptr[j + 1];
	    // loop
	    for (var k = k0; k < k1; k++) {
	      // invoke callback
	      callback(index[k], values[k]);
	    }
	  };

	  /**
	   * Swap rows x and y in Sparse Matrix data structures.
	   *
	   * @param {number} x         Matrix row index 1
	   * @param {number} y         Matrix row index 2
	   * @param {number} columns   Number of columns in matrix
	   * @param {Array} values     Matrix values
	   * @param {Array} index      Matrix row indeces
	   * @param {Array} ptr        Matrix column pointers
	   */
	  SparseMatrix._swapRows = function (x, y, columns, values, index, ptr) {
	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = ptr[j];
	      var k1 = ptr[j + 1];
	      // find value index @ x
	      var kx = _getValueIndex(x, k0, k1, index);
	      // find value index @ x
	      var ky = _getValueIndex(y, k0, k1, index);
	      // check both rows exist in matrix
	      if (kx < k1 && ky < k1 && index[kx] === x && index[ky] === y) {
	        // swap values (check for pattern matrix)
	        if (values) {
	          var v = values[kx];
	          values[kx] = values[ky];
	          values[ky] = v;
	        }
	        // next column
	        continue;
	      }
	      // check x row exist & no y row
	      if (kx < k1 && index[kx] === x && (ky >= k1 || index[ky] !== y)) {
	        // value @ x (check for pattern matrix)
	        var vx = values ? values[kx] : undefined;
	        // insert value @ y
	        index.splice(ky, 0, y);
	        if (values) values.splice(ky, 0, vx);
	        // remove value @ x (adjust array index if needed)
	        index.splice(ky <= kx ? kx + 1 : kx, 1);
	        if (values) values.splice(ky <= kx ? kx + 1 : kx, 1);
	        // next column
	        continue;
	      }
	      // check y row exist & no x row
	      if (ky < k1 && index[ky] === y && (kx >= k1 || index[kx] !== x)) {
	        // value @ y (check for pattern matrix)
	        var vy = values ? values[ky] : undefined;
	        // insert value @ x
	        index.splice(kx, 0, x);
	        if (values) values.splice(kx, 0, vy);
	        // remove value @ y (adjust array index if needed)
	        index.splice(kx <= ky ? ky + 1 : ky, 1);
	        if (values) values.splice(kx <= ky ? ky + 1 : ky, 1);
	      }
	    }
	  };

	  // register this type in the base class Matrix
	  type.Matrix._storage.sparse = SparseMatrix;

	  return SparseMatrix;
	}

	exports.name = 'SparseMatrix';
	exports.path = 'type';
	exports.factory = factory;
	exports.lazy = false; // no lazy loading, as we alter type.Matrix._storage

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var nearlyEqual = __webpack_require__(166).nearlyEqual;
	var bigNearlyEqual = __webpack_require__(209);

	function factory(type, config, load, typed) {

	  /**
	   * Test whether two values are equal.
	   *
	   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare
	   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare
	   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false
	   * @private
	   */
	  var equalScalar = typed('equalScalar', {

	    'boolean, boolean': function booleanBoolean(x, y) {
	      return x === y;
	    },

	    'number, number': function numberNumber(x, y) {
	      return x === y || nearlyEqual(x, y, config.epsilon);
	    },

	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.eq(y) || bigNearlyEqual(x, y, config.epsilon);
	    },

	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.equals(y);
	    },

	    'Complex, Complex': function ComplexComplex(x, y) {
	      return x.equals(y);
	    },

	    'Unit, Unit': function UnitUnit(x, y) {
	      if (!x.equalBase(y)) {
	        throw new Error('Cannot compare units with different base');
	      }
	      return equalScalar(x.value, y.value);
	    },

	    'string, string': function stringString(x, y) {
	      return x === y;
	    }
	  });

	  return equalScalar;
	}

	exports.factory = factory;

/***/ },
/* 209 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Compares two BigNumbers.
	 * @param {BigNumber} x       First value to compare
	 * @param {BigNumber} y       Second value to compare
	 * @param {number} [epsilon]  The maximum relative difference between x and y
	 *                            If epsilon is undefined or null, the function will
	 *                            test whether x and y are exactly equal.
	 * @return {boolean} whether the two numbers are nearly equal
	 */

	module.exports = function nearlyEqual(x, y, epsilon) {
	  // if epsilon is null or undefined, test whether x and y are exactly equal
	  if (epsilon == null) {
	    return x.eq(y);
	  }

	  // use "==" operator, handles infinities
	  if (x.eq(y)) {
	    return true;
	  }

	  // NaN
	  if (x.isNaN() || y.isNaN()) {
	    return false;
	  }

	  // at this point x and y should be finite
	  if (x.isFinite() && y.isFinite()) {
	    // check numbers are very close, needed when comparing numbers near zero
	    var diff = x.minus(y).abs();
	    if (diff.isZero()) {
	      return true;
	    } else {
	      // use relative error
	      var max = x.constructor.max(x.abs(), y.abs());
	      return diff.lte(max.times(epsilon));
	    }
	  }

	  // Infinite and Number or negative Infinite and positive Infinite cases
	  return false;
	};

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load) {

	  var add = load(__webpack_require__(211));
	  var equalScalar = load(__webpack_require__(208));

	  /**
	   * An ordered Sparse Accumulator is a representation for a sparse vector that includes a dense array 
	   * of the vector elements and an ordered list of non-zero elements.
	   */
	  function Spa() {
	    if (!(this instanceof Spa)) throw new SyntaxError('Constructor must be called with the new operator');

	    // allocate vector, TODO use typed arrays
	    this._values = [];
	    this._heap = new type.FibonacciHeap();
	  }

	  /**
	   * Attach type information
	   */
	  Spa.prototype.type = 'Spa';
	  Spa.prototype.isSpa = true;

	  /**
	   * Set the value for index i.
	   *
	   * @param {number} i                       The index
	   * @param {number | BigNumber | Complex}   The value at index i
	   */
	  Spa.prototype.set = function (i, v) {
	    // check we have a value @ i
	    if (!this._values[i]) {
	      // insert in heap
	      var node = this._heap.insert(i, v);
	      // set the value @ i
	      this._values[i] = node;
	    } else {
	      // update the value @ i
	      this._values[i].value = v;
	    }
	  };

	  Spa.prototype.get = function (i) {
	    var node = this._values[i];
	    if (node) return node.value;
	    return 0;
	  };

	  Spa.prototype.accumulate = function (i, v) {
	    // node @ i
	    var node = this._values[i];
	    if (!node) {
	      // insert in heap
	      node = this._heap.insert(i, v);
	      // initialize value
	      this._values[i] = node;
	    } else {
	      // accumulate value
	      node.value = add(node.value, v);
	    }
	  };

	  Spa.prototype.forEach = function (from, to, callback) {
	    // references
	    var heap = this._heap;
	    var values = this._values;
	    // nodes
	    var nodes = [];
	    // node with minimum key, save it
	    var node = heap.extractMinimum();
	    if (node) nodes.push(node);
	    // extract nodes from heap (ordered)
	    while (node && node.key <= to) {
	      // check it is in range
	      if (node.key >= from) {
	        // check value is not zero
	        if (!equalScalar(node.value, 0)) {
	          // invoke callback
	          callback(node.key, node.value, this);
	        }
	      }
	      // extract next node, save it
	      node = heap.extractMinimum();
	      if (node) nodes.push(node);
	    }
	    // reinsert all nodes in heap
	    for (var i = 0; i < nodes.length; i++) {
	      // current node
	      var n = nodes[i];
	      // insert node in heap
	      node = heap.insert(n.key, n.value);
	      // update values
	      values[node.key] = node;
	    }
	  };

	  Spa.prototype.swap = function (i, j) {
	    // node @ i and j
	    var nodei = this._values[i];
	    var nodej = this._values[j];
	    // check we need to insert indeces
	    if (!nodei && nodej) {
	      // insert in heap
	      nodei = this._heap.insert(i, nodej.value);
	      // remove from heap
	      this._heap.remove(nodej);
	      // set values
	      this._values[i] = nodei;
	      this._values[j] = undefined;
	    } else if (nodei && !nodej) {
	      // insert in heap
	      nodej = this._heap.insert(j, nodei.value);
	      // remove from heap
	      this._heap.remove(nodei);
	      // set values
	      this._values[j] = nodej;
	      this._values[i] = undefined;
	    } else if (nodei && nodej) {
	      // swap values
	      var v = nodei.value;
	      nodei.value = nodej.value;
	      nodej.value = v;
	    }
	  };

	  return Spa;
	}

	exports.name = 'Spa';
	exports.path = 'type';
	exports.factory = factory;

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var extend = __webpack_require__(163).extend;

	function factory(type, config, load, typed) {

	  var matrix = load(__webpack_require__(212));
	  var addScalar = load(__webpack_require__(213));
	  var latex = __webpack_require__(192);

	  var algorithm01 = load(__webpack_require__(214));
	  var algorithm04 = load(__webpack_require__(215));
	  var algorithm10 = load(__webpack_require__(216));
	  var algorithm13 = load(__webpack_require__(217));
	  var algorithm14 = load(__webpack_require__(218));

	  /**
	   * Add two values, `x + y`.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.add(x, y)
	   *
	   * Examples:
	   *
	   *    math.add(2, 3);               // returns number 5
	   *
	   *    var a = math.complex(2, 3);
	   *    var b = math.complex(-4, 1);
	   *    math.add(a, b);               // returns Complex -2 + 4i
	   *
	   *    math.add([1, 2, 3], 4);       // returns Array [5, 6, 7]
	   *
	   *    var c = math.unit('5 cm');
	   *    var d = math.unit('2.1 mm');
	   *    math.add(c, d);               // returns Unit 52.1 mm
	   *
	   *    math.add("2.3", "4");         // returns number 6.3
	   *
	   * See also:
	   *
	   *    subtract
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to add
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to add
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Sum of `x` and `y`
	   */
	  var add = typed('add', extend({
	    // we extend the signatures of addScalar with signatures dealing with matrices

	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm04(x, y, addScalar);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm01(y, x, addScalar, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm01(x, y, addScalar, false);
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, addScalar);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return add(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return add(matrix(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return add(x, matrix(y));
	    },

	    'Matrix, any': function MatrixAny(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm10(x, y, addScalar, false);
	          break;
	        default:
	          c = algorithm14(x, y, addScalar, false);
	          break;
	      }
	      return c;
	    },

	    'any, Matrix': function anyMatrix(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm10(y, x, addScalar, true);
	          break;
	        default:
	          c = algorithm14(y, x, addScalar, true);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, addScalar, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, addScalar, true).valueOf();
	    }
	  }, addScalar.signatures));

	  add.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['add'] + '${args[1]}\\right)'
	  };

	  return add;
	}

	exports.name = 'add';
	exports.factory = factory;

/***/ },
/* 212 */
/***/ function(module, exports) {

	'use strict';

	function factory(type, config, load, typed) {
	  /**
	   * Create a Matrix. The function creates a new `math.type.Matrix` object from
	   * an `Array`. A Matrix has utility functions to manipulate the data in the
	   * matrix, like getting the size and getting or setting values in the matrix.
	   * Supported storage formats are 'dense' and 'sparse'.
	   *
	   * Syntax:
	   *
	   *    math.matrix()                         // creates an empty matrix using default storage format (dense).
	   *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).
	   *    math.matrix('dense')                  // creates an empty matrix using the given storage format.
	   *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.
	   *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.
	   *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.
	   *
	   * Examples:
	   *
	   *    var m = math.matrix([[1, 2], [3, 4]]);
	   *    m.size();                        // Array [2, 2]
	   *    m.resize([3, 2], 5);
	   *    m.valueOf();                     // Array [[1, 2], [3, 4], [5, 5]]
	   *    m.get([1, 0])                    // number 3
	   *
	   * See also:
	   *
	   *    bignumber, boolean, complex, index, number, string, unit, sparse
	   *
	   * @param {Array | Matrix} [data]    A multi dimensional array
	   * @param {string} [format]          The Matrix storage format
	   *
	   * @return {Matrix} The created matrix
	   */
	  var matrix = typed('matrix', {
	    '': function _() {
	      return _create([]);
	    },

	    'string': function string(format) {
	      return _create([], format);
	    },

	    'string, string': function stringString(format, datatype) {
	      return _create([], format, datatype);
	    },

	    'Array': function Array(data) {
	      return _create(data);
	    },

	    'Matrix': function Matrix(data) {
	      return _create(data, data.storage());
	    },

	    'Array | Matrix, string': _create,

	    'Array | Matrix, string, string': _create
	  });

	  matrix.toTex = {
	    0: '\\begin{bmatrix}\\end{bmatrix}',
	    1: '\\left(${args[0]}\\right)',
	    2: '\\left(${args[0]}\\right)'
	  };

	  return matrix;

	  /**
	   * Create a new Matrix with given storage format
	   * @param {Array} data
	   * @param {string} [format]
	   * @param {string} [datatype]
	   * @returns {Matrix} Returns a new Matrix
	   * @private
	   */
	  function _create(data, format, datatype) {
	    // get storage format constructor
	    var M = type.Matrix.storage(format || 'default');

	    // create instance
	    return new M(data, datatype);
	  }
	}

	exports.name = 'matrix';
	exports.factory = factory;

/***/ },
/* 213 */
/***/ function(module, exports) {

	'use strict';

	function factory(type, config, load, typed) {

	  /**
	   * Add two scalar values, `x + y`.
	   * This function is meant for internal use: it is used by the public function
	   * `add`
	   *
	   * This function does not support collections (Array or Matrix), and does
	   * not validate the number of of inputs.
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add
	   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add
	   * @return {number | BigNumber | Fraction | Complex | Unit}                      Sum of `x` and `y`
	   * @private
	   */
	  var add = typed('add', {

	    'number, number': function numberNumber(x, y) {
	      return x + y;
	    },

	    'Complex, Complex': function ComplexComplex(x, y) {
	      return x.add(y);
	    },

	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.plus(y);
	    },

	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.add(y);
	    },

	    'Unit, Unit': function UnitUnit(x, y) {
	      if (x.value == null) throw new Error('Parameter x contains a unit with undefined value');
	      if (y.value == null) throw new Error('Parameter y contains a unit with undefined value');
	      if (!x.equalBase(y)) throw new Error('Units do not match');

	      var res = x.clone();
	      res.value = add(res.value, y.value);
	      res.fixPrefix = false;
	      return res;
	    }
	  });

	  return add;
	}

	exports.factory = factory;

/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var DimensionError = __webpack_require__(202);

	function factory(type, config, load, typed) {

	  var DenseMatrix = type.DenseMatrix;

	  /**
	   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij). 
	   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).
	   *
	   *
	   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
	   * C(i,j) = ┤
	   *          └  Dij          ; otherwise
	   *
	   *
	   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
	   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)
	   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
	   */
	  var algorithm01 = function algorithm01(denseMatrix, sparseMatrix, callback, inverse) {
	    // dense matrix arrays
	    var adata = denseMatrix._data;
	    var asize = denseMatrix._size;
	    var adt = denseMatrix._datatype;
	    // sparse matrix arrays
	    var bvalues = sparseMatrix._values;
	    var bindex = sparseMatrix._index;
	    var bptr = sparseMatrix._ptr;
	    var bsize = sparseMatrix._size;
	    var bdt = sparseMatrix._datatype;

	    // validate dimensions
	    if (asize.length !== bsize.length) throw new DimensionError(asize.length, bsize.length);

	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');

	    // sparse matrix cannot be a Pattern matrix
	    if (!bvalues) throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // process data types
	    var dt = typeof adt === 'string' && adt === bdt ? adt : undefined;
	    // callback function
	    var cf = dt ? typed.find(callback, [dt, dt]) : callback;

	    // vars
	    var i, j;

	    // result (DenseMatrix)
	    var cdata = [];
	    // initialize c
	    for (i = 0; i < rows; i++) {
	      cdata[i] = [];
	    } // workspace
	    var x = [];
	    // marks indicating we have a value in x for a given column
	    var w = [];

	    // loop columns in b
	    for (j = 0; j < columns; j++) {
	      // column mark
	      var mark = j + 1;
	      // values in column j
	      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        i = bindex[k];
	        // update workspace
	        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
	        // mark i as updated
	        w[i] = mark;
	      }
	      // loop rows
	      for (i = 0; i < rows; i++) {
	        // check row is in workspace
	        if (w[i] === mark) {
	          // c[i][j] was already calculated
	          cdata[i][j] = x[i];
	        } else {
	          // item does not exist in S
	          cdata[i][j] = adata[i][j];
	        }
	      }
	    }

	    // return dense matrix
	    return new DenseMatrix({
	      data: cdata,
	      size: [rows, columns],
	      datatype: dt
	    });
	  };

	  return algorithm01;
	}

	exports.name = 'algorithm01';
	exports.factory = factory;

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var DimensionError = __webpack_require__(202);

	function factory(type, config, load, typed) {

	  var equalScalar = load(__webpack_require__(208));

	  var SparseMatrix = type.SparseMatrix;

	  /**
	   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). 
	   * Callback function invoked MAX(NNZA, NNZB) times
	   *
	   *
	   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
	   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0
	   *          └  B(i,j)       ; B(i,j) !== 0
	   *
	   *
	   * @param {Matrix}   a                 The SparseMatrix instance (A)
	   * @param {Matrix}   b                 The SparseMatrix instance (B)
	   * @param {Function} callback          The f(Aij,Bij) operation to invoke
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
	   */
	  var algorithm04 = function algorithm04(a, b, callback) {
	    // sparse matrix arrays
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var asize = a._size;
	    var adt = a._datatype;
	    // sparse matrix arrays
	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    var bsize = b._size;
	    var bdt = b._datatype;

	    // validate dimensions
	    if (asize.length !== bsize.length) throw new DimensionError(asize.length, bsize.length);

	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // datatype
	    var dt;
	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // find signature that matches (dt, dt)
	      eq = typed.find(equalScalar, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // result arrays
	    var cvalues = avalues && bvalues ? [] : undefined;
	    var cindex = [];
	    var cptr = [];
	    // matrix
	    var c = new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    });

	    // workspace
	    var xa = avalues && bvalues ? [] : undefined;
	    var xb = avalues && bvalues ? [] : undefined;
	    // marks indicating we have a value in x for a given column
	    var wa = [];
	    var wb = [];

	    // vars 
	    var i, j, k, k0, k1;

	    // loop columns
	    for (j = 0; j < columns; j++) {
	      // update cptr
	      cptr[j] = cindex.length;
	      // columns mark
	      var mark = j + 1;
	      // loop A(:,j)
	      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        i = aindex[k];
	        // update c
	        cindex.push(i);
	        // update workspace
	        wa[i] = mark;
	        // check we need to process values
	        if (xa) xa[i] = avalues[k];
	      }
	      // loop B(:,j)
	      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        i = bindex[k];
	        // check row exists in A
	        if (wa[i] === mark) {
	          // update record in xa @ i
	          if (xa) {
	            // invoke callback
	            var v = cf(xa[i], bvalues[k]);
	            // check for zero
	            if (!eq(v, zero)) {
	              // update workspace
	              xa[i] = v;
	            } else {
	              // remove mark (index will be removed later)
	              wa[i] = null;
	            }
	          }
	        } else {
	          // update c
	          cindex.push(i);
	          // update workspace
	          wb[i] = mark;
	          // check we need to process values
	          if (xb) xb[i] = bvalues[k];
	        }
	      }
	      // check we need to process values (non pattern matrix)
	      if (xa && xb) {
	        // initialize first index in j
	        k = cptr[j];
	        // loop index in j
	        while (k < cindex.length) {
	          // row
	          i = cindex[k];
	          // check workspace has value @ i
	          if (wa[i] === mark) {
	            // push value (Aij != 0 || (Aij != 0 && Bij != 0))
	            cvalues[k] = xa[i];
	            // increment pointer
	            k++;
	          } else if (wb[i] === mark) {
	            // push value (bij != 0)
	            cvalues[k] = xb[i];
	            // increment pointer
	            k++;
	          } else {
	            // remove index @ k
	            cindex.splice(k, 1);
	          }
	        }
	      }
	    }
	    // update cptr
	    cptr[columns] = cindex.length;

	    // return sparse matrix
	    return c;
	  };

	  return algorithm04;
	}

	exports.name = 'algorithm04';
	exports.factory = factory;

/***/ },
/* 216 */
/***/ function(module, exports) {

	'use strict';

	function factory(type, config, load, typed) {

	  var DenseMatrix = type.DenseMatrix;

	  /**
	   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b). 
	   * Callback function invoked NZ times (number of nonzero items in S).
	   *
	   *
	   *          ┌  f(Sij, b)  ; S(i,j) !== 0
	   * C(i,j) = ┤  
	   *          └  b          ; otherwise
	   *
	   *
	   * @param {Matrix}   s                 The SparseMatrix instance (S)
	   * @param {Scalar}   b                 The Scalar value
	   * @param {Function} callback          The f(Aij,b) operation to invoke
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
	   */
	  var algorithm10 = function algorithm10(s, b, callback, inverse) {
	    // sparse matrix arrays
	    var avalues = s._values;
	    var aindex = s._index;
	    var aptr = s._ptr;
	    var asize = s._size;
	    var adt = s._datatype;

	    // sparse matrix cannot be a Pattern matrix
	    if (!avalues) throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // datatype
	    var dt;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // convert b to the same datatype
	      b = typed.convert(b, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // result arrays
	    var cdata = [];
	    // matrix
	    var c = new DenseMatrix({
	      data: cdata,
	      size: [rows, columns],
	      datatype: dt
	    });

	    // workspaces
	    var x = [];
	    // marks indicating we have a value in x for a given column
	    var w = [];

	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // columns mark
	      var mark = j + 1;
	      // values in j
	      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        var r = aindex[k];
	        // update workspace
	        x[r] = avalues[k];
	        w[r] = mark;
	      }
	      // loop rows
	      for (var i = 0; i < rows; i++) {
	        // initialize C on first column
	        if (j === 0) {
	          // create row array
	          cdata[i] = [];
	        }
	        // check sparse matrix has a value @ i,j
	        if (w[i] === mark) {
	          // invoke callback, update C
	          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
	        } else {
	          // dense matrix value @ i, j
	          cdata[i][j] = b;
	        }
	      }
	    }

	    // return sparse matrix
	    return c;
	  };

	  return algorithm10;
	}

	exports.name = 'algorithm10';
	exports.factory = factory;

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__(199);
	var DimensionError = __webpack_require__(202);

	var string = util.string,
	    isString = string.isString;

	function factory(type, config, load, typed) {

	  var DenseMatrix = type.DenseMatrix;

	  /**
	   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, Bij..z). 
	   * Callback function invoked MxN times.
	   *
	   * C(i,j,...z) = f(Aij..z, Bij..z)
	   *
	   * @param {Matrix}   a                 The DenseMatrix instance (A)
	   * @param {Matrix}   b                 The DenseMatrix instance (B)
	   * @param {Function} callback          The f(Aij..z,Bij..z) operation to invoke
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97658658
	   */
	  var algorithm13 = function algorithm13(a, b, callback) {
	    // a arrays
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype;
	    // b arrays
	    var bdata = b._data;
	    var bsize = b._size;
	    var bdt = b._datatype;
	    // c arrays
	    var csize = [];

	    // validate dimensions
	    if (asize.length !== bsize.length) throw new DimensionError(asize.length, bsize.length);

	    // validate each one of the dimension sizes
	    for (var s = 0; s < asize.length; s++) {
	      // must match
	      if (asize[s] !== bsize[s]) throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	      // update dimension in c
	      csize[s] = asize[s];
	    }

	    // datatype
	    var dt;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // convert b to the same datatype
	      b = typed.convert(b, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // populate cdata, iterate through dimensions
	    var cdata = csize.length > 0 ? _iterate(cf, 0, csize, csize[0], adata, bdata) : [];

	    // c matrix
	    return new DenseMatrix({
	      data: cdata,
	      size: csize,
	      datatype: dt
	    });
	  };

	  // recursive function
	  var _iterate = function _iterate(f, level, s, n, av, bv) {
	    // initialize array for this level
	    var cv = [];
	    // check we reach the last level
	    if (level === s.length - 1) {
	      // loop arrays in last level
	      for (var i = 0; i < n; i++) {
	        // invoke callback and store value
	        cv[i] = f(av[i], bv[i]);
	      }
	    } else {
	      // iterate current level
	      for (var j = 0; j < n; j++) {
	        // iterate next level
	        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv[j]);
	      }
	    }
	    return cv;
	  };

	  return algorithm13;
	}

	exports.name = 'algorithm13';
	exports.factory = factory;

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var clone = __webpack_require__(163).clone;

	function factory(type, config, load, typed) {

	  var DenseMatrix = type.DenseMatrix;

	  /**
	   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, b). 
	   * Callback function invoked MxN times.
	   *
	   * C(i,j,...z) = f(Aij..z, b)
	   *
	   * @param {Matrix}   a                 The DenseMatrix instance (A)
	   * @param {Scalar}   b                 The Scalar value
	   * @param {Function} callback          The f(Aij..z,b) operation to invoke
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Aij..z)
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97659042
	   */
	  var algorithm14 = function algorithm14(a, b, callback, inverse) {
	    // a arrays
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype;

	    // datatype
	    var dt;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // convert b to the same datatype
	      b = typed.convert(b, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // populate cdata, iterate through dimensions
	    var cdata = asize.length > 0 ? _iterate(cf, 0, asize, asize[0], adata, b, inverse) : [];

	    // c matrix
	    return new DenseMatrix({
	      data: cdata,
	      size: clone(asize),
	      datatype: dt
	    });
	  };

	  // recursive function
	  var _iterate = function _iterate(f, level, s, n, av, bv, inverse) {
	    // initialize array for this level
	    var cv = [];
	    // check we reach the last level
	    if (level === s.length - 1) {
	      // loop arrays in last level
	      for (var i = 0; i < n; i++) {
	        // invoke callback and store value
	        cv[i] = inverse ? f(bv, av[i]) : f(av[i], bv);
	      }
	    } else {
	      // iterate current level
	      for (var j = 0; j < n; j++) {
	        // iterate next level
	        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv, inverse);
	      }
	    }
	    return cv;
	  };

	  return algorithm14;
	}

	exports.name = 'algorithm14';
	exports.factory = factory;

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load, typed) {

	  var smaller = load(__webpack_require__(220));
	  var larger = load(__webpack_require__(224));

	  var oneOverLogPhi = 1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0);

	  /**
	   * Fibonacci Heap implementation, used interally for Matrix math.
	   * @class FibonacciHeap
	   * @constructor FibonacciHeap
	   */
	  function FibonacciHeap() {
	    if (!(this instanceof FibonacciHeap)) throw new SyntaxError('Constructor must be called with the new operator');

	    // initialize fields
	    this._minimum = null;
	    this._size = 0;
	  }

	  /**
	   * Attach type information
	   */
	  FibonacciHeap.prototype.type = 'FibonacciHeap';
	  FibonacciHeap.prototype.isFibonacciHeap = true;

	  /**
	   * Inserts a new data element into the heap. No heap consolidation is
	   * performed at this time, the new node is simply inserted into the root
	   * list of this heap. Running time: O(1) actual.
	   * @memberof FibonacciHeap
	   */
	  FibonacciHeap.prototype.insert = function (key, value) {
	    // create node
	    var node = {
	      key: key,
	      value: value,
	      degree: 0
	    };
	    // check we have a node in the minimum
	    if (this._minimum) {
	      // minimum node
	      var minimum = this._minimum;
	      // update left & right of node
	      node.left = minimum;
	      node.right = minimum.right;
	      minimum.right = node;
	      node.right.left = node;
	      // update minimum node in heap if needed
	      if (smaller(key, minimum.key)) {
	        // node has a smaller key, use it as minimum
	        this._minimum = node;
	      }
	    } else {
	      // set left & right
	      node.left = node;
	      node.right = node;
	      // this is the first node
	      this._minimum = node;
	    }
	    // increment number of nodes in heap
	    this._size++;
	    // return node
	    return node;
	  };

	  /**
	   * Returns the number of nodes in heap. Running time: O(1) actual.
	   * @memberof FibonacciHeap
	   */
	  FibonacciHeap.prototype.size = function () {
	    return this._size;
	  };

	  /**
	   * Removes all elements from this heap.
	   * @memberof FibonacciHeap
	   */
	  FibonacciHeap.prototype.clear = function () {
	    this._minimum = null;
	    this._size = 0;
	  };

	  /**
	   * Returns true if the heap is empty, otherwise false.
	   * @memberof FibonacciHeap
	   */
	  FibonacciHeap.prototype.isEmpty = function () {
	    return !!this._minimum;
	  };

	  /**
	   * Extracts the node with minimum key from heap. Amortized running 
	   * time: O(log n).
	   * @memberof FibonacciHeap
	   */
	  FibonacciHeap.prototype.extractMinimum = function () {
	    // node to remove
	    var node = this._minimum;
	    // check we have a minimum
	    if (node === null) return node;
	    // current minimum
	    var minimum = this._minimum;
	    // get number of children
	    var numberOfChildren = node.degree;
	    // pointer to the first child
	    var x = node.child;
	    // for each child of node do...
	    while (numberOfChildren > 0) {
	      // store node in right side
	      var tempRight = x.right;
	      // remove x from child list
	      x.left.right = x.right;
	      x.right.left = x.left;
	      // add x to root list of heap
	      x.left = minimum;
	      x.right = minimum.right;
	      minimum.right = x;
	      x.right.left = x;
	      // set Parent[x] to null
	      x.parent = null;
	      x = tempRight;
	      numberOfChildren--;
	    }
	    // remove node from root list of heap
	    node.left.right = node.right;
	    node.right.left = node.left;
	    // update minimum
	    if (node == node.right) {
	      // empty
	      minimum = null;
	    } else {
	      // update minimum
	      minimum = node.right;
	      // we need to update the pointer to the root with minimum key
	      minimum = _findMinimumNode(minimum, this._size);
	    }
	    // decrement size of heap
	    this._size--;
	    // update minimum
	    this._minimum = minimum;
	    // return node
	    return node;
	  };

	  /**
	   * Removes a node from the heap given the reference to the node. The trees
	   * in the heap will be consolidated, if necessary. This operation may fail
	   * to remove the correct element if there are nodes with key value -Infinity.
	   * Running time: O(log n) amortized.
	   * @memberof FibonacciHeap
	   */
	  FibonacciHeap.prototype.remove = function (node) {
	    // decrease key value
	    this._minimum = _decreaseKey(this._minimum, node, -1);
	    // remove the smallest
	    this.extractMinimum();
	  };

	  /**
	   * Decreases the key value for a heap node, given the new value to take on.
	   * The structure of the heap may be changed and will not be consolidated. 
	   * Running time: O(1) amortized.
	   * @memberof FibonacciHeap
	   */
	  var _decreaseKey = function _decreaseKey(minimum, node, key) {
	    // set node key
	    node.key = key;
	    // get parent node
	    var parent = node.parent;
	    if (parent && smaller(node.key, parent.key)) {
	      // remove node from parent
	      _cut(minimum, node, parent);
	      // remove all nodes from parent to the root parent
	      _cascadingCut(minimum, parent);
	    }
	    // update minimum node if needed
	    if (smaller(node.key, minimum.key)) minimum = node;
	    // return minimum
	    return minimum;
	  };

	  /**
	   * The reverse of the link operation: removes node from the child list of parent.
	   * This method assumes that min is non-null. Running time: O(1).
	   * @memberof FibonacciHeap
	   */
	  var _cut = function _cut(minimum, node, parent) {
	    // remove node from parent children and decrement Degree[parent]
	    node.left.right = node.right;
	    node.right.left = node.left;
	    parent.degree--;
	    // reset y.child if necessary
	    if (parent.child == node) parent.child = node.right;
	    // remove child if degree is 0
	    if (parent.degree === 0) parent.child = null;
	    // add node to root list of heap
	    node.left = minimum;
	    node.right = minimum.right;
	    minimum.right = node;
	    node.right.left = node;
	    // set parent[node] to null
	    node.parent = null;
	    // set mark[node] to false
	    node.mark = false;
	  };

	  /**
	   * Performs a cascading cut operation. This cuts node from its parent and then
	   * does the same for its parent, and so on up the tree.
	   * Running time: O(log n); O(1) excluding the recursion.
	   * @memberof FibonacciHeap
	   */
	  var _cascadingCut = function _cascadingCut(minimum, node) {
	    // store parent node
	    var parent = node.parent;
	    // if there's a parent...
	    if (!parent) return;
	    // if node is unmarked, set it marked
	    if (!node.mark) {
	      node.mark = true;
	    } else {
	      // it's marked, cut it from parent
	      _cut(minimum, node, parent);
	      // cut its parent as well
	      _cascadingCut(parent);
	    }
	  };

	  /**
	   * Make the first node a child of the second one. Running time: O(1) actual.
	   * @memberof FibonacciHeap
	   */
	  var _linkNodes = function _linkNodes(node, parent) {
	    // remove node from root list of heap
	    node.left.right = node.right;
	    node.right.left = node.left;
	    // make node a Child of parent
	    node.parent = parent;
	    if (!parent.child) {
	      parent.child = node;
	      node.right = node;
	      node.left = node;
	    } else {
	      node.left = parent.child;
	      node.right = parent.child.right;
	      parent.child.right = node;
	      node.right.left = node;
	    }
	    // increase degree[parent]
	    parent.degree++;
	    // set mark[node] false
	    node.mark = false;
	  };

	  var _findMinimumNode = function _findMinimumNode(minimum, size) {
	    // to find trees of the same degree efficiently we use an array of length O(log n) in which we keep a pointer to one root of each degree
	    var arraySize = Math.floor(Math.log(size) * oneOverLogPhi) + 1;
	    // create list with initial capacity
	    var array = new Array(arraySize);
	    // find the number of root nodes.
	    var numRoots = 0;
	    var x = minimum;
	    if (x) {
	      numRoots++;
	      x = x.right;
	      while (x !== minimum) {
	        numRoots++;
	        x = x.right;
	      }
	    }
	    // vars
	    var y;
	    // For each node in root list do...
	    while (numRoots > 0) {
	      // access this node's degree..
	      var d = x.degree;
	      // get next node
	      var next = x.right;
	      // check if there is a node already in array with the same degree
	      while (true) {
	        // get node with the same degree is any
	        y = array[d];
	        if (!y) break;
	        // make one node with the same degree a child of the other, do this based on the key value.
	        if (larger(x.key, y.key)) {
	          var temp = y;
	          y = x;
	          x = temp;
	        }
	        // make y a child of x
	        _linkNodes(y, x);
	        // we have handled this degree, go to next one.
	        array[d] = null;
	        d++;
	      }
	      // save this node for later when we might encounter another of the same degree.
	      array[d] = x;
	      // move forward through list.
	      x = next;
	      numRoots--;
	    }
	    // Set min to null (effectively losing the root list) and reconstruct the root list from the array entries in array[].
	    minimum = null;
	    // loop nodes in array
	    for (var i = 0; i < arraySize; i++) {
	      // get current node
	      y = array[i];
	      if (!y) continue;
	      // check if we have a linked list
	      if (minimum) {
	        // First remove node from root list.
	        y.left.right = y.right;
	        y.right.left = y.left;
	        // now add to root list, again.
	        y.left = minimum;
	        y.right = minimum.right;
	        minimum.right = y;
	        y.right.left = y;
	        // check if this is a new min.
	        if (smaller(y.key, minimum.key)) minimum = y;
	      } else minimum = y;
	    }
	    return minimum;
	  };

	  return FibonacciHeap;
	}

	exports.name = 'FibonacciHeap';
	exports.path = 'type';
	exports.factory = factory;

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var nearlyEqual = __webpack_require__(166).nearlyEqual;
	var bigNearlyEqual = __webpack_require__(209);

	function factory(type, config, load, typed) {

	  var matrix = load(__webpack_require__(212));

	  var algorithm03 = load(__webpack_require__(221));
	  var algorithm07 = load(__webpack_require__(222));
	  var algorithm12 = load(__webpack_require__(223));
	  var algorithm13 = load(__webpack_require__(217));
	  var algorithm14 = load(__webpack_require__(218));

	  var latex = __webpack_require__(192);

	  /**
	   * Test whether value x is smaller than y.
	   *
	   * The function returns true when x is smaller than y and the relative
	   * difference between x and y is smaller than the configured epsilon. The
	   * function cannot be used to compare values smaller than approximately 2.22e-16.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.smaller(x, y)
	   *
	   * Examples:
	   *
	   *    math.smaller(2, 3);            // returns true
	   *    math.smaller(5, 2 * 2);        // returns false
	   *
	   *    var a = math.unit('5 cm');
	   *    var b = math.unit('2 inch');
	   *    math.smaller(a, b);            // returns true
	   *
	   * See also:
	   *
	   *    equal, unequal, smallerEq, smaller, smallerEq, compare
	   *
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
	   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false
	   */
	  var smaller = typed('smaller', {

	    'boolean, boolean': function booleanBoolean(x, y) {
	      return x < y;
	    },

	    'number, number': function numberNumber(x, y) {
	      return x < y && !nearlyEqual(x, y, config.epsilon);
	    },

	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.lt(y) && !bigNearlyEqual(x, y, config.epsilon);
	    },

	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.compare(y) === -1;
	    },

	    'Complex, Complex': function ComplexComplex(x, y) {
	      throw new TypeError('No ordering relation is defined for complex numbers');
	    },

	    'Unit, Unit': function UnitUnit(x, y) {
	      if (!x.equalBase(y)) {
	        throw new Error('Cannot compare units with different base');
	      }
	      return smaller(x.value, y.value);
	    },

	    'string, string': function stringString(x, y) {
	      return x < y;
	    },

	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm07(x, y, smaller);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm03(y, x, smaller, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm03(x, y, smaller, false);
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, smaller);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return smaller(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return smaller(matrix(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return smaller(x, matrix(y));
	    },

	    'Matrix, any': function MatrixAny(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm12(x, y, smaller, false);
	          break;
	        default:
	          c = algorithm14(x, y, smaller, false);
	          break;
	      }
	      return c;
	    },

	    'any, Matrix': function anyMatrix(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, smaller, true);
	          break;
	        default:
	          c = algorithm14(y, x, smaller, true);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, smaller, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, smaller, true).valueOf();
	    }
	  });

	  smaller.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['smaller'] + '${args[1]}\\right)'
	  };

	  return smaller;
	}

	exports.name = 'smaller';
	exports.factory = factory;

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var DimensionError = __webpack_require__(202);

	function factory(type, config, load, typed) {

	  var DenseMatrix = type.DenseMatrix;

	  /**
	   * Iterates over SparseMatrix items and invokes the callback function f(Dij, Sij).
	   * Callback function invoked M*N times.
	   *
	   *
	   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
	   * C(i,j) = ┤
	   *          └  f(Dij, 0)    ; otherwise
	   *
	   *
	   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
	   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (C)
	   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
	   */
	  var algorithm03 = function algorithm03(denseMatrix, sparseMatrix, callback, inverse) {
	    // dense matrix arrays
	    var adata = denseMatrix._data;
	    var asize = denseMatrix._size;
	    var adt = denseMatrix._datatype;
	    // sparse matrix arrays
	    var bvalues = sparseMatrix._values;
	    var bindex = sparseMatrix._index;
	    var bptr = sparseMatrix._ptr;
	    var bsize = sparseMatrix._size;
	    var bdt = sparseMatrix._datatype;

	    // validate dimensions
	    if (asize.length !== bsize.length) throw new DimensionError(asize.length, bsize.length);

	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');

	    // sparse matrix cannot be a Pattern matrix
	    if (!bvalues) throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // datatype
	    var dt;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // result (DenseMatrix)
	    var cdata = [];

	    // initialize dense matrix
	    for (var z = 0; z < rows; z++) {
	      // initialize row
	      cdata[z] = [];
	    }

	    // workspace
	    var x = [];
	    // marks indicating we have a value in x for a given column
	    var w = [];

	    // loop columns in b
	    for (var j = 0; j < columns; j++) {
	      // column mark
	      var mark = j + 1;
	      // values in column j
	      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        var i = bindex[k];
	        // update workspace
	        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
	        w[i] = mark;
	      }
	      // process workspace
	      for (var y = 0; y < rows; y++) {
	        // check we have a calculated value for current row
	        if (w[y] === mark) {
	          // use calculated value
	          cdata[y][j] = x[y];
	        } else {
	          // calculate value
	          cdata[y][j] = inverse ? cf(zero, adata[y][j]) : cf(adata[y][j], zero);
	        }
	      }
	    }

	    // return dense matrix
	    return new DenseMatrix({
	      data: cdata,
	      size: [rows, columns],
	      datatype: dt
	    });
	  };

	  return algorithm03;
	}

	exports.name = 'algorithm03';
	exports.factory = factory;

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var DimensionError = __webpack_require__(202);

	function factory(type, config, load, typed) {

	  var DenseMatrix = type.DenseMatrix;

	  /**
	   * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij). 
	   * Callback function invoked MxN times.
	   *
	   * C(i,j) = f(Aij, Bij)
	   *
	   * @param {Matrix}   a                 The SparseMatrix instance (A)
	   * @param {Matrix}   b                 The SparseMatrix instance (B)
	   * @param {Function} callback          The f(Aij,Bij) operation to invoke
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
	   */
	  var algorithm07 = function algorithm07(a, b, callback) {
	    // sparse matrix arrays
	    var asize = a._size;
	    var adt = a._datatype;
	    // sparse matrix arrays
	    var bsize = b._size;
	    var bdt = b._datatype;

	    // validate dimensions
	    if (asize.length !== bsize.length) throw new DimensionError(asize.length, bsize.length);

	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // datatype
	    var dt;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // vars
	    var i, j;

	    // result arrays
	    var cdata = [];
	    // initialize c
	    for (i = 0; i < rows; i++) {
	      cdata[i] = [];
	    } // matrix
	    var c = new DenseMatrix({
	      data: cdata,
	      size: [rows, columns],
	      datatype: dt
	    });

	    // workspaces
	    var xa = [];
	    var xb = [];
	    // marks indicating we have a value in x for a given column
	    var wa = [];
	    var wb = [];

	    // loop columns
	    for (j = 0; j < columns; j++) {
	      // columns mark
	      var mark = j + 1;
	      // scatter the values of A(:,j) into workspace
	      _scatter(a, j, wa, xa, mark);
	      // scatter the values of B(:,j) into workspace
	      _scatter(b, j, wb, xb, mark);
	      // loop rows
	      for (i = 0; i < rows; i++) {
	        // matrix values @ i,j
	        var va = wa[i] === mark ? xa[i] : zero;
	        var vb = wb[i] === mark ? xb[i] : zero;
	        // invoke callback
	        cdata[i][j] = cf(va, vb);
	      }
	    }

	    // return sparse matrix
	    return c;
	  };

	  var _scatter = function _scatter(m, j, w, x, mark) {
	    // a arrays
	    var values = m._values;
	    var index = m._index;
	    var ptr = m._ptr;
	    // loop values in column j
	    for (var k = ptr[j], k1 = ptr[j + 1]; k < k1; k++) {
	      // row
	      var i = index[k];
	      // update workspace
	      w[i] = mark;
	      x[i] = values[k];
	    }
	  };

	  return algorithm07;
	}

	exports.name = 'algorithm07';
	exports.factory = factory;

/***/ },
/* 223 */
/***/ function(module, exports) {

	'use strict';

	function factory(type, config, load, typed) {

	  var DenseMatrix = type.DenseMatrix;

	  /**
	   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b). 
	   * Callback function invoked MxN times.
	   *
	   *
	   *          ┌  f(Sij, b)  ; S(i,j) !== 0
	   * C(i,j) = ┤  
	   *          └  f(0, b)    ; otherwise
	   *
	   *
	   * @param {Matrix}   s                 The SparseMatrix instance (S)
	   * @param {Scalar}   b                 The Scalar value
	   * @param {Function} callback          The f(Aij,b) operation to invoke
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
	   */
	  var algorithm12 = function algorithm12(s, b, callback, inverse) {
	    // sparse matrix arrays
	    var avalues = s._values;
	    var aindex = s._index;
	    var aptr = s._ptr;
	    var asize = s._size;
	    var adt = s._datatype;

	    // sparse matrix cannot be a Pattern matrix
	    if (!avalues) throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // datatype
	    var dt;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // convert b to the same datatype
	      b = typed.convert(b, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // result arrays
	    var cdata = [];
	    // matrix
	    var c = new DenseMatrix({
	      data: cdata,
	      size: [rows, columns],
	      datatype: dt
	    });

	    // workspaces
	    var x = [];
	    // marks indicating we have a value in x for a given column
	    var w = [];

	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // columns mark
	      var mark = j + 1;
	      // values in j
	      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        var r = aindex[k];
	        // update workspace
	        x[r] = avalues[k];
	        w[r] = mark;
	      }
	      // loop rows
	      for (var i = 0; i < rows; i++) {
	        // initialize C on first column
	        if (j === 0) {
	          // create row array
	          cdata[i] = [];
	        }
	        // check sparse matrix has a value @ i,j
	        if (w[i] === mark) {
	          // invoke callback, update C
	          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
	        } else {
	          // dense matrix value @ i, j
	          cdata[i][j] = inverse ? cf(b, 0) : cf(0, b);
	        }
	      }
	    }

	    // return sparse matrix
	    return c;
	  };

	  return algorithm12;
	}

	exports.name = 'algorithm12';
	exports.factory = factory;

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var nearlyEqual = __webpack_require__(166).nearlyEqual;
	var bigNearlyEqual = __webpack_require__(209);

	function factory(type, config, load, typed) {

	  var matrix = load(__webpack_require__(212));

	  var algorithm03 = load(__webpack_require__(221));
	  var algorithm07 = load(__webpack_require__(222));
	  var algorithm12 = load(__webpack_require__(223));
	  var algorithm13 = load(__webpack_require__(217));
	  var algorithm14 = load(__webpack_require__(218));

	  var latex = __webpack_require__(192);

	  /**
	   * Test whether value x is larger than y.
	   *
	   * The function returns true when x is larger than y and the relative
	   * difference between x and y is larger than the configured epsilon. The
	   * function cannot be used to compare values smaller than approximately 2.22e-16.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.larger(x, y)
	   *
	   * Examples:
	   *
	   *    math.larger(2, 3);             // returns false
	   *    math.larger(5, 2 + 2);         // returns true
	   *
	   *    var a = math.unit('5 cm');
	   *    var b = math.unit('2 inch');
	   *    math.larger(a, b);             // returns false
	   *
	   * See also:
	   *
	   *    equal, unequal, smaller, smallerEq, largerEq, compare
	   *
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
	   * @return {boolean | Array | Matrix} Returns true when the x is larger than y, else returns false
	   */
	  var larger = typed('larger', {

	    'boolean, boolean': function booleanBoolean(x, y) {
	      return x > y;
	    },

	    'number, number': function numberNumber(x, y) {
	      return x > y && !nearlyEqual(x, y, config.epsilon);
	    },

	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.gt(y) && !bigNearlyEqual(x, y, config.epsilon);
	    },

	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.compare(y) === 1;
	    },

	    'Complex, Complex': function ComplexComplex() {
	      throw new TypeError('No ordering relation is defined for complex numbers');
	    },

	    'Unit, Unit': function UnitUnit(x, y) {
	      if (!x.equalBase(y)) {
	        throw new Error('Cannot compare units with different base');
	      }
	      return larger(x.value, y.value);
	    },

	    'string, string': function stringString(x, y) {
	      return x > y;
	    },

	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm07(x, y, larger);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm03(y, x, larger, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm03(x, y, larger, false);
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, larger);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return larger(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return larger(matrix(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return larger(x, matrix(y));
	    },

	    'Matrix, any': function MatrixAny(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm12(x, y, larger, false);
	          break;
	        default:
	          c = algorithm14(x, y, larger, false);
	          break;
	      }
	      return c;
	    },

	    'any, Matrix': function anyMatrix(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, larger, true);
	          break;
	        default:
	          c = algorithm14(y, x, larger, true);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, larger, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, larger, true).valueOf();
	    }
	  });

	  larger.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['larger'] + '${args[1]}\\right)'
	  };

	  return larger;
	}

	exports.name = 'larger';
	exports.factory = factory;

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__(199);

	var string = util.string;
	var object = util.object;

	var isArray = Array.isArray;
	var isString = string.isString;

	function factory(type, config, load) {

	  var DenseMatrix = load(__webpack_require__(206));

	  var smaller = load(__webpack_require__(220));

	  function ImmutableDenseMatrix(data, datatype) {
	    if (!(this instanceof ImmutableDenseMatrix)) throw new SyntaxError('Constructor must be called with the new operator');
	    if (datatype && !isString(datatype)) throw new Error('Invalid datatype: ' + datatype);

	    if (data && data.isMatrix === true || isArray(data)) {
	      // use DenseMatrix implementation
	      var matrix = new DenseMatrix(data, datatype);
	      // internal structures
	      this._data = matrix._data;
	      this._size = matrix._size;
	      this._datatype = matrix._datatype;
	      this._min = null;
	      this._max = null;
	    } else if (data && isArray(data.data) && isArray(data.size)) {
	      // initialize fields from JSON representation
	      this._data = data.data;
	      this._size = data.size;
	      this._datatype = data.datatype;
	      this._min = typeof data.min !== 'undefined' ? data.min : null;
	      this._max = typeof data.max !== 'undefined' ? data.max : null;
	    } else if (data) {
	      // unsupported type
	      throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');
	    } else {
	      // nothing provided
	      this._data = [];
	      this._size = [0];
	      this._datatype = datatype;
	      this._min = null;
	      this._max = null;
	    }
	  }

	  ImmutableDenseMatrix.prototype = new DenseMatrix();

	  /**
	   * Attach type information
	   */
	  ImmutableDenseMatrix.prototype.type = 'ImmutableDenseMatrix';
	  ImmutableDenseMatrix.prototype.isImmutableDenseMatrix = true;

	  /**
	   * Get a subset of the matrix, or replace a subset of the matrix.
	   *
	   * Usage:
	   *     var subset = matrix.subset(index)               // retrieve subset
	   *     var value = matrix.subset(index, replacement)   // replace subset
	   *
	   * @param {Index} index
	   * @param {Array | ImmutableDenseMatrix | *} [replacement]
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be filled with zeros.
	   */
	  ImmutableDenseMatrix.prototype.subset = function (index) {
	    switch (arguments.length) {
	      case 1:
	        // use base implementation
	        var m = DenseMatrix.prototype.subset.call(this, index);
	        // check result is a matrix
	        if (m.isMatrix) {
	          // return immutable matrix
	          return new ImmutableDenseMatrix({
	            data: m._data,
	            size: m._size,
	            datatype: m._datatype
	          });
	        }
	        return m;

	      // intentional fall through
	      case 2:
	      case 3:
	        throw new Error('Cannot invoke set subset on an Immutable Matrix instance');

	      default:
	        throw new SyntaxError('Wrong number of arguments');
	    }
	  };

	  /**
	   * Replace a single element in the matrix.
	   * @param {Number[]} index   Zero-based index
	   * @param {*} value
	   * @param {*} [defaultValue]        Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be left undefined.
	   * @return {ImmutableDenseMatrix} self
	   */
	  ImmutableDenseMatrix.prototype.set = function () {
	    throw new Error('Cannot invoke set on an Immutable Matrix instance');
	  };

	  /**
	   * Resize the matrix to the given size. Returns a copy of the matrix when
	   * `copy=true`, otherwise return the matrix itself (resize in place).
	   *
	   * @param {Number[]} size           The new size the matrix should have.
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
	   *                                  If not provided, the matrix elements will
	   *                                  be filled with zeros.
	   * @param {boolean} [copy]          Return a resized copy of the matrix
	   *
	   * @return {Matrix}                 The resized matrix
	   */
	  ImmutableDenseMatrix.prototype.resize = function () {
	    throw new Error('Cannot invoke resize on an Immutable Matrix instance');
	  };

	  /**
	   * Create a clone of the matrix
	   * @return {ImmutableDenseMatrix} clone
	   */
	  ImmutableDenseMatrix.prototype.clone = function () {
	    var m = new ImmutableDenseMatrix({
	      data: object.clone(this._data),
	      size: object.clone(this._size),
	      datatype: this._datatype
	    });
	    return m;
	  };

	  /**
	   * Get a JSON representation of the matrix
	   * @returns {Object}
	   */
	  ImmutableDenseMatrix.prototype.toJSON = function () {
	    return {
	      mathjs: 'ImmutableDenseMatrix',
	      data: this._data,
	      size: this._size,
	      datatype: this._datatype
	    };
	  };

	  /**
	   * Generate a matrix from a JSON object
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "ImmutableDenseMatrix", data: [], size: []}`,
	   *                       where mathjs is optional
	   * @returns {ImmutableDenseMatrix}
	   */
	  ImmutableDenseMatrix.fromJSON = function (json) {
	    return new ImmutableDenseMatrix(json);
	  };

	  /**
	   * Swap rows i and j in Matrix.
	   *
	   * @param {Number} i       Matrix row index 1
	   * @param {Number} j       Matrix row index 2
	   *
	   * @return {Matrix}        The matrix reference
	   */
	  ImmutableDenseMatrix.prototype.swapRows = function () {
	    throw new Error('Cannot invoke swapRows on an Immutable Matrix instance');
	  };

	  /**
	   * Calculate the minimum value in the set
	   * @return {Number | undefined} min
	   */
	  ImmutableDenseMatrix.prototype.min = function () {
	    // check min has been calculated before
	    if (this._min === null) {
	      // minimum
	      var m = null;
	      // compute min
	      this.forEach(function (v) {
	        if (m === null || smaller(v, m)) m = v;
	      });
	      this._min = m !== null ? m : undefined;
	    }
	    return this._min;
	  };

	  /**
	   * Calculate the maximum value in the set
	   * @return {Number | undefined} max
	   */
	  ImmutableDenseMatrix.prototype.max = function () {
	    // check max has been calculated before
	    if (this._max === null) {
	      // maximum
	      var m = null;
	      // compute max
	      this.forEach(function (v) {
	        if (m === null || smaller(m, v)) m = v;
	      });
	      this._max = m !== null ? m : undefined;
	    }
	    return this._max;
	  };

	  // exports
	  return ImmutableDenseMatrix;
	}

	exports.name = 'ImmutableDenseMatrix';
	exports.path = 'type';
	exports.factory = factory;

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var clone = __webpack_require__(163).clone;
	var isInteger = __webpack_require__(166).isInteger;

	function factory(type) {

	  /**
	   * Create an index. An Index can store ranges and sets for multiple dimensions.
	   * Matrix.get, Matrix.set, and math.subset accept an Index as input.
	   *
	   * Usage:
	   *     var index = new Index(range1, range2, matrix1, array1, ...);
	   *
	   * Where each parameter can be any of:
	   *     A number
	   *     A string (containing a name of an object property)
	   *     An instance of Range
	   *     An Array with the Set values
	   *     A Matrix with the Set values
	   *
	   * The parameters start, end, and step must be integer numbers.
	   *
	   * @class Index
	   * @Constructor Index
	   * @param {...*} ranges
	   */
	  function Index(ranges) {
	    if (!(this instanceof Index)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    this._dimensions = [];
	    this._isScalar = true;

	    for (var i = 0, ii = arguments.length; i < ii; i++) {
	      var arg = arguments[i];

	      if (arg && arg.isRange === true) {
	        this._dimensions.push(arg);
	        this._isScalar = false;
	      } else if (arg && (Array.isArray(arg) || arg.isMatrix === true)) {
	        // create matrix
	        var m = _createImmutableMatrix(arg.valueOf());
	        this._dimensions.push(m);
	        // size
	        var size = m.size();
	        // scalar
	        if (size.length !== 1 || size[0] !== 1) {
	          this._isScalar = false;
	        }
	      } else if (typeof arg === 'number') {
	        this._dimensions.push(_createImmutableMatrix([arg]));
	      } else if (typeof arg === 'string') {
	        // object property (arguments.count should be 1)
	        this._dimensions.push(arg);
	      }
	      // TODO: implement support for wildcard '*'
	      else {
	          throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');
	        }
	    }
	  }

	  /**
	   * Attach type information
	   */
	  Index.prototype.type = 'Index';
	  Index.prototype.isIndex = true;

	  function _createImmutableMatrix(arg) {
	    // loop array elements
	    for (var i = 0, l = arg.length; i < l; i++) {
	      if (typeof arg[i] !== 'number' || !isInteger(arg[i])) {
	        throw new TypeError('Index parameters must be positive integer numbers');
	      }
	    }
	    // create matrix
	    return new type.ImmutableDenseMatrix(arg);
	  }

	  /**
	   * Create a clone of the index
	   * @memberof Index
	   * @return {Index} clone
	   */
	  Index.prototype.clone = function () {
	    var index = new Index();
	    index._dimensions = clone(this._dimensions);
	    index._isScalar = this._isScalar;
	    return index;
	  };

	  /**
	   * Create an index from an array with ranges/numbers
	   * @memberof Index
	   * @param {Array.<Array | number>} ranges
	   * @return {Index} index
	   * @private
	   */
	  Index.create = function (ranges) {
	    var index = new Index();
	    Index.apply(index, ranges);
	    return index;
	  };

	  /**
	   * Retrieve the size of the index, the number of elements for each dimension.
	   * @memberof Index
	   * @returns {number[]} size
	   */
	  Index.prototype.size = function () {
	    var size = [];

	    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
	      var d = this._dimensions[i];
	      size[i] = typeof d === 'string' ? 1 : d.size()[0];
	    }

	    return size;
	  };

	  /**
	   * Get the maximum value for each of the indexes ranges.
	   * @memberof Index
	   * @returns {number[]} max
	   */
	  Index.prototype.max = function () {
	    var values = [];

	    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
	      var range = this._dimensions[i];
	      values[i] = typeof range === 'string' ? range : range.max();
	    }

	    return values;
	  };

	  /**
	   * Get the minimum value for each of the indexes ranges.
	   * @memberof Index
	   * @returns {number[]} min
	   */
	  Index.prototype.min = function () {
	    var values = [];

	    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
	      var range = this._dimensions[i];
	      values[i] = typeof range === 'string' ? range : range.min();
	    }

	    return values;
	  };

	  /**
	   * Loop over each of the ranges of the index
	   * @memberof Index
	   * @param {Function} callback   Called for each range with a Range as first
	   *                              argument, the dimension as second, and the
	   *                              index object as third.
	   */
	  Index.prototype.forEach = function (callback) {
	    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
	      callback(this._dimensions[i], i, this);
	    }
	  };

	  /**
	   * Retrieve the dimension for the given index
	   * @memberof Index
	   * @param {Number} dim                  Number of the dimension
	   * @returns {Range | null} range
	   */
	  Index.prototype.dimension = function (dim) {
	    return this._dimensions[dim] || null;
	  };

	  /**
	   * Test whether this index contains an object property
	   * @returns {boolean} Returns true if the index is an object property
	   */
	  Index.prototype.isObjectProperty = function () {
	    return this._dimensions.length === 1 && typeof this._dimensions[0] === 'string';
	  };

	  /**
	   * Returns the object property name when the Index holds a single object property,
	   * else returns null
	   * @returns {string | null}
	   */
	  Index.prototype.getObjectProperty = function () {
	    return this.isObjectProperty() ? this._dimensions[0] : null;
	  };

	  /**
	   * Test whether this index contains only a single value.
	   *
	   * This is the case when the index is created with only scalar values as ranges,
	   * not for ranges resolving into a single value.
	   * @memberof Index
	   * @return {boolean} isScalar
	   */
	  Index.prototype.isScalar = function () {
	    return this._isScalar;
	  };

	  /**
	   * Expand the Index into an array.
	   * For example new Index([0,3], [2,7]) returns [[0,1,2], [2,3,4,5,6]]
	   * @memberof Index
	   * @returns {Array} array
	   */
	  Index.prototype.toArray = function () {
	    var array = [];
	    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
	      var dimension = this._dimensions[i];
	      array.push(typeof dimension === 'string' ? dimension : dimension.toArray());
	    }
	    return array;
	  };

	  /**
	   * Get the primitive value of the Index, a two dimensional array.
	   * Equivalent to Index.toArray().
	   * @memberof Index
	   * @returns {Array} array
	   */
	  Index.prototype.valueOf = Index.prototype.toArray;

	  /**
	   * Get the string representation of the index, for example '[2:6]' or '[0:2:10, 4:7, [1,2,3]]'
	   * @memberof Index
	   * @returns {String} str
	   */
	  Index.prototype.toString = function () {
	    var strings = [];

	    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
	      var dimension = this._dimensions[i];
	      if (typeof dimension === 'string') {
	        strings.push(JSON.stringify(dimension));
	      } else {
	        strings.push(dimension.toString());
	      }
	    }

	    return '[' + strings.join(', ') + ']';
	  };

	  /**
	   * Get a JSON representation of the Index
	   * @memberof Index
	   * @returns {Object} Returns a JSON object structured as:
	   *                   `{"mathjs": "Index", "ranges": [{"mathjs": "Range", start: 0, end: 10, step:1}, ...]}`
	   */
	  Index.prototype.toJSON = function () {
	    return {
	      mathjs: 'Index',
	      dimensions: this._dimensions
	    };
	  };

	  /**
	   * Instantiate an Index from a JSON object
	   * @memberof Index
	   * @param {Object} json A JSON object structured as:
	   *                     `{"mathjs": "Index", "dimensions": [{"mathjs": "Range", start: 0, end: 10, step:1}, ...]}`
	   * @return {Index}
	   */
	  Index.fromJSON = function (json) {
	    return Index.create(json.dimensions);
	  };

	  return Index;
	}

	exports.name = 'Index';
	exports.path = 'type';
	exports.factory = factory;

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var number = __webpack_require__(166);

	function factory(type, config, load, typed) {
	  /**
	   * Create a range. A range has a start, step, and end, and contains functions
	   * to iterate over the range.
	   *
	   * A range can be constructed as:
	   *     var range = new Range(start, end);
	   *     var range = new Range(start, end, step);
	   *
	   * To get the result of the range:
	   *     range.forEach(function (x) {
	   *         console.log(x);
	   *     });
	   *     range.map(function (x) {
	   *         return math.sin(x);
	   *     });
	   *     range.toArray();
	   *
	   * Example usage:
	   *     var c = new Range(2, 6);         // 2:1:5
	   *     c.toArray();                     // [2, 3, 4, 5]
	   *     var d = new Range(2, -3, -1);    // 2:-1:-2
	   *     d.toArray();                     // [2, 1, 0, -1, -2]
	   *
	   * @class Range
	   * @constructor Range
	   * @param {number} start  included lower bound
	   * @param {number} end    excluded upper bound
	   * @param {number} [step] step size, default value is 1
	   */
	  function Range(start, end, step) {
	    if (!(this instanceof Range)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    if (start != null) {
	      if (start.isBigNumber === true) start = start.toNumber();else if (typeof start !== 'number') throw new TypeError('Parameter start must be a number');
	    }
	    if (end != null) {
	      if (end.isBigNumber === true) end = end.toNumber();else if (typeof end !== 'number') throw new TypeError('Parameter end must be a number');
	    }
	    if (step != null) {
	      if (step.isBigNumber === true) step = step.toNumber();else if (typeof step !== 'number') throw new TypeError('Parameter step must be a number');
	    }

	    this.start = start != null ? parseFloat(start) : 0;
	    this.end = end != null ? parseFloat(end) : 0;
	    this.step = step != null ? parseFloat(step) : 1;
	  }

	  /**
	   * Attach type information
	   */
	  Range.prototype.type = 'Range';
	  Range.prototype.isRange = true;

	  /**
	   * Parse a string into a range,
	   * The string contains the start, optional step, and end, separated by a colon.
	   * If the string does not contain a valid range, null is returned.
	   * For example str='0:2:11'.
	   * @memberof Range
	   * @param {string} str
	   * @return {Range | null} range
	   */
	  Range.parse = function (str) {
	    if (typeof str !== 'string') {
	      return null;
	    }

	    var args = str.split(':');
	    var nums = args.map(function (arg) {
	      return parseFloat(arg);
	    });

	    var invalid = nums.some(function (num) {
	      return isNaN(num);
	    });
	    if (invalid) {
	      return null;
	    }

	    switch (nums.length) {
	      case 2:
	        return new Range(nums[0], nums[1]);
	      case 3:
	        return new Range(nums[0], nums[2], nums[1]);
	      default:
	        return null;
	    }
	  };

	  /**
	   * Create a clone of the range
	   * @return {Range} clone
	   */
	  Range.prototype.clone = function () {
	    return new Range(this.start, this.end, this.step);
	  };

	  /**
	   * Retrieve the size of the range.
	   * Returns an array containing one number, the number of elements in the range.
	   * @memberof Range
	   * @returns {number[]} size
	   */
	  Range.prototype.size = function () {
	    var len = 0,
	        start = this.start,
	        step = this.step,
	        end = this.end,
	        diff = end - start;

	    if (number.sign(step) == number.sign(diff)) {
	      len = Math.ceil(diff / step);
	    } else if (diff == 0) {
	      len = 0;
	    }

	    if (isNaN(len)) {
	      len = 0;
	    }
	    return [len];
	  };

	  /**
	   * Calculate the minimum value in the range
	   * @memberof Range
	   * @return {number | undefined} min
	   */
	  Range.prototype.min = function () {
	    var size = this.size()[0];

	    if (size > 0) {
	      if (this.step > 0) {
	        // positive step
	        return this.start;
	      } else {
	        // negative step
	        return this.start + (size - 1) * this.step;
	      }
	    } else {
	      return undefined;
	    }
	  };

	  /**
	   * Calculate the maximum value in the range
	   * @memberof Range
	   * @return {number | undefined} max
	   */
	  Range.prototype.max = function () {
	    var size = this.size()[0];

	    if (size > 0) {
	      if (this.step > 0) {
	        // positive step
	        return this.start + (size - 1) * this.step;
	      } else {
	        // negative step
	        return this.start;
	      }
	    } else {
	      return undefined;
	    }
	  };

	  /**
	   * Execute a callback function for each value in the range.
	   * @memberof Range
	   * @param {function} callback   The callback method is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Range being traversed.
	   */
	  Range.prototype.forEach = function (callback) {
	    var x = this.start;
	    var step = this.step;
	    var end = this.end;
	    var i = 0;

	    if (step > 0) {
	      while (x < end) {
	        callback(x, [i], this);
	        x += step;
	        i++;
	      }
	    } else if (step < 0) {
	      while (x > end) {
	        callback(x, [i], this);
	        x += step;
	        i++;
	      }
	    }
	  };

	  /**
	   * Execute a callback function for each value in the Range, and return the
	   * results as an array
	   * @memberof Range
	   * @param {function} callback   The callback method is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   * @returns {Array} array
	   */
	  Range.prototype.map = function (callback) {
	    var array = [];
	    this.forEach(function (value, index, obj) {
	      array[index[0]] = callback(value, index, obj);
	    });
	    return array;
	  };

	  /**
	   * Create an Array with a copy of the Ranges data
	   * @memberof Range
	   * @returns {Array} array
	   */
	  Range.prototype.toArray = function () {
	    var array = [];
	    this.forEach(function (value, index) {
	      array[index[0]] = value;
	    });
	    return array;
	  };

	  /**
	   * Get the primitive value of the Range, a one dimensional array
	   * @memberof Range
	   * @returns {Array} array
	   */
	  Range.prototype.valueOf = function () {
	    // TODO: implement a caching mechanism for range.valueOf()
	    return this.toArray();
	  };

	  /**
	   * Get a string representation of the range, with optional formatting options.
	   * Output is formatted as 'start:step:end', for example '2:6' or '0:0.2:11'
	   * @memberof Range
	   * @param {Object | number | function} [options]  Formatting options. See
	   *                                                lib/utils/number:format for a
	   *                                                description of the available
	   *                                                options.
	   * @returns {string} str
	   */
	  Range.prototype.format = function (options) {
	    var str = number.format(this.start, options);

	    if (this.step != 1) {
	      str += ':' + number.format(this.step, options);
	    }
	    str += ':' + number.format(this.end, options);
	    return str;
	  };

	  /**
	   * Get a string representation of the range.
	   * @memberof Range
	   * @returns {string}
	   */
	  Range.prototype.toString = function () {
	    return this.format();
	  };

	  /**
	   * Get a JSON representation of the range
	   * @memberof Range
	   * @returns {Object} Returns a JSON object structured as:
	   *                   `{"mathjs": "Range", "start": 2, "end": 4, "step": 1}`
	   */
	  Range.prototype.toJSON = function () {
	    return {
	      mathjs: 'Range',
	      start: this.start,
	      end: this.end,
	      step: this.step
	    };
	  };

	  /**
	   * Instantiate a Range from a JSON object
	   * @memberof Range
	   * @param {Object} json A JSON object structured as:
	   *                      `{"mathjs": "Range", "start": 2, "end": 4, "step": 1}`
	   * @return {Range}
	   */
	  Range.fromJSON = function (json) {
	    return new Range(json.start, json.end, json.step);
	  };

	  return Range;
	}

	exports.name = 'Range';
	exports.path = 'type';
	exports.factory = factory;

/***/ },
/* 228 */
/***/ function(module, exports) {

	'use strict';

	function factory(type, config, load, typed) {
	  /**
	   * Create an index. An Index can store ranges having start, step, and end
	   * for multiple dimensions.
	   * Matrix.get, Matrix.set, and math.subset accept an Index as input.
	   *
	   * Syntax:
	   *
	   *     math.index(range1, range2, ...)
	   *
	   * Where each range can be any of:
	   *
	   * - A number
	   * - A string for getting/setting an object property
	   * - An instance of `Range`
	   * - A one-dimensional Array or a Matrix with numbers
	   *
	   * Indexes must be zero-based, integer numbers.
	   *
	   * Examples:
	   *
	   *    var math = math.js
	   *
	   *    var b = [1, 2, 3, 4, 5];
	   *    math.subset(b, math.index([1, 2, 3]));     // returns [2, 3, 4]
	   *
	   *    var a = math.matrix([[1, 2], [3, 4]]);
	   *    a.subset(math.index(0, 1));             // returns 2
	   *
	   * See also:
	   *
	   *    bignumber, boolean, complex, matrix, number, string, unit
	   *
	   * @param {...*} ranges   Zero or more ranges or numbers.
	   * @return {Index}        Returns the created index
	   */
	  return typed('index', {
	    '...number | string | BigNumber | Range | Array | Matrix': function numberStringBigNumberRangeArrayMatrix(args) {
	      var ranges = args.map(function (arg) {
	        if (arg && arg.isBigNumber === true) {
	          return arg.toNumber(); // convert BigNumber to Number
	        } else if (arg && (Array.isArray(arg) || arg.isMatrix === true)) {
	          return arg.map(function (elem) {
	            // convert BigNumber to Number
	            return elem && elem.isBigNumber === true ? elem.toNumber() : elem;
	          });
	        } else {
	          return arg;
	        }
	      });

	      var res = new type.Index();
	      type.Index.apply(res, ranges);
	      return res;
	    }
	  });
	}

	exports.name = 'index';
	exports.factory = factory;

/***/ },
/* 229 */
/***/ function(module, exports) {

	'use strict';

	function factory(type, config, load, typed) {

	  var SparseMatrix = type.SparseMatrix;

	  /**
	   * Create a Sparse Matrix. The function creates a new `math.type.Matrix` object from
	   * an `Array`. A Matrix has utility functions to manipulate the data in the
	   * matrix, like getting the size and getting or setting values in the matrix.
	   *
	   * Syntax:
	   *
	   *    math.sparse()               // creates an empty sparse matrix.
	   *    math.sparse(data)           // creates a sparse matrix with initial data.
	   *    math.sparse(data, 'number') // creates a sparse matrix with initial data, number datatype.
	   *
	   * Examples:
	   *
	   *    var m = math.sparse([[1, 2], [3, 4]]);
	   *    m.size();                        // Array [2, 2]
	   *    m.resize([3, 2], 5);
	   *    m.valueOf();                     // Array [[1, 2], [3, 4], [5, 5]]
	   *    m.get([1, 0])                    // number 3
	   *
	   * See also:
	   *
	   *    bignumber, boolean, complex, index, number, string, unit, matrix
	   *
	   * @param {Array | Matrix} [data]    A two dimensional array
	   *
	   * @return {Matrix} The created matrix
	   */
	  var sparse = typed('sparse', {
	    '': function _() {
	      return new SparseMatrix([]);
	    },

	    'string': function string(datatype) {
	      return new SparseMatrix([], datatype);
	    },

	    'Array | Matrix': function ArrayMatrix(data) {
	      return new SparseMatrix(data);
	    },

	    'Array | Matrix, string': function ArrayMatrixString(data, datatype) {
	      return new SparseMatrix(data, datatype);
	    }
	  });

	  sparse.toTex = {
	    0: '\\begin{bsparse}\\end{bsparse}',
	    1: '\\left(${args[0]}\\right)'
	  };

	  return sparse;
	}

	exports.name = 'sparse';
	exports.factory = factory;

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  /**
	   * Create a number or convert a string, boolean, or unit to a number.
	   * When value is a matrix, all elements will be converted to number.
	   *
	   * Syntax:
	   *
	   *    math.number(value)
	   *    math.number(unit, valuelessUnit)
	   *
	   * Examples:
	   *
	   *    math.number(2);                         // returns number 2
	   *    math.number('7.2');                     // returns number 7.2
	   *    math.number(true);                      // returns number 1
	   *    math.number([true, false, true, true]); // returns [1, 0, 1, 1]
	   *    math.number(math.unit('52cm'), 'm');    // returns 0.52
	   *
	   * See also:
	   *
	   *    bignumber, boolean, complex, index, matrix, string, unit
	   *
	   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted
	   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number
	   * @return {number | Array | Matrix} The created number
	   */
	  var number = typed('number', {
	    '': function _() {
	      return 0;
	    },

	    'number': function number(x) {
	      return x;
	    },

	    'string': function string(x) {
	      var num = Number(x);
	      if (isNaN(num)) {
	        throw new SyntaxError('String "' + x + '" is no valid number');
	      }
	      return num;
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.toNumber();
	    },

	    'Fraction': function Fraction(x) {
	      return x.valueOf();
	    },

	    'Unit': function Unit(x) {
	      throw new Error('Second argument with valueless unit expected');
	    },

	    'Unit, string | Unit': function UnitStringUnit(unit, valuelessUnit) {
	      return unit.toNumber(valuelessUnit);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, number);
	    }
	  });

	  number.toTex = {
	    0: '0',
	    1: '\\left(${args[0]}\\right)',
	    2: '\\left(\\left(${args[0]}\\right)${args[1]}\\right)'
	  };

	  return number;
	}

	exports.name = 'number';
	exports.factory = factory;

/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = [
	// type
	__webpack_require__(232)];

/***/ },
/* 232 */
/***/ function(module, exports) {

	'use strict';

	function factory(type, config, load, typed) {
	  /**
	   * A ResultSet contains a list or results
	   * @class ResultSet
	   * @param {Array} entries
	   * @constructor ResultSet
	   */
	  function ResultSet(entries) {
	    if (!(this instanceof ResultSet)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    this.entries = entries || [];
	  }

	  /**
	   * Attach type information
	   */
	  ResultSet.prototype.type = 'ResultSet';
	  ResultSet.prototype.isResultSet = true;

	  /**
	   * Returns the array with results hold by this ResultSet
	   * @memberof ResultSet
	   * @returns {Array} entries
	   */
	  ResultSet.prototype.valueOf = function () {
	    return this.entries;
	  };

	  /**
	   * Returns the stringified results of the ResultSet
	   * @memberof ResultSet
	   * @returns {string} string
	   */
	  ResultSet.prototype.toString = function () {
	    return '[' + this.entries.join(', ') + ']';
	  };

	  /**
	   * Get a JSON representation of the ResultSet
	   * @memberof ResultSet
	   * @returns {Object} Returns a JSON object structured as:
	   *                   `{"mathjs": "ResultSet", "entries": [...]}`
	   */
	  ResultSet.prototype.toJSON = function () {
	    return {
	      mathjs: 'ResultSet',
	      entries: this.entries
	    };
	  };

	  /**
	   * Instantiate a ResultSet from a JSON object
	   * @memberof ResultSet
	   * @param {Object} json  A JSON object structured as:
	   *                       `{"mathjs": "ResultSet", "entries": [...]}`
	   * @return {ResultSet}
	   */
	  ResultSet.fromJSON = function (json) {
	    return new ResultSet(json.entries);
	  };

	  return ResultSet;
	}

	exports.name = 'ResultSet';
	exports.path = 'type';
	exports.factory = factory;

/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);
	var number = __webpack_require__(166);

	function factory(type, config, load, typed) {
	  /**
	   * Create a string or convert any object into a string.
	   * Elements of Arrays and Matrices are processed element wise.
	   *
	   * Syntax:
	   *
	   *    math.string(value)
	   *
	   * Examples:
	   *
	   *    math.string(4.2);               // returns string '4.2'
	   *    math.string(math.complex(3, 2); // returns string '3 + 2i'
	   *
	   *    var u = math.unit(5, 'km');
	   *    math.string(u.to('m'));         // returns string '5000 m'
	   *
	   *    math.string([true, false]);     // returns ['true', 'false']
	   *
	   * See also:
	   *
	   *    bignumber, boolean, complex, index, matrix, number, unit
	   *
	   * @param {* | Array | Matrix | null} [value]  A value to convert to a string
	   * @return {string | Array | Matrix} The created string
	   */
	  var string = typed('string', {
	    '': function _() {
	      return '';
	    },

	    'number': number.format,

	    'null': function _null(x) {
	      return 'null';
	    },

	    'boolean': function boolean(x) {
	      return x + '';
	    },

	    'string': function string(x) {
	      return x;
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, string);
	    },

	    'any': function any(x) {
	      return String(x);
	    }
	  });

	  string.toTex = {
	    0: '\\mathtt{""}',
	    1: '\\mathrm{string}\\left(${args[0]}\\right)'
	  };

	  return string;
	}

	exports.name = 'string';
	exports.factory = factory;

/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = [
	// type
	__webpack_require__(235),

	// construction function
	__webpack_require__(256),

	// create new units
	__webpack_require__(257),

	// split units
	__webpack_require__(258),

	// physical constants
	__webpack_require__(259)];

/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var endsWith = __webpack_require__(183).endsWith;
	var clone = __webpack_require__(163).clone;
	var constants = __webpack_require__(236);

	function factory(type, config, load, typed, math) {
	  var add = load(__webpack_require__(213));
	  var subtract = load(__webpack_require__(237));
	  var multiply = load(__webpack_require__(240));
	  var divide = load(__webpack_require__(241));
	  var pow = load(__webpack_require__(242));
	  var abs = load(__webpack_require__(246));
	  var fix = load(__webpack_require__(247));
	  var equal = load(__webpack_require__(248));
	  var isNumeric = load(__webpack_require__(249));
	  var format = load(__webpack_require__(250));
	  var getTypeOf = load(__webpack_require__(251));
	  var toNumber = load(__webpack_require__(230));
	  var Complex = load(__webpack_require__(187));

	  /**
	   * A unit can be constructed in the following ways:
	   *     var a = new Unit(value, name);
	   *     var b = new Unit(null, name);
	   *     var c = Unit.parse(str);
	   *
	   * Example usage:
	   *     var a = new Unit(5, 'cm');               // 50 mm
	   *     var b = Unit.parse('23 kg');             // 23 kg
	   *     var c = math.in(a, new Unit(null, 'm');  // 0.05 m
	   *     var d = new Unit(9.81, "m/s^2");         // 9.81 m/s^2
	   *
	   * @class Unit
	   * @constructor Unit
	   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2
	   * @param {string} [name]   A unit name like "cm" or "inch", or a derived unit of the form: "u1[^ex1] [u2[^ex2] ...] [/ u3[^ex3] [u4[^ex4]]]", such as "kg m^2/s^2", where each unit appearing after the forward slash is taken to be in the denominator. "kg m^2 s^-2" is a synonym and is also acceptable. Any of the units can include a prefix.
	   */
	  function Unit(value, name) {
	    if (!(this instanceof Unit)) {
	      throw new Error('Constructor must be called with the new operator');
	    }

	    if (!(value === undefined || isNumeric(value) || value.isComplex)) {
	      throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');
	    }
	    if (name != undefined && (typeof name !== 'string' || name == '')) {
	      throw new TypeError('Second parameter in Unit constructor must be a string');
	    }

	    if (name != undefined) {
	      var u = Unit.parse(name);
	      this.units = u.units;
	      this.dimensions = u.dimensions;
	    } else {
	      this.units = [{
	        unit: UNIT_NONE,
	        prefix: PREFIXES.NONE, // link to a list with supported prefixes
	        power: 0
	      }];
	      this.dimensions = [];
	      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
	        this.dimensions[i] = 0;
	      }
	    }

	    this.value = value != undefined ? this._normalize(value) : null;

	    this.fixPrefix = false; // if true, function format will not search for the
	    // best prefix but leave it as initially provided.
	    // fixPrefix is set true by the method Unit.to

	    // The justification behind this is that if the constructor is explicitly called,
	    // the caller wishes the units to be returned exactly as he supplied.
	    this.isUnitListSimplified = true;
	  }

	  /**
	   * Attach type information
	   */
	  Unit.prototype.type = 'Unit';
	  Unit.prototype.isUnit = true;

	  // private variables and functions for the Unit parser
	  var text, index, c;

	  function skipWhitespace() {
	    while (c == ' ' || c == '\t') {
	      next();
	    }
	  }

	  function isDigitDot(c) {
	    return c >= '0' && c <= '9' || c == '.';
	  }

	  function isDigit(c) {
	    return c >= '0' && c <= '9';
	  }

	  function next() {
	    index++;
	    c = text.charAt(index);
	  }

	  function revert(oldIndex) {
	    index = oldIndex;
	    c = text.charAt(index);
	  }

	  function parseNumber() {
	    var number = '';
	    var oldIndex;
	    oldIndex = index;

	    if (c == '+') {
	      next();
	    } else if (c == '-') {
	      number += c;
	      next();
	    }

	    if (!isDigitDot(c)) {
	      // a + or - must be followed by a digit
	      revert(oldIndex);
	      return null;
	    }

	    // get number, can have a single dot
	    if (c == '.') {
	      number += c;
	      next();
	      if (!isDigit(c)) {
	        // this is no legal number, it is just a dot
	        revert(oldIndex);
	        return null;
	      }
	    } else {
	      while (isDigit(c)) {
	        number += c;
	        next();
	      }
	      if (c == '.') {
	        number += c;
	        next();
	      }
	    }
	    while (isDigit(c)) {
	      number += c;
	      next();
	    }

	    // check for exponential notation like "2.3e-4" or "1.23e50"
	    if (c == 'E' || c == 'e') {
	      // The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as "4exabytes"

	      var tentativeNumber = '';
	      var tentativeIndex = index;

	      tentativeNumber += c;
	      next();

	      if (c == '+' || c == '-') {
	        tentativeNumber += c;
	        next();
	      }

	      // Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)
	      if (!isDigit(c)) {
	        // The e or E must belong to something else, so return the number without the e or E.
	        revert(tentativeIndex);
	        return number;
	      }

	      // We can now safely say that this is scientific notation.
	      number = number + tentativeNumber;
	      while (isDigit(c)) {
	        number += c;
	        next();
	      }
	    }

	    return number;
	  }

	  function parseUnit() {
	    var unitName = '';

	    // Alphanumeric characters only; matches [a-zA-Z0-9]
	    var code = text.charCodeAt(index);
	    while (code >= 48 && code <= 57 || code >= 65 && code <= 90 || code >= 97 && code <= 122) {
	      unitName += c;
	      next();
	      code = text.charCodeAt(index);
	    }

	    // Must begin with [a-zA-Z]
	    code = unitName.charCodeAt(0);
	    if (code >= 65 && code <= 90 || code >= 97 && code <= 122) {
	      return unitName || null;
	    } else {
	      return null;
	    }
	  }

	  function parseCharacter(toFind) {
	    if (c === toFind) {
	      next();
	      return toFind;
	    } else {
	      return null;
	    }
	  }

	  /**
	   * Parse a string into a unit. The value of the unit is parsed as number,
	   * BigNumber, or Fraction depending on the math.js config setting `number`.
	   *
	   * Throws an exception if the provided string does not contain a valid unit or
	   * cannot be parsed.
	   * @memberof Unit
	   * @param {string} str        A string like "5.2 inch", "4e2 cm/s^2"
	   * @return {Unit} unit
	   */
	  Unit.parse = function (str, options) {
	    options = options || {};
	    text = str;
	    index = -1;
	    c = '';

	    if (typeof text !== 'string') {
	      throw new TypeError('Invalid argument in Unit.parse, string expected');
	    }

	    var unit = new Unit();
	    unit.units = [];

	    // A unit should follow this pattern:
	    // [number]unit[^number] [unit[^number]]...[/unit[^number] [unit[^number]]]

	    // Rules:
	    // number is any floating point number.
	    // unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!
	    // The string may optionally begin with a number.
	    // Each unit may optionally be followed by ^number.
	    // Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:
	    //   2m^2kg/s^2
	    // it is not good form. If a unit starts with e, then it could be confused as a floating point number:
	    //   4erg

	    next();
	    skipWhitespace();
	    // Optional number at the start of the string
	    var valueStr = parseNumber();
	    var value = null;
	    if (valueStr) {
	      if (config.number === 'BigNumber') {
	        value = new type.BigNumber(valueStr);
	      } else if (config.number === 'Fraction') {
	        value = new type.Fraction(valueStr);
	      } else {
	        // number
	        value = parseFloat(valueStr);
	      }
	    }
	    skipWhitespace(); // Whitespace is not required here

	    // Next, we read any number of unit[^number]
	    var powerMultiplierCurrent = 1;
	    var expectingUnit = false;

	    // Stack to keep track of powerMultipliers applied to each parentheses group
	    var powerMultiplierStack = [];

	    // Running product of all elements in powerMultiplierStack
	    var powerMultiplierStackProduct = 1;

	    while (true) {
	      skipWhitespace();

	      // Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack
	      // A '(' will always appear directly before a unit.
	      while (c === '(') {
	        powerMultiplierStack.push(powerMultiplierCurrent);
	        powerMultiplierStackProduct *= powerMultiplierCurrent;
	        powerMultiplierCurrent = 1;
	        next();
	        skipWhitespace();
	      }

	      // Is there something here?
	      if (c) {
	        var oldC = c;
	        var uStr = parseUnit();
	        if (uStr == null) {
	          throw new SyntaxError('Unexpected "' + oldC + '" in "' + text + '" at index ' + index.toString());
	        }
	      } else {
	        // End of input.
	        break;
	      }

	      // Verify the unit exists and get the prefix (if any)
	      var res = _findUnit(uStr);
	      if (res == null) {
	        // Unit not found.
	        throw new SyntaxError('Unit "' + uStr + '" not found.');
	      }

	      var power = powerMultiplierCurrent * powerMultiplierStackProduct;
	      // Is there a "^ number"?
	      skipWhitespace();
	      if (parseCharacter('^')) {
	        skipWhitespace();
	        var p = parseNumber();
	        if (p == null) {
	          // No valid number found for the power!
	          throw new SyntaxError('In "' + str + '", "^" must be followed by a floating-point number');
	        }
	        power *= p;
	      }

	      // Add the unit to the list
	      unit.units.push({
	        unit: res.unit,
	        prefix: res.prefix,
	        power: power
	      });
	      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
	        unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;
	      }

	      // Check for and consume closing parentheses, popping from the stack.
	      // A ')' will always follow a unit.
	      skipWhitespace();
	      while (c === ')') {
	        if (powerMultiplierStack.length === 0) {
	          throw new SyntaxError('Unmatched ")" in "' + text + '" at index ' + index.toString());
	        }
	        powerMultiplierStackProduct /= powerMultiplierStack.pop();
	        next();
	        skipWhitespace();
	      }

	      // "*" and "/" should mean we are expecting something to come next.
	      // Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.
	      expectingUnit = false;

	      if (parseCharacter('*')) {
	        // explicit multiplication
	        powerMultiplierCurrent = 1;
	        expectingUnit = true;
	      } else if (parseCharacter('/')) {
	        // division
	        powerMultiplierCurrent = -1;
	        expectingUnit = true;
	      } else {
	        // implicit multiplication
	        powerMultiplierCurrent = 1;
	      }

	      // Replace the unit into the auto unit system
	      if (res.unit.base) {
	        var baseDim = res.unit.base.key;
	        UNIT_SYSTEMS.auto[baseDim] = {
	          unit: res.unit,
	          prefix: res.prefix
	        };
	      }
	    }

	    // Has the string been entirely consumed?
	    skipWhitespace();
	    if (c) {
	      throw new SyntaxError('Could not parse: "' + str + '"');
	    }

	    // Is there a trailing slash?
	    if (expectingUnit) {
	      throw new SyntaxError('Trailing characters: "' + str + '"');
	    }

	    // Is the parentheses stack empty?
	    if (powerMultiplierStack.length !== 0) {
	      throw new SyntaxError('Unmatched "(" in "' + text + '"');
	    }

	    // Are there any units at all?
	    if (unit.units.length == 0 && !options.allowNoUnits) {
	      throw new SyntaxError('"' + str + '" contains no units');
	    }

	    unit.value = value != undefined ? unit._normalize(value) : null;
	    return unit;
	  };

	  /**
	   * create a copy of this unit
	   * @memberof Unit
	   * @return {Unit} Returns a cloned version of the unit
	   */
	  Unit.prototype.clone = function () {
	    var unit = new Unit();

	    unit.fixPrefix = this.fixPrefix;
	    unit.isUnitListSimplified = this.isUnitListSimplified;

	    unit.value = clone(this.value);
	    unit.dimensions = this.dimensions.slice(0);
	    unit.units = [];
	    for (var i = 0; i < this.units.length; i++) {
	      unit.units[i] = {};
	      for (var p in this.units[i]) {
	        if (this.units[i].hasOwnProperty(p)) {
	          unit.units[i][p] = this.units[i][p];
	        }
	      }
	    }

	    return unit;
	  };

	  /**
	   * Return whether the unit is derived (such as m/s, or cm^2, but not N)
	   * @memberof Unit
	   * @return {boolean} True if the unit is derived
	   */
	  Unit.prototype._isDerived = function () {
	    if (this.units.length === 0) {
	      return false;
	    }
	    return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;
	  };

	  /**
	   * Normalize a value, based on its currently set unit(s)
	   * @memberof Unit
	   * @param {number | BigNumber | Fraction | boolean} value
	   * @return {number | BigNumber | Fraction | boolean} normalized value
	   * @private
	   */
	  Unit.prototype._normalize = function (value) {
	    var unitValue, unitOffset, unitPower, unitPrefixValue;
	    var convert;

	    if (value == null || this.units.length === 0) {
	      return value;
	    } else if (this._isDerived()) {
	      // This is a derived unit, so do not apply offsets.
	      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.
	      var res = value;
	      convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed

	      for (var i = 0; i < this.units.length; i++) {
	        unitValue = convert(this.units[i].unit.value);
	        unitPrefixValue = convert(this.units[i].prefix.value);
	        unitPower = convert(this.units[i].power);
	        res = multiply(res, pow(multiply(unitValue, unitPrefixValue), unitPower));
	      }

	      return res;
	    } else {
	      // This is a single unit of power 1, like kg or degC
	      convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed

	      unitValue = convert(this.units[0].unit.value);
	      unitOffset = convert(this.units[0].unit.offset);
	      unitPrefixValue = convert(this.units[0].prefix.value);

	      return multiply(add(value, unitOffset), multiply(unitValue, unitPrefixValue));
	    }
	  };

	  /**
	   * Denormalize a value, based on its currently set unit(s)
	   * @memberof Unit
	   * @param {number} value
	   * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)
	   * @return {number} denormalized value
	   * @private
	   */
	  Unit.prototype._denormalize = function (value, prefixValue) {
	    var unitValue, unitOffset, unitPower, unitPrefixValue;
	    var convert;

	    if (value == null || this.units.length === 0) {
	      return value;
	    } else if (this._isDerived()) {
	      // This is a derived unit, so do not apply offsets.
	      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.
	      // Also, prefixValue is ignored--but we will still use the prefix value stored in each unit, since kg is usually preferable to g unless the user decides otherwise.
	      var res = value;
	      convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed

	      for (var i = 0; i < this.units.length; i++) {
	        unitValue = convert(this.units[i].unit.value);
	        unitPrefixValue = convert(this.units[i].prefix.value);
	        unitPower = convert(this.units[i].power);
	        res = divide(res, pow(multiply(unitValue, unitPrefixValue), unitPower));
	      }

	      return res;
	    } else {
	      // This is a single unit of power 1, like kg or degC
	      convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed

	      unitValue = convert(this.units[0].unit.value);
	      unitPrefixValue = convert(this.units[0].prefix.value);
	      unitOffset = convert(this.units[0].unit.offset);

	      if (prefixValue == undefined) {
	        return subtract(divide(divide(value, unitValue), unitPrefixValue), unitOffset);
	      } else {
	        return subtract(divide(divide(value, unitValue), prefixValue), unitOffset);
	      }
	    }
	  };

	  /**
	   * Find a unit from a string
	   * @memberof Unit
	   * @param {string} str              A string like 'cm' or 'inch'
	   * @returns {Object | null} result  When found, an object with fields unit and
	   *                                  prefix is returned. Else, null is returned.
	   * @private
	   */
	  function _findUnit(str) {

	    // First, match units names exactly. For example, a user could define 'mm' as 10^-4 m, which is silly, but then we would want 'mm' to match the user-defined unit.
	    if (UNITS.hasOwnProperty(str)) {
	      var unit = UNITS[str];
	      var prefix = unit.prefixes[''];
	      return {
	        unit: unit,
	        prefix: prefix
	      };
	    }

	    for (var name in UNITS) {
	      if (UNITS.hasOwnProperty(name)) {
	        if (endsWith(str, name)) {
	          var unit = UNITS[name];
	          var prefixLen = str.length - name.length;
	          var prefixName = str.substring(0, prefixLen);
	          var prefix = unit.prefixes[prefixName];
	          if (prefix !== undefined) {
	            // store unit, prefix, and value
	            return {
	              unit: unit,
	              prefix: prefix
	            };
	          }
	        }
	      }
	    }

	    return null;
	  }

	  /**
	   * Test if the given expression is a unit.
	   * The unit can have a prefix but cannot have a value.
	   * @memberof Unit
	   * @param {string} name   A string to be tested whether it is a value less unit.
	   *                        The unit can have prefix, like "cm"
	   * @return {boolean}      true if the given string is a unit
	   */
	  Unit.isValuelessUnit = function (name) {
	    return _findUnit(name) != null;
	  };

	  /**
	   * check if this unit has given base unit
	   * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.
	   * @memberof Unit
	   * @param {BASE_UNITS | string | undefined} base
	   */
	  Unit.prototype.hasBase = function (base) {

	    if (typeof base === "string") {
	      base = BASE_UNITS[base];
	    }

	    if (!base) return false;

	    // All dimensions must be the same
	    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
	      if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {
	        return false;
	      }
	    }
	    return true;
	  };

	  /**
	   * Check if this unit has a base or bases equal to another base or bases
	   * For derived units, the exponent on each base also must match
	   * @memberof Unit
	   * @param {Unit} other
	   * @return {boolean} true if equal base
	   */
	  Unit.prototype.equalBase = function (other) {
	    // All dimensions must be the same
	    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
	      if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {
	        return false;
	      }
	    }
	    return true;
	  };

	  /**
	   * Check if this unit equals another unit
	   * @memberof Unit
	   * @param {Unit} other
	   * @return {boolean} true if both units are equal
	   */
	  Unit.prototype.equals = function (other) {
	    return this.equalBase(other) && equal(this.value, other.value);
	  };

	  /**
	   * Multiply this unit with another one
	   * @memberof Unit
	   * @param {Unit} other
	   * @return {Unit} product of this unit and the other unit
	   */
	  Unit.prototype.multiply = function (other) {
	    var res = this.clone();

	    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
	      // Dimensions arrays may be of different lengths. Default to 0.
	      res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);
	    }

	    // Append other's units list onto res (simplify later in Unit.prototype.format)
	    for (var i = 0; i < other.units.length; i++) {
	      // Make a deep copy
	      var inverted = {};
	      for (var key in other.units[i]) {
	        inverted[key] = other.units[i][key];
	      }
	      res.units.push(inverted);
	    }

	    // If at least one operand has a value, then the result should also have a value
	    if (this.value != null || other.value != null) {
	      var valThis = this.value == null ? this._normalize(1) : this.value;
	      var valOther = other.value == null ? other._normalize(1) : other.value;
	      res.value = multiply(valThis, valOther);
	    } else {
	      res.value = null;
	    }

	    // Trigger simplification of the unit list at some future time
	    res.isUnitListSimplified = false;

	    return getNumericIfUnitless(res);
	  };

	  /**
	   * Divide this unit by another one
	   * @memberof Unit
	   * @param {Unit} other
	   * @return {Unit} result of dividing this unit by the other unit
	   */
	  Unit.prototype.divide = function (other) {
	    var res = this.clone();

	    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
	      // Dimensions arrays may be of different lengths. Default to 0.
	      res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);
	    }

	    // Invert and append other's units list onto res (simplify later in Unit.prototype.format)
	    for (var i = 0; i < other.units.length; i++) {
	      // Make a deep copy
	      var inverted = {};
	      for (var key in other.units[i]) {
	        inverted[key] = other.units[i][key];
	      }
	      inverted.power = -inverted.power;
	      res.units.push(inverted);
	    }

	    // If at least one operand has a value, the result should have a value
	    if (this.value != null || other.value != null) {
	      var valThis = this.value == null ? this._normalize(1) : this.value;
	      var valOther = other.value == null ? other._normalize(1) : other.value;
	      res.value = divide(valThis, valOther);
	    } else {
	      res.value = null;
	    }

	    // Trigger simplification of the unit list at some future time
	    res.isUnitListSimplified = false;

	    return getNumericIfUnitless(res);
	  };

	  /**
	   * Calculate the power of a unit
	   * @memberof Unit
	   * @param {number | Fraction | BigNumber} p
	   * @returns {Unit}      The result: this^p
	   */
	  Unit.prototype.pow = function (p) {
	    var res = this.clone();

	    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
	      // Dimensions arrays may be of different lengths. Default to 0.
	      res.dimensions[i] = (this.dimensions[i] || 0) * p;
	    }

	    // Adjust the power of each unit in the list
	    for (var i = 0; i < res.units.length; i++) {
	      res.units[i].power *= p;
	    }

	    if (res.value != null) {
	      res.value = pow(res.value, p);

	      // only allow numeric output, we don't want to return a Complex number
	      //if (!isNumeric(res.value)) {
	      //  res.value = NaN;
	      //}
	      // Update: Complex supported now
	    } else {
	      res.value = null;
	    }

	    // Trigger lazy evaluation of the unit list
	    res.isUnitListSimplified = false;

	    return getNumericIfUnitless(res);
	  };

	  /**
	   * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise
	   * @param {Unit} unit
	   * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise
	   */
	  var getNumericIfUnitless = function getNumericIfUnitless(unit) {
	    if (unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {
	      return unit.value;
	    } else {
	      return unit;
	    }
	  };

	  /**
	   * Calculate the absolute value of a unit
	   * @memberof Unit
	   * @param {number | Fraction | BigNumber} x
	   * @returns {Unit}      The result: |x|, absolute value of x
	   */
	  Unit.prototype.abs = function () {
	    // This gives correct, but unexpected, results for units with an offset.
	    // For example, abs(-283.15 degC) = -263.15 degC !!!
	    var ret = this.clone();
	    ret.value = abs(ret.value);

	    for (var i in ret.units) {
	      if (ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {
	        ret.units[i].unit = UNITS["W"];
	      }
	    }

	    return ret;
	  };

	  /**
	   * Convert the unit to a specific unit name.
	   * @memberof Unit
	   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like "cm"
	   * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.
	   */
	  Unit.prototype.to = function (valuelessUnit) {
	    var other;
	    var value = this.value == null ? this._normalize(1) : this.value;
	    if (typeof valuelessUnit === 'string') {
	      //other = new Unit(null, valuelessUnit);
	      other = Unit.parse(valuelessUnit);
	      if (!this.equalBase(other)) {
	        throw new Error('Units do not match');
	      }
	      if (other.value !== null) {
	        throw new Error('Cannot convert to a unit with a value');
	      }

	      other.value = clone(value);
	      other.fixPrefix = true;
	      other.isUnitListSimplified = true;
	      return other;
	    } else if (valuelessUnit && valuelessUnit.isUnit) {
	      if (!this.equalBase(valuelessUnit)) {
	        throw new Error('Units do not match');
	      }
	      if (valuelessUnit.value !== null) {
	        throw new Error('Cannot convert to a unit with a value');
	      }
	      other = valuelessUnit.clone();
	      other.value = clone(value);
	      other.fixPrefix = true;
	      other.isUnitListSimplified = true;
	      return other;
	    } else {
	      throw new Error('String or Unit expected as parameter');
	    }
	  };

	  /**
	   * Return the value of the unit when represented with given valueless unit
	   * @memberof Unit
	   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'
	   * @return {number} Returns the unit value as number.
	   */
	  // TODO: deprecate Unit.toNumber? It's always better to use toNumeric
	  Unit.prototype.toNumber = function (valuelessUnit) {
	    return toNumber(this.toNumeric(valuelessUnit));
	  };

	  /**
	   * Return the value of the unit in the original numeric type
	   * @memberof Unit
	   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'
	   * @return {number | BigNumber | Fraction} Returns the unit value
	   */
	  Unit.prototype.toNumeric = function (valuelessUnit) {
	    var other = this;
	    if (valuelessUnit) {
	      // Allow getting the numeric value without converting to a different unit
	      other = this.to(valuelessUnit);
	    }

	    if (other._isDerived()) {
	      return other._denormalize(other.value);
	    } else {
	      return other._denormalize(other.value, other.units[0].prefix.value);
	    }
	  };

	  /**
	   * Get a string representation of the unit.
	   * @memberof Unit
	   * @return {string}
	   */
	  Unit.prototype.toString = function () {
	    return this.format();
	  };

	  /**
	   * Get a JSON representation of the unit
	   * @memberof Unit
	   * @returns {Object} Returns a JSON object structured as:
	   *                   `{"mathjs": "Unit", "value": 2, "unit": "cm", "fixPrefix": false}`
	   */
	  Unit.prototype.toJSON = function () {
	    return {
	      mathjs: 'Unit',
	      value: this._denormalize(this.value),
	      unit: this.formatUnits(),
	      fixPrefix: this.fixPrefix
	    };
	  };

	  /**
	   * Instantiate a Unit from a JSON object
	   * @memberof Unit
	   * @param {Object} json  A JSON object structured as:
	   *                       `{"mathjs": "Unit", "value": 2, "unit": "cm", "fixPrefix": false}`
	   * @return {Unit}
	   */
	  Unit.fromJSON = function (json) {
	    var unit = new Unit(json.value, json.unit);
	    unit.fixPrefix = json.fixPrefix || false;
	    return unit;
	  };

	  /**
	   * Returns the string representation of the unit.
	   * @memberof Unit
	   * @return {string}
	   */
	  Unit.prototype.valueOf = Unit.prototype.toString;

	  /**
	   * Attempt to simplify the list of units for this unit according to the dimensions array and the current unit system. After the call, this Unit will contain a list of the "best" units for formatting.
	   * Intended to be evaluated lazily. You must set isUnitListSimplified = false before the call! After the call, isUnitListSimplified will be set to true.
	   */
	  Unit.prototype.simplifyUnitListLazy = function () {

	    if (this.isUnitListSimplified || this.value == null) {
	      return;
	    }

	    var proposedUnitList = [];

	    // Search for a matching base
	    var matchingBase;
	    for (var key in currentUnitSystem) {
	      if (this.hasBase(BASE_UNITS[key])) {
	        matchingBase = key;
	        break;
	      }
	    }

	    if (matchingBase === 'NONE') {
	      this.units = [];
	    } else {
	      var matchingUnit;
	      if (matchingBase) {
	        // Does the unit system have a matching unit?
	        if (currentUnitSystem.hasOwnProperty(matchingBase)) {
	          matchingUnit = currentUnitSystem[matchingBase];
	        }
	      }
	      var value;
	      var str;
	      if (matchingUnit) {
	        this.units = [{
	          unit: matchingUnit.unit,
	          prefix: matchingUnit.prefix,
	          power: 1.0
	        }];
	      } else {
	        // Multiple units or units with powers are formatted like this:
	        // 5 (kg m^2) / (s^3 mol)
	        // Build an representation from the base units of the current unit system
	        var missingBaseDim = false;
	        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
	          var baseDim = BASE_DIMENSIONS[i];
	          if (Math.abs(this.dimensions[i] || 0) > 1e-12) {
	            if (currentUnitSystem.hasOwnProperty(baseDim)) {
	              proposedUnitList.push({
	                unit: currentUnitSystem[baseDim].unit,
	                prefix: currentUnitSystem[baseDim].prefix,
	                power: this.dimensions[i] || 0
	              });
	            } else {
	              missingBaseDim = true;
	            }
	          }
	        }
	        var util = __webpack_require__(252);

	        // Is the proposed unit list "simpler" than the existing one?
	        if (proposedUnitList.length < this.units.length && !missingBaseDim) {
	          // Replace this unit list with the proposed list
	          this.units = proposedUnitList;
	        }
	      }
	    }

	    this.isUnitListSimplified = true;
	  };

	  /**
	   * Get a string representation of the units of this Unit, without the value.
	   * @memberof Unit
	   * @return {string}
	   */
	  Unit.prototype.formatUnits = function () {

	    // Lazy evaluation of the unit list
	    this.simplifyUnitListLazy();

	    var strNum = "";
	    var strDen = "";
	    var nNum = 0;
	    var nDen = 0;

	    for (var i = 0; i < this.units.length; i++) {
	      if (this.units[i].power > 0) {
	        nNum++;
	        strNum += " " + this.units[i].prefix.name + this.units[i].unit.name;
	        if (Math.abs(this.units[i].power - 1.0) > 1e-15) {
	          strNum += "^" + this.units[i].power;
	        }
	      } else if (this.units[i].power < 0) {
	        nDen++;
	      }
	    }

	    if (nDen > 0) {
	      for (var i = 0; i < this.units.length; i++) {
	        if (this.units[i].power < 0) {
	          if (nNum > 0) {
	            strDen += " " + this.units[i].prefix.name + this.units[i].unit.name;
	            if (Math.abs(this.units[i].power + 1.0) > 1e-15) {
	              strDen += "^" + -this.units[i].power;
	            }
	          } else {
	            strDen += " " + this.units[i].prefix.name + this.units[i].unit.name;
	            strDen += "^" + this.units[i].power;
	          }
	        }
	      }
	    }
	    // Remove leading " "
	    strNum = strNum.substr(1);
	    strDen = strDen.substr(1);

	    // Add parans for better copy/paste back into the eval, for example, or for better pretty print formatting
	    if (nNum > 1 && nDen > 0) {
	      strNum = "(" + strNum + ")";
	    }
	    if (nDen > 1 && nNum > 0) {
	      strDen = "(" + strDen + ")";
	    }

	    var str = strNum;
	    if (nNum > 0 && nDen > 0) {
	      str += " / ";
	    }
	    str += strDen;

	    return str;
	  };

	  /**
	   * Get a string representation of the Unit, with optional formatting options.
	   * @memberof Unit
	   * @param {Object | number | Function} [options]  Formatting options. See
	   *                                                lib/utils/number:format for a
	   *                                                description of the available
	   *                                                options.
	   * @return {string}
	   */
	  Unit.prototype.format = function (options) {

	    // Simplfy the unit list, if necessary
	    this.simplifyUnitListLazy();

	    // Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.
	    var isImaginary = false;
	    var isReal = true;
	    if (typeof this.value !== 'undefined' && this.value !== null && this.value.isComplex) {
	      // TODO: Make this better, for example, use relative magnitude of re and im rather than absolute
	      isImaginary = Math.abs(this.value.re) < 1e-14;
	      isReal = Math.abs(this.value.im) < 1e-14;
	    }

	    for (var i in this.units) {
	      if (this.units[i].unit) {
	        if (this.units[i].unit.name === 'VA' && isImaginary) {
	          this.units[i].unit = UNITS["VAR"];
	        } else if (this.units[i].unit.name === 'VAR' && !isImaginary) {
	          this.units[i].unit = UNITS["VA"];
	        }
	      }
	    }

	    // Now apply the best prefix
	    // Units must have only one unit and not have the fixPrefix flag set
	    if (this.units.length === 1 && !this.fixPrefix) {
	      // Units must have integer powers, otherwise the prefix will change the
	      // outputted value by not-an-integer-power-of-ten
	      if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) < 1e-14) {
	        // Apply the best prefix
	        this.units[0].prefix = this._bestPrefix();
	      }
	    }

	    var value = this._denormalize(this.value);
	    var str = this.value !== null ? format(value, options || {}) : '';
	    var unitStr = this.formatUnits();
	    if (this.value && this.value.isComplex) {
	      str = "(" + str + ")"; // Surround complex values with ( ) to enable better parsing 
	    }
	    if (unitStr.length > 0 && str.length > 0) {
	      str += " ";
	    }
	    str += unitStr;

	    return str;
	  };

	  /**
	   * Calculate the best prefix using current value.
	   * @memberof Unit
	   * @returns {Object} prefix
	   * @private
	   */
	  Unit.prototype._bestPrefix = function () {
	    if (this.units.length !== 1) {
	      throw new Error("Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!");
	    }
	    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {
	      throw new Error("Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!");
	    }

	    // find the best prefix value (resulting in the value of which
	    // the absolute value of the log10 is closest to zero,
	    // though with a little offset of 1.2 for nicer values: you get a
	    // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...

	    // Note: the units value can be any numeric type, but to find the best
	    // prefix it's enough to work with limited precision of a regular number
	    // Update: using mathjs abs since we also allow complex numbers
	    var absValue = abs(this.value);
	    var absUnitValue = abs(this.units[0].unit.value);
	    var bestPrefix = this.units[0].prefix;
	    if (absValue === 0) {
	      return bestPrefix;
	    }
	    var power = this.units[0].power;
	    var bestDiff = Math.abs(Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2);

	    var prefixes = this.units[0].unit.prefixes;
	    for (var p in prefixes) {
	      if (prefixes.hasOwnProperty(p)) {
	        var prefix = prefixes[p];
	        if (prefix.scientific) {

	          var diff = Math.abs(Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2);

	          if (diff < bestDiff || diff === bestDiff && prefix.name.length < bestPrefix.name.length) {
	            // choose the prefix with the smallest diff, or if equal, choose the one
	            // with the shortest name (can happen with SHORTLONG for example)
	            bestPrefix = prefix;
	            bestDiff = diff;
	          }
	        }
	      }
	    }

	    return bestPrefix;
	  };

	  /**
	   * Returns an array of units whose sum is equal to this unit
	   * @memberof Unit
	   * @param {Array} [parts] An array of strings or valueless units. 
	   *
	   *   Example:
	   *
	   *   var u = new Unit(1, 'm');
	   *   u.splitUnit(['feet', 'inch']);
	   *     [ 3 feet, 3.3700787401575 inch ]
	   *
	   * @return {Array} An array of units.
	   */
	  Unit.prototype.splitUnit = function (parts) {

	    var x = this.clone();
	    var ret = [];
	    for (var i = 0; i < parts.length; i++) {
	      x = x.to(parts[i]);
	      if (i == parts.length - 1) break;
	      // fix rounds a number towards 0
	      var fixedVal = fix(x.toNumeric());
	      var y = new Unit(fixedVal, parts[i].toString());
	      ret.push(y);
	      x = subtract(x, y);
	    }
	    ret.push(x);

	    return ret;
	  };

	  var PREFIXES = {
	    NONE: {
	      '': { name: '', value: 1, scientific: true }
	    },
	    SHORT: {
	      '': { name: '', value: 1, scientific: true },

	      'da': { name: 'da', value: 1e1, scientific: false },
	      'h': { name: 'h', value: 1e2, scientific: false },
	      'k': { name: 'k', value: 1e3, scientific: true },
	      'M': { name: 'M', value: 1e6, scientific: true },
	      'G': { name: 'G', value: 1e9, scientific: true },
	      'T': { name: 'T', value: 1e12, scientific: true },
	      'P': { name: 'P', value: 1e15, scientific: true },
	      'E': { name: 'E', value: 1e18, scientific: true },
	      'Z': { name: 'Z', value: 1e21, scientific: true },
	      'Y': { name: 'Y', value: 1e24, scientific: true },

	      'd': { name: 'd', value: 1e-1, scientific: false },
	      'c': { name: 'c', value: 1e-2, scientific: false },
	      'm': { name: 'm', value: 1e-3, scientific: true },
	      'u': { name: 'u', value: 1e-6, scientific: true },
	      'n': { name: 'n', value: 1e-9, scientific: true },
	      'p': { name: 'p', value: 1e-12, scientific: true },
	      'f': { name: 'f', value: 1e-15, scientific: true },
	      'a': { name: 'a', value: 1e-18, scientific: true },
	      'z': { name: 'z', value: 1e-21, scientific: true },
	      'y': { name: 'y', value: 1e-24, scientific: true }
	    },
	    LONG: {
	      '': { name: '', value: 1, scientific: true },

	      'deca': { name: 'deca', value: 1e1, scientific: false },
	      'hecto': { name: 'hecto', value: 1e2, scientific: false },
	      'kilo': { name: 'kilo', value: 1e3, scientific: true },
	      'mega': { name: 'mega', value: 1e6, scientific: true },
	      'giga': { name: 'giga', value: 1e9, scientific: true },
	      'tera': { name: 'tera', value: 1e12, scientific: true },
	      'peta': { name: 'peta', value: 1e15, scientific: true },
	      'exa': { name: 'exa', value: 1e18, scientific: true },
	      'zetta': { name: 'zetta', value: 1e21, scientific: true },
	      'yotta': { name: 'yotta', value: 1e24, scientific: true },

	      'deci': { name: 'deci', value: 1e-1, scientific: false },
	      'centi': { name: 'centi', value: 1e-2, scientific: false },
	      'milli': { name: 'milli', value: 1e-3, scientific: true },
	      'micro': { name: 'micro', value: 1e-6, scientific: true },
	      'nano': { name: 'nano', value: 1e-9, scientific: true },
	      'pico': { name: 'pico', value: 1e-12, scientific: true },
	      'femto': { name: 'femto', value: 1e-15, scientific: true },
	      'atto': { name: 'atto', value: 1e-18, scientific: true },
	      'zepto': { name: 'zepto', value: 1e-21, scientific: true },
	      'yocto': { name: 'yocto', value: 1e-24, scientific: true }
	    },
	    SQUARED: {
	      '': { name: '', value: 1, scientific: true },

	      'da': { name: 'da', value: 1e2, scientific: false },
	      'h': { name: 'h', value: 1e4, scientific: false },
	      'k': { name: 'k', value: 1e6, scientific: true },
	      'M': { name: 'M', value: 1e12, scientific: true },
	      'G': { name: 'G', value: 1e18, scientific: true },
	      'T': { name: 'T', value: 1e24, scientific: true },
	      'P': { name: 'P', value: 1e30, scientific: true },
	      'E': { name: 'E', value: 1e36, scientific: true },
	      'Z': { name: 'Z', value: 1e42, scientific: true },
	      'Y': { name: 'Y', value: 1e48, scientific: true },

	      'd': { name: 'd', value: 1e-2, scientific: false },
	      'c': { name: 'c', value: 1e-4, scientific: false },
	      'm': { name: 'm', value: 1e-6, scientific: true },
	      'u': { name: 'u', value: 1e-12, scientific: true },
	      'n': { name: 'n', value: 1e-18, scientific: true },
	      'p': { name: 'p', value: 1e-24, scientific: true },
	      'f': { name: 'f', value: 1e-30, scientific: true },
	      'a': { name: 'a', value: 1e-36, scientific: true },
	      'z': { name: 'z', value: 1e-42, scientific: true },
	      'y': { name: 'y', value: 1e-48, scientific: true }
	    },
	    CUBIC: {
	      '': { name: '', value: 1, scientific: true },

	      'da': { name: 'da', value: 1e3, scientific: false },
	      'h': { name: 'h', value: 1e6, scientific: false },
	      'k': { name: 'k', value: 1e9, scientific: true },
	      'M': { name: 'M', value: 1e18, scientific: true },
	      'G': { name: 'G', value: 1e27, scientific: true },
	      'T': { name: 'T', value: 1e36, scientific: true },
	      'P': { name: 'P', value: 1e45, scientific: true },
	      'E': { name: 'E', value: 1e54, scientific: true },
	      'Z': { name: 'Z', value: 1e63, scientific: true },
	      'Y': { name: 'Y', value: 1e72, scientific: true },

	      'd': { name: 'd', value: 1e-3, scientific: false },
	      'c': { name: 'c', value: 1e-6, scientific: false },
	      'm': { name: 'm', value: 1e-9, scientific: true },
	      'u': { name: 'u', value: 1e-18, scientific: true },
	      'n': { name: 'n', value: 1e-27, scientific: true },
	      'p': { name: 'p', value: 1e-36, scientific: true },
	      'f': { name: 'f', value: 1e-45, scientific: true },
	      'a': { name: 'a', value: 1e-54, scientific: true },
	      'z': { name: 'z', value: 1e-63, scientific: true },
	      'y': { name: 'y', value: 1e-72, scientific: true }
	    },
	    BINARY_SHORT: {
	      '': { name: '', value: 1, scientific: true },
	      'k': { name: 'k', value: 1e3, scientific: true },
	      'M': { name: 'M', value: 1e6, scientific: true },
	      'G': { name: 'G', value: 1e9, scientific: true },
	      'T': { name: 'T', value: 1e12, scientific: true },
	      'P': { name: 'P', value: 1e15, scientific: true },
	      'E': { name: 'E', value: 1e18, scientific: true },
	      'Z': { name: 'Z', value: 1e21, scientific: true },
	      'Y': { name: 'Y', value: 1e24, scientific: true },

	      'Ki': { name: 'Ki', value: 1024, scientific: true },
	      'Mi': { name: 'Mi', value: Math.pow(1024, 2), scientific: true },
	      'Gi': { name: 'Gi', value: Math.pow(1024, 3), scientific: true },
	      'Ti': { name: 'Ti', value: Math.pow(1024, 4), scientific: true },
	      'Pi': { name: 'Pi', value: Math.pow(1024, 5), scientific: true },
	      'Ei': { name: 'Ei', value: Math.pow(1024, 6), scientific: true },
	      'Zi': { name: 'Zi', value: Math.pow(1024, 7), scientific: true },
	      'Yi': { name: 'Yi', value: Math.pow(1024, 8), scientific: true }
	    },
	    BINARY_LONG: {
	      '': { name: '', value: 1, scientific: true },
	      'kilo': { name: 'kilo', value: 1e3, scientific: true },
	      'mega': { name: 'mega', value: 1e6, scientific: true },
	      'giga': { name: 'giga', value: 1e9, scientific: true },
	      'tera': { name: 'tera', value: 1e12, scientific: true },
	      'peta': { name: 'peta', value: 1e15, scientific: true },
	      'exa': { name: 'exa', value: 1e18, scientific: true },
	      'zetta': { name: 'zetta', value: 1e21, scientific: true },
	      'yotta': { name: 'yotta', value: 1e24, scientific: true },

	      'kibi': { name: 'kibi', value: 1024, scientific: true },
	      'mebi': { name: 'mebi', value: Math.pow(1024, 2), scientific: true },
	      'gibi': { name: 'gibi', value: Math.pow(1024, 3), scientific: true },
	      'tebi': { name: 'tebi', value: Math.pow(1024, 4), scientific: true },
	      'pebi': { name: 'pebi', value: Math.pow(1024, 5), scientific: true },
	      'exi': { name: 'exi', value: Math.pow(1024, 6), scientific: true },
	      'zebi': { name: 'zebi', value: Math.pow(1024, 7), scientific: true },
	      'yobi': { name: 'yobi', value: Math.pow(1024, 8), scientific: true }
	    },
	    BTU: {
	      '': { name: '', value: 1, scientific: true },
	      'MM': { name: 'MM', value: 1e6, scientific: true }
	    }
	  };

	  // Add a prefix list for both short and long prefixes (for ohm in particular, since Mohm and megaohm are both acceptable):
	  PREFIXES.SHORTLONG = {};
	  for (var key in PREFIXES.SHORT) {
	    if (PREFIXES.SHORT.hasOwnProperty(key)) {
	      PREFIXES.SHORTLONG[key] = PREFIXES.SHORT[key];
	    }
	  }
	  for (var key in PREFIXES.LONG) {
	    if (PREFIXES.LONG.hasOwnProperty(key)) {
	      PREFIXES.SHORTLONG[key] = PREFIXES.LONG[key];
	    }
	  }

	  /* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:
	   * Index  Dimension
	   * -----  ---------
	   *   0    Length
	   *   1    Mass
	   *   2    Time
	   *   3    Current
	   *   4    Temperature
	   *   5    Luminous intensity
	   *   6    Amount of substance
	   *   7    Angle
	   *   8    Bit (digital)
	   * For example, the unit "298.15 K" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit "1 cal / (gm °C)" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].
	   *
	   */

	  var BASE_DIMENSIONS = ["MASS", "LENGTH", "TIME", "CURRENT", "TEMPERATURE", "LUMINOUS_INTENSITY", "AMOUNT_OF_SUBSTANCE", "ANGLE", "BIT"];

	  var BASE_UNITS = {
	    NONE: {
	      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]
	    },
	    MASS: {
	      dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]
	    },
	    LENGTH: {
	      dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]
	    },
	    TIME: {
	      dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]
	    },
	    CURRENT: {
	      dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]
	    },
	    TEMPERATURE: {
	      dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]
	    },
	    LUMINOUS_INTENSITY: {
	      dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]
	    },
	    AMOUNT_OF_SUBSTANCE: {
	      dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]
	    },

	    FORCE: {
	      dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]
	    },
	    SURFACE: {
	      dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]
	    },
	    VOLUME: {
	      dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]
	    },
	    ENERGY: {
	      dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]
	    },
	    POWER: {
	      dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]
	    },
	    PRESSURE: {
	      dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]
	    },

	    ELECTRIC_CHARGE: {
	      dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]
	    },
	    ELECTRIC_CAPACITANCE: {
	      dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]
	    },
	    ELECTRIC_POTENTIAL: {
	      dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]
	    },
	    ELECTRIC_RESISTANCE: {
	      dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]
	    },
	    ELECTRIC_INDUCTANCE: {
	      dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]
	    },
	    ELECTRIC_CONDUCTANCE: {
	      dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]
	    },
	    MAGNETIC_FLUX: {
	      dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]
	    },
	    MAGNETIC_FLUX_DENSITY: {
	      dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]
	    },

	    FREQUENCY: {
	      dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]
	    },
	    ANGLE: {
	      dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]
	    },
	    BIT: {
	      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]
	    }
	  };

	  for (var key in BASE_UNITS) {
	    BASE_UNITS[key].key = key;
	  }

	  var BASE_UNIT_NONE = {};

	  var UNIT_NONE = { name: '', base: BASE_UNIT_NONE, value: 1, offset: 0, dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0] };

	  var UNITS = {
	    // length
	    meter: {
	      name: 'meter',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    inch: {
	      name: 'inch',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.0254,
	      offset: 0
	    },
	    foot: {
	      name: 'foot',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.3048,
	      offset: 0
	    },
	    yard: {
	      name: 'yard',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.9144,
	      offset: 0
	    },
	    mile: {
	      name: 'mile',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 1609.344,
	      offset: 0
	    },
	    link: {
	      name: 'link',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.201168,
	      offset: 0
	    },
	    rod: {
	      name: 'rod',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 5.029210,
	      offset: 0
	    },
	    chain: {
	      name: 'chain',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 20.1168,
	      offset: 0
	    },
	    angstrom: {
	      name: 'angstrom',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 1e-10,
	      offset: 0
	    },

	    m: {
	      name: 'm',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    'in': {
	      name: 'in',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.0254,
	      offset: 0
	    },
	    ft: {
	      name: 'ft',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.3048,
	      offset: 0
	    },
	    yd: {
	      name: 'yd',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.9144,
	      offset: 0
	    },
	    mi: {
	      name: 'mi',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 1609.344,
	      offset: 0
	    },
	    li: {
	      name: 'li',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.201168,
	      offset: 0
	    },
	    rd: {
	      name: 'rd',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 5.029210,
	      offset: 0
	    },
	    ch: {
	      name: 'ch',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 20.1168,
	      offset: 0
	    },
	    mil: {
	      name: 'mil',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.0000254,
	      offset: 0
	    }, // 1/1000 inch

	    // Surface
	    m2: {
	      name: 'm2',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.SQUARED,
	      value: 1,
	      offset: 0
	    },
	    sqin: {
	      name: 'sqin',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 0.00064516,
	      offset: 0
	    }, // 645.16 mm2
	    sqft: {
	      name: 'sqft',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 0.09290304,
	      offset: 0
	    }, // 0.09290304 m2
	    sqyd: {
	      name: 'sqyd',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 0.83612736,
	      offset: 0
	    }, // 0.83612736 m2
	    sqmi: {
	      name: 'sqmi',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 2589988.110336,
	      offset: 0
	    }, // 2.589988110336 km2
	    sqrd: {
	      name: 'sqrd',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 25.29295,
	      offset: 0
	    }, // 25.29295 m2
	    sqch: {
	      name: 'sqch',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 404.6873,
	      offset: 0
	    }, // 404.6873 m2
	    sqmil: {
	      name: 'sqmil',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 6.4516e-10,
	      offset: 0
	    }, // 6.4516 * 10^-10 m2
	    acre: {
	      name: 'acre',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 4046.86,
	      offset: 0
	    }, // 4046.86 m2
	    hectare: {
	      name: 'hectare',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 10000,
	      offset: 0
	    }, // 10000 m2

	    // Volume
	    m3: {
	      name: 'm3',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.CUBIC,
	      value: 1,
	      offset: 0
	    },
	    L: {
	      name: 'L',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.SHORT,
	      value: 0.001,
	      offset: 0
	    }, // litre
	    l: {
	      name: 'l',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.SHORT,
	      value: 0.001,
	      offset: 0
	    }, // litre
	    litre: {
	      name: 'litre',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.LONG,
	      value: 0.001,
	      offset: 0
	    },
	    cuin: {
	      name: 'cuin',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 1.6387064e-5,
	      offset: 0
	    }, // 1.6387064e-5 m3
	    cuft: {
	      name: 'cuft',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.028316846592,
	      offset: 0
	    }, // 28.316 846 592 L
	    cuyd: {
	      name: 'cuyd',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.764554857984,
	      offset: 0
	    }, // 764.554 857 984 L
	    teaspoon: {
	      name: 'teaspoon',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.000005,
	      offset: 0
	    }, // 5 mL
	    tablespoon: {
	      name: 'tablespoon',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.000015,
	      offset: 0
	    }, // 15 mL
	    //{name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup
	    drop: {
	      name: 'drop',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 5e-8,
	      offset: 0
	    }, // 0.05 mL = 5e-8 m3
	    gtt: {
	      name: 'gtt',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 5e-8,
	      offset: 0
	    }, // 0.05 mL = 5e-8 m3

	    // Liquid volume
	    minim: {
	      name: 'minim',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.00000006161152,
	      offset: 0
	    }, // 0.06161152 mL
	    fluiddram: {
	      name: 'fluiddram',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0000036966911,
	      offset: 0
	    }, // 3.696691 mL
	    fluidounce: {
	      name: 'fluidounce',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.00002957353,
	      offset: 0
	    }, // 29.57353 mL
	    gill: {
	      name: 'gill',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0001182941,
	      offset: 0
	    }, // 118.2941 mL
	    cc: {
	      name: 'cc',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 1e-6,
	      offset: 0
	    }, // 1e-6 L
	    cup: {
	      name: 'cup',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0002365882,
	      offset: 0
	    }, // 236.5882 mL
	    pint: {
	      name: 'pint',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0004731765,
	      offset: 0
	    }, // 473.1765 mL
	    quart: {
	      name: 'quart',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0009463529,
	      offset: 0
	    }, // 946.3529 mL
	    gallon: {
	      name: 'gallon',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.003785412,
	      offset: 0
	    }, // 3.785412 L
	    beerbarrel: {
	      name: 'beerbarrel',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.1173478,
	      offset: 0
	    }, // 117.3478 L
	    oilbarrel: {
	      name: 'oilbarrel',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.1589873,
	      offset: 0
	    }, // 158.9873 L
	    hogshead: {
	      name: 'hogshead',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.2384810,
	      offset: 0
	    }, // 238.4810 L

	    //{name: 'min', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.00000006161152, offset: 0}, // 0.06161152 mL // min is already in use as minute
	    fldr: {
	      name: 'fldr',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0000036966911,
	      offset: 0
	    }, // 3.696691 mL
	    floz: {
	      name: 'floz',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.00002957353,
	      offset: 0
	    }, // 29.57353 mL
	    gi: {
	      name: 'gi',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0001182941,
	      offset: 0
	    }, // 118.2941 mL
	    cp: {
	      name: 'cp',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0002365882,
	      offset: 0
	    }, // 236.5882 mL
	    pt: {
	      name: 'pt',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0004731765,
	      offset: 0
	    }, // 473.1765 mL
	    qt: {
	      name: 'qt',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0009463529,
	      offset: 0
	    }, // 946.3529 mL
	    gal: {
	      name: 'gal',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.003785412,
	      offset: 0
	    }, // 3.785412 L
	    bbl: {
	      name: 'bbl',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.1173478,
	      offset: 0
	    }, // 117.3478 L
	    obl: {
	      name: 'obl',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.1589873,
	      offset: 0
	    }, // 158.9873 L
	    //{name: 'hogshead', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.2384810, offset: 0}, // 238.4810 L // TODO: hh?

	    // Mass
	    g: {
	      name: 'g',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.SHORT,
	      value: 0.001,
	      offset: 0
	    },
	    gram: {
	      name: 'gram',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.LONG,
	      value: 0.001,
	      offset: 0
	    },

	    ton: {
	      name: 'ton',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.SHORT,
	      value: 907.18474,
	      offset: 0
	    },
	    tonne: {
	      name: 'tonne',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.SHORT,
	      value: 1000,
	      offset: 0
	    },

	    grain: {
	      name: 'grain',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 64.79891e-6,
	      offset: 0
	    },
	    dram: {
	      name: 'dram',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 1.7718451953125e-3,
	      offset: 0
	    },
	    ounce: {
	      name: 'ounce',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 28.349523125e-3,
	      offset: 0
	    },
	    poundmass: {
	      name: 'poundmass',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 453.59237e-3,
	      offset: 0
	    },
	    hundredweight: {
	      name: 'hundredweight',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 45.359237,
	      offset: 0
	    },
	    stick: {
	      name: 'stick',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 115e-3,
	      offset: 0
	    },
	    stone: {
	      name: 'stone',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 6.35029318,
	      offset: 0
	    },

	    gr: {
	      name: 'gr',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 64.79891e-6,
	      offset: 0
	    },
	    dr: {
	      name: 'dr',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 1.7718451953125e-3,
	      offset: 0
	    },
	    oz: {
	      name: 'oz',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 28.349523125e-3,
	      offset: 0
	    },
	    lbm: {
	      name: 'lbm',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 453.59237e-3,
	      offset: 0
	    },
	    cwt: {
	      name: 'cwt',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 45.359237,
	      offset: 0
	    },

	    // Time
	    s: {
	      name: 's',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    min: {
	      name: 'min',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 60,
	      offset: 0
	    },
	    h: {
	      name: 'h',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 3600,
	      offset: 0
	    },
	    second: {
	      name: 'second',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    sec: {
	      name: 'sec',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    minute: {
	      name: 'minute',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 60,
	      offset: 0
	    },
	    hour: {
	      name: 'hour',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 3600,
	      offset: 0
	    },
	    day: {
	      name: 'day',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 86400,
	      offset: 0
	    },
	    week: {
	      name: 'week',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 7 * 86400,
	      offset: 0
	    },
	    month: {
	      name: 'month',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 2629800, //1/12th of Julian year
	      offset: 0
	    },
	    year: {
	      name: 'year',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 31557600, //Julian year
	      offset: 0
	    },
	    decade: {
	      name: 'year',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 315576000, //Julian decade
	      offset: 0
	    },
	    century: {
	      name: 'century',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 3155760000, //Julian century
	      offset: 0
	    },
	    millennium: {
	      name: 'millennium',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 31557600000, //Julian millennium
	      offset: 0
	    },

	    // Frequency
	    hertz: {
	      name: 'Hertz',
	      base: BASE_UNITS.FREQUENCY,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0,
	      reciprocal: true
	    },
	    Hz: {
	      name: 'Hz',
	      base: BASE_UNITS.FREQUENCY,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0,
	      reciprocal: true
	    },

	    // Angle
	    rad: {
	      name: 'rad',
	      base: BASE_UNITS.ANGLE,
	      prefixes: PREFIXES.NONE,
	      value: 1,
	      offset: 0
	    },
	    // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888
	    deg: {
	      name: 'deg',
	      base: BASE_UNITS.ANGLE,
	      prefixes: PREFIXES.NONE,
	      value: null, // will be filled in by calculateAngleValues()
	      offset: 0
	    },
	    // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399
	    grad: {
	      name: 'grad',
	      base: BASE_UNITS.ANGLE,
	      prefixes: PREFIXES.NONE,
	      value: null, // will be filled in by calculateAngleValues()
	      offset: 0
	    },
	    // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793
	    cycle: {
	      name: 'cycle',
	      base: BASE_UNITS.ANGLE,
	      prefixes: PREFIXES.NONE,
	      value: null, // will be filled in by calculateAngleValues()
	      offset: 0
	    },
	    // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795
	    arcsec: {
	      name: 'arcsec',
	      base: BASE_UNITS.ANGLE,
	      prefixes: PREFIXES.NONE,
	      value: null, // will be filled in by calculateAngleValues()
	      offset: 0
	    },
	    // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477
	    arcmin: {
	      name: 'arcmin',
	      base: BASE_UNITS.ANGLE,
	      prefixes: PREFIXES.NONE,
	      value: null, // will be filled in by calculateAngleValues()
	      offset: 0
	    },

	    // Electric current
	    A: {
	      name: 'A',
	      base: BASE_UNITS.CURRENT,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    ampere: {
	      name: 'ampere',
	      base: BASE_UNITS.CURRENT,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },

	    // Temperature
	    // K(C) = °C + 273.15
	    // K(F) = (°F + 459.67) / 1.8
	    // K(R) = °R / 1.8
	    K: {
	      name: 'K',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1,
	      offset: 0
	    },
	    degC: {
	      name: 'degC',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1,
	      offset: 273.15
	    },
	    degF: {
	      name: 'degF',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1 / 1.8,
	      offset: 459.67
	    },
	    degR: {
	      name: 'degR',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1 / 1.8,
	      offset: 0
	    },
	    kelvin: {
	      name: 'kelvin',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1,
	      offset: 0
	    },
	    celsius: {
	      name: 'celsius',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1,
	      offset: 273.15
	    },
	    fahrenheit: {
	      name: 'fahrenheit',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1 / 1.8,
	      offset: 459.67
	    },
	    rankine: {
	      name: 'rankine',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1 / 1.8,
	      offset: 0
	    },

	    // amount of substance
	    mol: {
	      name: 'mol',
	      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    mole: {
	      name: 'mole',
	      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },

	    // luminous intensity
	    cd: {
	      name: 'cd',
	      base: BASE_UNITS.LUMINOUS_INTENSITY,
	      prefixes: PREFIXES.NONE,
	      value: 1,
	      offset: 0
	    },
	    candela: {
	      name: 'candela',
	      base: BASE_UNITS.LUMINOUS_INTENSITY,
	      prefixes: PREFIXES.NONE,
	      value: 1,
	      offset: 0
	    },
	    // TODO: units STERADIAN
	    //{name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},
	    //{name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},

	    // Force
	    N: {
	      name: 'N',
	      base: BASE_UNITS.FORCE,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    newton: {
	      name: 'newton',
	      base: BASE_UNITS.FORCE,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    dyn: {
	      name: 'dyn',
	      base: BASE_UNITS.FORCE,
	      prefixes: PREFIXES.SHORT,
	      value: 0.00001,
	      offset: 0
	    },
	    dyne: {
	      name: 'dyne',
	      base: BASE_UNITS.FORCE,
	      prefixes: PREFIXES.LONG,
	      value: 0.00001,
	      offset: 0
	    },
	    lbf: {
	      name: 'lbf',
	      base: BASE_UNITS.FORCE,
	      prefixes: PREFIXES.NONE,
	      value: 4.4482216152605,
	      offset: 0
	    },
	    poundforce: {
	      name: 'poundforce',
	      base: BASE_UNITS.FORCE,
	      prefixes: PREFIXES.NONE,
	      value: 4.4482216152605,
	      offset: 0
	    },
	    kip: {
	      name: 'kip',
	      base: BASE_UNITS.FORCE,
	      prefixes: PREFIXES.LONG,
	      value: 4448.2216,
	      offset: 0
	    },

	    // Energy
	    J: {
	      name: 'J',
	      base: BASE_UNITS.ENERGY,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    joule: {
	      name: 'joule',
	      base: BASE_UNITS.ENERGY,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    erg: {
	      name: 'erg',
	      base: BASE_UNITS.ENERGY,
	      prefixes: PREFIXES.NONE,
	      value: 1e-5,
	      offset: 0
	    },
	    Wh: {
	      name: 'Wh',
	      base: BASE_UNITS.ENERGY,
	      prefixes: PREFIXES.SHORT,
	      value: 3600,
	      offset: 0
	    },
	    BTU: {
	      name: 'BTU',
	      base: BASE_UNITS.ENERGY,
	      prefixes: PREFIXES.BTU,
	      value: 1055.05585262,
	      offset: 0
	    },
	    eV: {
	      name: 'eV',
	      base: BASE_UNITS.ENERGY,
	      prefixes: PREFIXES.SHORT,
	      value: 1.602176565e-19,
	      offset: 0
	    },
	    electronvolt: {
	      name: 'electronvolt',
	      base: BASE_UNITS.ENERGY,
	      prefixes: PREFIXES.LONG,
	      value: 1.602176565e-19,
	      offset: 0
	    },

	    // Power
	    W: {
	      name: 'W',
	      base: BASE_UNITS.POWER,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    watt: {
	      name: 'W',
	      base: BASE_UNITS.POWER,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    hp: {
	      name: 'hp',
	      base: BASE_UNITS.POWER,
	      prefixes: PREFIXES.NONE,
	      value: 745.6998715386,
	      offset: 0
	    },

	    // Electrical power units
	    VAR: {
	      name: 'VAR',
	      base: BASE_UNITS.POWER,
	      prefixes: PREFIXES.SHORT,
	      value: Complex.I,
	      offset: 0
	    },

	    VA: {
	      name: 'VA',
	      base: BASE_UNITS.POWER,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },

	    // Pressure
	    Pa: {
	      name: 'Pa',
	      base: BASE_UNITS.PRESSURE,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    psi: {
	      name: 'psi',
	      base: BASE_UNITS.PRESSURE,
	      prefixes: PREFIXES.NONE,
	      value: 6894.75729276459,
	      offset: 0
	    },
	    atm: {
	      name: 'atm',
	      base: BASE_UNITS.PRESSURE,
	      prefixes: PREFIXES.NONE,
	      value: 101325,
	      offset: 0
	    },
	    bar: {
	      name: 'bar',
	      base: BASE_UNITS.PRESSURE,
	      prefixes: PREFIXES.NONE,
	      value: 100000,
	      offset: 0
	    },
	    torr: {
	      name: 'torr',
	      base: BASE_UNITS.PRESSURE,
	      prefixes: PREFIXES.NONE,
	      value: 133.322,
	      offset: 0
	    },
	    mmHg: {
	      name: 'mmHg',
	      base: BASE_UNITS.PRESSURE,
	      prefixes: PREFIXES.NONE,
	      value: 133.322,
	      offset: 0
	    },
	    mmH2O: {
	      name: 'mmH2O',
	      base: BASE_UNITS.PRESSURE,
	      prefixes: PREFIXES.NONE,
	      value: 9.80665,
	      offset: 0
	    },
	    cmH2O: {
	      name: 'cmH2O',
	      base: BASE_UNITS.PRESSURE,
	      prefixes: PREFIXES.NONE,
	      value: 98.0665,
	      offset: 0
	    },

	    // Electric charge
	    coulomb: {
	      name: 'coulomb',
	      base: BASE_UNITS.ELECTRIC_CHARGE,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    C: {
	      name: 'C',
	      base: BASE_UNITS.ELECTRIC_CHARGE,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    // Electric capacitance
	    farad: {
	      name: 'farad',
	      base: BASE_UNITS.ELECTRIC_CAPACITANCE,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    F: {
	      name: 'F',
	      base: BASE_UNITS.ELECTRIC_CAPACITANCE,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    // Electric potential
	    volt: {
	      name: 'volt',
	      base: BASE_UNITS.ELECTRIC_POTENTIAL,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    V: {
	      name: 'V',
	      base: BASE_UNITS.ELECTRIC_POTENTIAL,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    // Electric resistance
	    ohm: {
	      name: 'ohm',
	      base: BASE_UNITS.ELECTRIC_RESISTANCE,
	      prefixes: PREFIXES.SHORTLONG, // Both Mohm and megaohm are acceptable
	      value: 1,
	      offset: 0
	    },
	    /*
	     * Unicode breaks in browsers if charset is not specified
	    Ω: {
	      name: 'Ω',
	      base: BASE_UNITS.ELECTRIC_RESISTANCE,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    */
	    // Electric inductance
	    henry: {
	      name: 'henry',
	      base: BASE_UNITS.ELECTRIC_INDUCTANCE,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    H: {
	      name: 'H',
	      base: BASE_UNITS.ELECTRIC_INDUCTANCE,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    // Electric conductance
	    siemens: {
	      name: 'siemens',
	      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    S: {
	      name: 'S',
	      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    // Magnetic flux
	    weber: {
	      name: 'weber',
	      base: BASE_UNITS.MAGNETIC_FLUX,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    Wb: {
	      name: 'Wb',
	      base: BASE_UNITS.MAGNETIC_FLUX,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    // Magnetic flux density
	    tesla: {
	      name: 'tesla',
	      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    T: {
	      name: 'T',
	      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },

	    // Binary
	    b: {
	      name: 'b',
	      base: BASE_UNITS.BIT,
	      prefixes: PREFIXES.BINARY_SHORT,
	      value: 1,
	      offset: 0
	    },
	    bits: {
	      name: 'bits',
	      base: BASE_UNITS.BIT,
	      prefixes: PREFIXES.BINARY_LONG,
	      value: 1,
	      offset: 0
	    },
	    B: {
	      name: 'B',
	      base: BASE_UNITS.BIT,
	      prefixes: PREFIXES.BINARY_SHORT,
	      value: 8,
	      offset: 0
	    },
	    bytes: {
	      name: 'bytes',
	      base: BASE_UNITS.BIT,
	      prefixes: PREFIXES.BINARY_LONG,
	      value: 8,
	      offset: 0
	    }
	  };

	  // aliases (formerly plurals)
	  var ALIASES = {
	    meters: 'meter',
	    inches: 'inch',
	    feet: 'foot',
	    yards: 'yard',
	    miles: 'mile',
	    links: 'link',
	    rods: 'rod',
	    chains: 'chain',
	    angstroms: 'angstrom',

	    lt: 'l',
	    litres: 'litre',
	    liter: 'litre',
	    liters: 'litre',
	    teaspoons: 'teaspoon',
	    tablespoons: 'tablespoon',
	    minims: 'minim',
	    fluiddrams: 'fluiddram',
	    fluidounces: 'fluidounce',
	    gills: 'gill',
	    cups: 'cup',
	    pints: 'pint',
	    quarts: 'quart',
	    gallons: 'gallon',
	    beerbarrels: 'beerbarrel',
	    oilbarrels: 'oilbarrel',
	    hogsheads: 'hogshead',
	    gtts: 'gtt',

	    grams: 'gram',
	    tons: 'ton',
	    tonnes: 'tonne',
	    grains: 'grain',
	    drams: 'dram',
	    ounces: 'ounce',
	    poundmasses: 'poundmass',
	    hundredweights: 'hundredweight',
	    sticks: 'stick',
	    lb: 'lbm',
	    lbs: 'lbm',

	    kips: 'kip',

	    acres: 'acre',
	    hectares: 'hectare',
	    sqfeet: 'sqft',
	    sqyard: 'sqyd',
	    sqmile: 'sqmi',
	    sqmiles: 'sqmi',

	    mmhg: 'mmHg',
	    mmh2o: 'mmH2O',
	    cmh2o: 'cmH2O',

	    seconds: 'second',
	    secs: 'second',
	    minutes: 'minute',
	    mins: 'minute',
	    hours: 'hour',
	    hr: 'hour',
	    hrs: 'hour',
	    days: 'day',
	    weeks: 'week',
	    months: 'month',
	    years: 'year',

	    hertz: 'hertz',

	    radians: 'rad',
	    degree: 'deg',
	    degrees: 'deg',
	    gradian: 'grad',
	    gradians: 'grad',
	    cycles: 'cycle',
	    arcsecond: 'arcsec',
	    arcseconds: 'arcsec',
	    arcminute: 'arcmin',
	    arcminutes: 'arcmin',

	    BTUs: 'BTU',
	    watts: 'watt',
	    joules: 'joule',

	    amperes: 'ampere',
	    coulombs: 'coulomb',
	    volts: 'volt',
	    ohms: 'ohm',
	    farads: 'farad',
	    webers: 'weber',
	    teslas: 'tesla',
	    electronvolts: 'electronvolt',
	    moles: 'mole'

	  };

	  /**
	   * Calculate the values for the angle units.
	   * Value is calculated as number or BigNumber depending on the configuration
	   * @param {{number: 'number' | 'BigNumber'}} config
	   */
	  function calculateAngleValues(config) {
	    if (config.number === 'BigNumber') {
	      var pi = constants.pi(type.BigNumber);
	      UNITS.rad.value = new type.BigNumber(1);
	      UNITS.deg.value = pi.div(180); // 2 * pi / 360;
	      UNITS.grad.value = pi.div(200); // 2 * pi / 400;
	      UNITS.cycle.value = pi.times(2); // 2 * pi
	      UNITS.arcsec.value = pi.div(648000); // 2 * pi / 360 / 3600
	      UNITS.arcmin.value = pi.div(10800); // 2 * pi / 360 / 60
	    } else {
	      // number
	      UNITS.rad.value = 1;
	      UNITS.deg.value = Math.PI / 180; // 2 * pi / 360;
	      UNITS.grad.value = Math.PI / 200; // 2 * pi / 400;
	      UNITS.cycle.value = Math.PI * 2; // 2 * pi
	      UNITS.arcsec.value = Math.PI / 648000; // 2 * pi / 360 / 3600;
	      UNITS.arcmin.value = Math.PI / 10800; // 2 * pi / 360 / 60;
	    }
	  }

	  // apply the angle values now
	  calculateAngleValues(config);

	  // recalculate the values on change of configuration
	  math.on('config', function (curr, prev) {
	    if (curr.number !== prev.number) {
	      calculateAngleValues(curr);
	    }
	  });

	  /**
	   * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.
	   * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).
	   * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.
	   */
	  var UNIT_SYSTEMS = {
	    si: {
	      // Base units
	      NONE: { unit: UNIT_NONE, prefix: PREFIXES.NONE[''] },
	      LENGTH: { unit: UNITS.m, prefix: PREFIXES.SHORT[''] },
	      MASS: { unit: UNITS.g, prefix: PREFIXES.SHORT['k'] },
	      TIME: { unit: UNITS.s, prefix: PREFIXES.SHORT[''] },
	      CURRENT: { unit: UNITS.A, prefix: PREFIXES.SHORT[''] },
	      TEMPERATURE: { unit: UNITS.K, prefix: PREFIXES.SHORT[''] },
	      LUMINOUS_INTENSITY: { unit: UNITS.cd, prefix: PREFIXES.SHORT[''] },
	      AMOUNT_OF_SUBSTANCE: { unit: UNITS.mol, prefix: PREFIXES.SHORT[''] },
	      ANGLE: { unit: UNITS.rad, prefix: PREFIXES.SHORT[''] },
	      BIT: { unit: UNITS.bit, prefix: PREFIXES.SHORT[''] },

	      // Derived units
	      FORCE: { unit: UNITS.N, prefix: PREFIXES.SHORT[''] },
	      ENERGY: { unit: UNITS.J, prefix: PREFIXES.SHORT[''] },
	      POWER: { unit: UNITS.W, prefix: PREFIXES.SHORT[''] },
	      PRESSURE: { unit: UNITS.Pa, prefix: PREFIXES.SHORT[''] },
	      ELECTRIC_CHARGE: { unit: UNITS.C, prefix: PREFIXES.SHORT[''] },
	      ELECTRIC_CAPACITANCE: { unit: UNITS.F, prefix: PREFIXES.SHORT[''] },
	      ELECTRIC_POTENTIAL: { unit: UNITS.V, prefix: PREFIXES.SHORT[''] },
	      ELECTRIC_RESISTANCE: { unit: UNITS.ohm, prefix: PREFIXES.SHORT[''] },
	      ELECTRIC_INDUCTANCE: { unit: UNITS.H, prefix: PREFIXES.SHORT[''] },
	      ELECTRIC_CONDUCTANCE: { unit: UNITS.S, prefix: PREFIXES.SHORT[''] },
	      MAGNETIC_FLUX: { unit: UNITS.Wb, prefix: PREFIXES.SHORT[''] },
	      MAGNETIC_FLUX_DENSITY: { unit: UNITS.T, prefix: PREFIXES.SHORT[''] },
	      FREQUENCY: { unit: UNITS.Hz, prefix: PREFIXES.SHORT[''] }
	    }
	  };

	  // Clone to create the other unit systems
	  UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
	  UNIT_SYSTEMS.cgs.LENGTH = { unit: UNITS.m, prefix: PREFIXES.SHORT['c'] };
	  UNIT_SYSTEMS.cgs.MASS = { unit: UNITS.g, prefix: PREFIXES.SHORT[''] };
	  UNIT_SYSTEMS.cgs.FORCE = { unit: UNITS.dyn, prefix: PREFIXES.SHORT[''] };
	  UNIT_SYSTEMS.cgs.ENERGY = { unit: UNITS.erg, prefix: PREFIXES.NONE[''] };
	  // there are wholly 4 unique cgs systems for electricity and magnetism,
	  // so let's not worry about it unless somebody complains

	  UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
	  UNIT_SYSTEMS.us.LENGTH = { unit: UNITS.ft, prefix: PREFIXES.NONE[''] };
	  UNIT_SYSTEMS.us.MASS = { unit: UNITS.lbm, prefix: PREFIXES.NONE[''] };
	  UNIT_SYSTEMS.us.TEMPERATURE = { unit: UNITS.degF, prefix: PREFIXES.NONE[''] };
	  UNIT_SYSTEMS.us.FORCE = { unit: UNITS.lbf, prefix: PREFIXES.NONE[''] };
	  UNIT_SYSTEMS.us.ENERGY = { unit: UNITS.BTU, prefix: PREFIXES.BTU[''] };
	  UNIT_SYSTEMS.us.POWER = { unit: UNITS.hp, prefix: PREFIXES.NONE[''] };
	  UNIT_SYSTEMS.us.PRESSURE = { unit: UNITS.psi, prefix: PREFIXES.NONE[''] };

	  // Add additional unit systems here.


	  // Choose a unit system to seed the auto unit system.
	  UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));

	  // Set the current unit system
	  var currentUnitSystem = UNIT_SYSTEMS.auto;

	  /**
	   * Set a unit system for formatting derived units.
	   * @param {string} [name] The name of the unit system.
	   */
	  Unit.setUnitSystem = function (name) {
	    if (UNIT_SYSTEMS.hasOwnProperty(name)) {
	      currentUnitSystem = UNIT_SYSTEMS[name];
	    } else {
	      throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));
	    }
	  };

	  /**
	   * Return the current unit system.
	   * @return {string} The current unit system.
	   */
	  Unit.getUnitSystem = function () {
	    for (var key in UNIT_SYSTEMS) {
	      if (UNIT_SYSTEMS[key] === currentUnitSystem) {
	        return key;
	      }
	    }
	  };

	  /**
	   * Converters to convert from number to an other numeric type like BigNumber
	   * or Fraction
	   */
	  Unit.typeConverters = {
	    BigNumber: function BigNumber(x) {
	      return new type.BigNumber(x + ''); // stringify to prevent constructor error
	    },

	    Fraction: function Fraction(x) {
	      return new type.Fraction(x);
	    },

	    Complex: function Complex(x) {
	      return x;
	    },

	    number: function number(x) {
	      return x;
	    }
	  };

	  /**
	   * Retrieve the right convertor function corresponding with the type
	   * of provided exampleValue.
	   *
	   * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'
	   *                        In case of an unknown type,
	   * @return {Function}
	   */
	  Unit._getNumberConverter = function (type) {
	    if (!Unit.typeConverters[type]) {
	      throw new TypeError('Unsupported type "' + type + '"');
	    }

	    return Unit.typeConverters[type];
	  };

	  // Add dimensions to each built-in unit
	  for (var key in UNITS) {
	    var unit = UNITS[key];
	    unit.dimensions = unit.base.dimensions;
	  }

	  // Create aliases
	  for (var name in ALIASES) {
	    if (ALIASES.hasOwnProperty(name)) {
	      var unit = UNITS[ALIASES[name]];
	      var alias = {};
	      for (var key in unit) {
	        if (unit.hasOwnProperty(key)) {
	          alias[key] = unit[key];
	        }
	      }
	      alias.name = name;
	      UNITS[name] = alias;
	    }
	  }

	  function assertUnitNameIsValid(name) {
	    for (var i = 0; i < name.length; i++) {
	      var c = name.charAt(i);

	      var isValidAlpha = function isValidAlpha(p) {
	        return (/^[a-zA-Z]$/.test(p)
	        );
	      };

	      var isDigit = function isDigit(c) {
	        return c >= '0' && c <= '9';
	      };

	      if (i === 0 && !isValidAlpha(c)) throw new Error('Invalid unit name (must begin with alpha character): "' + name + '"');

	      if (i > 0 && !(isValidAlpha(c) || isDigit(c))) throw new Error('Invalid unit name (only alphanumeric characters are allowed): "' + name + '"');
	    }
	  }

	  /**
	   * Wrapper around createUnitSingle.
	   * Example: 
	   *  createUnit({
	   *    foo: { },
	   *    bar: {
	   *      definition: 'kg/foo',
	   *      aliases: ['ba', 'barr', 'bars'],
	   *      offset: 200
	   *    },
	   *    baz: '4 bar'
	   *  }, 
	   *  {
	   *    override: true;
	   *  });
	   * @param {object} obj      Object map. Each key becomes a unit which is defined by its value.
	   * @param {object} options
	   */
	  Unit.createUnit = function (obj, options) {

	    if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object') {
	      throw new TypeError("createUnit expects first parameter to be of type 'Object'");
	    }

	    // Remove all units and aliases we are overriding
	    if (options && options.override) {
	      for (var key in obj) {
	        if (obj.hasOwnProperty(key)) {
	          Unit.deleteUnit(key);
	        }
	        if (obj[key].aliases) {
	          console.log(obj[key].aliases);
	          for (var i = 0; i < obj[key].aliases.length; i++) {
	            Unit.deleteUnit(obj[key].aliases[i]);
	          }
	        }
	      }
	    }

	    // TODO: traverse multiple times until all units have been added
	    var lastUnit;
	    for (var key in obj) {
	      if (obj.hasOwnProperty(key)) {
	        lastUnit = Unit.createUnitSingle(key, obj[key]);
	      }
	    }
	    return lastUnit;
	  };

	  /**
	   * Create a user-defined unit and register it with the Unit type.
	   * Example: 
	   *  createUnitSingle('knot', '0.514444444 m/s')
	   *  createUnitSingle('acre', new Unit(43560, 'ft^2'))
	   *
	   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'
	   * @param {string, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.
	   * @param {Object} options   (optional) An object containing any of the following properties:
	   *     prefixes {string} "none", "short", "long", "binary_short", or "binary_long". The default is "none".
	   *     aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']
	   *     offset {Numeric} An offset to apply when converting from the unit. For example, the offset for celsius is 273.15 and the offset for farhenheit is 459.67. Default is 0.
	   *
	   * @return {Unit} 
	   */
	  Unit.createUnitSingle = function (name, obj, options) {

	    if (typeof obj === 'undefined' || obj === null) {
	      obj = {};
	    }

	    if (typeof name !== 'string') {
	      throw new TypeError("createUnitSingle expects first parameter to be of type 'string'");
	    }

	    // Check collisions with existing units
	    if (UNITS.hasOwnProperty(name)) {
	      throw new Error('Cannot create unit "' + name + '": a unit with that name already exists');
	    }

	    // TODO: Validate name for collisions with other built-in functions (like abs or cos, for example), and for acceptable variable names. For example, '42' is probably not a valid unit. Nor is '%', since it is also an operator.

	    assertUnitNameIsValid(name);

	    var defUnit = null; // The Unit from which the new unit will be created.
	    var aliases = [];
	    var offset = 0;
	    var definition;
	    var prefixes;
	    if (obj && obj.type === 'Unit') {
	      defUnit = obj.clone();
	    } else if (typeof obj === 'string') {
	      if (obj !== '') {
	        definition = obj;
	      }
	    } else if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {
	      definition = obj.definition;
	      prefixes = obj.prefixes;
	      offset = obj.offset;
	      aliases = obj.aliases;
	    } else {
	      throw new TypeError('Cannot create unit "' + name + '" from "' + obj.toString() + '": expecting "string" or "Unit" or "Object"');
	    }

	    if (aliases) {
	      for (var i = 0; i < aliases.length; i++) {
	        if (UNITS.hasOwnProperty(aliases[i])) {
	          throw new Error('Cannot create alias "' + aliases[i] + '": a unit with that name already exists');
	        }
	      }
	    }

	    if (definition && typeof definition === 'string' && !defUnit) {
	      try {
	        defUnit = Unit.parse(definition, { allowNoUnits: true });
	      } catch (ex) {
	        ex.message = 'Could not create unit "' + name + '" from "' + definition + '": ' + ex.message;
	        throw ex;
	      }
	    } else if (definition && definition.type === 'Unit') {
	      defUnit = definition.clone();
	    }

	    aliases = aliases || [];
	    offset = offset || 0;
	    if (prefixes && prefixes.toUpperCase) prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;else prefixes = PREFIXES.NONE;

	    // If defUnit is null, it is because the user did not
	    // specify a defintion. So create a new base dimension.
	    var newUnit = {};
	    if (!defUnit) {
	      // Add a new base dimension
	      var baseName = name + "_STUFF"; // foo --> foo_STUFF, or the essence of foo
	      if (BASE_DIMENSIONS.indexOf(baseName) >= 0) {
	        throw new Error('Cannot create new base unit "' + name + '": a base unit with that name already exists (and cannot be overridden)');
	      }
	      BASE_DIMENSIONS.push(baseName);

	      // Push 0 onto existing base units
	      for (var b in BASE_UNITS) {
	        if (BASE_UNITS.hasOwnProperty(b)) {
	          BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length - 1] = 0;
	        }
	      }

	      // Add the new base unit
	      var newBaseUnit = { dimensions: [] };
	      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
	        newBaseUnit.dimensions[i] = 0;
	      }
	      newBaseUnit.dimensions[BASE_DIMENSIONS.length - 1] = 1;
	      newBaseUnit.key = baseName;
	      BASE_UNITS[baseName] = newBaseUnit;

	      newUnit = {
	        name: name,
	        value: 1,
	        dimensions: BASE_UNITS[baseName].dimensions.slice(0),
	        prefixes: prefixes,
	        offset: offset,
	        base: baseName
	      };

	      currentUnitSystem[baseName] = {
	        unit: newUnit,
	        prefix: PREFIXES.NONE['']
	      };
	    } else {

	      newUnit = {
	        name: name,
	        value: defUnit.value,
	        dimensions: defUnit.dimensions.slice(0),
	        prefixes: prefixes,
	        offset: offset
	      };

	      // Create a new base if no matching base exists
	      var anyMatch = false;
	      for (var i in BASE_UNITS) {
	        if (BASE_UNITS.hasOwnProperty(i)) {
	          var match = true;
	          for (var j = 0; j < BASE_DIMENSIONS.length; j++) {
	            if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[i].dimensions[j] || 0)) > 1e-12) {
	              match = false;
	              break;
	            }
	          }
	          if (match) {
	            anyMatch = true;
	            break;
	          }
	        }
	      }
	      if (!anyMatch) {
	        var baseName = name + "_STUFF"; // foo --> foo_STUFF, or the essence of foo
	        // Add the new base unit
	        var newBaseUnit = { dimensions: defUnit.dimensions.slice(0) };
	        newBaseUnit.key = baseName;
	        BASE_UNITS[baseName] = newBaseUnit;

	        currentUnitSystem[baseName] = {
	          unit: newUnit,
	          prefix: PREFIXES.NONE['']
	        };

	        newUnit.base = baseName;
	      }
	    }

	    Unit.UNITS[name] = newUnit;

	    for (var i = 0; i < aliases.length; i++) {
	      var aliasName = aliases[i];
	      var alias = {};
	      for (var key in newUnit) {
	        if (newUnit.hasOwnProperty(key)) {
	          alias[key] = newUnit[key];
	        }
	      }
	      alias.name = aliasName;
	      Unit.UNITS[aliasName] = alias;
	    }

	    return new Unit(null, name);
	  };

	  Unit.deleteUnit = function (name) {
	    delete Unit.UNITS[name];
	  };

	  Unit.PREFIXES = PREFIXES;
	  Unit.BASE_UNITS = BASE_UNITS;
	  Unit.UNITS = UNITS;
	  Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;

	  return Unit;
	}

	exports.name = 'Unit';
	exports.path = 'type';
	exports.factory = factory;
	exports.math = true; // request access to the math namespace

/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var memoize = __webpack_require__(205).memoize;

	/**
	 * Calculate BigNumber e
	 * @param {function} BigNumber   BigNumber constructor
	 * @returns {BigNumber} Returns e
	 */
	exports.e = memoize(function (BigNumber) {
	  return new BigNumber(1).exp();
	}, hasher);

	/**
	 * Calculate BigNumber golden ratio, phi = (1+sqrt(5))/2
	 * @param {function} BigNumber   BigNumber constructor
	 * @returns {BigNumber} Returns phi
	 */
	exports.phi = memoize(function (BigNumber) {
	  return new BigNumber(1).plus(new BigNumber(5).sqrt()).div(2);
	}, hasher);

	/**
	 * Calculate BigNumber pi.
	 * @param {function} BigNumber   BigNumber constructor
	 * @returns {BigNumber} Returns pi
	 */
	exports.pi = memoize(function (BigNumber) {
	  return pi = BigNumber.acos(-1);
	}, hasher);

	/**
	 * Calculate BigNumber tau, tau = 2 * pi
	 * @param {function} BigNumber   BigNumber constructor
	 * @returns {BigNumber} Returns tau
	 */
	exports.tau = memoize(function (BigNumber) {
	  return exports.pi(BigNumber).times(2);
	}, hasher);

	/**
	 * Create a hash for a BigNumber constructor function. The created has is
	 * the configured precision
	 * @param {Array} args         Supposed to contain a single entry with
	 *                             a BigNumber constructor
	 * @return {number} precision
	 * @private
	 */
	function hasher(args) {
	  return args[0].precision;
	}

/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var DimensionError = __webpack_require__(202);

	function factory(type, config, load, typed) {
	  var latex = __webpack_require__(192);

	  var matrix = load(__webpack_require__(212));
	  var addScalar = load(__webpack_require__(213));
	  var unaryMinus = load(__webpack_require__(238));

	  var algorithm01 = load(__webpack_require__(214));
	  var algorithm03 = load(__webpack_require__(221));
	  var algorithm05 = load(__webpack_require__(239));
	  var algorithm10 = load(__webpack_require__(216));
	  var algorithm13 = load(__webpack_require__(217));
	  var algorithm14 = load(__webpack_require__(218));

	  // TODO: split function subtract in two: subtract and subtractScalar

	  /**
	   * Subtract two values, `x - y`.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.subtract(x, y)
	   *
	   * Examples:
	   *
	   *    math.subtract(5.3, 2);        // returns number 3.3
	   *
	   *    var a = math.complex(2, 3);
	   *    var b = math.complex(4, 1);
	   *    math.subtract(a, b);          // returns Complex -2 + 2i
	   *
	   *    math.subtract([5, 7, 4], 4);  // returns Array [1, 3, 0]
	   *
	   *    var c = math.unit('2.1 km');
	   *    var d = math.unit('500m');
	   *    math.subtract(c, d);          // returns Unit 1.6 km
	   *
	   * See also:
	   *
	   *    add
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x
	   *            Initial value
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y
	   *            Value to subtract from `x`
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
	   *            Subtraction of `x` and `y`
	   */
	  var subtract = typed('subtract', {

	    'number, number': function numberNumber(x, y) {
	      return x - y;
	    },

	    'Complex, Complex': function ComplexComplex(x, y) {
	      return x.sub(y);
	    },

	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.minus(y);
	    },

	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.sub(y);
	    },

	    'Unit, Unit': function UnitUnit(x, y) {
	      if (x.value == null) {
	        throw new Error('Parameter x contains a unit with undefined value');
	      }

	      if (y.value == null) {
	        throw new Error('Parameter y contains a unit with undefined value');
	      }

	      if (!x.equalBase(y)) {
	        throw new Error('Units do not match');
	      }

	      var res = x.clone();
	      res.value = subtract(res.value, y.value);
	      res.fixPrefix = false;

	      return res;
	    },

	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      // matrix sizes
	      var xsize = x.size();
	      var ysize = y.size();

	      // check dimensions
	      if (xsize.length !== ysize.length) throw new DimensionError(xsize.length, ysize.length);

	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse - sparse
	              c = algorithm05(x, y, subtract);
	              break;
	            default:
	              // sparse - dense
	              c = algorithm03(y, x, subtract, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense - sparse
	              c = algorithm01(x, y, subtract, false);
	              break;
	            default:
	              // dense - dense
	              c = algorithm13(x, y, subtract);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return subtract(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return subtract(matrix(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return subtract(x, matrix(y));
	    },

	    'Matrix, any': function MatrixAny(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          // algorithm 7 is faster than 9 since it calls f() for nonzero items only!
	          c = algorithm10(x, unaryMinus(y), addScalar);
	          break;
	        default:
	          c = algorithm14(x, y, subtract);
	          break;
	      }
	      return c;
	    },

	    'any, Matrix': function anyMatrix(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm10(y, x, subtract, true);
	          break;
	        default:
	          c = algorithm14(y, x, subtract, true);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, subtract, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, subtract, true).valueOf();
	    }
	  });

	  subtract.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['subtract'] + '${args[1]}\\right)'
	  };

	  return subtract;
	}

	exports.name = 'subtract';
	exports.factory = factory;

/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  var latex = __webpack_require__(192);

	  /**
	   * Inverse the sign of a value, apply a unary minus operation.
	   *
	   * For matrices, the function is evaluated element wise. Boolean values and
	   * strings will be converted to a number. For complex numbers, both real and
	   * complex value are inverted.
	   *
	   * Syntax:
	   *
	   *    math.unaryMinus(x)
	   *
	   * Examples:
	   *
	   *    math.unaryMinus(3.5);      // returns -3.5
	   *    math.unaryMinus(-4.2);     // returns 4.2
	   *
	   * See also:
	   *
	   *    add, subtract, unaryPlus
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.
	   */
	  var unaryMinus = typed('unaryMinus', {
	    'number': function number(x) {
	      return -x;
	    },

	    'Complex': function Complex(x) {
	      return x.neg();
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.neg();
	    },

	    'Fraction': function Fraction(x) {
	      return x.neg();
	    },

	    'Unit': function Unit(x) {
	      var res = x.clone();
	      res.value = unaryMinus(x.value);
	      return res;
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since unaryMinus(0) = 0
	      return deepMap(x, unaryMinus, true);
	    }

	    // TODO: add support for string
	  });

	  unaryMinus.toTex = {
	    1: latex.operators['unaryMinus'] + '\\left(${args[0]}\\right)'
	  };

	  return unaryMinus;
	}

	exports.name = 'unaryMinus';
	exports.factory = factory;

/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var DimensionError = __webpack_require__(202);

	function factory(type, config, load, typed) {

	  var equalScalar = load(__webpack_require__(208));

	  var SparseMatrix = type.SparseMatrix;

	  /**
	   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). 
	   * Callback function invoked MAX(NNZA, NNZB) times
	   *
	   *
	   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 || B(i,j) !== 0
	   * C(i,j) = ┤  
	   *          └  0            ; otherwise
	   *
	   *
	   * @param {Matrix}   a                 The SparseMatrix instance (A)
	   * @param {Matrix}   b                 The SparseMatrix instance (B)
	   * @param {Function} callback          The f(Aij,Bij) operation to invoke
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
	   */
	  var algorithm05 = function algorithm05(a, b, callback) {
	    // sparse matrix arrays
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var asize = a._size;
	    var adt = a._datatype;
	    // sparse matrix arrays
	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    var bsize = b._size;
	    var bdt = b._datatype;

	    // validate dimensions
	    if (asize.length !== bsize.length) throw new DimensionError(asize.length, bsize.length);

	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // datatype
	    var dt;
	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // find signature that matches (dt, dt)
	      eq = typed.find(equalScalar, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // result arrays
	    var cvalues = avalues && bvalues ? [] : undefined;
	    var cindex = [];
	    var cptr = [];
	    // matrix
	    var c = new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    });

	    // workspaces
	    var xa = cvalues ? [] : undefined;
	    var xb = cvalues ? [] : undefined;
	    // marks indicating we have a value in x for a given column
	    var wa = [];
	    var wb = [];

	    // vars
	    var i, j, k, k1;

	    // loop columns
	    for (j = 0; j < columns; j++) {
	      // update cptr
	      cptr[j] = cindex.length;
	      // columns mark
	      var mark = j + 1;
	      // loop values A(:,j)
	      for (k = aptr[j], k1 = aptr[j + 1]; k < k1; k++) {
	        // row
	        i = aindex[k];
	        // push index
	        cindex.push(i);
	        // update workspace
	        wa[i] = mark;
	        // check we need to process values
	        if (xa) xa[i] = avalues[k];
	      }
	      // loop values B(:,j)
	      for (k = bptr[j], k1 = bptr[j + 1]; k < k1; k++) {
	        // row
	        i = bindex[k];
	        // check row existed in A
	        if (wa[i] !== mark) {
	          // push index
	          cindex.push(i);
	        }
	        // update workspace
	        wb[i] = mark;
	        // check we need to process values
	        if (xb) xb[i] = bvalues[k];
	      }
	      // check we need to process values (non pattern matrix)
	      if (cvalues) {
	        // initialize first index in j
	        k = cptr[j];
	        // loop index in j
	        while (k < cindex.length) {
	          // row
	          i = cindex[k];
	          // marks
	          var wai = wa[i];
	          var wbi = wb[i];
	          // check Aij or Bij are nonzero
	          if (wai === mark || wbi === mark) {
	            // matrix values @ i,j
	            var va = wai === mark ? xa[i] : zero;
	            var vb = wbi === mark ? xb[i] : zero;
	            // Cij
	            var vc = cf(va, vb);
	            // check for zero
	            if (!eq(vc, zero)) {
	              // push value
	              cvalues.push(vc);
	              // increment pointer
	              k++;
	            } else {
	              // remove value @ i, do not increment pointer
	              cindex.splice(k, 1);
	            }
	          }
	        }
	      }
	    }
	    // update cptr
	    cptr[columns] = cindex.length;

	    // return sparse matrix
	    return c;
	  };

	  return algorithm05;
	}

	exports.name = 'algorithm05';
	exports.factory = factory;

/***/ },
/* 240 */
/***/ function(module, exports) {

	'use strict';

	function factory(type, config, load, typed) {

	  /**
	   * Multiply two scalar values, `x * y`.
	   * This function is meant for internal use: it is used by the public function
	   * `multiply`
	   *
	   * This function does not support collections (Array or Matrix), and does
	   * not validate the number of of inputs.
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply
	   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply
	   * @return {number | BigNumber | Fraction | Complex | Unit}                      Multiplication of `x` and `y`
	   * @private
	   */
	  var multiplyScalar = typed('multiplyScalar', {

	    'number, number': function numberNumber(x, y) {
	      return x * y;
	    },

	    'Complex, Complex': function ComplexComplex(x, y) {
	      return x.mul(y);
	    },

	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.times(y);
	    },

	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.mul(y);
	    },

	    'number | Fraction | BigNumber | Complex, Unit': function numberFractionBigNumberComplexUnit(x, y) {
	      var res = y.clone();
	      res.value = res.value === null ? res._normalize(x) : multiplyScalar(res.value, x);
	      return res;
	    },

	    'Unit, number | Fraction | BigNumber | Complex': function UnitNumberFractionBigNumberComplex(x, y) {
	      var res = x.clone();
	      res.value = res.value === null ? res._normalize(y) : multiplyScalar(res.value, y);
	      return res;
	    },

	    'Unit, Unit': function UnitUnit(x, y) {
	      return x.multiply(y);
	    }

	  });

	  return multiplyScalar;
	}

	exports.factory = factory;

/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load, typed) {
	  var multiplyScalar = load(__webpack_require__(240));

	  /**
	   * Divide two scalar values, `x / y`.
	   * This function is meant for internal use: it is used by the public functions
	   * `divide` and `inv`.
	   *
	   * This function does not support collections (Array or Matrix), and does
	   * not validate the number of of inputs.
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator
	   * @param  {number | BigNumber | Fraction | Complex} y          Denominator
	   * @return {number | BigNumber | Fraction | Complex | Unit}                      Quotient, `x / y`
	   * @private
	   */
	  var divideScalar = typed('divide', {
	    'number, number': function numberNumber(x, y) {
	      return x / y;
	    },

	    'Complex, Complex': function ComplexComplex(x, y) {
	      return x.div(y);
	    },

	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.div(y);
	    },

	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.div(y);
	    },

	    'Unit, number | Fraction | BigNumber': function UnitNumberFractionBigNumber(x, y) {
	      var res = x.clone();
	      // TODO: move the divide function to Unit.js, it uses internals of Unit
	      res.value = divideScalar(res.value === null ? res._normalize(1) : res.value, y);
	      return res;
	    },

	    'number | Fraction | BigNumber, Unit': function numberFractionBigNumberUnit(x, y) {
	      var res = y.pow(-1);
	      // TODO: move the divide function to Unit.js, it uses internals of Unit
	      res.value = multiplyScalar(res.value === null ? res._normalize(1) : res.value, x);
	      return res;
	    },

	    'Unit, Unit': function UnitUnit(x, y) {
	      return x.divide(y);
	    }

	  });

	  return divideScalar;
	}

	exports.factory = factory;

/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isInteger = __webpack_require__(166).isInteger;
	var size = __webpack_require__(200).size;

	function factory(type, config, load, typed) {
	  var latex = __webpack_require__(192);
	  var eye = load(__webpack_require__(243));
	  var multiply = load(__webpack_require__(244));
	  var matrix = load(__webpack_require__(212));
	  var fraction = load(__webpack_require__(196));
	  var number = load(__webpack_require__(230));

	  /**
	   * Calculates the power of x to y, `x ^ y`.
	   * Matrix exponentiation is supported for square matrices `x`, and positive
	   * integer exponents `y`.
	   *
	   * For cubic roots of negative numbers, the function returns the principal
	   * root by default. In order to let the function return the real root,
	   * math.js can be configured with `math.config({predictable: true})`.
	   * To retrieve all cubic roots of a value, use `math.cbrt(x, true)`.
	   *
	   * Syntax:
	   *
	   *    math.pow(x, y)
	   *
	   * Examples:
	   *
	   *    math.pow(2, 3);               // returns number 8
	   *
	   *    var a = math.complex(2, 3);
	   *    math.pow(a, 2)                // returns Complex -5 + 12i
	   *
	   *    var b = [[1, 2], [4, 3]];
	   *    math.pow(b, 2);               // returns Array [[9, 8], [16, 17]]
	   *
	   * See also:
	   *
	   *    multiply, sqrt, cbrt, nthRoot
	   *
	   * @param  {number | BigNumber | Complex | Array | Matrix} x  The base
	   * @param  {number | BigNumber | Complex} y                   The exponent
	   * @return {number | BigNumber | Complex | Array | Matrix} The value of `x` to the power `y`
	   */
	  var pow = typed('pow', {
	    'number, number': _pow,

	    'Complex, Complex': function ComplexComplex(x, y) {
	      return x.pow(y);
	    },

	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      if (y.isInteger() || x >= 0 || config.predictable) {
	        return x.pow(y);
	      } else {
	        return new type.Complex(x.toNumber(), 0).pow(y.toNumber(), 0);
	      }
	    },

	    'Fraction, Fraction': function FractionFraction(x, y) {
	      if (y.d !== 1) {
	        if (config.predictable) {
	          throw new Error('Function pow does not support non-integer exponents for fractions.');
	        } else {
	          return _pow(x.valueOf(), y.valueOf());
	        }
	      } else {
	        return x.pow(y);
	      }
	    },

	    'Array, number': _powArray,

	    'Array, BigNumber': function ArrayBigNumber(x, y) {
	      return _powArray(x, y.toNumber());
	    },

	    'Matrix, number': _powMatrix,

	    'Matrix, BigNumber': function MatrixBigNumber(x, y) {
	      return _powMatrix(x, y.toNumber());
	    },

	    'Unit, number': function UnitNumber(x, y) {
	      return x.pow(y);
	    }

	  });

	  /**
	   * Calculates the power of x to y, x^y, for two numbers.
	   * @param {number} x
	   * @param {number} y
	   * @return {number | Complex} res
	   * @private
	   */
	  function _pow(x, y) {

	    // Alternatively could define a 'realmode' config option or something, but
	    // 'predictable' will work for now
	    if (config.predictable && !isInteger(y) && x < 0) {
	      // Check to see if y can be represented as a fraction
	      try {
	        var yFrac = fraction(y);
	        var yNum = number(yFrac);
	        if (y === yNum || Math.abs((y - yNum) / y) < 1e-14) {
	          if (yFrac.d % 2 === 1) {
	            return (yFrac.n % 2 === 0 ? 1 : -1) * Math.pow(-x, y);
	          }
	        }
	      } catch (ex) {}
	      // fraction() throws an error if y is Infinity, etc.


	      // Unable to express y as a fraction, so continue on
	    }

	    if (isInteger(y) || x >= 0 || config.predictable) {
	      return Math.pow(x, y);
	    } else {
	      return new type.Complex(x, 0).pow(y, 0);
	    }
	  }

	  /**
	   * Calculate the power of a 2d array
	   * @param {Array} x     must be a 2 dimensional, square matrix
	   * @param {number} y    a positive, integer value
	   * @returns {Array}
	   * @private
	   */
	  function _powArray(x, y) {
	    if (!isInteger(y) || y < 0) {
	      throw new TypeError('For A^b, b must be a positive integer (value is ' + y + ')');
	    }
	    // verify that A is a 2 dimensional square matrix
	    var s = size(x);
	    if (s.length != 2) {
	      throw new Error('For A^b, A must be 2 dimensional (A has ' + s.length + ' dimensions)');
	    }
	    if (s[0] != s[1]) {
	      throw new Error('For A^b, A must be square (size is ' + s[0] + 'x' + s[1] + ')');
	    }

	    var res = eye(s[0]).valueOf();
	    var px = x;
	    while (y >= 1) {
	      if ((y & 1) == 1) {
	        res = multiply(px, res);
	      }
	      y >>= 1;
	      px = multiply(px, px);
	    }
	    return res;
	  }

	  /**
	   * Calculate the power of a 2d matrix
	   * @param {Matrix} x     must be a 2 dimensional, square matrix
	   * @param {number} y    a positive, integer value
	   * @returns {Matrix}
	   * @private
	   */
	  function _powMatrix(x, y) {
	    return matrix(_powArray(x.valueOf(), y));
	  }

	  pow.toTex = {
	    2: '\\left(${args[0]}\\right)' + latex.operators['pow'] + '{${args[1]}}'
	  };

	  return pow;
	}

	exports.name = 'pow';
	exports.factory = factory;

/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var array = __webpack_require__(200);
	var isInteger = __webpack_require__(166).isInteger;

	function factory(type, config, load, typed) {

	  var matrix = load(__webpack_require__(212));

	  /**
	   * Create a 2-dimensional identity matrix with size m x n or n x n.
	   * The matrix has ones on the diagonal and zeros elsewhere.
	   *
	   * Syntax:
	   *
	   *    math.eye(n)
	   *    math.eye(n, format)
	   *    math.eye(m, n)
	   *    math.eye(m, n, format)
	   *    math.eye([m, n])
	   *    math.eye([m, n], format)
	   *
	   * Examples:
	   *
	   *    math.eye(3);                    // returns [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
	   *    math.eye(3, 2);                 // returns [[1, 0], [0, 1], [0, 0]]
	   *
	   *    var A = [[1, 2, 3], [4, 5, 6]];
	   *    math.eye(math.size(A));         // returns [[1, 0, 0], [0, 1, 0]]
	   *
	   * See also:
	   *
	   *    diag, ones, zeros, size, range
	   *
	   * @param {...number | Matrix | Array} size   The size for the matrix
	   * @param {string} [format]                   The Matrix storage format
	   *
	   * @return {Matrix | Array | number} A matrix with ones on the diagonal.
	   */
	  var eye = typed('eye', {
	    '': function _() {
	      return config.matrix === 'Matrix' ? matrix([]) : [];
	    },

	    'string': function string(format) {
	      return matrix(format);
	    },

	    'number | BigNumber': function numberBigNumber(rows) {
	      return _eye(rows, rows, config.matrix === 'Matrix' ? 'default' : undefined);
	    },

	    'number | BigNumber, string': function numberBigNumberString(rows, format) {
	      return _eye(rows, rows, format);
	    },

	    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(rows, cols) {
	      return _eye(rows, cols, config.matrix === 'Matrix' ? 'default' : undefined);
	    },

	    'number | BigNumber, number | BigNumber, string': function numberBigNumberNumberBigNumberString(rows, cols, format) {
	      return _eye(rows, cols, format);
	    },

	    'Array': function Array(size) {
	      return _eyeVector(size);
	    },

	    'Array, string': function ArrayString(size, format) {
	      return _eyeVector(size, format);
	    },

	    'Matrix': function Matrix(size) {
	      return _eyeVector(size.valueOf(), size.storage());
	    },

	    'Matrix, string': function MatrixString(size, format) {
	      return _eyeVector(size.valueOf(), format);
	    }
	  });

	  eye.toTex = undefined; // use default template

	  return eye;

	  function _eyeVector(size, format) {
	    switch (size.length) {
	      case 0:
	        return format ? matrix(format) : [];
	      case 1:
	        return _eye(size[0], size[0], format);
	      case 2:
	        return _eye(size[0], size[1], format);
	      default:
	        throw new Error('Vector containing two values expected');
	    }
	  }

	  /**
	   * Create an identity matrix
	   * @param {number | BigNumber} rows
	   * @param {number | BigNumber} cols
	   * @param {string} [format]
	   * @returns {Matrix}
	   * @private
	   */
	  function _eye(rows, cols, format) {
	    // BigNumber constructor with the right precision
	    var Big = rows && rows.isBigNumber === true ? type.BigNumber : cols && cols.isBigNumber === true ? type.BigNumber : null;

	    if (rows && rows.isBigNumber === true) rows = rows.toNumber();
	    if (cols && cols.isBigNumber === true) cols = cols.toNumber();

	    if (!isInteger(rows) || rows < 1) {
	      throw new Error('Parameters in function eye must be positive integers');
	    }
	    if (!isInteger(cols) || cols < 1) {
	      throw new Error('Parameters in function eye must be positive integers');
	    }

	    var one = Big ? new type.BigNumber(1) : 1;
	    var defaultValue = Big ? new Big(0) : 0;
	    var size = [rows, cols];

	    // check we need to return a matrix
	    if (format) {
	      // get matrix storage constructor
	      var F = type.Matrix.storage(format);
	      // create diagonal matrix (use optimized implementation for storage format)
	      return F.diagonal(size, one, 0, defaultValue);
	    }

	    // create and resize array
	    var res = array.resize([], size, defaultValue);
	    // fill in ones on the diagonal
	    var minimum = rows < cols ? rows : cols;
	    // fill diagonal
	    for (var d = 0; d < minimum; d++) {
	      res[d][d] = one;
	    }
	    return res;
	  }
	}

	exports.name = 'eye';
	exports.factory = factory;

/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var extend = __webpack_require__(163).extend;
	var array = __webpack_require__(200);

	function factory(type, config, load, typed) {
	  var latex = __webpack_require__(192);

	  var matrix = load(__webpack_require__(212));
	  var addScalar = load(__webpack_require__(213));
	  var multiplyScalar = load(__webpack_require__(240));
	  var equalScalar = load(__webpack_require__(208));

	  var algorithm11 = load(__webpack_require__(245));
	  var algorithm14 = load(__webpack_require__(218));

	  var DenseMatrix = type.DenseMatrix;
	  var SparseMatrix = type.SparseMatrix;

	  /**
	   * Multiply two values, `x * y`.
	   * For matrices, the matrix product is calculated.
	   *
	   * Syntax:
	   *
	   *    math.multiply(x, y)
	   *
	   * Examples:
	   *
	   *    math.multiply(4, 5.2);        // returns number 20.8
	   *
	   *    var a = math.complex(2, 3);
	   *    var b = math.complex(4, 1);
	   *    math.multiply(a, b);          // returns Complex 5 + 14i
	   *
	   *    var c = [[1, 2], [4, 3]];
	   *    var d = [[1, 2, 3], [3, -4, 7]];
	   *    math.multiply(c, d);          // returns Array [[7, -6, 17], [13, -4, 33]]
	   *
	   *    var e = math.unit('2.1 km');
	   *    math.multiply(3, e);          // returns Unit 6.3 km
	   *
	   * See also:
	   *
	   *    divide
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`
	   */
	  var multiply = typed('multiply', extend({
	    // we extend the signatures of multiplyScalar with signatures dealing with matrices

	    'Array, Array': function ArrayArray(x, y) {
	      // check dimensions
	      _validateMatrixDimensions(array.size(x), array.size(y));

	      // use dense matrix implementation
	      var m = multiply(matrix(x), matrix(y));
	      // return array or scalar
	      return m && m.isMatrix === true ? m.valueOf() : m;
	    },

	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      // dimensions
	      var xsize = x.size();
	      var ysize = y.size();

	      // check dimensions
	      _validateMatrixDimensions(xsize, ysize);

	      // process dimensions
	      if (xsize.length === 1) {
	        // process y dimensions
	        if (ysize.length === 1) {
	          // Vector * Vector
	          return _multiplyVectorVector(x, y, xsize[0]);
	        }
	        // Vector * Matrix
	        return _multiplyVectorMatrix(x, y);
	      }
	      // process y dimensions
	      if (ysize.length === 1) {
	        // Matrix * Vector
	        return _multiplyMatrixVector(x, y);
	      }
	      // Matrix * Matrix
	      return _multiplyMatrixMatrix(x, y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use Matrix * Matrix implementation
	      return multiply(x, matrix(y));
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use Matrix * Matrix implementation
	      return multiply(matrix(x, y.storage()), y);
	    },

	    'Matrix, any': function MatrixAny(x, y) {
	      // result
	      var c;

	      // process storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm11(x, y, multiplyScalar, false);
	          break;
	        case 'dense':
	          c = algorithm14(x, y, multiplyScalar, false);
	          break;
	      }
	      return c;
	    },

	    'any, Matrix': function anyMatrix(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm11(y, x, multiplyScalar, true);
	          break;
	        case 'dense':
	          c = algorithm14(y, x, multiplyScalar, true);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();
	    }
	  }, multiplyScalar.signatures));

	  var _validateMatrixDimensions = function _validateMatrixDimensions(size1, size2) {
	    // check left operand dimensions
	    switch (size1.length) {
	      case 1:
	        // check size2
	        switch (size2.length) {
	          case 1:
	            // Vector x Vector
	            if (size1[0] !== size2[0]) {
	              // throw error
	              throw new RangeError('Dimension mismatch in multiplication. Vectors must have the same length');
	            }
	            break;
	          case 2:
	            // Vector x Matrix
	            if (size1[0] !== size2[0]) {
	              // throw error
	              throw new RangeError('Dimension mismatch in multiplication. Vector length (' + size1[0] + ') must match Matrix rows (' + size2[0] + ')');
	            }
	            break;
	          default:
	            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
	        }
	        break;
	      case 2:
	        // check size2
	        switch (size2.length) {
	          case 1:
	            // Matrix x Vector
	            if (size1[1] !== size2[0]) {
	              // throw error
	              throw new RangeError('Dimension mismatch in multiplication. Matrix columns (' + size1[1] + ') must match Vector length (' + size2[0] + ')');
	            }
	            break;
	          case 2:
	            // Matrix x Matrix
	            if (size1[1] !== size2[0]) {
	              // throw error
	              throw new RangeError('Dimension mismatch in multiplication. Matrix A columns (' + size1[1] + ') must match Matrix B rows (' + size2[0] + ')');
	            }
	            break;
	          default:
	            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
	        }
	        break;
	      default:
	        throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix A has ' + size1.length + ' dimensions)');
	    }
	  };

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            Dense Vector   (N)
	   * @param {Matrix} b            Dense Vector   (N)
	   *
	   * @return {number}             Scalar value
	   */
	  var _multiplyVectorVector = function _multiplyVectorVector(a, b, n) {
	    // check empty vector
	    if (n === 0) throw new Error('Cannot multiply two empty vectors');

	    // a dense
	    var adata = a._data;
	    var adt = a._datatype;
	    // b dense
	    var bdata = b._data;
	    var bdt = b._datatype;

	    // datatype
	    var dt;
	    // addScalar signature to use
	    var af = addScalar;
	    // multiplyScalar signature to use
	    var mf = multiplyScalar;

	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signatures that matches (dt, dt)
	      af = typed.find(addScalar, [dt, dt]);
	      mf = typed.find(multiplyScalar, [dt, dt]);
	    }

	    // result (do not initialize it with zero)
	    var c = mf(adata[0], bdata[0]);
	    // loop data
	    for (var i = 1; i < n; i++) {
	      // multiply and accumulate
	      c = af(c, mf(adata[i], bdata[i]));
	    }
	    return c;
	  };

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            Dense Vector   (M)
	   * @param {Matrix} b            Matrix         (MxN)
	   *
	   * @return {Matrix}             Dense Vector   (N)
	   */
	  var _multiplyVectorMatrix = function _multiplyVectorMatrix(a, b) {
	    // process storage
	    switch (b.storage()) {
	      case 'dense':
	        return _multiplyVectorDenseMatrix(a, b);
	    }
	    throw new Error('Not implemented');
	  };

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            Dense Vector   (M)
	   * @param {Matrix} b            Dense Matrix   (MxN)
	   *
	   * @return {Matrix}             Dense Vector   (N)
	   */
	  var _multiplyVectorDenseMatrix = function _multiplyVectorDenseMatrix(a, b) {
	    // a dense
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype;
	    // b dense
	    var bdata = b._data;
	    var bsize = b._size;
	    var bdt = b._datatype;
	    // rows & columns
	    var alength = asize[0];
	    var bcolumns = bsize[1];

	    // datatype
	    var dt;
	    // addScalar signature to use
	    var af = addScalar;
	    // multiplyScalar signature to use
	    var mf = multiplyScalar;

	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signatures that matches (dt, dt)
	      af = typed.find(addScalar, [dt, dt]);
	      mf = typed.find(multiplyScalar, [dt, dt]);
	    }

	    // result
	    var c = [];

	    // loop matrix columns
	    for (var j = 0; j < bcolumns; j++) {
	      // sum (do not initialize it with zero)
	      var sum = mf(adata[0], bdata[0][j]);
	      // loop vector
	      for (var i = 1; i < alength; i++) {
	        // multiply & accumulate
	        sum = af(sum, mf(adata[i], bdata[i][j]));
	      }
	      c[j] = sum;
	    }

	    // return matrix
	    return new DenseMatrix({
	      data: c,
	      size: [bcolumns],
	      datatype: dt
	    });
	  };

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            Matrix         (MxN)
	   * @param {Matrix} b            Dense Vector   (N)
	   *
	   * @return {Matrix}             Dense Vector   (M)
	   */
	  var _multiplyMatrixVector = function _multiplyMatrixVector(a, b) {
	    // process storage
	    switch (a.storage()) {
	      case 'dense':
	        return _multiplyDenseMatrixVector(a, b);
	      case 'sparse':
	        return _multiplySparseMatrixVector(a, b);
	    }
	  };

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            Matrix         (MxN)
	   * @param {Matrix} b            Matrix         (NxC)
	   *
	   * @return {Matrix}             Matrix         (MxC)
	   */
	  var _multiplyMatrixMatrix = function _multiplyMatrixMatrix(a, b) {
	    // process storage
	    switch (a.storage()) {
	      case 'dense':
	        // process storage
	        switch (b.storage()) {
	          case 'dense':
	            return _multiplyDenseMatrixDenseMatrix(a, b);
	          case 'sparse':
	            return _multiplyDenseMatrixSparseMatrix(a, b);
	        }
	        break;
	      case 'sparse':
	        // process storage
	        switch (b.storage()) {
	          case 'dense':
	            return _multiplySparseMatrixDenseMatrix(a, b);
	          case 'sparse':
	            return _multiplySparseMatrixSparseMatrix(a, b);
	        }
	        break;
	    }
	  };

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            DenseMatrix  (MxN)
	   * @param {Matrix} b            Dense Vector (N)
	   *
	   * @return {Matrix}             Dense Vector (M) 
	   */
	  var _multiplyDenseMatrixVector = function _multiplyDenseMatrixVector(a, b) {
	    // a dense
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype;
	    // b dense
	    var bdata = b._data;
	    var bdt = b._datatype;
	    // rows & columns
	    var arows = asize[0];
	    var acolumns = asize[1];

	    // datatype
	    var dt;
	    // addScalar signature to use
	    var af = addScalar;
	    // multiplyScalar signature to use
	    var mf = multiplyScalar;

	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signatures that matches (dt, dt)
	      af = typed.find(addScalar, [dt, dt]);
	      mf = typed.find(multiplyScalar, [dt, dt]);
	    }

	    // result
	    var c = [];

	    // loop matrix a rows
	    for (var i = 0; i < arows; i++) {
	      // current row
	      var row = adata[i];
	      // sum (do not initialize it with zero)
	      var sum = mf(row[0], bdata[0]);
	      // loop matrix a columns
	      for (var j = 1; j < acolumns; j++) {
	        // multiply & accumulate
	        sum = af(sum, mf(row[j], bdata[j]));
	      }
	      c[i] = sum;
	    }

	    // return matrix
	    return new DenseMatrix({
	      data: c,
	      size: [arows],
	      datatype: dt
	    });
	  };

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            DenseMatrix    (MxN)
	   * @param {Matrix} b            DenseMatrix    (NxC)
	   *
	   * @return {Matrix}             DenseMatrix    (MxC)
	   */
	  var _multiplyDenseMatrixDenseMatrix = function _multiplyDenseMatrixDenseMatrix(a, b) {
	    // a dense
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype;
	    // b dense
	    var bdata = b._data;
	    var bsize = b._size;
	    var bdt = b._datatype;
	    // rows & columns
	    var arows = asize[0];
	    var acolumns = asize[1];
	    var bcolumns = bsize[1];

	    // datatype
	    var dt;
	    // addScalar signature to use
	    var af = addScalar;
	    // multiplyScalar signature to use
	    var mf = multiplyScalar;

	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signatures that matches (dt, dt)
	      af = typed.find(addScalar, [dt, dt]);
	      mf = typed.find(multiplyScalar, [dt, dt]);
	    }

	    // result
	    var c = [];

	    // loop matrix a rows
	    for (var i = 0; i < arows; i++) {
	      // current row
	      var row = adata[i];
	      // initialize row array
	      c[i] = [];
	      // loop matrix b columns
	      for (var j = 0; j < bcolumns; j++) {
	        // sum (avoid initializing sum to zero)
	        var sum = mf(row[0], bdata[0][j]);
	        // loop matrix a columns
	        for (var x = 1; x < acolumns; x++) {
	          // multiply & accumulate
	          sum = af(sum, mf(row[x], bdata[x][j]));
	        }
	        c[i][j] = sum;
	      }
	    }

	    // return matrix
	    return new DenseMatrix({
	      data: c,
	      size: [arows, bcolumns],
	      datatype: dt
	    });
	  };

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            DenseMatrix    (MxN)
	   * @param {Matrix} b            SparseMatrix   (NxC)
	   *
	   * @return {Matrix}             SparseMatrix   (MxC)
	   */
	  var _multiplyDenseMatrixSparseMatrix = function _multiplyDenseMatrixSparseMatrix(a, b) {
	    // a dense
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype;
	    // b sparse
	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    var bsize = b._size;
	    var bdt = b._datatype;
	    // validate b matrix
	    if (!bvalues) throw new Error('Cannot multiply Dense Matrix times Pattern only Matrix');
	    // rows & columns
	    var arows = asize[0];
	    var bcolumns = bsize[1];

	    // datatype
	    var dt;
	    // addScalar signature to use
	    var af = addScalar;
	    // multiplyScalar signature to use
	    var mf = multiplyScalar;
	    // equalScalar signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;

	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signatures that matches (dt, dt)
	      af = typed.find(addScalar, [dt, dt]);
	      mf = typed.find(multiplyScalar, [dt, dt]);
	      eq = typed.find(equalScalar, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	    }

	    // result
	    var cvalues = [];
	    var cindex = [];
	    var cptr = [];
	    // c matrix
	    var c = new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [arows, bcolumns],
	      datatype: dt
	    });

	    // loop b columns
	    for (var jb = 0; jb < bcolumns; jb++) {
	      // update ptr
	      cptr[jb] = cindex.length;
	      // indeces in column jb
	      var kb0 = bptr[jb];
	      var kb1 = bptr[jb + 1];
	      // do not process column jb if no data exists
	      if (kb1 > kb0) {
	        // last row mark processed
	        var last = 0;
	        // loop a rows
	        for (var i = 0; i < arows; i++) {
	          // column mark
	          var mark = i + 1;
	          // C[i, jb]
	          var cij;
	          // values in b column j
	          for (var kb = kb0; kb < kb1; kb++) {
	            // row
	            var ib = bindex[kb];
	            // check value has been initialized
	            if (last !== mark) {
	              // first value in column jb
	              cij = mf(adata[i][ib], bvalues[kb]);
	              // update mark
	              last = mark;
	            } else {
	              // accumulate value
	              cij = af(cij, mf(adata[i][ib], bvalues[kb]));
	            }
	          }
	          // check column has been processed and value != 0
	          if (last === mark && !eq(cij, zero)) {
	            // push row & value
	            cindex.push(i);
	            cvalues.push(cij);
	          }
	        }
	      }
	    }
	    // update ptr
	    cptr[bcolumns] = cindex.length;

	    // return sparse matrix
	    return c;
	  };

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            SparseMatrix    (MxN)
	   * @param {Matrix} b            Dense Vector (N)
	   *
	   * @return {Matrix}             SparseMatrix    (M, 1) 
	   */
	  var _multiplySparseMatrixVector = function _multiplySparseMatrixVector(a, b) {
	    // a sparse
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var adt = a._datatype;
	    // validate a matrix
	    if (!avalues) throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
	    // b dense
	    var bdata = b._data;
	    var bdt = b._datatype;
	    // rows & columns
	    var arows = a._size[0];
	    var brows = b._size[0];
	    // result
	    var cvalues = [];
	    var cindex = [];
	    var cptr = [];

	    // datatype
	    var dt;
	    // addScalar signature to use
	    var af = addScalar;
	    // multiplyScalar signature to use
	    var mf = multiplyScalar;
	    // equalScalar signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;

	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signatures that matches (dt, dt)
	      af = typed.find(addScalar, [dt, dt]);
	      mf = typed.find(multiplyScalar, [dt, dt]);
	      eq = typed.find(equalScalar, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	    }

	    // workspace
	    var x = [];
	    // vector with marks indicating a value x[i] exists in a given column
	    var w = [];

	    // update ptr
	    cptr[0] = 0;
	    // rows in b
	    for (var ib = 0; ib < brows; ib++) {
	      // b[ib]
	      var vbi = bdata[ib];
	      // check b[ib] != 0, avoid loops
	      if (!eq(vbi, zero)) {
	        // A values & index in ib column
	        for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
	          // a row
	          var ia = aindex[ka];
	          // check value exists in current j
	          if (!w[ia]) {
	            // ia is new entry in j
	            w[ia] = true;
	            // add i to pattern of C
	            cindex.push(ia);
	            // x(ia) = A
	            x[ia] = mf(vbi, avalues[ka]);
	          } else {
	            // i exists in C already
	            x[ia] = af(x[ia], mf(vbi, avalues[ka]));
	          }
	        }
	      }
	    }
	    // copy values from x to column jb of c
	    for (var p1 = cindex.length, p = 0; p < p1; p++) {
	      // row
	      var ic = cindex[p];
	      // copy value
	      cvalues[p] = x[ic];
	    }
	    // update ptr
	    cptr[1] = cindex.length;

	    // return sparse matrix
	    return new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [arows, 1],
	      datatype: dt
	    });
	  };

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            SparseMatrix      (MxN)
	   * @param {Matrix} b            DenseMatrix       (NxC)
	   *
	   * @return {Matrix}             SparseMatrix      (MxC)
	   */
	  var _multiplySparseMatrixDenseMatrix = function _multiplySparseMatrixDenseMatrix(a, b) {
	    // a sparse
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var adt = a._datatype;
	    // validate a matrix
	    if (!avalues) throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
	    // b dense
	    var bdata = b._data;
	    var bdt = b._datatype;
	    // rows & columns
	    var arows = a._size[0];
	    var brows = b._size[0];
	    var bcolumns = b._size[1];

	    // datatype
	    var dt;
	    // addScalar signature to use
	    var af = addScalar;
	    // multiplyScalar signature to use
	    var mf = multiplyScalar;
	    // equalScalar signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;

	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signatures that matches (dt, dt)
	      af = typed.find(addScalar, [dt, dt]);
	      mf = typed.find(multiplyScalar, [dt, dt]);
	      eq = typed.find(equalScalar, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	    }

	    // result
	    var cvalues = [];
	    var cindex = [];
	    var cptr = [];
	    // c matrix
	    var c = new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [arows, bcolumns],
	      datatype: dt
	    });

	    // workspace
	    var x = [];
	    // vector with marks indicating a value x[i] exists in a given column
	    var w = [];

	    // loop b columns
	    for (var jb = 0; jb < bcolumns; jb++) {
	      // update ptr
	      cptr[jb] = cindex.length;
	      // mark in workspace for current column
	      var mark = jb + 1;
	      // rows in jb
	      for (var ib = 0; ib < brows; ib++) {
	        // b[ib, jb]
	        var vbij = bdata[ib][jb];
	        // check b[ib, jb] != 0, avoid loops
	        if (!eq(vbij, zero)) {
	          // A values & index in ib column
	          for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
	            // a row
	            var ia = aindex[ka];
	            // check value exists in current j
	            if (w[ia] !== mark) {
	              // ia is new entry in j
	              w[ia] = mark;
	              // add i to pattern of C
	              cindex.push(ia);
	              // x(ia) = A
	              x[ia] = mf(vbij, avalues[ka]);
	            } else {
	              // i exists in C already
	              x[ia] = af(x[ia], mf(vbij, avalues[ka]));
	            }
	          }
	        }
	      }
	      // copy values from x to column jb of c
	      for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
	        // row
	        var ic = cindex[p];
	        // copy value
	        cvalues[p] = x[ic];
	      }
	    }
	    // update ptr
	    cptr[bcolumns] = cindex.length;

	    // return sparse matrix
	    return c;
	  };

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            SparseMatrix      (MxN)
	   * @param {Matrix} b            SparseMatrix      (NxC)
	   *
	   * @return {Matrix}             SparseMatrix      (MxC)
	   */
	  var _multiplySparseMatrixSparseMatrix = function _multiplySparseMatrixSparseMatrix(a, b) {
	    // a sparse
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var adt = a._datatype;
	    // b sparse
	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    var bdt = b._datatype;

	    // rows & columns
	    var arows = a._size[0];
	    var bcolumns = b._size[1];
	    // flag indicating both matrices (a & b) contain data
	    var values = avalues && bvalues;

	    // datatype
	    var dt;
	    // addScalar signature to use
	    var af = addScalar;
	    // multiplyScalar signature to use
	    var mf = multiplyScalar;

	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signatures that matches (dt, dt)
	      af = typed.find(addScalar, [dt, dt]);
	      mf = typed.find(multiplyScalar, [dt, dt]);
	    }

	    // result
	    var cvalues = values ? [] : undefined;
	    var cindex = [];
	    var cptr = [];
	    // c matrix
	    var c = new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [arows, bcolumns],
	      datatype: dt
	    });

	    // workspace
	    var x = values ? [] : undefined;
	    // vector with marks indicating a value x[i] exists in a given column
	    var w = [];
	    // variables
	    var ka, ka0, ka1, kb, kb0, kb1, ia, ib;
	    // loop b columns
	    for (var jb = 0; jb < bcolumns; jb++) {
	      // update ptr
	      cptr[jb] = cindex.length;
	      // mark in workspace for current column
	      var mark = jb + 1;
	      // B values & index in j
	      for (kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++) {
	        // b row
	        ib = bindex[kb];
	        // check we need to process values
	        if (values) {
	          // loop values in a[:,ib]
	          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
	            // row
	            ia = aindex[ka];
	            // check value exists in current j
	            if (w[ia] !== mark) {
	              // ia is new entry in j
	              w[ia] = mark;
	              // add i to pattern of C
	              cindex.push(ia);
	              // x(ia) = A
	              x[ia] = mf(bvalues[kb], avalues[ka]);
	            } else {
	              // i exists in C already
	              x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));
	            }
	          }
	        } else {
	          // loop values in a[:,ib]
	          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
	            // row
	            ia = aindex[ka];
	            // check value exists in current j
	            if (w[ia] !== mark) {
	              // ia is new entry in j
	              w[ia] = mark;
	              // add i to pattern of C
	              cindex.push(ia);
	            }
	          }
	        }
	      }
	      // check we need to process matrix values (pattern matrix)
	      if (values) {
	        // copy values from x to column jb of c
	        for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
	          // row
	          var ic = cindex[p];
	          // copy value
	          cvalues[p] = x[ic];
	        }
	      }
	    }
	    // update ptr
	    cptr[bcolumns] = cindex.length;

	    // return sparse matrix
	    return c;
	  };

	  multiply.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['multiply'] + '${args[1]}\\right)'
	  };

	  return multiply;
	}

	exports.name = 'multiply';
	exports.factory = factory;

/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load, typed) {

	  var equalScalar = load(__webpack_require__(208));

	  var SparseMatrix = type.SparseMatrix;

	  /**
	   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b). 
	   * Callback function invoked NZ times (number of nonzero items in S).
	   *
	   *
	   *          ┌  f(Sij, b)  ; S(i,j) !== 0
	   * C(i,j) = ┤  
	   *          └  0          ; otherwise
	   *
	   *
	   * @param {Matrix}   s                 The SparseMatrix instance (S)
	   * @param {Scalar}   b                 The Scalar value
	   * @param {Function} callback          The f(Aij,b) operation to invoke
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
	   */
	  var algorithm11 = function algorithm11(s, b, callback, inverse) {
	    // sparse matrix arrays
	    var avalues = s._values;
	    var aindex = s._index;
	    var aptr = s._ptr;
	    var asize = s._size;
	    var adt = s._datatype;

	    // sparse matrix cannot be a Pattern matrix
	    if (!avalues) throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // datatype
	    var dt;
	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signature that matches (dt, dt)
	      eq = typed.find(equalScalar, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // convert b to the same datatype
	      b = typed.convert(b, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // result arrays
	    var cvalues = [];
	    var cindex = [];
	    var cptr = [];
	    // matrix
	    var c = new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    });

	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // initialize ptr
	      cptr[j] = cindex.length;
	      // values in j
	      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        var i = aindex[k];
	        // invoke callback
	        var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b);
	        // check value is zero
	        if (!eq(v, zero)) {
	          // push index & value
	          cindex.push(i);
	          cvalues.push(v);
	        }
	      }
	    }
	    // update ptr
	    cptr[columns] = cindex.length;

	    // return sparse matrix
	    return c;
	  };

	  return algorithm11;
	}

	exports.name = 'algorithm11';
	exports.factory = factory;

/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  /**
	   * Calculate the absolute value of a number. For matrices, the function is
	   * evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.abs(x)
	   *
	   * Examples:
	   *
	   *    math.abs(3.5);                // returns number 3.5
	   *    math.abs(-4.2);               // returns number 4.2
	   *
	   *    math.abs([3, -5, -1, 0, 2]);  // returns Array [3, 5, 1, 0, 2]
	   *
	   * See also:
	   *
	   *    sign
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
	   *            A number or matrix for which to get the absolute value
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}
	   *            Absolute value of `x`
	   */
	  var abs = typed('abs', {
	    'number': Math.abs,

	    'Complex': function Complex(x) {
	      return x.abs();
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.abs();
	    },

	    'Fraction': function Fraction(x) {
	      return x.abs();
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since abs(0) = 0
	      return deepMap(x, abs, true);
	    },

	    'Unit': function Unit(x) {
	      return x.abs();
	    }
	  });

	  abs.toTex = { 1: '\\left|${args[0]}\\right|' };

	  return abs;
	}

	exports.name = 'abs';
	exports.factory = factory;

/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  /**
	   * Round a value towards zero.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.fix(x)
	   *
	   * Examples:
	   *
	   *    math.fix(3.2);                // returns number 3
	   *    math.fix(3.8);                // returns number 3
	   *    math.fix(-4.2);               // returns number -4
	   *    math.fix(-4.7);               // returns number -4
	   *
	   *    var c = math.complex(3.2, -2.7);
	   *    math.fix(c);                  // returns Complex 3 - 2i
	   *
	   *    math.fix([3.2, 3.8, -4.7]);   // returns Array [3, 3, -4]
	   *
	   * See also:
	   *
	   *    ceil, floor, round
	   *
	   * @param {number | BigNumber | Fraction | Complex | Array | Matrix} x Number to be rounded
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix}            Rounded value
	   */
	  var fix = typed('fix', {
	    'number': function number(x) {
	      return x > 0 ? Math.floor(x) : Math.ceil(x);
	    },

	    'Complex': function Complex(x) {
	      return new type.Complex(x.re > 0 ? Math.floor(x.re) : Math.ceil(x.re), x.im > 0 ? Math.floor(x.im) : Math.ceil(x.im));
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.isNegative() ? x.ceil() : x.floor();
	    },

	    'Fraction': function Fraction(x) {
	      return x.s < 0 ? x.ceil() : x.floor();
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since fix(0) = 0
	      return deepMap(x, fix, true);
	    }
	  });

	  fix.toTex = { 1: '\\mathrm{${name}}\\left(${args[0]}\\right)' };

	  return fix;
	}

	exports.name = 'fix';
	exports.factory = factory;

/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load, typed) {

	  var matrix = load(__webpack_require__(212));
	  var equalScalar = load(__webpack_require__(208));

	  var algorithm03 = load(__webpack_require__(221));
	  var algorithm07 = load(__webpack_require__(222));
	  var algorithm12 = load(__webpack_require__(223));
	  var algorithm13 = load(__webpack_require__(217));
	  var algorithm14 = load(__webpack_require__(218));

	  var latex = __webpack_require__(192);

	  /**
	   * Test whether two values are equal.
	   *
	   * The function tests whether the relative difference between x and y is
	   * smaller than the configured epsilon. The function cannot be used to
	   * compare values smaller than approximately 2.22e-16.
	   *
	   * For matrices, the function is evaluated element wise.
	   * In case of complex numbers, x.re must equal y.re, and x.im must equal y.im.
	   *
	   * Values `null` and `undefined` are compared strictly, thus `null` is only
	   * equal to `null` and nothing else, and `undefined` is only equal to
	   * `undefined` and nothing else.
	   *
	   * Syntax:
	   *
	   *    math.equal(x, y)
	   *
	   * Examples:
	   *
	   *    math.equal(2 + 2, 3);         // returns false
	   *    math.equal(2 + 2, 4);         // returns true
	   *
	   *    var a = math.unit('50 cm');
	   *    var b = math.unit('5 m');
	   *    math.equal(a, b);             // returns true
	   *
	   *    var c = [2, 5, 1];
	   *    var d = [2, 7, 1];
	   *
	   *    math.equal(c, d);             // returns [true, false, true]
	   *    math.deepEqual(c, d);         // returns false
	   *
	   *    math.equal(0, null);          // returns false
	   *
	   * See also:
	   *
	   *    unequal, smaller, smallerEq, larger, largerEq, compare, deepEqual
	   *
	   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} x First value to compare
	   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} y Second value to compare
	   * @return {boolean | Array | Matrix} Returns true when the compared values are equal, else returns false
	   */
	  var equal = typed('equal', {

	    'any, any': function anyAny(x, y) {
	      // strict equality for null and undefined?
	      if (x === null) {
	        return y === null;
	      }
	      if (y === null) {
	        return x === null;
	      }
	      if (x === undefined) {
	        return y === undefined;
	      }
	      if (y === undefined) {
	        return x === undefined;
	      }

	      return equalScalar(x, y);
	    },

	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm07(x, y, equalScalar);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm03(y, x, equalScalar, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm03(x, y, equalScalar, false);
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, equalScalar);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return equal(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return equal(matrix(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return equal(x, matrix(y));
	    },

	    'Matrix, any': function MatrixAny(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm12(x, y, equalScalar, false);
	          break;
	        default:
	          c = algorithm14(x, y, equalScalar, false);
	          break;
	      }
	      return c;
	    },

	    'any, Matrix': function anyMatrix(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, equalScalar, true);
	          break;
	        default:
	          c = algorithm14(y, x, equalScalar, true);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, equalScalar, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, equalScalar, true).valueOf();
	    }
	  });

	  equal.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['equal'] + '${args[1]}\\right)'
	  };

	  return equal;
	}

	exports.name = 'equal';
	exports.factory = factory;

/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);
	var number = __webpack_require__(166);

	function factory(type, config, load, typed) {
	  /**
	   * Test whether a value is an numeric value.
	   *
	   * The function is evaluated element-wise in case of Array or Matrix input.
	   *
	   * Syntax:
	   *
	   *     math.isNumeric(x)
	   *
	   * Examples:
	   *
	   *    math.isNumeric(2);                     // returns true
	   *    math.isNumeric(0);                     // returns true
	   *    math.isNumeric(math.bignumber(500));   // returns true
	   *    math.isNumeric(math.fraction(4));      // returns true
	   *    math.isNumeric(math.complex('2-4i');   // returns false
	   *    math.isNumeric('3');                   // returns false
	   *    math.isNumeric([2.3, 'foo', false]);   // returns [true, false, true]
	   *
	   * See also:
	   *
	   *    isZero, isPositive, isNegative, isInteger
	   *
	   * @param {*} x       Value to be tested
	   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,
	   *                    `Fraction`, or `boolean`. Returns false for other types.
	   *                    Throws an error in case of unknown types.
	   */
	  var isNumeric = typed('isNumeric', {
	    'number | BigNumber | Fraction | boolean': function numberBigNumberFractionBoolean() {
	      return true;
	    },

	    'Complex | Unit | string': function ComplexUnitString() {
	      return false;
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, isNumeric);
	    }
	  });

	  return isNumeric;
	}

	exports.name = 'isNumeric';
	exports.factory = factory;

/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var string = __webpack_require__(183);

	function factory(type, config, load, typed) {
	  /**
	   * Format a value of any type into a string.
	   *
	   * Syntax:
	   *
	   *    math.format(value)
	   *    math.format(value, options)
	   *    math.format(value, precision)
	   *    math.format(value, callback)
	   *
	   * Where:
	   *
	   *  - `value: *`
	   *    The value to be formatted
	   *  - `options: Object`
	   *    An object with formatting options. Available options:
	   *    - `notation: string`
	   *      Number notation. Choose from:
	   *      - 'fixed'
	   *        Always use regular number notation.
	   *        For example '123.40' and '14000000'
	   *      - 'exponential'
	   *        Always use exponential notation.
	   *        For example '1.234e+2' and '1.4e+7'
	   *      - 'engineering'
	   *        Always use engineering notation.
	   *        For example '123.4e+0' and '14.0e+6'
	   *      - 'auto' (default)
	   *        Regular number notation for numbers having an absolute value between
	   *        `lower` and `upper` bounds, and uses exponential notation elsewhere.
	   *        Lower bound is included, upper bound is excluded.
	   *        For example '123.4' and '1.4e7'.
	   *    - `precision: number`
	   *      A number between 0 and 16 to round the digits of the number. In case
	   *      of notations 'exponential' and 'auto', `precision` defines the total
	   *      number of significant digits returned and is undefined by default.
	   *      In case of notation 'fixed', `precision` defines the number of
	   *      significant digits after the decimal point, and is 0 by default.
	   *    - `exponential: Object`
	   *      An object containing two parameters, {number} lower and {number} upper,
	   *      used by notation 'auto' to determine when to return exponential
	   *      notation. Default values are `lower=1e-3` and `upper=1e5`. Only
	   *      applicable for notation `auto`.
	   *    - `fraction: string`. Available values: 'ratio' (default) or 'decimal'.
	   *      For example `format(fraction(1, 3))` will output '1/3' when 'ratio' is
	   *      configured, and will output `0.(3)` when 'decimal' is configured.
	   * - `callback: function`
	   *   A custom formatting function, invoked for all numeric elements in `value`,
	   *   for example all elements of a matrix, or the real and imaginary
	   *   parts of a complex number. This callback can be used to override the
	   *   built-in numeric notation with any type of formatting. Function `callback`
	   *   is called with `value` as parameter and must return a string.
	   *
	   * When `value` is an Object:
	   *
	   * - When the object contains a property `format` being a function, this function
	   *   is invoked as `value.format(options)` and the result is returned.
	   * - When the object has its own `toString` method, this method is invoked
	   *   and the result is returned.
	   * - In other cases the function will loop over all object properties and
	   *   return JSON object notation like '{"a": 2, "b": 3}'.
	   *
	   * When value is a function:
	   *
	   * - When the function has a property `syntax`, it returns this
	   *   syntax description.
	   * - In other cases, a string `'function'` is returned.
	   *
	   * Examples:
	   *
	   *    math.format(6.4);                                        // returns '6.4'
	   *    math.format(1240000);                                    // returns '1.24e6'
	   *    math.format(1/3);                                        // returns '0.3333333333333333'
	   *    math.format(1/3, 3);                                     // returns '0.333'
	   *    math.format(21385, 2);                                   // returns '21000'
	   *    math.format(12.071, {notation: 'fixed'});                // returns '12'
	   *    math.format(2.3,    {notation: 'fixed', precision: 2});  // returns '2.30'
	   *    math.format(52.8,   {notation: 'exponential'});          // returns '5.28e+1'
	   *    math.format(12400,  {notation: 'engineering'});         // returns '12.400e+3'
	   *
	   *    function formatCurrency(value) {
	   *      // return currency notation with two digits:
	   *      return '$' + value.toFixed(2);
	   *
	   *      // you could also use math.format inside the callback:
	   *      // return '$' + math.format(value, {notation: 'fixed', precision: 2});
	   *    }
	   *    math.format([2.1, 3, 0.016], formatCurrency};            // returns '[$2.10, $3.00, $0.02]'
	   *
	   * See also:
	   *
	   *    print
	   *
	   * @param {*} value                               Value to be stringified
	   * @param {Object | Function | number} [options]  Formatting options
	   * @return {string} The formatted value
	   */
	  var format = typed('format', {
	    'any': string.format,
	    'any, Object | function | number': string.format
	  });

	  format.toTex = undefined; // use default template

	  return format;
	}

	exports.name = 'format';
	exports.factory = factory;

/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var types = __webpack_require__(201);

	function factory(type, config, load, typed) {
	  /**
	   * Determine the type of a variable.
	   *
	   * Function `typeof` recognizes the following types of objects:
	   *
	   * Object                 | Returns       | Example
	   * ---------------------- | ------------- | ------------------------------------------
	   * null                   | `'null'`      | `math.typeof(null)`
	   * number                 | `'number'`    | `math.typeof(3.5)`
	   * boolean                | `'boolean'`   | `math.typeof (true)`
	   * string                 | `'string'`    | `math.typeof ('hello world')`
	   * Array                  | `'Array'`     | `math.typeof ([1, 2, 3])`
	   * Date                   | `'Date'`      | `math.typeof (new Date())`
	   * Function               | `'Function'`  | `math.typeof (function () {})`
	   * Object                 | `'Object'`    | `math.typeof ({a: 2, b: 3})`
	   * RegExp                 | `'RegExp'`    | `math.typeof (/a regexp/)`
	   * undefined              | `'undefined'` | `math.typeof(undefined)`
	   * math.type.BigNumber    | `'BigNumber'` | `math.typeof (math.bignumber('2.3e500'))`
	   * math.type.Chain        | `'Chain'`     | `math.typeof (math.chain(2))`
	   * math.type.Complex      | `'Complex'`   | `math.typeof (math.complex(2, 3))`
	   * math.type.Fraction     | `'Fraction'`  | `math.typeof (math.fraction(1, 3))`
	   * math.type.Help         | `'Help'`      | `math.typeof (math.help('sqrt'))`
	   * math.type.Index        | `'Index'`     | `math.typeof (math.index(1, 3))`
	   * math.type.Matrix       | `'Matrix'`    | `math.typeof (math.matrix([[1,2], [3, 4]]))`
	   * math.type.Range        | `'Range'`     | `math.typeof (math.range(0, 10))`
	   * math.type.Unit         | `'Unit'`      | `math.typeof (math.unit('45 deg'))`
	   *
	   * Syntax:
	   *
	   *    math.typeof(x)
	   *
	   * Examples:
	   *
	   *    math.typeof(3.5);                     // returns 'number'
	   *    math.typeof(math.complex('2-4i'));    // returns 'Complex'
	   *    math.typeof(math.unit('45 deg'));     // returns 'Unit'
	   *    math.typeof('hello world');           // returns 'string'
	   *
	   * @param {*} x     The variable for which to test the type.
	   * @return {string} Returns the name of the type. Primitive types are lower case,
	   *                  non-primitive types are upper-camel-case.
	   *                  For example 'number', 'string', 'Array', 'Date'.
	   */
	  var _typeof = typed('_typeof', {
	    'any': function any(x) {
	      // JavaScript types
	      var t = types.type(x);

	      // math.js types
	      if (t === 'Object') {
	        if (x.isBigNumber === true) return 'BigNumber';
	        if (x.isComplex === true) return 'Complex';
	        if (x.isFraction === true) return 'Fraction';
	        if (x.isMatrix === true) return 'Matrix';
	        if (x.isUnit === true) return 'Unit';
	        if (x.isIndex === true) return 'Index';
	        if (x.isRange === true) return 'Range';
	        if (x.isChain === true) return 'Chain';
	        if (x.isHelp === true) return 'Help';
	      }

	      return t;
	    }
	  });

	  _typeof.toTex = undefined; // use default template

	  return _typeof;
	}

	exports.name = 'typeof';
	exports.factory = factory;

/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var formatRegExp = /%[sdj%]/g;
	exports.format = function (f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function (x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s':
	        return String(args[i++]);
	      case '%d':
	        return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};

	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function (fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function () {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	};

	var debugs = {};
	var debugEnviron;
	exports.debuglog = function (set) {
	  if (isUndefined(debugEnviron)) debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function () {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function () {};
	    }
	  }
	  return debugs[set];
	};

	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;

	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold': [1, 22],
	  'italic': [3, 23],
	  'underline': [4, 24],
	  'inverse': [7, 27],
	  'white': [37, 39],
	  'grey': [90, 39],
	  'black': [30, 39],
	  'blue': [34, 39],
	  'cyan': [36, 39],
	  'green': [32, 39],
	  'magenta': [35, 39],
	  'red': [31, 39],
	  'yellow': [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};

	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str + '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}

	function stylizeNoColor(str, styleType) {
	  return str;
	}

	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function (val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}

	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect && value && isFunction(value.inspect) &&
	  // Filter out the util module, it's inspect function is special
	  value.inspect !== exports.inspect &&
	  // Also filter out any prototype objects using the circular check.
	  !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '',
	      array = false,
	      braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function (key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}

	function formatPrimitive(ctx, value) {
	  if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value)) return ctx.stylize('' + value, 'number');
	  if (isBoolean(value)) return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value)) return ctx.stylize('null', 'null');
	}

	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}

	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function (key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
	    }
	  });
	  return output;
	}

	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function (line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function (line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}

	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function (prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}

	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'symbol' || // ES6 symbol
	  typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = __webpack_require__(254);

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}

	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}

	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}

	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function () {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};

	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(255);

	exports._extend = function (origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(253)))

/***/ },
/* 253 */
/***/ function(module, exports) {

	'use strict';

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	(function () {
	    try {
	        cachedSetTimeout = setTimeout;
	    } catch (e) {
	        cachedSetTimeout = function cachedSetTimeout() {
	            throw new Error('setTimeout is not defined');
	        };
	    }
	    try {
	        cachedClearTimeout = clearTimeout;
	    } catch (e) {
	        cachedClearTimeout = function cachedClearTimeout() {
	            throw new Error('clearTimeout is not defined');
	        };
	    }
	})();
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch (e) {
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch (e) {
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e) {
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e) {
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while (len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () {
	    return '/';
	};
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function () {
	    return 0;
		};

/***/ },
/* 254 */
/***/ function(module, exports) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	module.exports = function isBuffer(arg) {
	  return arg && (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object' && typeof arg.copy === 'function' && typeof arg.fill === 'function' && typeof arg.readUInt8 === 'function';
		};

/***/ },
/* 255 */
/***/ function(module, exports) {

	'use strict';

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor;
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor;
	    var TempCtor = function TempCtor() {};
	    TempCtor.prototype = superCtor.prototype;
	    ctor.prototype = new TempCtor();
	    ctor.prototype.constructor = ctor;
	  };
	}

/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  /**
	   * Create a unit. Depending on the passed arguments, the function
	   * will create and return a new math.type.Unit object.
	   * When a matrix is provided, all elements will be converted to units.
	   *
	   * Syntax:
	   *
	   *     math.unit(unit : string)
	   *     math.unit(value : number, unit : string)
	   *
	   * Examples:
	   *
	   *    var a = math.unit(5, 'cm');    // returns Unit 50 mm
	   *    var b = math.unit('23 kg');    // returns Unit 23 kg
	   *    a.to('m');                     // returns Unit 0.05 m
	   *
	   * See also:
	   *
	   *    bignumber, boolean, complex, index, matrix, number, string, createUnit
	   *
	   * @param {* | Array | Matrix} args   A number and unit.
	   * @return {Unit | Array | Matrix}    The created unit
	   */

	  var unit = typed('unit', {
	    'Unit': function Unit(x) {
	      return x.clone();
	    },

	    'string': function string(x) {
	      if (type.Unit.isValuelessUnit(x)) {
	        return new type.Unit(null, x); // a pure unit
	      }

	      return type.Unit.parse(x); // a unit with value, like '5cm'
	    },

	    'number | BigNumber | Fraction | Complex, string': function numberBigNumberFractionComplexString(value, unit) {
	      return new type.Unit(value, unit);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, unit);
	    }
	  });

	  unit.toTex = {
	    1: '\\left(${args[0]}\\right)',
	    2: '\\left(\\left(${args[0]}\\right)${args[1]}\\right)'
	  };

	  return unit;
	}

	exports.name = 'unit';
	exports.factory = factory;

/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  /**
	   * Create a user-defined unit and register it with the Unit type.
	   *
	   * Syntax:
	   *
	   *     math.createUnit({
	   *       baseUnit1: {
	   *         aliases: [string, ...]
	   *         prefixes: object
	   *       },
	   *       unit2: {
	   *         definition: string,
	   *         aliases: [string, ...]
	   *         prefixes: object,
	   *         offset: number
	   *       },
	   *       unit3: string    // Shortcut
	   *     })
	   *
	   *     // Another shortcut:
	   *     math.createUnit(string, unit : string, [object])
	   *
	   * Examples: 
	   *
	   *     math.createUnit('foo');
	   *     math.createUnit('knot', {definition: '0.514444444 m/s', aliases: ['knots', 'kt', 'kts]});
	   *     math.createUnit('mph', '1 mile/hour');
	   *
	   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'
	   * @param {string, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.
	   * @param {Object} options   (optional) An object containing any of the following properties:
	   *     prefixes {string} "none", "short", "long", "binary_short", or "binary_long". The default is "none".
	   *     aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']
	   *     offset {Numeric} An offset to apply when converting from the unit. For example, the offset for celsius is 273.15. Default is 0.
	   *
	   * See also:
	   *
	   *     unit
	   *
	   * @return {Unit} The new unit
	   */
	  var createUnit = typed('createUnit', {

	    // General function signature. First parameter is an object where each property is the definition of a new unit. The object keys are the unit names and the values are the definitions. The values can be objects, strings, or Units. If a property is an empty object or an empty string, a new base unit is created. The second parameter is the options.
	    'Object, Object': function ObjectObject(obj, options) {
	      return type.Unit.createUnit(obj, options);
	    },

	    // Same as above but without the options.
	    'Object': function Object(obj) {
	      return type.Unit.createUnit(obj, {});
	    },

	    // Shortcut method for creating one unit.
	    'string, Unit | string | Object, Object': function stringUnitStringObjectObject(name, def, options) {
	      var obj = {};
	      obj[name] = def;
	      return type.Unit.createUnit(obj, options);
	    },

	    // Same as above but without the options.
	    'string, Unit | string | Object': function stringUnitStringObject(name, def) {
	      var obj = {};
	      obj[name] = def;
	      return type.Unit.createUnit(obj, {});
	    },

	    // Without a definition, creates a base unit.
	    'string': function string(name) {
	      var obj = {};
	      obj[name] = {};
	      return type.Unit.createUnit(obj, {});
	    }
	  });

	  return createUnit;
	}

	exports.name = 'createUnit';
	exports.factory = factory;

/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {

	  /**
	   * Returns an array of units whose sum is equal to this unit
	   *
	   * Syntax:
	   *
	   *     splitUnit(unit: Unit, parts: Array.<Unit>)
	   *
	   * Example:
	   *
	   *     splitUnit(new Unit(1, 'm'), ['feet', 'inch']);
	   *     // [ 3 feet, 3.3700787401575 inch ]
	   *
	   * See also:
	   *
	   *     unit
	   *
	   * @param {Array} [parts] An array of strings or valueless units.
	   * @return {Array} An array of units.
	   */

	  var splitUnit = typed('splitUnit', {
	    'Unit, Array': function UnitArray(unit, parts) {
	      return unit.splitUnit(parts);
	    }
	  });

	  return splitUnit;
	}

	exports.name = 'splitUnit';
	exports.factory = factory;

/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var lazy = __webpack_require__(163).lazy;

	function factory(type, config, load, typed, math) {

	  // helper function to create a unit with a fixed prefix
	  function fixedUnit(str) {
	    var unit = type.Unit.parse(str);
	    unit.fixPrefix = true;
	    return unit;
	  }

	  // Source: http://www.wikiwand.com/en/Physical_constant

	  // Universal constants
	  lazy(math, 'speedOfLight', function () {
	    return fixedUnit('299792458 m s^-1');
	  });
	  lazy(math, 'gravitationConstant', function () {
	    return fixedUnit('6.6738480e-11 m^3 kg^-1 s^-2');
	  });
	  lazy(math, 'planckConstant', function () {
	    return fixedUnit('6.626069311e-34 J s');
	  });
	  lazy(math, 'reducedPlanckConstant', function () {
	    return fixedUnit('1.05457172647e-34 J s');
	  });

	  // Electromagnetic constants
	  lazy(math, 'magneticConstant', function () {
	    return fixedUnit('1.2566370614e-6 N A^-2');
	  });
	  lazy(math, 'electricConstant', function () {
	    return fixedUnit('8.854187817e-12 F m^-1');
	  });
	  lazy(math, 'vacuumImpedance', function () {
	    return fixedUnit('376.730313461 ohm');
	  });
	  lazy(math, 'coulomb', function () {
	    return fixedUnit('8.9875517873681764e9 N m^2 C^-2');
	  });
	  lazy(math, 'elementaryCharge', function () {
	    return fixedUnit('1.60217656535e-19 C');
	  });
	  lazy(math, 'bohrMagneton', function () {
	    return fixedUnit('9.2740096820e-24 J T^-1');
	  });
	  lazy(math, 'conductanceQuantum', function () {
	    return fixedUnit('7.748091734625e-5 S');
	  });
	  lazy(math, 'inverseConductanceQuantum', function () {
	    return fixedUnit('12906.403721742 ohm');
	  });
	  lazy(math, 'magneticFluxQuantum', function () {
	    return fixedUnit('2.06783375846e-15 Wb');
	  });
	  lazy(math, 'nuclearMagneton', function () {
	    return fixedUnit('5.0507835311e-27 J T^-1');
	  });
	  lazy(math, 'klitzing', function () {
	    return fixedUnit('25812.807443484 ohm');
	  });
	  //lazy(math, 'josephson',                 function () {return fixedUnit('4.8359787011e-14 Hz V^-1')});  // TODO: support for Hz needed

	  // Atomic and nuclear constants
	  lazy(math, 'bohrRadius', function () {
	    return fixedUnit('5.291772109217e-11 m');
	  });
	  lazy(math, 'classicalElectronRadius', function () {
	    return fixedUnit('2.817940326727e-15 m');
	  });
	  lazy(math, 'electronMass', function () {
	    return fixedUnit('9.1093829140e-31 kg');
	  });
	  lazy(math, 'fermiCoupling', function () {
	    return fixedUnit('1.1663645e-5 GeV^-2');
	  });
	  lazy(math, 'fineStructure', function () {
	    return 7.297352569824e-3;
	  });
	  lazy(math, 'hartreeEnergy', function () {
	    return fixedUnit('4.3597443419e-18 J');
	  });
	  lazy(math, 'protonMass', function () {
	    return fixedUnit('1.67262177774e-27 kg');
	  });
	  lazy(math, 'deuteronMass', function () {
	    return fixedUnit('3.3435830926e-27 kg');
	  });
	  lazy(math, 'neutronMass', function () {
	    return fixedUnit('1.6749271613e-27 kg');
	  });
	  lazy(math, 'quantumOfCirculation', function () {
	    return fixedUnit('3.636947552024e-4 m^2 s^-1');
	  });
	  lazy(math, 'rydberg', function () {
	    return fixedUnit('10973731.56853955 m^-1');
	  });
	  lazy(math, 'thomsonCrossSection', function () {
	    return fixedUnit('6.65245873413e-29 m^2');
	  });
	  lazy(math, 'weakMixingAngle', function () {
	    return 0.222321;
	  });
	  lazy(math, 'efimovFactor', function () {
	    return 22.7;
	  });

	  // Physico-chemical constants
	  lazy(math, 'atomicMass', function () {
	    return fixedUnit('1.66053892173e-27 kg');
	  });
	  lazy(math, 'avogadro', function () {
	    return fixedUnit('6.0221412927e23 mol^-1');
	  });
	  lazy(math, 'boltzmann', function () {
	    return fixedUnit('1.380648813e-23 J K^-1');
	  });
	  lazy(math, 'faraday', function () {
	    return fixedUnit('96485.336521 C mol^-1');
	  });
	  lazy(math, 'firstRadiation', function () {
	    return fixedUnit('3.7417715317e-16 W m^2');
	  });
	  // lazy(math, 'spectralRadiance',   function () {return fixedUnit('1.19104286953e-16 W m^2 sr^-1')}); // TODO spectralRadiance
	  lazy(math, 'loschmidt', function () {
	    return fixedUnit('2.686780524e25 m^-3');
	  });
	  lazy(math, 'gasConstant', function () {
	    return fixedUnit('8.314462175 J K^-1 mol^-1');
	  });
	  lazy(math, 'molarPlanckConstant', function () {
	    return fixedUnit('3.990312717628e-10 J s mol^-1');
	  });
	  lazy(math, 'molarVolume', function () {
	    return fixedUnit('2.241396820e-10 m^3 mol^-1');
	  });
	  lazy(math, 'sackurTetrode', function () {
	    return -1.164870823;
	  });
	  lazy(math, 'secondRadiation', function () {
	    return fixedUnit('1.438777013e-2 m K');
	  });
	  lazy(math, 'stefanBoltzmann', function () {
	    return fixedUnit('5.67037321e-8 W m^-2 K^-4');
	  });
	  lazy(math, 'wienDisplacement', function () {
	    return fixedUnit('2.897772126e-3 m K');
	  });

	  // Adopted values
	  lazy(math, 'molarMass', function () {
	    return fixedUnit('1e-3 kg mol^-1');
	  });
	  lazy(math, 'molarMassC12', function () {
	    return fixedUnit('1.2e-2 kg mol^-1');
	  });
	  lazy(math, 'gravity', function () {
	    return fixedUnit('9.80665 m s^-2');
	  });
	  // atm is defined in Unit.js

	  // Natural units
	  lazy(math, 'planckLength', function () {
	    return fixedUnit('1.61619997e-35 m');
	  });
	  lazy(math, 'planckMass', function () {
	    return fixedUnit('2.1765113e-8 kg');
	  });
	  lazy(math, 'planckTime', function () {
	    return fixedUnit('5.3910632e-44 s');
	  });
	  lazy(math, 'planckCharge', function () {
	    return fixedUnit('1.87554595641e-18 C');
	  });
	  lazy(math, 'planckTemperature', function () {
	    return fixedUnit('1.41683385e+32 K');
	  });
	}

	exports.factory = factory;
	exports.lazy = false; // no lazy loading of constants, the constants themselves are lazy when needed
		exports.math = true; // request access to the math namespace

/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var object = __webpack_require__(163);
	var bigConstants = __webpack_require__(236);

	function factory(type, config, load, typed, math) {
	  // listen for changed in the configuration, automatically reload
	  // constants when needed
	  math.on('config', function (curr, prev) {
	    if (curr.number !== prev.number) {
	      factory(type, config, load, typed, math);
	    }
	  });

	  math['true'] = true;
	  math['false'] = false;
	  math['null'] = null;
	  math['uninitialized'] = __webpack_require__(200).UNINITIALIZED;

	  if (config.number === 'BigNumber') {
	    math['Infinity'] = new type.BigNumber(Infinity);
	    math['NaN'] = new type.BigNumber(NaN);

	    object.lazy(math, 'pi', function () {
	      return bigConstants.pi(type.BigNumber);
	    });
	    object.lazy(math, 'tau', function () {
	      return bigConstants.tau(type.BigNumber);
	    });
	    object.lazy(math, 'e', function () {
	      return bigConstants.e(type.BigNumber);
	    });
	    object.lazy(math, 'phi', function () {
	      return bigConstants.phi(type.BigNumber);
	    }); // golden ratio, (1+sqrt(5))/2

	    // uppercase constants (for compatibility with built-in Math)
	    object.lazy(math, 'E', function () {
	      return math.e;
	    });
	    object.lazy(math, 'LN2', function () {
	      return new type.BigNumber(2).ln();
	    });
	    object.lazy(math, 'LN10', function () {
	      return new type.BigNumber(10).ln();
	    });
	    object.lazy(math, 'LOG2E', function () {
	      return new type.BigNumber(1).div(new type.BigNumber(2).ln());
	    });
	    object.lazy(math, 'LOG10E', function () {
	      return new type.BigNumber(1).div(new type.BigNumber(10).ln());
	    });
	    object.lazy(math, 'PI', function () {
	      return math.pi;
	    });
	    object.lazy(math, 'SQRT1_2', function () {
	      return new type.BigNumber('0.5').sqrt();
	    });
	    object.lazy(math, 'SQRT2', function () {
	      return new type.BigNumber(2).sqrt();
	    });
	  } else {
	    math['Infinity'] = Infinity;
	    math['NaN'] = NaN;

	    math.pi = Math.PI;
	    math.tau = Math.PI * 2;
	    math.e = Math.E;
	    math.phi = 1.61803398874989484820458683436563811772030917980576286213545; // golden ratio, (1+sqrt(5))/2

	    // uppercase constants (for compatibility with built-in Math)
	    math.E = math.e;
	    math.LN2 = Math.LN2;
	    math.LN10 = Math.LN10;
	    math.LOG2E = Math.LOG2E;
	    math.LOG10E = Math.LOG10E;
	    math.PI = math.pi;
	    math.SQRT1_2 = Math.SQRT1_2;
	    math.SQRT2 = Math.SQRT2;
	  }

	  // complex i
	  math.i = type.Complex.I;

	  // meta information
	  math.version = __webpack_require__(261);
	}

	exports.factory = factory;
	exports.lazy = false; // no lazy loading of constants, the constants themselves are lazy when needed
	exports.math = true; // request access to the math namespace

/***/ },
/* 261 */
/***/ function(module, exports) {

	'use strict';

	module.exports = '3.4.1';
	// Note: This file is automatically generated when building math.js.
	// Changes made in this file will be overwritten.

/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

		module.exports = [__webpack_require__(263), __webpack_require__(437), __webpack_require__(466), __webpack_require__(468), __webpack_require__(494), __webpack_require__(439), __webpack_require__(465)];

/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(construction, config, load, typed) {
	  var docs = {};

	  // construction functions
	  docs.bignumber = __webpack_require__(264);
	  docs['boolean'] = __webpack_require__(265);
	  docs.complex = __webpack_require__(266);
	  docs.fraction = __webpack_require__(267);
	  docs.index = __webpack_require__(268);
	  docs.matrix = __webpack_require__(269);
	  docs.number = __webpack_require__(270);
	  docs.sparse = __webpack_require__(271);
	  docs.string = __webpack_require__(272);
	  docs.unit = __webpack_require__(273);

	  // constants
	  docs.e = __webpack_require__(274);
	  docs.E = __webpack_require__(274);
	  docs['false'] = __webpack_require__(275);
	  docs.i = __webpack_require__(276);
	  docs['Infinity'] = __webpack_require__(277);
	  docs.LN2 = __webpack_require__(278);
	  docs.LN10 = __webpack_require__(279);
	  docs.LOG2E = __webpack_require__(280);
	  docs.LOG10E = __webpack_require__(281);
	  docs.NaN = __webpack_require__(282);
	  docs['null'] = __webpack_require__(283);
	  docs.pi = __webpack_require__(284);
	  docs.PI = __webpack_require__(284);
	  docs.phi = __webpack_require__(285);
	  docs.SQRT1_2 = __webpack_require__(286);
	  docs.SQRT2 = __webpack_require__(287);
	  docs.tau = __webpack_require__(288);
	  docs['true'] = __webpack_require__(289);
	  docs.version = __webpack_require__(290);

	  // physical constants
	  // TODO: more detailed docs for physical constants
	  docs.speedOfLight = { description: 'Speed of light in vacuum', examples: ['speedOfLight'] };
	  docs.gravitationConstant = { description: 'Newtonian constant of gravitation', examples: ['gravitationConstant'] };
	  docs.planckConstant = { description: 'Planck constant', examples: ['planckConstant'] };
	  docs.reducedPlanckConstant = { description: 'Reduced Planck constant', examples: ['reducedPlanckConstant'] };

	  docs.magneticConstant = { description: 'Magnetic constant (vacuum permeability)', examples: ['magneticConstant'] };
	  docs.electricConstant = { description: 'Electric constant (vacuum permeability)', examples: ['electricConstant'] };
	  docs.vacuumImpedance = { description: 'Characteristic impedance of vacuum', examples: ['vacuumImpedance'] };
	  docs.coulomb = { description: 'Coulomb\'s constant', examples: ['coulomb'] };
	  docs.elementaryCharge = { description: 'Elementary charge', examples: ['elementaryCharge'] };
	  docs.bohrMagneton = { description: 'Borh magneton', examples: ['bohrMagneton'] };
	  docs.conductanceQuantum = { description: 'Conductance quantum', examples: ['conductanceQuantum'] };
	  docs.inverseConductanceQuantum = { description: 'Inverse conductance quantum', examples: ['inverseConductanceQuantum'] };
	  //docs.josephson = {description: 'Josephson constant', examples: ['josephson']};
	  docs.magneticFluxQuantum = { description: 'Magnetic flux quantum', examples: ['magneticFluxQuantum'] };
	  docs.nuclearMagneton = { description: 'Nuclear magneton', examples: ['nuclearMagneton'] };
	  docs.klitzing = { description: 'Von Klitzing constant', examples: ['klitzing'] };

	  docs.bohrRadius = { description: 'Borh radius', examples: ['bohrRadius'] };
	  docs.classicalElectronRadius = { description: 'Classical electron radius', examples: ['classicalElectronRadius'] };
	  docs.electronMass = { description: 'Electron mass', examples: ['electronMass'] };
	  docs.fermiCoupling = { description: 'Fermi coupling constant', examples: ['fermiCoupling'] };
	  docs.fineStructure = { description: 'Fine-structure constant', examples: ['fineStructure'] };
	  docs.hartreeEnergy = { description: 'Hartree energy', examples: ['hartreeEnergy'] };
	  docs.protonMass = { description: 'Proton mass', examples: ['protonMass'] };
	  docs.deuteronMass = { description: 'Deuteron Mass', examples: ['deuteronMass'] };
	  docs.neutronMass = { description: 'Neutron mass', examples: ['neutronMass'] };
	  docs.quantumOfCirculation = { description: 'Quantum of circulation', examples: ['quantumOfCirculation'] };
	  docs.rydberg = { description: 'Rydberg constant', examples: ['rydberg'] };
	  docs.thomsonCrossSection = { description: 'Thomson cross section', examples: ['thomsonCrossSection'] };
	  docs.weakMixingAngle = { description: 'Weak mixing angle', examples: ['weakMixingAngle'] };
	  docs.efimovFactor = { description: 'Efimov factor', examples: ['efimovFactor'] };

	  docs.atomicMass = { description: 'Atomic mass constant', examples: ['atomicMass'] };
	  docs.avogadro = { description: 'Avogadro\'s number', examples: ['avogadro'] };
	  docs.boltzmann = { description: 'Boltzmann constant', examples: ['boltzmann'] };
	  docs.faraday = { description: 'Faraday constant', examples: ['faraday'] };
	  docs.firstRadiation = { description: 'First radiation constant', examples: ['firstRadiation'] };
	  docs.loschmidt = { description: 'Loschmidt constant at T=273.15 K and p=101.325 kPa', examples: ['loschmidt'] };
	  docs.gasConstant = { description: 'Gas constant', examples: ['gasConstant'] };
	  docs.molarPlanckConstant = { description: 'Molar Planck constant', examples: ['molarPlanckConstant'] };
	  docs.molarVolume = { description: 'Molar volume of an ideal gas at T=273.15 K and p=101.325 kPa', examples: ['molarVolume'] };
	  docs.sackurTetrode = { description: 'Sackur-Tetrode constant at T=1 K and p=101.325 kPa', examples: ['sackurTetrode'] };
	  docs.secondRadiation = { description: 'Second radiation constant', examples: ['secondRadiation'] };
	  docs.stefanBoltzmann = { description: 'Stefan-Boltzmann constant', examples: ['stefanBoltzmann'] };
	  docs.wienDisplacement = { description: 'Wien displacement law constant', examples: ['wienDisplacement'] };
	  //docs.spectralRadiance = {description: 'First radiation constant for spectral radiance', examples: ['spectralRadiance']};

	  docs.molarMass = { description: 'Molar mass constant', examples: ['molarMass'] };
	  docs.molarMassC12 = { description: 'Molar mass constant of carbon-12', examples: ['molarMassC12'] };
	  docs.gravity = { description: 'Standard acceleration of gravity (standard acceleration of free-fall on Earth)', examples: ['gravity'] };

	  docs.planckLength = { description: 'Planck length', examples: ['planckLength'] };
	  docs.planckMass = { description: 'Planck mass', examples: ['planckMass'] };
	  docs.planckTime = { description: 'Planck time', examples: ['planckTime'] };
	  docs.planckCharge = { description: 'Planck charge', examples: ['planckCharge'] };
	  docs.planckTemperature = { description: 'Planck temperature', examples: ['planckTemperature'] };

	  // functions - algebra
	  docs.lsolve = __webpack_require__(291);
	  docs.lup = __webpack_require__(292);
	  docs.lusolve = __webpack_require__(293);
	  docs.slu = __webpack_require__(294);
	  docs.usolve = __webpack_require__(295);

	  // functions - arithmetic
	  docs.abs = __webpack_require__(296);
	  docs.add = __webpack_require__(297);
	  docs.cbrt = __webpack_require__(298);
	  docs.ceil = __webpack_require__(299);
	  docs.cube = __webpack_require__(300);
	  docs.divide = __webpack_require__(301);
	  docs.dotDivide = __webpack_require__(302);
	  docs.dotMultiply = __webpack_require__(303);
	  docs.dotPow = __webpack_require__(304);
	  docs.exp = __webpack_require__(305);
	  docs.fix = __webpack_require__(306);
	  docs.floor = __webpack_require__(307);
	  docs.gcd = __webpack_require__(308);
	  docs.hypot = __webpack_require__(309);
	  docs.lcm = __webpack_require__(310);
	  docs.log = __webpack_require__(311);
	  docs.log10 = __webpack_require__(312);
	  docs.mod = __webpack_require__(313);
	  docs.multiply = __webpack_require__(314);
	  docs.norm = __webpack_require__(315);
	  docs.nthRoot = __webpack_require__(316);
	  docs.pow = __webpack_require__(317);
	  docs.round = __webpack_require__(318);
	  docs.sign = __webpack_require__(319);
	  docs.sqrt = __webpack_require__(320);
	  docs.square = __webpack_require__(321);
	  docs.subtract = __webpack_require__(322);
	  docs.unaryMinus = __webpack_require__(323);
	  docs.unaryPlus = __webpack_require__(324);
	  docs.xgcd = __webpack_require__(325);

	  // functions - bitwise
	  docs.bitAnd = __webpack_require__(326);
	  docs.bitNot = __webpack_require__(327);
	  docs.bitOr = __webpack_require__(328);
	  docs.bitXor = __webpack_require__(329);
	  docs.leftShift = __webpack_require__(330);
	  docs.rightArithShift = __webpack_require__(331);
	  docs.rightLogShift = __webpack_require__(332);

	  // functions - combinatorics
	  docs.bellNumbers = __webpack_require__(333);
	  docs.catalan = __webpack_require__(334);
	  docs.composition = __webpack_require__(335);
	  docs.stirlingS2 = __webpack_require__(336);

	  // functions - core
	  docs['config'] = __webpack_require__(337);
	  docs['import'] = __webpack_require__(338);
	  docs['typed'] = __webpack_require__(339);

	  // functions - complex
	  docs.arg = __webpack_require__(340);
	  docs.conj = __webpack_require__(341);
	  docs.re = __webpack_require__(342);
	  docs.im = __webpack_require__(343);

	  // functions - expression
	  docs['eval'] = __webpack_require__(344);
	  docs.help = __webpack_require__(345);

	  // functions - geometry
	  docs.distance = __webpack_require__(346);
	  docs.intersect = __webpack_require__(347);

	  // functions - logical
	  docs['and'] = __webpack_require__(348);
	  docs['not'] = __webpack_require__(349);
	  docs['or'] = __webpack_require__(350);
	  docs['xor'] = __webpack_require__(351);

	  // functions - matrix
	  docs['concat'] = __webpack_require__(352);
	  docs.cross = __webpack_require__(353);
	  docs.det = __webpack_require__(354);
	  docs.diag = __webpack_require__(355);
	  docs.dot = __webpack_require__(356);
	  docs.eye = __webpack_require__(357);
	  docs.filter = __webpack_require__(358);
	  docs.flatten = __webpack_require__(359);
	  docs.forEach = __webpack_require__(360);
	  docs.inv = __webpack_require__(361);
	  docs.map = __webpack_require__(362);
	  docs.ones = __webpack_require__(363);
	  docs.partitionSelect = __webpack_require__(364);
	  docs.range = __webpack_require__(365);
	  docs.resize = __webpack_require__(366);
	  docs.size = __webpack_require__(367);
	  docs.sort = __webpack_require__(368);
	  docs.squeeze = __webpack_require__(369);
	  docs.subset = __webpack_require__(370);
	  docs.trace = __webpack_require__(371);
	  docs.transpose = __webpack_require__(372);
	  docs.zeros = __webpack_require__(373);

	  // functions - probability
	  docs.combinations = __webpack_require__(374);
	  //docs.distribution = require('./function/probability/distribution');
	  docs.factorial = __webpack_require__(375);
	  docs.gamma = __webpack_require__(376);
	  docs.kldivergence = __webpack_require__(377);
	  docs.multinomial = __webpack_require__(378);
	  docs.permutations = __webpack_require__(379);
	  docs.pickRandom = __webpack_require__(380);
	  docs.random = __webpack_require__(381);
	  docs.randomInt = __webpack_require__(382);

	  // functions - relational
	  docs.compare = __webpack_require__(383);
	  docs.deepEqual = __webpack_require__(384);
	  docs['equal'] = __webpack_require__(385);
	  docs.larger = __webpack_require__(386);
	  docs.largerEq = __webpack_require__(387);
	  docs.smaller = __webpack_require__(388);
	  docs.smallerEq = __webpack_require__(389);
	  docs.unequal = __webpack_require__(390);

	  // functions - statistics
	  docs.max = __webpack_require__(391);
	  docs.mean = __webpack_require__(392);
	  docs.median = __webpack_require__(393);
	  docs.min = __webpack_require__(394);
	  docs.mode = __webpack_require__(395);
	  docs.prod = __webpack_require__(396);
	  docs.quantileSeq = __webpack_require__(397);
	  docs.std = __webpack_require__(398);
	  docs.sum = __webpack_require__(399);
	  docs['var'] = __webpack_require__(400);

	  // functions - trigonometry
	  docs.acos = __webpack_require__(401);
	  docs.acosh = __webpack_require__(402);
	  docs.acot = __webpack_require__(403);
	  docs.acoth = __webpack_require__(404);
	  docs.acsc = __webpack_require__(405);
	  docs.acsch = __webpack_require__(406);
	  docs.asec = __webpack_require__(407);
	  docs.asech = __webpack_require__(408);
	  docs.asin = __webpack_require__(409);
	  docs.asinh = __webpack_require__(410);
	  docs.atan = __webpack_require__(411);
	  docs.atanh = __webpack_require__(412);
	  docs.atan2 = __webpack_require__(413);
	  docs.cos = __webpack_require__(414);
	  docs.cosh = __webpack_require__(415);
	  docs.cot = __webpack_require__(416);
	  docs.coth = __webpack_require__(417);
	  docs.csc = __webpack_require__(418);
	  docs.csch = __webpack_require__(419);
	  docs.sec = __webpack_require__(420);
	  docs.sech = __webpack_require__(421);
	  docs.sin = __webpack_require__(422);
	  docs.sinh = __webpack_require__(423);
	  docs.tan = __webpack_require__(424);
	  docs.tanh = __webpack_require__(425);

	  // functions - units
	  docs.to = __webpack_require__(426);

	  // functions - utils
	  docs.clone = __webpack_require__(427);
	  docs.format = __webpack_require__(428);
	  docs.isNaN = __webpack_require__(429);
	  docs.isInteger = __webpack_require__(430);
	  docs.isNegative = __webpack_require__(431);
	  docs.isNumeric = __webpack_require__(432);
	  docs.isPositive = __webpack_require__(433);
	  docs.isPrime = __webpack_require__(434);
	  docs.isZero = __webpack_require__(435);
	  // docs.print = require('./function/utils/print'); // TODO: add documentation for print as soon as the parser supports objects.
	  docs['typeof'] = __webpack_require__(436);

	  return docs;
	}

	exports.name = 'docs';
	exports.path = 'expression';
	exports.factory = factory;

/***/ },
/* 264 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'bignumber',
	  'category': 'Construction',
	  'syntax': ['bignumber(x)'],
	  'description': 'Create a big number from a number or string.',
	  'examples': ['0.1 + 0.2', 'bignumber(0.1) + bignumber(0.2)', 'bignumber("7.2")', 'bignumber("7.2e500")', 'bignumber([0.1, 0.2, 0.3])'],
	  'seealso': ['boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit']
		};

/***/ },
/* 265 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'boolean',
	  'category': 'Construction',
	  'syntax': ['x', 'boolean(x)'],
	  'description': 'Convert a string or number into a boolean.',
	  'examples': ['boolean(0)', 'boolean(1)', 'boolean(3)', 'boolean("true")', 'boolean("false")', 'boolean([1, 0, 1, 1])'],
	  'seealso': ['bignumber', 'complex', 'index', 'matrix', 'number', 'string', 'unit']
		};

/***/ },
/* 266 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'complex',
	  'category': 'Construction',
	  'syntax': ['complex()', 'complex(re, im)', 'complex(string)'],
	  'description': 'Create a complex number.',
	  'examples': ['complex()', 'complex(2, 3)', 'complex("7 - 2i")'],
	  'seealso': ['bignumber', 'boolean', 'index', 'matrix', 'number', 'string', 'unit']
		};

/***/ },
/* 267 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'fraction',
	  'category': 'Construction',
	  'syntax': ['fraction(num)', 'fraction(num,den)'],
	  'description': 'Create a fraction from a number or from a numerator and denominator.',
	  'examples': ['fraction(0.125)', 'fraction(1, 3) + fraction(2, 5)'],
	  'seealso': ['bignumber', 'boolean', 'complex', 'index', 'matrix', 'string', 'unit']
		};

/***/ },
/* 268 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'index',
	  'category': 'Construction',
	  'syntax': ['[start]', '[start:end]', '[start:step:end]', '[start1, start 2, ...]', '[start1:end1, start2:end2, ...]', '[start1:step1:end1, start2:step2:end2, ...]'],
	  'description': 'Create an index to get or replace a subset of a matrix',
	  'examples': ['[]', '[1, 2, 3]', 'A = [1, 2, 3; 4, 5, 6]', 'A[1, :]', 'A[1, 2] = 50', 'A[0:2, 0:2] = ones(2, 2)'],
	  'seealso': ['bignumber', 'boolean', 'complex', 'matrix,', 'number', 'range', 'string', 'unit']
		};

/***/ },
/* 269 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'matrix',
	  'category': 'Construction',
	  'syntax': ['[]', '[a1, b1, ...; a2, b2, ...]', 'matrix()', 'matrix("dense")', 'matrix([...])'],
	  'description': 'Create a matrix.',
	  'examples': ['[]', '[1, 2, 3]', '[1, 2, 3; 4, 5, 6]', 'matrix()', 'matrix([3, 4])', 'matrix([3, 4; 5, 6], "sparse")', 'matrix([3, 4; 5, 6], "sparse", "number")'],
	  'seealso': ['bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'sparse']
		};

/***/ },
/* 270 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'number',
	  'category': 'Construction',
	  'syntax': ['x', 'number(x)'],
	  'description': 'Create a number or convert a string or boolean into a number.',
	  'examples': ['2', '2e3', '4.05', 'number(2)', 'number("7.2")', 'number(true)', 'number([true, false, true, true])', 'number("52cm", "m")'],
	  'seealso': ['bignumber', 'boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit']
		};

/***/ },
/* 271 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'sparse',
	  'category': 'Construction',
	  'syntax': ['sparse()', 'sparse([a1, b1, ...; a1, b2, ...])', 'sparse([a1, b1, ...; a1, b2, ...], "number")'],
	  'description': 'Create a sparse matrix.',
	  'examples': ['sparse()', 'sparse([3, 4; 5, 6])', 'sparse([3, 0; 5, 0], "number")'],
	  'seealso': ['bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'matrix']
		};

/***/ },
/* 272 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'string',
	  'category': 'Construction',
	  'syntax': ['"text"', 'string(x)'],
	  'description': 'Create a string or convert a value to a string',
	  'examples': ['"Hello World!"', 'string(4.2)', 'string(3 + 2i)'],
	  'seealso': ['bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'unit']
		};

/***/ },
/* 273 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'unit',
	  'category': 'Construction',
	  'syntax': ['value unit', 'unit(value, unit)', 'unit(string)'],
	  'description': 'Create a unit.',
	  'examples': ['5.5 mm', '3 inch', 'unit(7.1, "kilogram")', 'unit("23 deg")'],
	  'seealso': ['bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'string']
		};

/***/ },
/* 274 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'e',
	  'category': 'Constants',
	  'syntax': ['e'],
	  'description': 'Euler\'s number, the base of the natural logarithm. Approximately equal to 2.71828',
	  'examples': ['e', 'e ^ 2', 'exp(2)', 'log(e)'],
	  'seealso': ['exp']
		};

/***/ },
/* 275 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'false',
	  'category': 'Constants',
	  'syntax': ['false'],
	  'description': 'Boolean value false',
	  'examples': ['false'],
	  'seealso': ['true']
		};

/***/ },
/* 276 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'i',
	  'category': 'Constants',
	  'syntax': ['i'],
	  'description': 'Imaginary unit, defined as i*i=-1. A complex number is described as a + b*i, where a is the real part, and b is the imaginary part.',
	  'examples': ['i', 'i * i', 'sqrt(-1)'],
	  'seealso': []
		};

/***/ },
/* 277 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'Infinity',
	  'category': 'Constants',
	  'syntax': ['Infinity'],
	  'description': 'Infinity, a number which is larger than the maximum number that can be handled by a floating point number.',
	  'examples': ['Infinity', '1 / 0'],
	  'seealso': []
		};

/***/ },
/* 278 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'LN2',
	  'category': 'Constants',
	  'syntax': ['LN2'],
	  'description': 'Returns the natural logarithm of 2, approximately equal to 0.693',
	  'examples': ['LN2', 'log(2)'],
	  'seealso': []
		};

/***/ },
/* 279 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'LN10',
	  'category': 'Constants',
	  'syntax': ['LN10'],
	  'description': 'Returns the natural logarithm of 10, approximately equal to 2.302',
	  'examples': ['LN10', 'log(10)'],
	  'seealso': []
		};

/***/ },
/* 280 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'LOG2E',
	  'category': 'Constants',
	  'syntax': ['LOG2E'],
	  'description': 'Returns the base-2 logarithm of E, approximately equal to 1.442',
	  'examples': ['LOG2E', 'log(e, 2)'],
	  'seealso': []
		};

/***/ },
/* 281 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'LOG10E',
	  'category': 'Constants',
	  'syntax': ['LOG10E'],
	  'description': 'Returns the base-10 logarithm of E, approximately equal to 0.434',
	  'examples': ['LOG10E', 'log(e, 10)'],
	  'seealso': []
		};

/***/ },
/* 282 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'NaN',
	  'category': 'Constants',
	  'syntax': ['NaN'],
	  'description': 'Not a number',
	  'examples': ['NaN', '0 / 0'],
	  'seealso': []
		};

/***/ },
/* 283 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'null',
	  'category': 'Constants',
	  'syntax': ['null'],
	  'description': 'Value null',
	  'examples': ['null'],
	  'seealso': ['true', 'false']
		};

/***/ },
/* 284 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'pi',
	  'category': 'Constants',
	  'syntax': ['pi'],
	  'description': 'The number pi is a mathematical constant that is the ratio of a circle\'s circumference to its diameter, and is approximately equal to 3.14159',
	  'examples': ['pi', 'sin(pi/2)'],
	  'seealso': ['tau']
		};

/***/ },
/* 285 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'phi',
	  'category': 'Constants',
	  'syntax': ['phi'],
	  'description': 'Phi is the golden ratio. Two quantities are in the golden ratio if their ratio is the same as the ratio of their sum to the larger of the two quantities. Phi is defined as `(1 + sqrt(5)) / 2` and is approximately 1.618034...',
	  'examples': ['tau'],
	  'seealso': []
		};

/***/ },
/* 286 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'SQRT1_2',
	  'category': 'Constants',
	  'syntax': ['SQRT1_2'],
	  'description': 'Returns the square root of 1/2, approximately equal to 0.707',
	  'examples': ['SQRT1_2', 'sqrt(1/2)'],
	  'seealso': []
		};

/***/ },
/* 287 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'SQRT2',
	  'category': 'Constants',
	  'syntax': ['SQRT2'],
	  'description': 'Returns the square root of 2, approximately equal to 1.414',
	  'examples': ['SQRT2', 'sqrt(2)'],
	  'seealso': []
		};

/***/ },
/* 288 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'tau',
	  'category': 'Constants',
	  'syntax': ['tau'],
	  'description': 'Tau is the ratio constant of a circle\'s circumference to radius, equal to 2 * pi, approximately 6.2832.',
	  'examples': ['tau', '2 * pi'],
	  'seealso': ['pi']
		};

/***/ },
/* 289 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'true',
	  'category': 'Constants',
	  'syntax': ['true'],
	  'description': 'Boolean value true',
	  'examples': ['true'],
	  'seealso': ['false']
		};

/***/ },
/* 290 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'version',
	  'category': 'Constants',
	  'syntax': ['version'],
	  'description': 'A string with the version number of math.js',
	  'examples': ['version'],
	  'seealso': []
		};

/***/ },
/* 291 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'lsolve',
	  'category': 'Algebra',
	  'syntax': ['x=lsolve(L, b)'],
	  'description': 'Solves the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.',
	  'examples': ['a = [-2, 3; 2, 1]', 'b = [11, 9]', 'x = lsolve(a, b)'],
	  'seealso': ['lup', 'lusolve', 'usolve', 'matrix', 'sparse']
		};

/***/ },
/* 292 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'lup',
	  'category': 'Algebra',
	  'syntax': ['lup(m)'],
	  'description': 'Calculate the Matrix LU decomposition with partial pivoting. Matrix A is decomposed in three matrices (L, U, P) where P * A = L * U',
	  'examples': ['lup([[2, 1], [1, 4]])', 'lup(matrix([[2, 1], [1, 4]]))', 'lup(sparse([[2, 1], [1, 4]]))'],
	  'seealso': ['lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'slu']
		};

/***/ },
/* 293 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'lusolve',
	  'category': 'Algebra',
	  'syntax': ['x=lusolve(A, b)', 'x=lusolve(lu, b)'],
	  'description': 'Solves the linear system A * x = b where A is an [n x n] matrix and b is a [n] column vector.',
	  'examples': ['a = [-2, 3; 2, 1]', 'b = [11, 9]', 'x = lusolve(a, b)'],
	  'seealso': ['lup', 'slu', 'lsolve', 'usolve', 'matrix', 'sparse']
		};

/***/ },
/* 294 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'slu',
	  'category': 'Algebra',
	  'syntax': ['slu(A, order, threshold)'],
	  'description': 'Calculate the Matrix LU decomposition with full pivoting. Matrix A is decomposed in two matrices (L, U) and two permutation vectors (pinv, q) where P * A * Q = L * U',
	  'examples': ['slu(sparse([4.5, 0, 3.2, 0; 3.1, 2.9, 0, 0.9; 0, 1.7, 3, 0; 3.5, 0.4, 0, 1]), 1, 0.001)'],
	  'seealso': ['lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'lup']
		};

/***/ },
/* 295 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'usolve',
	  'category': 'Algebra',
	  'syntax': ['x=usolve(U, b)'],
	  'description': 'Solves the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.',
	  'examples': ['x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])'],
	  'seealso': ['lup', 'lusolve', 'lsolve', 'matrix', 'sparse']
		};

/***/ },
/* 296 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'abs',
	  'category': 'Arithmetic',
	  'syntax': ['abs(x)'],
	  'description': 'Compute the absolute value.',
	  'examples': ['abs(3.5)', 'abs(-4.2)'],
	  'seealso': ['sign']
		};

/***/ },
/* 297 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'add',
	  'category': 'Operators',
	  'syntax': ['x + y', 'add(x, y)'],
	  'description': 'Add two values.',
	  'examples': ['a = 2.1 + 3.6', 'a - 3.6', '3 + 2i', '3 cm + 2 inch', '"2.3" + "4"'],
	  'seealso': ['subtract']
		};

/***/ },
/* 298 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'cbrt',
	  'category': 'Arithmetic',
	  'syntax': ['cbrt(x)', 'cbrt(x, allRoots)'],
	  'description': 'Compute the cubic root value. If x = y * y * y, then y is the cubic root of x. When `x` is a number or complex number, an optional second argument `allRoots` can be provided to return all three cubic roots. If not provided, the principal root is returned',
	  'examples': ['cbrt(64)', 'cube(4)', 'cbrt(-8)', 'cbrt(2 + 3i)', 'cbrt(8i)', 'cbrt(8i, true)', 'cbrt(27 m^3)'],
	  'seealso': ['square', 'sqrt', 'cube', 'multiply']
		};

/***/ },
/* 299 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'ceil',
	  'category': 'Arithmetic',
	  'syntax': ['ceil(x)'],
	  'description': 'Round a value towards plus infinity. If x is complex, both real and imaginary part are rounded towards plus infinity.',
	  'examples': ['ceil(3.2)', 'ceil(3.8)', 'ceil(-4.2)'],
	  'seealso': ['floor', 'fix', 'round']
		};

/***/ },
/* 300 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'cube',
	  'category': 'Arithmetic',
	  'syntax': ['cube(x)'],
	  'description': 'Compute the cube of a value. The cube of x is x * x * x.',
	  'examples': ['cube(2)', '2^3', '2 * 2 * 2'],
	  'seealso': ['multiply', 'square', 'pow']
		};

/***/ },
/* 301 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'divide',
	  'category': 'Operators',
	  'syntax': ['x / y', 'divide(x, y)'],
	  'description': 'Divide two values.',
	  'examples': ['a = 2 / 3', 'a * 3', '4.5 / 2', '3 + 4 / 2', '(3 + 4) / 2', '18 km / 4.5'],
	  'seealso': ['multiply']
		};

/***/ },
/* 302 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'dotDivide',
	  'category': 'Operators',
	  'syntax': ['x ./ y', 'dotDivide(x, y)'],
	  'description': 'Divide two values element wise.',
	  'examples': ['a = [1, 2, 3; 4, 5, 6]', 'b = [2, 1, 1; 3, 2, 5]', 'a ./ b'],
	  'seealso': ['multiply', 'dotMultiply', 'divide']
		};

/***/ },
/* 303 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'dotMultiply',
	  'category': 'Operators',
	  'syntax': ['x .* y', 'dotMultiply(x, y)'],
	  'description': 'Multiply two values element wise.',
	  'examples': ['a = [1, 2, 3; 4, 5, 6]', 'b = [2, 1, 1; 3, 2, 5]', 'a .* b'],
	  'seealso': ['multiply', 'divide', 'dotDivide']
		};

/***/ },
/* 304 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'dotpow',
	  'category': 'Operators',
	  'syntax': ['x .^ y', 'dotpow(x, y)'],
	  'description': 'Calculates the power of x to y element wise.',
	  'examples': ['a = [1, 2, 3; 4, 5, 6]', 'a .^ 2'],
	  'seealso': ['pow']
		};

/***/ },
/* 305 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'exp',
	  'category': 'Arithmetic',
	  'syntax': ['exp(x)'],
	  'description': 'Calculate the exponent of a value.',
	  'examples': ['exp(1.3)', 'e ^ 1.3', 'log(exp(1.3))', 'x = 2.4', '(exp(i*x) == cos(x) + i*sin(x))   # Euler\'s formula'],
	  'seealso': ['pow', 'log']
		};

/***/ },
/* 306 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'fix',
	  'category': 'Arithmetic',
	  'syntax': ['fix(x)'],
	  'description': 'Round a value towards zero. If x is complex, both real and imaginary part are rounded towards zero.',
	  'examples': ['fix(3.2)', 'fix(3.8)', 'fix(-4.2)', 'fix(-4.8)'],
	  'seealso': ['ceil', 'floor', 'round']
		};

/***/ },
/* 307 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'floor',
	  'category': 'Arithmetic',
	  'syntax': ['floor(x)'],
	  'description': 'Round a value towards minus infinity.If x is complex, both real and imaginary part are rounded towards minus infinity.',
	  'examples': ['floor(3.2)', 'floor(3.8)', 'floor(-4.2)'],
	  'seealso': ['ceil', 'fix', 'round']
		};

/***/ },
/* 308 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'gcd',
	  'category': 'Arithmetic',
	  'syntax': ['gcd(a, b)', 'gcd(a, b, c, ...)'],
	  'description': 'Compute the greatest common divisor.',
	  'examples': ['gcd(8, 12)', 'gcd(-4, 6)', 'gcd(25, 15, -10)'],
	  'seealso': ['lcm', 'xgcd']
		};

/***/ },
/* 309 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'hypot',
	  'category': 'Arithmetic',
	  'syntax': ['hypot(a, b, c, ...)', 'hypot([a, b, c, ...])'],
	  'description': 'Calculate the hypotenusa of a list with values. ',
	  'examples': ['hypot(3, 4)', 'sqrt(3^2 + 4^2)', 'hypot(-2)', 'hypot([3, 4, 5])'],
	  'seealso': ['abs', 'norm']
		};

/***/ },
/* 310 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'lcm',
	  'category': 'Arithmetic',
	  'syntax': ['lcm(x, y)'],
	  'description': 'Compute the least common multiple.',
	  'examples': ['lcm(4, 6)', 'lcm(6, 21)', 'lcm(6, 21, 5)'],
	  'seealso': ['gcd']
		};

/***/ },
/* 311 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'log',
	  'category': 'Arithmetic',
	  'syntax': ['log(x)', 'log(x, base)'],
	  'description': 'Compute the logarithm of a value. If no base is provided, the natural logarithm of x is calculated. If base if provided, the logarithm is calculated for the specified base. log(x, base) is defined as log(x) / log(base).',
	  'examples': ['log(3.5)', 'a = log(2.4)', 'exp(a)', '10 ^ 4', 'log(10000, 10)', 'log(10000) / log(10)', 'b = log(1024, 2)', '2 ^ b'],
	  'seealso': ['exp', 'log10']
		};

/***/ },
/* 312 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'log10',
	  'category': 'Arithmetic',
	  'syntax': ['log10(x)'],
	  'description': 'Compute the 10-base logarithm of a value.',
	  'examples': ['log10(0.00001)', 'log10(10000)', '10 ^ 4', 'log(10000) / log(10)', 'log(10000, 10)'],
	  'seealso': ['exp', 'log']
		};

/***/ },
/* 313 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'mod',
	  'category': 'Operators',
	  'syntax': ['x % y', 'x mod y', 'mod(x, y)'],
	  'description': 'Calculates the modulus, the remainder of an integer division.',
	  'examples': ['7 % 3', '11 % 2', '10 mod 4', 'function isOdd(x) = x % 2', 'isOdd(2)', 'isOdd(3)'],
	  'seealso': ['divide']
		};

/***/ },
/* 314 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'multiply',
	  'category': 'Operators',
	  'syntax': ['x * y', 'multiply(x, y)'],
	  'description': 'multiply two values.',
	  'examples': ['a = 2.1 * 3.4', 'a / 3.4', '2 * 3 + 4', '2 * (3 + 4)', '3 * 2.1 km'],
	  'seealso': ['divide']
		};

/***/ },
/* 315 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'norm',
	  'category': 'Arithmetic',
	  'syntax': ['norm(x)', 'norm(x, p)'],
	  'description': 'Calculate the norm of a number, vector or matrix.',
	  'examples': ['abs(-3.5)', 'norm(-3.5)', 'norm(3 - 4i))', 'norm([1, 2, -3], Infinity)', 'norm([1, 2, -3], -Infinity)', 'norm([3, 4], 2)', 'norm([[1, 2], [3, 4]], 1)', 'norm([[1, 2], [3, 4]], \'inf\')', 'norm([[1, 2], [3, 4]], \'fro\')']
		};

/***/ },
/* 316 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'nthRoot',
	  'category': 'Arithmetic',
	  'syntax': ['nthRoot(a)', 'nthRoot(a, root)'],
	  'description': 'Calculate the nth root of a value. ' + 'The principal nth root of a positive real number A, ' + 'is the positive real solution of the equation "x^root = A".',
	  'examples': ['4 ^ 3', 'nthRoot(64, 3)', 'nthRoot(9, 2)', 'sqrt(9)'],
	  'seealso': ['sqrt', 'pow']
		};

/***/ },
/* 317 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'pow',
	  'category': 'Operators',
	  'syntax': ['x ^ y', 'pow(x, y)'],
	  'description': 'Calculates the power of x to y, x^y.',
	  'examples': ['2^3 = 8', '2*2*2', '1 + e ^ (pi * i)'],
	  'seealso': ['multiply']
		};

/***/ },
/* 318 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'round',
	  'category': 'Arithmetic',
	  'syntax': ['round(x)', 'round(x, n)'],
	  'description': 'round a value towards the nearest integer.If x is complex, both real and imaginary part are rounded towards the nearest integer. When n is specified, the value is rounded to n decimals.',
	  'examples': ['round(3.2)', 'round(3.8)', 'round(-4.2)', 'round(-4.8)', 'round(pi, 3)', 'round(123.45678, 2)'],
	  'seealso': ['ceil', 'floor', 'fix']
		};

/***/ },
/* 319 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'sign',
	  'category': 'Arithmetic',
	  'syntax': ['sign(x)'],
	  'description': 'Compute the sign of a value. The sign of a value x is 1 when x>1, -1 when x<0, and 0 when x=0.',
	  'examples': ['sign(3.5)', 'sign(-4.2)', 'sign(0)'],
	  'seealso': ['abs']
		};

/***/ },
/* 320 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'sqrt',
	  'category': 'Arithmetic',
	  'syntax': ['sqrt(x)'],
	  'description': 'Compute the square root value. If x = y * y, then y is the square root of x.',
	  'examples': ['sqrt(25)', '5 * 5', 'sqrt(-1)'],
	  'seealso': ['square', 'multiply']
		};

/***/ },
/* 321 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'square',
	  'category': 'Arithmetic',
	  'syntax': ['square(x)'],
	  'description': 'Compute the square of a value. The square of x is x * x.',
	  'examples': ['square(3)', 'sqrt(9)', '3^2', '3 * 3'],
	  'seealso': ['multiply', 'pow', 'sqrt', 'cube']
		};

/***/ },
/* 322 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'subtract',
	  'category': 'Operators',
	  'syntax': ['x - y', 'subtract(x, y)'],
	  'description': 'subtract two values.',
	  'examples': ['a = 5.3 - 2', 'a + 2', '2/3 - 1/6', '2 * 3 - 3', '2.1 km - 500m'],
	  'seealso': ['add']
		};

/***/ },
/* 323 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'unaryMinus',
	  'category': 'Operators',
	  'syntax': ['-x', 'unaryMinus(x)'],
	  'description': 'Inverse the sign of a value. Converts booleans and strings to numbers.',
	  'examples': ['-4.5', '-(-5.6)', '-"22"'],
	  'seealso': ['add', 'subtract', 'unaryPlus']
		};

/***/ },
/* 324 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'unaryPlus',
	  'category': 'Operators',
	  'syntax': ['+x', 'unaryPlus(x)'],
	  'description': 'Converts booleans and strings to numbers.',
	  'examples': ['+true', '+"2"'],
	  'seealso': ['add', 'subtract', 'unaryMinus']
		};

/***/ },
/* 325 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'xgcd',
	  'category': 'Arithmetic',
	  'syntax': ['xgcd(a, b)'],
	  'description': 'Calculate the extended greatest common divisor for two values',
	  'examples': ['xgcd(8, 12)', 'gcd(8, 12)', 'xgcd(36163, 21199)'],
	  'seealso': ['gcd', 'lcm']
		};

/***/ },
/* 326 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'bitAnd',
	  'category': 'Bitwise',
	  'syntax': ['x & y', 'bitAnd(x, y)'],
	  'description': 'Bitwise AND operation. Performs the logical AND operation on each pair of the corresponding bits of the two given values by multiplying them. If both bits in the compared position are 1, the bit in the resulting binary representation is 1, otherwise, the result is 0',
	  'examples': ['5 & 3', 'bitAnd(53, 131)', '[1, 12, 31] & 42'],
	  'seealso': ['bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']
		};

/***/ },
/* 327 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'bitNot',
	  'category': 'Bitwise',
	  'syntax': ['~x', 'bitNot(x)'],
	  'description': 'Bitwise NOT operation. Performs a logical negation on each bit of the given value. Bits that are 0 become 1, and those that are 1 become 0.',
	  'examples': ['~1', '~2', 'bitNot([2, -3, 4])'],
	  'seealso': ['bitAnd', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']
		};

/***/ },
/* 328 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'bitOr',
	  'category': 'Bitwise',
	  'syntax': ['x | y', 'bitOr(x, y)'],
	  'description': 'Bitwise OR operation. Performs the logical inclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if the first bit is 1 or the second bit is 1 or both bits are 1, otherwise, the result is 0.',
	  'examples': ['5 | 3', 'bitOr([1, 2, 3], 4)'],
	  'seealso': ['bitAnd', 'bitNot', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']
		};

/***/ },
/* 329 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'bitXor',
	  'category': 'Bitwise',
	  'syntax': ['bitXor(x, y)'],
	  'description': 'Bitwise XOR operation, exclusive OR. Performs the logical exclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1.',
	  'examples': ['bitOr(1, 2)', 'bitXor([2, 3, 4], 4)'],
	  'seealso': ['bitAnd', 'bitNot', 'bitOr', 'leftShift', 'rightArithShift', 'rightLogShift']
		};

/***/ },
/* 330 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'leftShift',
	  'category': 'Bitwise',
	  'syntax': ['x << y', 'leftShift(x, y)'],
	  'description': 'Bitwise left logical shift of a value x by y number of bits.',
	  'examples': ['4 << 1', '8 >> 1'],
	  'seealso': ['bitAnd', 'bitNot', 'bitOr', 'bitXor', 'rightArithShift', 'rightLogShift']
		};

/***/ },
/* 331 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'rightArithShift',
	  'category': 'Bitwise',
	  'syntax': ['x >> y', 'leftShift(x, y)'],
	  'description': 'Bitwise right arithmetic shift of a value x by y number of bits.',
	  'examples': ['8 >> 1', '4 << 1', '-12 >> 2'],
	  'seealso': ['bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightLogShift']
		};

/***/ },
/* 332 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'rightLogShift',
	  'category': 'Bitwise',
	  'syntax': ['x >> y', 'leftShift(x, y)'],
	  'description': 'Bitwise right logical shift of a value x by y number of bits.',
	  'examples': ['8 >>> 1', '4 << 1', '-12 >>> 2'],
	  'seealso': ['bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift']
		};

/***/ },
/* 333 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'bellNumbers',
	  'category': 'Combinatorics',
	  'syntax': ['bellNumbers(n)'],
	  'description': 'The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S. `bellNumbers` only takes integer arguments. The following condition must be enforced: n >= 0.',
	  'examples': ['bellNumbers(3)', 'bellNumbers(8)'],
	  'seealso': ['stirlingS2']
		};

/***/ },
/* 334 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'catalan',
	  'category': 'Combinatorics',
	  'syntax': ['catalan(n)'],
	  'description': 'The Catalan Numbers enumerate combinatorial structures of many different types. catalan only takes integer arguments. The following condition must be enforced: n >= 0.',
	  'examples': ['catalan(3)', 'catalan(8)'],
	  'seealso': ['bellNumbers']
		};

/***/ },
/* 335 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'composition',
	  'category': 'Combinatorics',
	  'syntax': ['composition(n, k)'],
	  'description': 'The composition counts of n into k parts. composition only takes integer arguments. The following condition must be enforced: k <= n.',
	  'examples': ['composition(5, 3)'],
	  'seealso': ['combinations']
		};

/***/ },
/* 336 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'stirlingS2',
	  'category': 'Combinatorics',
	  'syntax': ['stirlingS2(n, k)'],
	  'description': 'he Stirling numbers of the second kind, counts the number of ways to partition a set of n labelled objects into k nonempty unlabelled subsets. `stirlingS2` only takes integer arguments. The following condition must be enforced: k <= n. If n = k or k = 1, then s(n,k) = 1.',
	  'examples': ['stirlingS2(5, 3)'],
	  'seealso': ['bellNumbers']
		};

/***/ },
/* 337 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'config',
	  'category': 'Core',
	  'syntax': ['config()', 'config(options)'],
	  'description': 'Get configuration or change configuration.',
	  'examples': ['config()', '1/3 + 1/4', 'config({number: "Fraction"})', '1/3 + 1/4'],
	  'seealso': []
		};

/***/ },
/* 338 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'import',
	  'category': 'Core',
	  'syntax': ['import(functions)', 'import(functions, options)'],
	  'description': 'Import functions or constants from an object.',
	  'examples': ['import({myFn: f(x)=x^2, myConstant: 32 })', 'myFn(2)', 'myConstant'],
	  'seealso': []
		};

/***/ },
/* 339 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'typed',
	  'category': 'Core',
	  'syntax': ['typed(signatures)', 'typed(name, signatures)'],
	  'description': 'Create a typed function.',
	  'examples': ['double = typed({ "number, number": f(x)=x+x })', 'double(2)', 'double("hello")'],
	  'seealso': []
		};

/***/ },
/* 340 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'arg',
	  'category': 'Complex',
	  'syntax': ['arg(x)'],
	  'description': 'Compute the argument of a complex value. If x = a+bi, the argument is computed as atan2(b, a).',
	  'examples': ['arg(2 + 2i)', 'atan2(3, 2)', 'arg(2 + 3i)'],
	  'seealso': ['re', 'im', 'conj', 'abs']
		};

/***/ },
/* 341 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'conj',
	  'category': 'Complex',
	  'syntax': ['conj(x)'],
	  'description': 'Compute the complex conjugate of a complex value. If x = a+bi, the complex conjugate is a-bi.',
	  'examples': ['conj(2 + 3i)', 'conj(2 - 3i)', 'conj(-5.2i)'],
	  'seealso': ['re', 'im', 'abs', 'arg']
		};

/***/ },
/* 342 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 're',
	  'category': 'Complex',
	  'syntax': ['re(x)'],
	  'description': 'Get the real part of a complex number.',
	  'examples': ['re(2 + 3i)', 'im(2 + 3i)', 're(-5.2i)', 're(2.4)'],
	  'seealso': ['im', 'conj', 'abs', 'arg']
		};

/***/ },
/* 343 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'im',
	  'category': 'Complex',
	  'syntax': ['im(x)'],
	  'description': 'Get the imaginary part of a complex number.',
	  'examples': ['im(2 + 3i)', 're(2 + 3i)', 'im(-5.2i)', 'im(2.4)'],
	  'seealso': ['re', 'conj', 'abs', 'arg']
		};

/***/ },
/* 344 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'eval',
	  'category': 'Expression',
	  'syntax': ['eval(expression)', 'eval([expr1, expr2, expr3, ...])'],
	  'description': 'Evaluate an expression or an array with expressions.',
	  'examples': ['eval("2 + 3")', 'eval("sqrt(" + 4 + ")")'],
	  'seealso': []
		};

/***/ },
/* 345 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'help',
	  'category': 'Expression',
	  'syntax': ['help(object)', 'help(string)'],
	  'description': 'Display documentation on a function or data type.',
	  'examples': ['help(sqrt)', 'help("complex")'],
	  'seealso': []
		};

/***/ },
/* 346 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'distance',
	  'category': 'Geometry',
	  'syntax': ['distance([x1, y1], [x2, y2])', 'distance([[x1, y1], [x2, y2])'],
	  'description': 'Calculates the Euclidean distance between two points.',
	  'examples': ['distance([0,0], [4,4])', 'distance([[0,0], [4,4]])'],
	  'seealso': []
		};

/***/ },
/* 347 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'intersect',
	  'category': 'Geometry',
	  'syntax': ['intersect(expr1, expr2, expr3, expr4)', 'intersect(expr1, expr2, expr3)'],
	  'description': 'Computes the intersection point of lines and/or planes.',
	  'examples': ['intersect([0, 0], [10, 10], [10, 0], [0, 10])', 'intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])'],
	  'seealso': []
		};

/***/ },
/* 348 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'and',
	  'category': 'Logical',
	  'syntax': ['x and y', 'and(x, y)'],
	  'description': 'Logical and. Test whether two values are both defined with a nonzero/nonempty value.',
	  'examples': ['true and false', 'true and true', '2 and 4'],
	  'seealso': ['not', 'or', 'xor']
		};

/***/ },
/* 349 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'not',
	  'category': 'Logical',
	  'syntax': ['not x', 'not(x)'],
	  'description': 'Logical not. Flips the boolean value of given argument.',
	  'examples': ['not true', 'not false', 'not 2', 'not 0'],
	  'seealso': ['and', 'or', 'xor']
		};

/***/ },
/* 350 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'or',
	  'category': 'Logical',
	  'syntax': ['x or y', 'or(x, y)'],
	  'description': 'Logical or. Test if at least one value is defined with a nonzero/nonempty value.',
	  'examples': ['true or false', 'false or false', '0 or 4'],
	  'seealso': ['not', 'and', 'xor']
		};

/***/ },
/* 351 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'xor',
	  'category': 'Logical',
	  'syntax': ['x or y', 'or(x, y)'],
	  'description': 'Logical exclusive or, xor. Test whether one and only one value is defined with a nonzero/nonempty value.',
	  'examples': ['true xor false', 'false xor false', 'true xor true', '0 or 4'],
	  'seealso': ['not', 'and', 'or']
		};

/***/ },
/* 352 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'concat',
	  'category': 'Matrix',
	  'syntax': ['concat(A, B, C, ...)', 'concat(A, B, C, ..., dim)'],
	  'description': 'Concatenate matrices. By default, the matrices are concatenated by the last dimension. The dimension on which to concatenate can be provided as last argument.',
	  'examples': ['A = [1, 2; 5, 6]', 'B = [3, 4; 7, 8]', 'concat(A, B)', 'concat(A, B, 1)', 'concat(A, B, 2)'],
	  'seealso': ['det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
		};

/***/ },
/* 353 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'cross',
	  'category': 'Matrix',
	  'syntax': ['cross(A, B)'],
	  'description': 'Calculate the cross product for two vectors in three dimensional space.',
	  'examples': ['cross([1, 1, 0],  [0, 1, 1])', 'cross([3, -3, 1], [4, 9, 2])', 'cross([2, 3, 4],  [5, 6, 7])'],
	  'seealso': ['multiply', 'dot']
		};

/***/ },
/* 354 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'det',
	  'category': 'Matrix',
	  'syntax': ['det(x)'],
	  'description': 'Calculate the determinant of a matrix',
	  'examples': ['det([1, 2; 3, 4])', 'det([-2, 2, 3; -1, 1, 3; 2, 0, -1])'],
	  'seealso': ['concat', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
		};

/***/ },
/* 355 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'diag',
	  'category': 'Matrix',
	  'syntax': ['diag(x)', 'diag(x, k)'],
	  'description': 'Create a diagonal matrix or retrieve the diagonal of a matrix. When x is a vector, a matrix with the vector values on the diagonal will be returned. When x is a matrix, a vector with the diagonal values of the matrix is returned. When k is provided, the k-th diagonal will be filled in or retrieved, if k is positive, the values are placed on the super diagonal. When k is negative, the values are placed on the sub diagonal.',
	  'examples': ['diag(1:3)', 'diag(1:3, 1)', 'a = [1, 2, 3; 4, 5, 6; 7, 8, 9]', 'diag(a)'],
	  'seealso': ['concat', 'det', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
		};

/***/ },
/* 356 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'dot',
	  'category': 'Matrix',
	  'syntax': ['dot(A, B)'],
	  'description': 'Calculate the dot product of two vectors. ' + 'The dot product of A = [a1, a2, a3, ..., an] and B = [b1, b2, b3, ..., bn] ' + 'is defined as dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn',
	  'examples': ['dot([2, 4, 1], [2, 2, 3])', '[2, 4, 1] * [2, 2, 3]'],
	  'seealso': ['multiply', 'cross']
		};

/***/ },
/* 357 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'eye',
	  'category': 'Matrix',
	  'syntax': ['eye(n)', 'eye(m, n)', 'eye([m, n])', 'eye'],
	  'description': 'Returns the identity matrix with size m-by-n. The matrix has ones on the diagonal and zeros elsewhere.',
	  'examples': ['eye(3)', 'eye(3, 5)', 'a = [1, 2, 3; 4, 5, 6]', 'eye(size(a))'],
	  'seealso': ['concat', 'det', 'diag', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
		};

/***/ },
/* 358 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'filter',
	  'category': 'Matrix',
	  'syntax': ['filter(x, test)'],
	  'description': 'Filter items in a matrix.',
	  'examples': ['isPositive(x) = x > 0', 'filter([6, -2, -1, 4, 3], isPositive)', 'filter([6, -2, 0, 1, 0], x != 0)'],
	  'seealso': ['sort', 'map', 'forEach']
		};

/***/ },
/* 359 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'flatten',
	  'category': 'Matrix',
	  'syntax': ['flatten(x)'],
	  'description': 'Flatten a multi dimensional matrix into a single dimensional matrix.',
	  'examples': ['a = [1, 2, 3; 4, 5, 6]', 'size(a)', 'b = flatten(a)', 'size(b)'],
	  'seealso': ['concat', 'resize', 'size', 'squeeze']
		};

/***/ },
/* 360 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'forEach',
	  'category': 'Matrix',
	  'syntax': ['forEach(x, callback)'],
	  'description': 'Iterates over all elements of a matrix/array, and executes the given callback function.',
	  'examples': ['forEach([1, 2, 3], function(val) { console.log(val) })'],
	  'seealso': ['map', 'sort', 'filter']
		};

/***/ },
/* 361 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'inv',
	  'category': 'Matrix',
	  'syntax': ['inv(x)'],
	  'description': 'Calculate the inverse of a matrix',
	  'examples': ['inv([1, 2; 3, 4])', 'inv(4)', '1 / 4'],
	  'seealso': ['concat', 'det', 'diag', 'eye', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
		};

/***/ },
/* 362 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'map',
	  'category': 'Matrix',
	  'syntax': ['map(x, callback)'],
	  'description': 'Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.',
	  'examples': ['map([1, 2, 3], function(val) { return value * value })'],
	  'seealso': ['filter', 'forEach']
		};

/***/ },
/* 363 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'ones',
	  'category': 'Matrix',
	  'syntax': ['ones(m)', 'ones(m, n)', 'ones(m, n, p, ...)', 'ones([m])', 'ones([m, n])', 'ones([m, n, p, ...])', 'ones'],
	  'description': 'Create a matrix containing ones.',
	  'examples': ['ones(3)', 'ones(3, 5)', 'ones([2,3]) * 4.5', 'a = [1, 2, 3; 4, 5, 6]', 'ones(size(a))'],
	  'seealso': ['concat', 'det', 'diag', 'eye', 'inv', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
		};

/***/ },
/* 364 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'partitionSelect',
	  'category': 'Matrix',
	  'syntax': ['partitionSelect(x, k)', 'partitionSelect(x, k, compare)'],
	  'description': 'Partition-based selection of an array or 1D matrix. Will find the kth smallest value, and mutates the input array. Uses Quickselect.',
	  'examples': ['partitionSelect([5, 10, 1], 2)', 'partitionSelect(["C", "B", "A", "D"], 1)'],
	  'seealso': ['sort']
		};

/***/ },
/* 365 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'range',
	  'category': 'Type',
	  'syntax': ['start:end', 'start:step:end', 'range(start, end)', 'range(start, end, step)', 'range(string)'],
	  'description': 'Create a range. Lower bound of the range is included, upper bound is excluded.',
	  'examples': ['1:5', '3:-1:-3', 'range(3, 7)', 'range(0, 12, 2)', 'range("4:10")', 'a = [1, 2, 3, 4; 5, 6, 7, 8]', 'a[1:2, 1:2]'],
	  'seealso': ['concat', 'det', 'diag', 'eye', 'inv', 'ones', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
		};

/***/ },
/* 366 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'resize',
	  'category': 'Matrix',
	  'syntax': ['resize(x, size)', 'resize(x, size, defaultValue)'],
	  'description': 'Resize a matrix.',
	  'examples': ['resize([1,2,3,4,5], [3])', 'resize([1,2,3], [5])', 'resize([1,2,3], [5], -1)', 'resize(2, [2, 3])', 'resize("hello", [8], "!")'],
	  'seealso': ['size', 'subset', 'squeeze']
		};

/***/ },
/* 367 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'size',
	  'category': 'Matrix',
	  'syntax': ['size(x)'],
	  'description': 'Calculate the size of a matrix.',
	  'examples': ['size(2.3)', 'size("hello world")', 'a = [1, 2; 3, 4; 5, 6]', 'size(a)', 'size(1:6)'],
	  'seealso': ['concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
		};

/***/ },
/* 368 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'sort',
	  'category': 'Matrix',
	  'syntax': ['sort(x)', 'sort(x, compare)'],
	  'description': 'Sort the items in a matrix. Compare can be a string "asc" or "desc", or a custom sort function.',
	  'examples': ['sort([5, 10, 1])', 'sort(["C", "B", "A", "D"])', 'sortByLength(a, b) = size(a)[1] - size(b)[1]', 'sort(["Langdon", "Tom", "Sara"], sortByLength)'],
	  'seealso': ['map', 'filter', 'forEach']
		};

/***/ },
/* 369 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'squeeze',
	  'category': 'Matrix',
	  'syntax': ['squeeze(x)'],
	  'description': 'Remove inner and outer singleton dimensions from a matrix.',
	  'examples': ['a = zeros(3,2,1)', 'size(squeeze(a))', 'b = zeros(1,1,3)', 'size(squeeze(b))'],
	  'seealso': ['concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'subset', 'trace', 'transpose', 'zeros']
		};

/***/ },
/* 370 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'subset',
	  'category': 'Matrix',
	  'syntax': ['value(index)', 'value(index) = replacement', 'subset(value, [index])', 'subset(value, [index], replacement)'],
	  'description': 'Get or set a subset of a matrix or string. ' + 'Indexes are one-based. ' + 'Both the ranges lower-bound and upper-bound are included.',
	  'examples': ['d = [1, 2; 3, 4]', 'e = []', 'e[1, 1:2] = [5, 6]', 'e[2, :] = [7, 8]', 'f = d * e', 'f[2, 1]', 'f[:, 1]'],
	  'seealso': ['concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'trace', 'transpose', 'zeros']
		};

/***/ },
/* 371 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'trace',
	  'category': 'Matrix',
	  'syntax': ['trace(A)'],
	  'description': 'Calculate the trace of a matrix: the sum of the elements on the main diagonal of a square matrix.',
	  'examples': ['A = [1, 2, 3; -1, 2, 3; 2, 0, 3]', 'trace(A)'],
	  'seealso': ['concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'transpose', 'zeros']
		};

/***/ },
/* 372 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'transpose',
	  'category': 'Matrix',
	  'syntax': ['x\'', 'transpose(x)'],
	  'description': 'Transpose a matrix',
	  'examples': ['a = [1, 2, 3; 4, 5, 6]', 'a\'', 'transpose(a)'],
	  'seealso': ['concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'zeros']
		};

/***/ },
/* 373 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'zeros',
	  'category': 'Matrix',
	  'syntax': ['zeros(m)', 'zeros(m, n)', 'zeros(m, n, p, ...)', 'zeros([m])', 'zeros([m, n])', 'zeros([m, n, p, ...])', 'zeros'],
	  'description': 'Create a matrix containing zeros.',
	  'examples': ['zeros(3)', 'zeros(3, 5)', 'a = [1, 2, 3; 4, 5, 6]', 'zeros(size(a))'],
	  'seealso': ['concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose']
		};

/***/ },
/* 374 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'combinations',
	  'category': 'Probability',
	  'syntax': ['combinations(n, k)'],
	  'description': 'Compute the number of combinations of n items taken k at a time',
	  'examples': ['combinations(7, 5)'],
	  'seealso': ['permutations', 'factorial']
		};

/***/ },
/* 375 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'factorial',
	  'category': 'Probability',
	  'syntax': ['kldivergence(x, y)'],
	  'description': 'Compute the factorial of a value',
	  'examples': ['5!', '5 * 4 * 3 * 2 * 1', '3!'],
	  'seealso': ['combinations', 'permutations', 'gamma']
		};

/***/ },
/* 376 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'gamma',
	  'category': 'Probability',
	  'syntax': ['gamma(n)'],
	  'description': 'Compute the gamma function. For small values, the Lanczos approximation is used, and for large values the extended Stirling approximation.',
	  'examples': ['gamma(4)', '3!', 'gamma(1/2)', 'sqrt(pi)'],
	  'seealso': ['factorial']
		};

/***/ },
/* 377 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'kldivergence',
	  'category': 'Probability',
	  'syntax': ['n!', 'factorial(n)'],
	  'description': 'Calculate the Kullback-Leibler (KL) divergence  between two distributions.',
	  'examples': ['math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])'],
	  'seealso': []
		};

/***/ },
/* 378 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'multinomial',
	  'category': 'Probability',
	  'syntax': ['multinomial(A)'],
	  'description': 'Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities. multinomial takes one array of integers as an argument. The following condition must be enforced: every ai <= 0.',
	  'examples': ['multinomial([1, 2, 1])'],
	  'seealso': ['combinations', 'factorial']
		};

/***/ },
/* 379 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'permutations',
	  'category': 'Probability',
	  'syntax': ['permutations(n)', 'permutations(n, k)'],
	  'description': 'Compute the number of permutations of n items taken k at a time',
	  'examples': ['permutations(5)', 'permutations(5, 3)'],
	  'seealso': ['combinations', 'factorial']
		};

/***/ },
/* 380 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'pickRandom',
	  'category': 'Probability',
	  'syntax': ['pickRandom(array)'],
	  'description': 'Pick a random entry from a given array.',
	  'examples': ['pickRandom(0:10)', 'pickRandom([1, 3, 1, 6])'],
	  'seealso': ['random', 'randomInt']
		};

/***/ },
/* 381 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'random',
	  'category': 'Probability',
	  'syntax': ['random()', 'random(max)', 'random(min, max)', 'random(size)', 'random(size, max)', 'random(size, min, max)'],
	  'description': 'Return a random number.',
	  'examples': ['random()', 'random(10, 20)', 'random([2, 3])'],
	  'seealso': ['pickRandom', 'randomInt']
		};

/***/ },
/* 382 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'randInt',
	  'category': 'Probability',
	  'syntax': ['randInt(max)', 'randInt(min, max)', 'randInt(size)', 'randInt(size, max)', 'randInt(size, min, max)'],
	  'description': 'Return a random integer number',
	  'examples': ['randInt(10, 20)', 'randInt([2, 3], 10)'],
	  'seealso': ['pickRandom', 'random']
		};

/***/ },
/* 383 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'compare',
	  'category': 'Relational',
	  'syntax': ['compare(x, y)'],
	  'description': 'Compare two values. Returns 1 if x is larger than y, -1 if x is smaller than y, and 0 if x and y are equal.',
	  'examples': ['compare(2, 3)', 'compare(3, 2)', 'compare(2, 2)', 'compare(5cm, 40mm)', 'compare(2, [1, 2, 3])'],
	  'seealso': ['equal', 'unequal', 'smaller', 'smallerEq', 'largerEq']
		};

/***/ },
/* 384 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'deepEqual',
	  'category': 'Relational',
	  'syntax': ['deepEqual(x, y)'],
	  'description': 'Check equality of two matrices element wise. Returns true if the size of both matrices is equal and when and each of the elements are equal.',
	  'examples': ['[1,3,4] == [1,3,4]', '[1,3,4] == [1,3]'],
	  'seealso': ['equal', 'unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare']
		};

/***/ },
/* 385 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'equal',
	  'category': 'Relational',
	  'syntax': ['x == y', 'equal(x, y)'],
	  'description': 'Check equality of two values. Returns true if the values are equal, and false if not.',
	  'examples': ['2+2 == 3', '2+2 == 4', 'a = 3.2', 'b = 6-2.8', 'a == b', '50cm == 0.5m'],
	  'seealso': ['unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual']
		};

/***/ },
/* 386 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'larger',
	  'category': 'Relational',
	  'syntax': ['x > y', 'larger(x, y)'],
	  'description': 'Check if value x is larger than y. Returns true if x is larger than y, and false if not.',
	  'examples': ['2 > 3', '5 > 2*2', 'a = 3.3', 'b = 6-2.8', '(a > b)', '(b < a)', '5 cm > 2 inch'],
	  'seealso': ['equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compare']
		};

/***/ },
/* 387 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'largerEq',
	  'category': 'Relational',
	  'syntax': ['x >= y', 'largerEq(x, y)'],
	  'description': 'Check if value x is larger or equal to y. Returns true if x is larger or equal to y, and false if not.',
	  'examples': ['2 > 1+1', '2 >= 1+1', 'a = 3.2', 'b = 6-2.8', '(a > b)'],
	  'seealso': ['equal', 'unequal', 'smallerEq', 'smaller', 'largerEq', 'compare']
		};

/***/ },
/* 388 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'smaller',
	  'category': 'Relational',
	  'syntax': ['x < y', 'smaller(x, y)'],
	  'description': 'Check if value x is smaller than value y. Returns true if x is smaller than y, and false if not.',
	  'examples': ['2 < 3', '5 < 2*2', 'a = 3.3', 'b = 6-2.8', '(a < b)', '5 cm < 2 inch'],
	  'seealso': ['equal', 'unequal', 'larger', 'smallerEq', 'largerEq', 'compare']
		};

/***/ },
/* 389 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'smallerEq',
	  'category': 'Relational',
	  'syntax': ['x <= y', 'smallerEq(x, y)'],
	  'description': 'Check if value x is smaller or equal to value y. Returns true if x is smaller than y, and false if not.',
	  'examples': ['2 < 1+1', '2 <= 1+1', 'a = 3.2', 'b = 6-2.8', '(a < b)'],
	  'seealso': ['equal', 'unequal', 'larger', 'smaller', 'largerEq', 'compare']
		};

/***/ },
/* 390 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'unequal',
	  'category': 'Relational',
	  'syntax': ['x != y', 'unequal(x, y)'],
	  'description': 'Check unequality of two values. Returns true if the values are unequal, and false if they are equal.',
	  'examples': ['2+2 != 3', '2+2 != 4', 'a = 3.2', 'b = 6-2.8', 'a != b', '50cm != 0.5m', '5 cm != 2 inch'],
	  'seealso': ['equal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual']
		};

/***/ },
/* 391 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'max',
	  'category': 'Statistics',
	  'syntax': ['max(a, b, c, ...)', 'max(A)', 'max(A, dim)'],
	  'description': 'Compute the maximum value of a list of values.',
	  'examples': ['max(2, 3, 4, 1)', 'max([2, 3, 4, 1])', 'max([2, 5; 4, 3])', 'max([2, 5; 4, 3], 1)', 'max([2, 5; 4, 3], 2)', 'max(2.7, 7.1, -4.5, 2.0, 4.1)', 'min(2.7, 7.1, -4.5, 2.0, 4.1)'],
	  'seealso': ['mean', 'median', 'min', 'prod', 'std', 'sum', 'var']
		};

/***/ },
/* 392 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'mean',
	  'category': 'Statistics',
	  'syntax': ['mean(a, b, c, ...)', 'mean(A)', 'mean(A, dim)'],
	  'description': 'Compute the arithmetic mean of a list of values.',
	  'examples': ['mean(2, 3, 4, 1)', 'mean([2, 3, 4, 1])', 'mean([2, 5; 4, 3])', 'mean([2, 5; 4, 3], 1)', 'mean([2, 5; 4, 3], 2)', 'mean([1.0, 2.7, 3.2, 4.0])'],
	  'seealso': ['max', 'median', 'min', 'prod', 'std', 'sum', 'var']
		};

/***/ },
/* 393 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'median',
	  'category': 'Statistics',
	  'syntax': ['median(a, b, c, ...)', 'median(A)'],
	  'description': 'Compute the median of all values. The values are sorted and the middle value is returned. In case of an even number of values, the average of the two middle values is returned.',
	  'examples': ['median(5, 2, 7)', 'median([3, -1, 5, 7])'],
	  'seealso': ['max', 'mean', 'min', 'prod', 'std', 'sum', 'var']
		};

/***/ },
/* 394 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'min',
	  'category': 'Statistics',
	  'syntax': ['min(a, b, c, ...)', 'min(A)', 'min(A, dim)'],
	  'description': 'Compute the minimum value of a list of values.',
	  'examples': ['min(2, 3, 4, 1)', 'min([2, 3, 4, 1])', 'min([2, 5; 4, 3])', 'min([2, 5; 4, 3], 1)', 'min([2, 5; 4, 3], 2)', 'min(2.7, 7.1, -4.5, 2.0, 4.1)', 'max(2.7, 7.1, -4.5, 2.0, 4.1)'],
	  'seealso': ['max', 'mean', 'median', 'prod', 'std', 'sum', 'var']
		};

/***/ },
/* 395 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'mode',
	  'category': 'Statistics',
	  'syntax': ['mode(a, b, c, ...)', 'mode(A)', 'mode(A, a, b, B, c, ...)'],
	  'description': 'Computes the mode of all values as an array. In case mode being more than one, multiple values are returned in an array.',
	  'examples': ['mode(5, 2, 7)', 'mode([3, -1, 5, 7])'],
	  'seealso': ['max', 'mean', 'min', 'median', 'prod', 'std', 'sum', 'var']
		};

/***/ },
/* 396 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'prod',
	  'category': 'Statistics',
	  'syntax': ['prod(a, b, c, ...)', 'prod(A)'],
	  'description': 'Compute the product of all values.',
	  'examples': ['prod(2, 3, 4)', 'prod([2, 3, 4])', 'prod([2, 5; 4, 3])'],
	  'seealso': ['max', 'mean', 'min', 'median', 'min', 'std', 'sum', 'var']
		};

/***/ },
/* 397 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'quantileSeq',
	  'category': 'Statistics',
	  'syntax': ['quantileSeq(A, prob[, sorted])', 'quantileSeq(A, [prob1, prob2, ...][, sorted])', 'quantileSeq(A, N[, sorted])'],
	  'description': 'Compute the prob order quantile of a matrix or a list with values. The sequence is sorted and the middle value is returned. Supported types of sequence values are: Number, BigNumber, Unit Supported types of probablity are: Number, BigNumber. \n\nIn case of a (multi dimensional) array or matrix, the prob order quantile of all elements will be calculated.',
	  'examples': ['quantileSeq([3, -1, 5, 7], 0.5)', 'quantileSeq([3, -1, 5, 7], [1/3, 2/3])', 'quantileSeq([3, -1, 5, 7], 2)', 'quantileSeq([-1, 3, 5, 7], 0.5, true)'],
	  'seealso': ['mean', 'median', 'min', 'max', 'prod', 'std', 'sum', 'var']
		};

/***/ },
/* 398 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'std',
	  'category': 'Statistics',
	  'syntax': ['std(a, b, c, ...)', 'std(A)', 'std(A, normalization)'],
	  'description': 'Compute the standard deviation of all values, defined as std(A) = sqrt(var(A)). Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
	  'examples': ['std(2, 4, 6)', 'std([2, 4, 6, 8])', 'std([2, 4, 6, 8], "uncorrected")', 'std([2, 4, 6, 8], "biased")', 'std([1, 2, 3; 4, 5, 6])'],
	  'seealso': ['max', 'mean', 'min', 'median', 'min', 'prod', 'sum', 'var']
		};

/***/ },
/* 399 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'sum',
	  'category': 'Statistics',
	  'syntax': ['sum(a, b, c, ...)', 'sum(A)'],
	  'description': 'Compute the sum of all values.',
	  'examples': ['sum(2, 3, 4, 1)', 'sum([2, 3, 4, 1])', 'sum([2, 5; 4, 3])'],
	  'seealso': ['max', 'mean', 'median', 'min', 'prod', 'std', 'sum', 'var']
		};

/***/ },
/* 400 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'var',
	  'category': 'Statistics',
	  'syntax': ['var(a, b, c, ...)', 'var(A)', 'var(A, normalization)'],
	  'description': 'Compute the variance of all values. Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
	  'examples': ['var(2, 4, 6)', 'var([2, 4, 6, 8])', 'var([2, 4, 6, 8], "uncorrected")', 'var([2, 4, 6, 8], "biased")', 'var([1, 2, 3; 4, 5, 6])'],
	  'seealso': ['max', 'mean', 'min', 'median', 'min', 'prod', 'std', 'sum']
		};

/***/ },
/* 401 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'acos',
	  'category': 'Trigonometry',
	  'syntax': ['acos(x)'],
	  'description': 'Compute the inverse cosine of a value in radians.',
	  'examples': ['acos(0.5)', 'acos(cos(2.3))'],
	  'seealso': ['cos', 'atan', 'asin']
		};

/***/ },
/* 402 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'acosh',
	  'category': 'Trigonometry',
	  'syntax': ['acosh(x)'],
	  'description': 'Calculate the hyperbolic arccos of a value, defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.',
	  'examples': ['acosh(1.5)'],
	  'seealso': ['cosh', 'asinh', 'atanh']
		};

/***/ },
/* 403 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'acot',
	  'category': 'Trigonometry',
	  'syntax': ['acot(x)'],
	  'description': 'Calculate the inverse cotangent of a value.',
	  'examples': ['acot(0.5)', 'acot(cot(0.5))', 'acot(2)'],
	  'seealso': ['cot', 'atan']
		};

/***/ },
/* 404 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'acoth',
	  'category': 'Trigonometry',
	  'syntax': ['acoth(x)'],
	  'description': 'Calculate the hyperbolic arccotangent of a value, defined as `acoth(x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.',
	  'examples': ['acoth(0.5)'],
	  'seealso': ['acsch', 'asech']
		};

/***/ },
/* 405 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'acsc',
	  'category': 'Trigonometry',
	  'syntax': ['acsc(x)'],
	  'description': 'Calculate the inverse cotangent of a value.',
	  'examples': ['acsc(0.5)', 'acsc(csc(0.5))', 'acsc(2)'],
	  'seealso': ['csc', 'asin', 'asec']
		};

/***/ },
/* 406 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'acsch',
	  'category': 'Trigonometry',
	  'syntax': ['acsch(x)'],
	  'description': 'Calculate the hyperbolic arccosecant of a value, defined as `acsch(x) = ln(1/x + sqrt(1/x^2 + 1))`.',
	  'examples': ['acsch(0.5)'],
	  'seealso': ['asech', 'acoth']
		};

/***/ },
/* 407 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'asec',
	  'category': 'Trigonometry',
	  'syntax': ['asec(x)'],
	  'description': 'Calculate the inverse secant of a value.',
	  'examples': ['asec(0.5)', 'asec(sec(0.5))', 'asec(2)'],
	  'seealso': ['acos', 'acot', 'acsc']
		};

/***/ },
/* 408 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'asech',
	  'category': 'Trigonometry',
	  'syntax': ['asech(x)'],
	  'description': 'Calculate the inverse secant of a value.',
	  'examples': ['asech(0.5)'],
	  'seealso': ['acsch', 'acoth']
		};

/***/ },
/* 409 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'asin',
	  'category': 'Trigonometry',
	  'syntax': ['asin(x)'],
	  'description': 'Compute the inverse sine of a value in radians.',
	  'examples': ['asin(0.5)', 'asin(sin(2.3))'],
	  'seealso': ['sin', 'acos', 'atan']
		};

/***/ },
/* 410 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'asinh',
	  'category': 'Trigonometry',
	  'syntax': ['asinh(x)'],
	  'description': 'Calculate the hyperbolic arcsine of a value, defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.',
	  'examples': ['asinh(0.5)'],
	  'seealso': ['acosh', 'atanh']
		};

/***/ },
/* 411 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'atan',
	  'category': 'Trigonometry',
	  'syntax': ['atan(x)'],
	  'description': 'Compute the inverse tangent of a value in radians.',
	  'examples': ['atan(0.5)', 'atan(tan(2.3))'],
	  'seealso': ['tan', 'acos', 'asin']
		};

/***/ },
/* 412 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'atanh',
	  'category': 'Trigonometry',
	  'syntax': ['atanh(x)'],
	  'description': 'Calculate the hyperbolic arctangent of a value, defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.',
	  'examples': ['atanh(0.5)'],
	  'seealso': ['acosh', 'asinh']
		};

/***/ },
/* 413 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'atan2',
	  'category': 'Trigonometry',
	  'syntax': ['atan2(y, x)'],
	  'description': 'Computes the principal value of the arc tangent of y/x in radians.',
	  'examples': ['atan2(2, 2) / pi', 'angle = 60 deg in rad', 'x = cos(angle)', 'y = sin(angle)', 'atan2(y, x)'],
	  'seealso': ['sin', 'cos', 'tan']
		};

/***/ },
/* 414 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'cos',
	  'category': 'Trigonometry',
	  'syntax': ['cos(x)'],
	  'description': 'Compute the cosine of x in radians.',
	  'examples': ['cos(2)', 'cos(pi / 4) ^ 2', 'cos(180 deg)', 'cos(60 deg)', 'sin(0.2)^2 + cos(0.2)^2'],
	  'seealso': ['acos', 'sin', 'tan']
		};

/***/ },
/* 415 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'cosh',
	  'category': 'Trigonometry',
	  'syntax': ['cosh(x)'],
	  'description': 'Compute the hyperbolic cosine of x in radians.',
	  'examples': ['cosh(0.5)'],
	  'seealso': ['sinh', 'tanh', 'coth']
		};

/***/ },
/* 416 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'cot',
	  'category': 'Trigonometry',
	  'syntax': ['cot(x)'],
	  'description': 'Compute the cotangent of x in radians. Defined as 1/tan(x)',
	  'examples': ['cot(2)', '1 / tan(2)'],
	  'seealso': ['sec', 'csc', 'tan']
		};

/***/ },
/* 417 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'coth',
	  'category': 'Trigonometry',
	  'syntax': ['coth(x)'],
	  'description': 'Compute the hyperbolic cotangent of x in radians.',
	  'examples': ['coth(2)', '1 / tanh(2)'],
	  'seealso': ['sech', 'csch', 'tanh']
		};

/***/ },
/* 418 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'csc',
	  'category': 'Trigonometry',
	  'syntax': ['csc(x)'],
	  'description': 'Compute the cosecant of x in radians. Defined as 1/sin(x)',
	  'examples': ['csc(2)', '1 / sin(2)'],
	  'seealso': ['sec', 'cot', 'sin']
		};

/***/ },
/* 419 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'csch',
	  'category': 'Trigonometry',
	  'syntax': ['csch(x)'],
	  'description': 'Compute the hyperbolic cosecant of x in radians. Defined as 1/sinh(x)',
	  'examples': ['csch(2)', '1 / sinh(2)'],
	  'seealso': ['sech', 'coth', 'sinh']
		};

/***/ },
/* 420 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'sec',
	  'category': 'Trigonometry',
	  'syntax': ['sec(x)'],
	  'description': 'Compute the secant of x in radians. Defined as 1/cos(x)',
	  'examples': ['sec(2)', '1 / cos(2)'],
	  'seealso': ['cot', 'csc', 'cos']
		};

/***/ },
/* 421 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'sech',
	  'category': 'Trigonometry',
	  'syntax': ['sech(x)'],
	  'description': 'Compute the hyperbolic secant of x in radians. Defined as 1/cosh(x)',
	  'examples': ['sech(2)', '1 / cosh(2)'],
	  'seealso': ['coth', 'csch', 'cosh']
		};

/***/ },
/* 422 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'sin',
	  'category': 'Trigonometry',
	  'syntax': ['sin(x)'],
	  'description': 'Compute the sine of x in radians.',
	  'examples': ['sin(2)', 'sin(pi / 4) ^ 2', 'sin(90 deg)', 'sin(30 deg)', 'sin(0.2)^2 + cos(0.2)^2'],
	  'seealso': ['asin', 'cos', 'tan']
		};

/***/ },
/* 423 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'sinh',
	  'category': 'Trigonometry',
	  'syntax': ['sinh(x)'],
	  'description': 'Compute the hyperbolic sine of x in radians.',
	  'examples': ['sinh(0.5)'],
	  'seealso': ['cosh', 'tanh']
		};

/***/ },
/* 424 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'tan',
	  'category': 'Trigonometry',
	  'syntax': ['tan(x)'],
	  'description': 'Compute the tangent of x in radians.',
	  'examples': ['tan(0.5)', 'sin(0.5) / cos(0.5)', 'tan(pi / 4)', 'tan(45 deg)'],
	  'seealso': ['atan', 'sin', 'cos']
		};

/***/ },
/* 425 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'tanh',
	  'category': 'Trigonometry',
	  'syntax': ['tanh(x)'],
	  'description': 'Compute the hyperbolic tangent of x in radians.',
	  'examples': ['tanh(0.5)', 'sinh(0.5) / cosh(0.5)'],
	  'seealso': ['sinh', 'cosh']
		};

/***/ },
/* 426 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'to',
	  'category': 'Units',
	  'syntax': ['x to unit', 'to(x, unit)'],
	  'description': 'Change the unit of a value.',
	  'examples': ['5 inch to cm', '3.2kg to g', '16 bytes in bits'],
	  'seealso': []
		};

/***/ },
/* 427 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'clone',
	  'category': 'Utils',
	  'syntax': ['clone(x)'],
	  'description': 'Clone a variable. Creates a copy of primitive variables,and a deep copy of matrices',
	  'examples': ['clone(3.5)', 'clone(2 - 4i)', 'clone(45 deg)', 'clone([1, 2; 3, 4])', 'clone("hello world")'],
	  'seealso': []
		};

/***/ },
/* 428 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'format',
	  'category': 'Utils',
	  'syntax': ['format(value)', 'format(value, precision)'],
	  'description': 'Format a value of any type as string.',
	  'examples': ['format(2.3)', 'format(3 - 4i)', 'format([])', 'format(pi, 3)'],
	  'seealso': ['print']
		};

/***/ },
/* 429 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'isNaN',
	  'category': 'Utils',
	  'syntax': ['isNaN(x)'],
	  'description': 'Test whether a value is NaN (not a number)',
	  'examples': ['isNaN(2)', 'isNaN(0 / 0)', 'isNaN(NaN)', 'isNaN(Infinity)'],
	  'seealso': ['isNegative', 'isNumeric', 'isPositive', 'isZero']
		};

/***/ },
/* 430 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'isInteger',
	  'category': 'Utils',
	  'syntax': ['isInteger(x)'],
	  'description': 'Test whether a value is an integer number.',
	  'examples': ['isInteger(2)', 'isInteger(3.5)', 'isInteger([3, 0.5, -2])'],
	  'seealso': ['isNegative', 'isNumeric', 'isPositive', 'isZero']
		};

/***/ },
/* 431 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'isNegative',
	  'category': 'Utils',
	  'syntax': ['isNegative(x)'],
	  'description': 'Test whether a value is negative: smaller than zero.',
	  'examples': ['isNegative(2)', 'isNegative(0)', 'isNegative(-4)', 'isNegative([3, 0.5, -2])'],
	  'seealso': ['isInteger', 'isNumeric', 'isPositive', 'isZero']
		};

/***/ },
/* 432 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'isNumeric',
	  'category': 'Utils',
	  'syntax': ['isNumeric(x)'],
	  'description': 'Test whether a value is a numeric value. ' + 'Returns true when the input is a number, BigNumber, Fraction, or boolean.',
	  'examples': ['isNumeric(2)', 'isNumeric(0)', 'isNumeric(bignumber(500))', 'isNumeric(fraction(0.125))', 'isNumeric("3")', 'isNumeric(2 + 3i)', 'isNumeric([2.3, "foo", false])'],
	  'seealso': ['isInteger', 'isZero', 'isNegative', 'isPositive', 'isNaN']
		};

/***/ },
/* 433 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'isPositive',
	  'category': 'Utils',
	  'syntax': ['isPositive(x)'],
	  'description': 'Test whether a value is positive: larger than zero.',
	  'examples': ['isPositive(2)', 'isPositive(0)', 'isPositive(-4)', 'isPositive([3, 0.5, -2])'],
	  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isZero']
		};

/***/ },
/* 434 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'isPrime',
	  'category': 'Utils',
	  'syntax': ['isPrime(x)'],
	  'description': 'Test whether a value is prime: has no divisors other than itself and one.',
	  'examples': ['isPrime(3)', 'isPrime(-2)', 'isPrime([2, 17, 100])'],
	  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isZero']
		};

/***/ },
/* 435 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'isZero',
	  'category': 'Utils',
	  'syntax': ['isZero(x)'],
	  'description': 'Test whether a value is zero.',
	  'examples': ['isZero(2)', 'isZero(0)', 'isZero(-4)', 'isZero([3, 0, -2, 0])'],
	  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isPositive']
		};

/***/ },
/* 436 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  'name': 'typeof',
	  'category': 'Utils',
	  'syntax': ['typeof(x)'],
	  'description': 'Get the type of a variable.',
	  'examples': ['typeof(3.5)', 'typeof(2 - 4i)', 'typeof(45 deg)', 'typeof("hello world")'],
	  'seealso': []
		};

/***/ },
/* 437 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

		module.exports = [__webpack_require__(438), __webpack_require__(461), __webpack_require__(462), __webpack_require__(463), __webpack_require__(464)];

/***/ },
/* 438 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  var parse = load(__webpack_require__(439));

	  /**
	   * Parse and compile an expression.
	   * Returns a an object with a function `eval([scope])` to evaluate the
	   * compiled expression.
	   *
	   * Syntax:
	   *
	   *     math.compile(expr)                       // returns one node
	   *     math.compile([expr1, expr2, expr3, ...]) // returns an array with nodes
	   *
	   * Examples:
	   *
	   *     var code = math.compile('sqrt(3^2 + 4^2)');
	   *     code.eval(); // 5
	   *
	   *     var scope = {a: 3, b: 4}
	   *     var code = math.compile('a * b'); // 12
	   *     code.eval(scope); // 12
	   *     scope.a = 5;
	   *     code.eval(scope); // 20
	   *
	   *     var nodes = math.compile(['a = 3', 'b = 4', 'a * b']);
	   *     nodes[2].eval(); // 12
	   *
	   * See also:
	   *
	   *    parse, eval
	   *
	   * @param {string | string[] | Array | Matrix} expr
	   *            The expression to be compiled
	   * @return {{eval: Function} | Array.<{eval: Function}>} code
	   *            An object with the compiled expression
	   * @throws {Error}
	   */
	  return typed('compile', {
	    'string': function string(expr) {
	      return parse(expr).compile();
	    },

	    'Array | Matrix': function ArrayMatrix(expr) {
	      return deepMap(expr, function (entry) {
	        return parse(entry).compile();
	      });
	    }
	  });
	}

	exports.name = 'compile';
	exports.factory = factory;

/***/ },
/* 439 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var ArgumentsError = __webpack_require__(171);
	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  var AccessorNode = load(__webpack_require__(440));
	  var ArrayNode = load(__webpack_require__(446));
	  var AssignmentNode = load(__webpack_require__(447));
	  var BlockNode = load(__webpack_require__(450));
	  var ConditionalNode = load(__webpack_require__(451));
	  var ConstantNode = load(__webpack_require__(452));
	  var FunctionAssignmentNode = load(__webpack_require__(453));
	  var IndexNode = load(__webpack_require__(454));
	  var ObjectNode = load(__webpack_require__(457));
	  var OperatorNode = load(__webpack_require__(458));
	  var ParenthesisNode = load(__webpack_require__(460));
	  var FunctionNode = load(__webpack_require__(459));
	  var RangeNode = load(__webpack_require__(455));
	  var SymbolNode = load(__webpack_require__(456));

	  /**
	   * Parse an expression. Returns a node tree, which can be evaluated by
	   * invoking node.eval();
	   *
	   * Syntax:
	   *
	   *     parse(expr)
	   *     parse(expr, options)
	   *     parse([expr1, expr2, expr3, ...])
	   *     parse([expr1, expr2, expr3, ...], options)
	   *
	   * Example:
	   *
	   *     var node = parse('sqrt(3^2 + 4^2)');
	   *     node.compile(math).eval(); // 5
	   *
	   *     var scope = {a:3, b:4}
	   *     var node = parse('a * b'); // 12
	   *     var code = node.compile(math);
	   *     code.eval(scope); // 12
	   *     scope.a = 5;
	   *     code.eval(scope); // 20
	   *
	   *     var nodes = math.parse(['a = 3', 'b = 4', 'a * b']);
	   *     nodes[2].compile(math).eval(); // 12
	   *
	   * @param {string | string[] | Matrix} expr
	   * @param {{nodes: Object<string, Node>}} [options]  Available options:
	   *                                                   - `nodes` a set of custom nodes
	   * @return {Node | Node[]} node
	   * @throws {Error}
	   */
	  function parse(expr, options) {
	    if (arguments.length != 1 && arguments.length != 2) {
	      throw new ArgumentsError('parse', arguments.length, 1, 2);
	    }

	    // pass extra nodes
	    extra_nodes = options && options.nodes ? options.nodes : {};

	    if (typeof expr === 'string') {
	      // parse a single expression
	      expression = expr;
	      return parseStart();
	    } else if (Array.isArray(expr) || expr instanceof type.Matrix) {
	      // parse an array or matrix with expressions
	      return deepMap(expr, function (elem) {
	        if (typeof elem !== 'string') throw new TypeError('String expected');

	        expression = elem;
	        return parseStart();
	      });
	    } else {
	      // oops
	      throw new TypeError('String or matrix expected');
	    }
	  }

	  // token types enumeration
	  var TOKENTYPE = {
	    NULL: 0,
	    DELIMITER: 1,
	    NUMBER: 2,
	    SYMBOL: 3,
	    UNKNOWN: 4
	  };

	  // map with all delimiters
	  var DELIMITERS = {
	    ',': true,
	    '(': true,
	    ')': true,
	    '[': true,
	    ']': true,
	    '{': true,
	    '}': true,
	    '\"': true,
	    ';': true,

	    '+': true,
	    '-': true,
	    '*': true,
	    '.*': true,
	    '/': true,
	    './': true,
	    '%': true,
	    '^': true,
	    '.^': true,
	    '~': true,
	    '!': true,
	    '&': true,
	    '|': true,
	    '^|': true,
	    '\'': true,
	    '=': true,
	    ':': true,
	    '?': true,

	    '==': true,
	    '!=': true,
	    '<': true,
	    '>': true,
	    '<=': true,
	    '>=': true,

	    '<<': true,
	    '>>': true,
	    '>>>': true
	  };

	  // map with all named delimiters
	  var NAMED_DELIMITERS = {
	    'mod': true,
	    'to': true,
	    'in': true,
	    'and': true,
	    'xor': true,
	    'or': true,
	    'not': true
	  };

	  var extra_nodes = {}; // current extra nodes
	  var expression = ''; // current expression
	  var index = 0; // current index in expr
	  var c = ''; // current token character in expr
	  var token = ''; // current token
	  var token_type = TOKENTYPE.NULL; // type of the token
	  var nesting_level = 0; // level of nesting inside parameters, used to ignore newline characters
	  var conditional_level = null; // when a conditional is being parsed, the level of the conditional is stored here

	  /**
	   * Get the first character from the expression.
	   * The character is stored into the char c. If the end of the expression is
	   * reached, the function puts an empty string in c.
	   * @private
	   */
	  function first() {
	    index = 0;
	    c = expression.charAt(0);
	    nesting_level = 0;
	    conditional_level = null;
	  }

	  /**
	   * Get the next character from the expression.
	   * The character is stored into the char c. If the end of the expression is
	   * reached, the function puts an empty string in c.
	   * @private
	   */
	  function next() {
	    index++;
	    c = expression.charAt(index);
	  }

	  /**
	   * Preview the next character from the expression.
	   * @return {string} cNext
	   * @private
	   */
	  function nextPreview() {
	    return expression.charAt(index + 1);
	  }

	  /**
	   * Preview the second next character from the expression.
	   * @return {string} cNext
	   * @private
	   */
	  function nextNextPreview() {
	    return expression.charAt(index + 2);
	  }

	  /**
	   * Get next token in the current string expr.
	   * The token and token type are available as token and token_type
	   * @private
	   */
	  function getToken() {
	    token_type = TOKENTYPE.NULL;
	    token = '';

	    // skip over whitespaces
	    // space, tab, and newline when inside parameters
	    while (c == ' ' || c == '\t' || c == '\n' && nesting_level) {
	      // TODO: also take '\r' carriage return as newline? Or does that give problems on mac?
	      next();
	    }

	    // skip comment
	    if (c == '#') {
	      while (c != '\n' && c != '') {
	        next();
	      }
	    }

	    // check for end of expression
	    if (c == '') {
	      // token is still empty
	      token_type = TOKENTYPE.DELIMITER;
	      return;
	    }

	    // check for new line character
	    if (c == '\n' && !nesting_level) {
	      token_type = TOKENTYPE.DELIMITER;
	      token = c;
	      next();
	      return;
	    }

	    // check for delimiters consisting of 3 characters
	    var c2 = c + nextPreview();
	    var c3 = c2 + nextNextPreview();
	    if (c3.length == 3 && DELIMITERS[c3]) {
	      token_type = TOKENTYPE.DELIMITER;
	      token = c3;
	      next();
	      next();
	      next();
	      return;
	    }

	    // check for delimiters consisting of 2 characters
	    if (c2.length == 2 && DELIMITERS[c2]) {
	      token_type = TOKENTYPE.DELIMITER;
	      token = c2;
	      next();
	      next();
	      return;
	    }

	    // check for delimiters consisting of 1 character
	    if (DELIMITERS[c]) {
	      token_type = TOKENTYPE.DELIMITER;
	      token = c;
	      next();
	      return;
	    }

	    // check for a number
	    if (isDigitDot(c)) {
	      token_type = TOKENTYPE.NUMBER;

	      // get number, can have a single dot
	      if (c == '.') {
	        token += c;
	        next();

	        if (!isDigit(c)) {
	          // this is no legal number, it is just a dot (can be dot notation)
	          token_type = TOKENTYPE.UNKNOWN;
	        }
	      } else {
	        while (isDigit(c)) {
	          token += c;
	          next();
	        }
	        if (c == '.') {
	          token += c;
	          next();
	        }
	      }
	      while (isDigit(c)) {
	        token += c;
	        next();
	      }

	      // check for exponential notation like "2.3e-4", "1.23e50" or "2e+4"
	      c2 = nextPreview();
	      if (c == 'E' || c == 'e') {
	        if (isDigit(c2) || c2 == '-' || c2 == '+') {
	          token += c;
	          next();

	          if (c == '+' || c == '-') {
	            token += c;
	            next();
	          }

	          // Scientific notation MUST be followed by an exponent
	          if (!isDigit(c)) {
	            throw createSyntaxError('Digit expected, got "' + c + '"');
	          }

	          while (isDigit(c)) {
	            token += c;
	            next();
	          }

	          if (c == '.') {
	            throw createSyntaxError('Digit expected, got "' + c + '"');
	          }
	        } else if (c2 == '.') {
	          next();
	          throw createSyntaxError('Digit expected, got "' + c + '"');
	        }
	      }

	      return;
	    }

	    // check for variables, functions, named operators
	    if (currentIsAlpha()) {
	      while (currentIsAlpha() || isDigit(c)) {
	        token += c;
	        next();
	      }

	      if (NAMED_DELIMITERS.hasOwnProperty(token)) {
	        token_type = TOKENTYPE.DELIMITER;
	      } else {
	        token_type = TOKENTYPE.SYMBOL;
	      }

	      return;
	    }

	    // something unknown is found, wrong characters -> a syntax error
	    token_type = TOKENTYPE.UNKNOWN;
	    while (c != '') {
	      token += c;
	      next();
	    }
	    throw createSyntaxError('Syntax error in part "' + token + '"');
	  }

	  /**
	   * Get next token and skip newline tokens
	   */
	  function getTokenSkipNewline() {
	    do {
	      getToken();
	    } while (token == '\n');
	  }

	  /**
	   * Open parameters.
	   * New line characters will be ignored until closeParams() is called
	   */
	  function openParams() {
	    nesting_level++;
	  }

	  /**
	   * Close parameters.
	   * New line characters will no longer be ignored
	   */
	  function closeParams() {
	    nesting_level--;
	  }

	  /**
	   * Checks whether the current character `c` is a valid alpha character:
	   *
	   * - A latin letter (upper or lower case) Ascii: a-z, A-Z
	   * - A underscore                         Ascii: _
	   * - A latin letter with accents          Unicode: \u00C0 - \u02AF
	   * - A greek letter                       Unicode: \u0370 - \u03FF
	   * - A mathematical alphanumeric symbol   Unicode: \u{1D400} - \u{1D7FF} excluding invalid code points
	   *
	   * @return {boolean}
	   * @private
	   */
	  function currentIsAlpha() {
	    // http://unicode-table.com/en/
	    // http://www.wikiwand.com/en/Mathematical_operators_and_symbols_in_Unicode
	    //
	    // Note: In ES6 will be unicode aware:
	    //   http://stackoverflow.com/questions/280712/javascript-unicode-regexes
	    //   https://mathiasbynens.be/notes/es6-unicode-regex
	    var cPrev = expression.charAt(index - 1);
	    var cNext = expression.charAt(index + 1);

	    var isValidLatinOrGreek = function isValidLatinOrGreek(p) {
	      return (/^[a-zA-Z_\u00C0-\u02AF\u0370-\u03FF]$/.test(p)
	      );
	    };

	    var isValidMathSymbol = function isValidMathSymbol(high, low) {
	      return (/^[\uD835]$/.test(high) && /^[\uDC00-\uDFFF]$/.test(low) && /^[^\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]$/.test(low)
	      );
	    };

	    return isValidLatinOrGreek(c) || isValidMathSymbol(c, cNext) || isValidMathSymbol(cPrev, c);
	  }

	  /**
	   * checks if the given char c is a digit or dot
	   * @param {string} c   a string with one character
	   * @return {boolean}
	   * @private
	   */
	  function isDigitDot(c) {
	    return c >= '0' && c <= '9' || c == '.';
	  }

	  /**
	   * checks if the given char c is a digit
	   * @param {string} c   a string with one character
	   * @return {boolean}
	   * @private
	   */
	  function isDigit(c) {
	    return c >= '0' && c <= '9';
	  }

	  /**
	   * Start of the parse levels below, in order of precedence
	   * @return {Node} node
	   * @private
	   */
	  function parseStart() {
	    // get the first character in expression
	    first();

	    getToken();

	    var node = parseBlock();

	    // check for garbage at the end of the expression
	    // an expression ends with a empty character '' and token_type DELIMITER
	    if (token != '') {
	      if (token_type == TOKENTYPE.DELIMITER) {
	        // user entered a not existing operator like "//"

	        // TODO: give hints for aliases, for example with "<>" give as hint " did you mean != ?"
	        throw createError('Unexpected operator ' + token);
	      } else {
	        throw createSyntaxError('Unexpected part "' + token + '"');
	      }
	    }

	    return node;
	  }

	  /**
	   * Parse a block with expressions. Expressions can be separated by a newline
	   * character '\n', or by a semicolon ';'. In case of a semicolon, no output
	   * of the preceding line is returned.
	   * @return {Node} node
	   * @private
	   */
	  function parseBlock() {
	    var node;
	    var blocks = [];
	    var visible;

	    if (token == '') {
	      // empty expression
	      return new ConstantNode('undefined', 'undefined');
	    }

	    if (token != '\n' && token != ';') {
	      node = parseAssignment();
	    }

	    // TODO: simplify this loop
	    while (token == '\n' || token == ';') {
	      if (blocks.length == 0 && node) {
	        visible = token != ';';
	        blocks.push({
	          node: node,
	          visible: visible
	        });
	      }

	      getToken();
	      if (token != '\n' && token != ';' && token != '') {
	        node = parseAssignment();

	        visible = token != ';';
	        blocks.push({
	          node: node,
	          visible: visible
	        });
	      }
	    }

	    if (blocks.length > 0) {
	      return new BlockNode(blocks);
	    } else {
	      return node;
	    }
	  }

	  /**
	   * Assignment of a function or variable,
	   * - can be a variable like 'a=2.3'
	   * - or a updating an existing variable like 'matrix(2,3:5)=[6,7,8]'
	   * - defining a function like 'f(x) = x^2'
	   * @return {Node} node
	   * @private
	   */
	  function parseAssignment() {
	    var name, args, value, valid;

	    var node = parseConditional();

	    if (token == '=') {
	      if (node && node.isSymbolNode) {
	        // parse a variable assignment like 'a = 2/3'
	        name = node.name;
	        getTokenSkipNewline();
	        value = parseAssignment();
	        return new AssignmentNode(new SymbolNode(name), value);
	      } else if (node && node.isAccessorNode) {
	        // parse a matrix subset assignment like 'A[1,2] = 4'
	        getTokenSkipNewline();
	        value = parseAssignment();
	        return new AssignmentNode(node.object, node.index, value);
	      } else if (node && node.isFunctionNode) {
	        // parse function assignment like 'f(x) = x^2'
	        valid = true;
	        args = [];

	        name = node.name;
	        node.args.forEach(function (arg, index) {
	          if (arg && arg.isSymbolNode) {
	            args[index] = arg.name;
	          } else {
	            valid = false;
	          }
	        });

	        if (valid) {
	          getTokenSkipNewline();
	          value = parseAssignment();
	          return new FunctionAssignmentNode(name, args, value);
	        }
	      }

	      throw createSyntaxError('Invalid left hand side of assignment operator =');
	    }

	    return node;
	  }

	  /**
	   * conditional operation
	   *
	   *     condition ? truePart : falsePart
	   *
	   * Note: conditional operator is right-associative
	   *
	   * @return {Node} node
	   * @private
	   */
	  function parseConditional() {
	    var node = parseLogicalOr();

	    while (token == '?') {
	      // set a conditional level, the range operator will be ignored as long
	      // as conditional_level == nesting_level.
	      var prev = conditional_level;
	      conditional_level = nesting_level;
	      getTokenSkipNewline();

	      var condition = node;
	      var trueExpr = parseAssignment();

	      if (token != ':') throw createSyntaxError('False part of conditional expression expected');

	      conditional_level = null;
	      getTokenSkipNewline();

	      var falseExpr = parseAssignment(); // Note: check for conditional operator again, right associativity

	      node = new ConditionalNode(condition, trueExpr, falseExpr);

	      // restore the previous conditional level
	      conditional_level = prev;
	    }

	    return node;
	  }

	  /**
	   * logical or, 'x or y'
	   * @return {Node} node
	   * @private
	   */
	  function parseLogicalOr() {
	    var node = parseLogicalXor();

	    while (token == 'or') {
	      getTokenSkipNewline();
	      node = new OperatorNode('or', 'or', [node, parseLogicalXor()]);
	    }

	    return node;
	  }

	  /**
	   * logical exclusive or, 'x xor y'
	   * @return {Node} node
	   * @private
	   */
	  function parseLogicalXor() {
	    var node = parseLogicalAnd();

	    while (token == 'xor') {
	      getTokenSkipNewline();
	      node = new OperatorNode('xor', 'xor', [node, parseLogicalAnd()]);
	    }

	    return node;
	  }

	  /**
	   * logical and, 'x and y'
	   * @return {Node} node
	   * @private
	   */
	  function parseLogicalAnd() {
	    var node = parseBitwiseOr();

	    while (token == 'and') {
	      getTokenSkipNewline();
	      node = new OperatorNode('and', 'and', [node, parseBitwiseOr()]);
	    }

	    return node;
	  }

	  /**
	   * bitwise or, 'x | y'
	   * @return {Node} node
	   * @private
	   */
	  function parseBitwiseOr() {
	    var node = parseBitwiseXor();

	    while (token == '|') {
	      getTokenSkipNewline();
	      node = new OperatorNode('|', 'bitOr', [node, parseBitwiseXor()]);
	    }

	    return node;
	  }

	  /**
	   * bitwise exclusive or (xor), 'x ^| y'
	   * @return {Node} node
	   * @private
	   */
	  function parseBitwiseXor() {
	    var node = parseBitwiseAnd();

	    while (token == '^|') {
	      getTokenSkipNewline();
	      node = new OperatorNode('^|', 'bitXor', [node, parseBitwiseAnd()]);
	    }

	    return node;
	  }

	  /**
	   * bitwise and, 'x & y'
	   * @return {Node} node
	   * @private
	   */
	  function parseBitwiseAnd() {
	    var node = parseRelational();

	    while (token == '&') {
	      getTokenSkipNewline();
	      node = new OperatorNode('&', 'bitAnd', [node, parseRelational()]);
	    }

	    return node;
	  }

	  /**
	   * relational operators
	   * @return {Node} node
	   * @private
	   */
	  function parseRelational() {
	    var node, operators, name, fn, params;

	    node = parseShift();

	    operators = {
	      '==': 'equal',
	      '!=': 'unequal',
	      '<': 'smaller',
	      '>': 'larger',
	      '<=': 'smallerEq',
	      '>=': 'largerEq'
	    };
	    while (token in operators) {
	      name = token;
	      fn = operators[name];

	      getTokenSkipNewline();
	      params = [node, parseShift()];
	      node = new OperatorNode(name, fn, params);
	    }

	    return node;
	  }

	  /**
	   * Bitwise left shift, bitwise right arithmetic shift, bitwise right logical shift
	   * @return {Node} node
	   * @private
	   */
	  function parseShift() {
	    var node, operators, name, fn, params;

	    node = parseConversion();

	    operators = {
	      '<<': 'leftShift',
	      '>>': 'rightArithShift',
	      '>>>': 'rightLogShift'
	    };

	    while (token in operators) {
	      name = token;
	      fn = operators[name];

	      getTokenSkipNewline();
	      params = [node, parseConversion()];
	      node = new OperatorNode(name, fn, params);
	    }

	    return node;
	  }

	  /**
	   * conversion operators 'to' and 'in'
	   * @return {Node} node
	   * @private
	   */
	  function parseConversion() {
	    var node, operators, name, fn, params;

	    node = parseRange();

	    operators = {
	      'to': 'to',
	      'in': 'to' // alias of 'to'
	    };

	    while (token in operators) {
	      name = token;
	      fn = operators[name];

	      getTokenSkipNewline();

	      if (name === 'in' && token === '') {
	        // end of expression -> this is the unit 'in' ('inch')
	        node = new OperatorNode('*', 'multiply', [node, new SymbolNode('in')], true);
	      } else {
	        // operator 'a to b' or 'a in b'
	        params = [node, parseRange()];
	        node = new OperatorNode(name, fn, params);
	      }
	    }

	    return node;
	  }

	  /**
	   * parse range, "start:end", "start:step:end", ":", "start:", ":end", etc
	   * @return {Node} node
	   * @private
	   */
	  function parseRange() {
	    var node,
	        params = [];

	    if (token == ':') {
	      // implicit start=1 (one-based)
	      node = new ConstantNode('1', 'number');
	    } else {
	      // explicit start
	      node = parseAddSubtract();
	    }

	    if (token == ':' && conditional_level !== nesting_level) {
	      // we ignore the range operator when a conditional operator is being processed on the same level
	      params.push(node);

	      // parse step and end
	      while (token == ':' && params.length < 3) {
	        getTokenSkipNewline();

	        if (token == ')' || token == ']' || token == ',' || token == '') {
	          // implicit end
	          params.push(new SymbolNode('end'));
	        } else {
	          // explicit end
	          params.push(parseAddSubtract());
	        }
	      }

	      if (params.length == 3) {
	        // params = [start, step, end]
	        node = new RangeNode(params[0], params[2], params[1]); // start, end, step
	      } else {
	        // length == 2
	        // params = [start, end]
	        node = new RangeNode(params[0], params[1]); // start, end
	      }
	    }

	    return node;
	  }

	  /**
	   * add or subtract
	   * @return {Node} node
	   * @private
	   */
	  function parseAddSubtract() {
	    var node, operators, name, fn, params;

	    node = parseMultiplyDivide();

	    operators = {
	      '+': 'add',
	      '-': 'subtract'
	    };
	    while (token in operators) {
	      name = token;
	      fn = operators[name];

	      getTokenSkipNewline();
	      params = [node, parseMultiplyDivide()];
	      node = new OperatorNode(name, fn, params);
	    }

	    return node;
	  }

	  /**
	   * multiply, divide, modulus
	   * @return {Node} node
	   * @private
	   */
	  function parseMultiplyDivide() {
	    var node, last, operators, name, fn;

	    node = parseUnary();
	    last = node;

	    operators = {
	      '*': 'multiply',
	      '.*': 'dotMultiply',
	      '/': 'divide',
	      './': 'dotDivide',
	      '%': 'mod',
	      'mod': 'mod'
	    };

	    while (true) {
	      if (token in operators) {
	        // explicit operators
	        name = token;
	        fn = operators[name];

	        getTokenSkipNewline();

	        last = parseUnary();
	        node = new OperatorNode(name, fn, [node, last]);
	      } else if (token_type == TOKENTYPE.SYMBOL || token == 'in' && node && node.isConstantNode || token_type == TOKENTYPE.NUMBER && !last.isConstantNode || token == '(') {
	        // parse implicit multiplication
	        //
	        // symbol:      implicit multiplication like '2a', '(2+3)a', 'a b'
	        // number:      implicit multiplication like '(2+3)2'
	        // parenthesis: implicit multiplication like '2(3+4)', '(3+4)(1+2)'
	        last = parseUnary();
	        node = new OperatorNode('*', 'multiply', [node, last], true /*implicit*/);
	      } else {
	        break;
	      }
	    }

	    return node;
	  }

	  /**
	   * Unary plus and minus, and logical and bitwise not
	   * @return {Node} node
	   * @private
	   */
	  function parseUnary() {
	    var name, params;
	    var fn = {
	      '-': 'unaryMinus',
	      '+': 'unaryPlus',
	      '~': 'bitNot',
	      'not': 'not'
	    }[token];

	    if (fn) {
	      name = token;

	      getTokenSkipNewline();
	      params = [parseUnary()];

	      return new OperatorNode(name, fn, params);
	    }

	    return parsePow();
	  }

	  /**
	   * power
	   * Note: power operator is right associative
	   * @return {Node} node
	   * @private
	   */
	  function parsePow() {
	    var node, name, fn, params;

	    node = parseLeftHandOperators();

	    if (token == '^' || token == '.^') {
	      name = token;
	      fn = name == '^' ? 'pow' : 'dotPow';

	      getTokenSkipNewline();
	      params = [node, parseUnary()]; // Go back to unary, we can have '2^-3'
	      node = new OperatorNode(name, fn, params);
	    }

	    return node;
	  }

	  /**
	   * Left hand operators: factorial x!, transpose x'
	   * @return {Node} node
	   * @private
	   */
	  function parseLeftHandOperators() {
	    var node, operators, name, fn, params;

	    node = parseCustomNodes();

	    operators = {
	      '!': 'factorial',
	      '\'': 'transpose'
	    };

	    while (token in operators) {
	      name = token;
	      fn = operators[name];

	      getToken();
	      params = [node];

	      node = new OperatorNode(name, fn, params);
	      node = parseAccessors(node);
	    }

	    return node;
	  }

	  /**
	   * Parse a custom node handler. A node handler can be used to process
	   * nodes in a custom way, for example for handling a plot.
	   *
	   * A handler must be passed as second argument of the parse function.
	   * - must extend math.expression.node.Node
	   * - must contain a function _compile(defs: Object) : string
	   * - must contain a function find(filter: Object) : Node[]
	   * - must contain a function toString() : string
	   * - the constructor is called with a single argument containing all parameters
	   *
	   * For example:
	   *
	   *     nodes = {
	   *       'plot': PlotHandler
	   *     };
	   *
	   * The constructor of the handler is called as:
	   *
	   *     node = new PlotHandler(params);
	   *
	   * The handler will be invoked when evaluating an expression like:
	   *
	   *     node = math.parse('plot(sin(x), x)', nodes);
	   *
	   * @return {Node} node
	   * @private
	   */
	  function parseCustomNodes() {
	    var params = [],
	        handler;

	    if (token_type == TOKENTYPE.SYMBOL && extra_nodes[token]) {
	      handler = extra_nodes[token];

	      getToken();

	      // parse parameters
	      if (token == '(') {
	        params = [];

	        openParams();
	        getToken();

	        if (token != ')') {
	          params.push(parseAssignment());

	          // parse a list with parameters
	          while (token == ',') {
	            getToken();
	            params.push(parseAssignment());
	          }
	        }

	        if (token != ')') {
	          throw createSyntaxError('Parenthesis ) expected');
	        }
	        closeParams();
	        getToken();
	      }

	      // create a new node handler
	      //noinspection JSValidateTypes
	      return new handler(params);
	    }

	    return parseSymbol();
	  }

	  /**
	   * parse symbols: functions, variables, constants, units
	   * @return {Node} node
	   * @private
	   */
	  function parseSymbol() {
	    var node, name;

	    if (token_type == TOKENTYPE.SYMBOL || token_type == TOKENTYPE.DELIMITER && token in NAMED_DELIMITERS) {
	      name = token;

	      getToken();

	      // parse function parameters and matrix index
	      node = new SymbolNode(name);
	      node = parseAccessors(node);
	      return node;
	    }

	    return parseString();
	  }

	  /**
	   * parse accessors:
	   * - function invocation in round brackets (...), for example sqrt(2)
	   * - index enclosed in square brackets [...], for example A[2,3]
	   * - dot notation for properties, like foo.bar
	   * @param {Node} node    Node on which to apply the parameters. If there
	   *                       are no parameters in the expression, the node
	   *                       itself is returned
	   * @param {string[]} [types]  Filter the types of notations
	   *                            can be ['(', '[', '.']
	   * @return {Node} node
	   * @private
	   */
	  function parseAccessors(node, types) {
	    var params;

	    while ((token == '(' || token == '[' || token == '.') && (!types || types.indexOf(token) !== -1)) {
	      params = [];

	      if (token == '(') {
	        if (node.isSymbolNode || node.isAccessorNode) {
	          // function invocation like fn(2, 3)
	          openParams();
	          getToken();

	          if (token != ')') {
	            params.push(parseAssignment());

	            // parse a list with parameters
	            while (token == ',') {
	              getToken();
	              params.push(parseAssignment());
	            }
	          }

	          if (token != ')') {
	            throw createSyntaxError('Parenthesis ) expected');
	          }
	          closeParams();
	          getToken();

	          node = new FunctionNode(node, params);
	        } else {
	          // implicit multiplication like (2+3)(4+5)
	          // don't parse it here but let it be handled by parseMultiplyDivide
	          // with correct precedence
	          return node;
	        }
	      } else if (token == '[') {
	        // index notation like variable[2, 3]
	        openParams();
	        getToken();

	        if (token != ']') {
	          params.push(parseAssignment());

	          // parse a list with parameters
	          while (token == ',') {
	            getToken();
	            params.push(parseAssignment());
	          }
	        }

	        if (token != ']') {
	          throw createSyntaxError('Parenthesis ] expected');
	        }
	        closeParams();
	        getToken();

	        node = new AccessorNode(node, new IndexNode(params));
	      } else {
	        // dot notation like variable.prop
	        getToken();

	        if (token_type != TOKENTYPE.SYMBOL) {
	          throw createSyntaxError('Property name expected after dot');
	        }
	        params.push(new ConstantNode(token));
	        getToken();

	        var dotNotation = true;
	        node = new AccessorNode(node, new IndexNode(params, dotNotation));
	      }
	    }

	    return node;
	  }

	  /**
	   * parse a string.
	   * A string is enclosed by double quotes
	   * @return {Node} node
	   * @private
	   */
	  function parseString() {
	    var node, str;

	    if (token == '"') {
	      str = parseStringToken();

	      // create constant
	      node = new ConstantNode(str, 'string');

	      // parse index parameters
	      node = parseAccessors(node);

	      return node;
	    }

	    return parseMatrix();
	  }

	  /**
	   * Parse a string surrounded by double quotes "..."
	   * @return {string}
	   */
	  function parseStringToken() {
	    var str = '';

	    while (c != '' && c != '\"') {
	      if (c == '\\') {
	        // escape character
	        str += c;
	        next();
	      }

	      str += c;
	      next();
	    }

	    getToken();
	    if (token != '"') {
	      throw createSyntaxError('End of string " expected');
	    }
	    getToken();

	    return str;
	  }

	  /**
	   * parse the matrix
	   * @return {Node} node
	   * @private
	   */
	  function parseMatrix() {
	    var array, params, rows, cols;

	    if (token == '[') {
	      // matrix [...]
	      openParams();
	      getToken();

	      if (token != ']') {
	        // this is a non-empty matrix
	        var row = parseRow();

	        if (token == ';') {
	          // 2 dimensional array
	          rows = 1;
	          params = [row];

	          // the rows of the matrix are separated by dot-comma's
	          while (token == ';') {
	            getToken();

	            params[rows] = parseRow();
	            rows++;
	          }

	          if (token != ']') {
	            throw createSyntaxError('End of matrix ] expected');
	          }
	          closeParams();
	          getToken();

	          // check if the number of columns matches in all rows
	          cols = params[0].items.length;
	          for (var r = 1; r < rows; r++) {
	            if (params[r].items.length != cols) {
	              throw createError('Column dimensions mismatch ' + '(' + params[r].items.length + ' != ' + cols + ')');
	            }
	          }

	          array = new ArrayNode(params);
	        } else {
	          // 1 dimensional vector
	          if (token != ']') {
	            throw createSyntaxError('End of matrix ] expected');
	          }
	          closeParams();
	          getToken();

	          array = row;
	        }
	      } else {
	        // this is an empty matrix "[ ]"
	        closeParams();
	        getToken();
	        array = new ArrayNode([]);
	      }

	      return parseAccessors(array);
	    }

	    return parseObject();
	  }

	  /**
	   * Parse a single comma-separated row from a matrix, like 'a, b, c'
	   * @return {ArrayNode} node
	   */
	  function parseRow() {
	    var params = [parseAssignment()];
	    var len = 1;

	    while (token == ',') {
	      getToken();

	      // parse expression
	      params[len] = parseAssignment();
	      len++;
	    }

	    return new ArrayNode(params);
	  }

	  /**
	   * parse an object, enclosed in angle brackets{...}, for example {value: 2}
	   * @return {Node} node
	   * @private
	   */
	  function parseObject() {
	    if (token == '{') {
	      var key;

	      var properties = {};
	      do {
	        getToken();

	        if (token != '}') {
	          // parse key
	          if (token == '"') {
	            key = parseStringToken();
	          } else if (token_type == TOKENTYPE.SYMBOL) {
	            key = token;
	            getToken();
	          } else {
	            throw createSyntaxError('Symbol or string expected as object key');
	          }

	          // parse key/value separator
	          if (token != ':') {
	            throw createSyntaxError('Colon : expected after object key');
	          }
	          getToken();

	          // parse key
	          properties[key] = parseAssignment();
	        }
	      } while (token == ',');

	      if (token != '}') {
	        throw createSyntaxError('Comma , or bracket } expected after object value');
	      }
	      getToken();

	      var node = new ObjectNode(properties);

	      // parse index parameters
	      node = parseAccessors(node);

	      return node;
	    }

	    return parseNumber();
	  }

	  /**
	   * parse a number
	   * @return {Node} node
	   * @private
	   */
	  function parseNumber() {
	    var number;

	    if (token_type == TOKENTYPE.NUMBER) {
	      // this is a number
	      number = token;
	      getToken();

	      return new ConstantNode(number, 'number');
	    }

	    return parseParentheses();
	  }

	  /**
	   * parentheses
	   * @return {Node} node
	   * @private
	   */
	  function parseParentheses() {
	    var node;

	    // check if it is a parenthesized expression
	    if (token == '(') {
	      // parentheses (...)
	      openParams();
	      getToken();

	      node = parseAssignment(); // start again

	      if (token != ')') {
	        throw createSyntaxError('Parenthesis ) expected');
	      }
	      closeParams();
	      getToken();

	      node = new ParenthesisNode(node);
	      node = parseAccessors(node);
	      return node;
	    }

	    return parseEnd();
	  }

	  /**
	   * Evaluated when the expression is not yet ended but expected to end
	   * @return {Node} res
	   * @private
	   */
	  function parseEnd() {
	    if (token == '') {
	      // syntax error or unexpected end of expression
	      throw createSyntaxError('Unexpected end of expression');
	    } else {
	      throw createSyntaxError('Value expected');
	    }
	  }

	  /**
	   * Shortcut for getting the current row value (one based)
	   * Returns the line of the currently handled expression
	   * @private
	   */
	  /* TODO: implement keeping track on the row number
	  function row () {
	    return null;
	  }
	  */

	  /**
	   * Shortcut for getting the current col value (one based)
	   * Returns the column (position) where the last token starts
	   * @private
	   */
	  function col() {
	    return index - token.length + 1;
	  }

	  /**
	   * Create an error
	   * @param {string} message
	   * @return {SyntaxError} instantiated error
	   * @private
	   */
	  function createSyntaxError(message) {
	    var c = col();
	    var error = new SyntaxError(message + ' (char ' + c + ')');
	    error['char'] = c;

	    return error;
	  }

	  /**
	   * Create an error
	   * @param {string} message
	   * @return {Error} instantiated error
	   * @private
	   */
	  function createError(message) {
	    var c = col();
	    var error = new SyntaxError(message + ' (char ' + c + ')');
	    error['char'] = c;

	    return error;
	  }

	  return parse;
	};

	exports.name = 'parse';
	exports.path = 'expression';
	exports.factory = factory;

/***/ },
/* 440 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load, typed) {
	  var Node = load(__webpack_require__(441));
	  var access = load(__webpack_require__(443));

	  /**
	   * @constructor AccessorNode
	   * @extends {Node}
	   * Access an object property or get a matrix subset
	   *
	   * @param {Node} object                 The object from which to retrieve
	   *                                      a property or subset.
	   * @param {IndexNode} index             IndexNode containing ranges
	   */
	  function AccessorNode(object, index) {
	    if (!(this instanceof AccessorNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    if (!(object && object.isNode)) {
	      throw new TypeError('Node expected for parameter "object"');
	    }
	    if (!(index && index.isIndexNode)) {
	      throw new TypeError('IndexNode expected for parameter "index"');
	    }

	    this.object = object || null;
	    this.index = index;

	    // readonly property name
	    Object.defineProperty(this, 'name', {
	      get: function () {
	        if (this.index) {
	          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';
	        } else {
	          return this.object.name || '';
	        }
	      }.bind(this),
	      set: function set() {
	        throw new Error('Cannot assign a new name, name is read-only');
	      }
	    });
	  }

	  AccessorNode.prototype = new Node();

	  AccessorNode.prototype.type = 'AccessorNode';

	  AccessorNode.prototype.isAccessorNode = true;

	  /**
	   * Compile the node to javascript code
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @param {Object} args     Object with local function arguments, the key is
	   *                          the name of the argument, and the value is `true`.
	   *                          The object may not be mutated, but must be
	   *                          extended instead.
	   * @return {string} js
	   * @private
	   */
	  AccessorNode.prototype._compile = function (defs, args) {
	    defs.access = access;

	    var object = this.object._compile(defs, args);
	    var index = this.index._compile(defs, args);

	    if (this.index.isObjectProperty()) {
	      return object + '["' + this.index.getObjectProperty() + '"]';
	    } else if (this.index.needsSize()) {
	      // if some parameters use the 'end' parameter, we need to calculate the size
	      return '(function () {' + '  var object = ' + object + ';' + '  var size = math.size(object).valueOf();' + '  return access(object, ' + index + ');' + '})()';
	    } else {
	      return 'access(' + object + ', ' + index + ')';
	    }
	  };

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  AccessorNode.prototype.forEach = function (callback) {
	    callback(this.object, 'object', this);
	    callback(this.index, 'index', this);
	  };

	  /**
	   * Create a new AccessorNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {AccessorNode} Returns a transformed copy of the node
	   */
	  AccessorNode.prototype.map = function (callback) {
	    return new AccessorNode(this._ifNode(callback(this.object, 'object', this)), this._ifNode(callback(this.index, 'index', this)));
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {AccessorNode}
	   */
	  AccessorNode.prototype.clone = function () {
	    return new AccessorNode(this.object, this.index);
	  };

	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string}
	   */
	  AccessorNode.prototype._toString = function (options) {
	    var object = this.object.toString(options);
	    if (needParenthesis(this.object)) {
	      object = '(' + object + ')';
	    }

	    return object + this.index.toString(options);
	  };

	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string}
	   */
	  AccessorNode.prototype._toTex = function (options) {
	    var object = this.object.toTex(options);
	    if (needParenthesis(this.object)) {
	      object = '\\left(' + object + '\\right)';
	    }

	    return object + this.index.toTex(options);
	  };

	  /**
	   * Are parenthesis needed?
	   * @private
	   */
	  function needParenthesis(node) {
	    // TODO: maybe make a method on the nodes which tells whether they need parenthesis?
	    return !(node.isAccessorNode || node.isArrayNode || node.isConstantNode || node.isFunctionNode || node.isObjectNode || node.isParenthesisNode || node.isSymbolNode);
	  }

	  return AccessorNode;
	}

	exports.name = 'AccessorNode';
	exports.path = 'expression.node';
	exports.factory = factory;

/***/ },
/* 441 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var keywords = __webpack_require__(442);
	var extend = __webpack_require__(163).extend;

	function factory(type, config, load, typed, math) {
	  /**
	   * Node
	   */
	  function Node() {
	    if (!(this instanceof Node)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	  }

	  /**
	   * Evaluate the node
	   * @param {Object} [scope]  Scope to read/write variables
	   * @return {*}              Returns the result
	   */
	  Node.prototype.eval = function (scope) {
	    return this.compile().eval(scope);
	  };

	  Node.prototype.type = 'Node';

	  Node.prototype.isNode = true;

	  /**
	   * Compile the node to javascript code
	   * @return {{eval: function}} expr  Returns an object with a function 'eval',
	   *                                  which can be invoked as expr.eval([scope]),
	   *                                  where scope is an optional object with
	   *                                  variables.
	   */
	  Node.prototype.compile = function () {
	    // TODO: calling compile(math) is deprecated since version 2.0.0. Remove this warning some day
	    if (arguments.length > 0) {
	      throw new Error('Calling compile(math) is deprecated. Call the function as compile() instead.');
	    }

	    // definitions globally available inside the closure of the compiled expressions
	    var defs = {
	      math: math.expression.transform,
	      args: {}, // can be filled with names of FunctionAssignment arguments
	      _validateScope: _validateScope
	    };

	    // will be used to put local function arguments
	    var args = {};

	    var code = this._compile(defs, args);

	    var defsCode = Object.keys(defs).map(function (name) {
	      return '    var ' + name + ' = defs["' + name + '"];';
	    });

	    var factoryCode = defsCode.join(' ') + 'return {' + '  "eval": function (scope) {' + '    if (scope) _validateScope(scope);' + '    scope = scope || {};' + '    return ' + code + ';' + '  }' + '};';

	    var factory = new Function('defs', factoryCode);
	    return factory(defs);
	  };

	  /**
	   * Compile the node to javascript code
	   * @param {Object} defs     Object which can be used to define functions
	   *                          and constants globally available inside the closure
	   *                          of the compiled expression
	   * @param {Object} args     Object with local function arguments, the key is
	   *                          the name of the argument, and the value is `true`.
	   *                          The object may not be mutated, but must be
	   *                          extended instead.
	   * @return {string} js
	   * @private
	   */
	  Node.prototype._compile = function (defs, args) {
	    // must be implemented by each of the Node implementations
	    throw new Error('Cannot compile a Node interface');
	  };

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  Node.prototype.forEach = function (callback) {
	    // must be implemented by each of the Node implementations
	    throw new Error('Cannot run forEach on a Node interface');
	  };

	  /**
	   * Create a new Node having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {OperatorNode} Returns a transformed copy of the node
	   */
	  Node.prototype.map = function (callback) {
	    // must be implemented by each of the Node implementations
	    throw new Error('Cannot run map on a Node interface');
	  };

	  /**
	   * Validate whether an object is a Node, for use with map
	   * @param {Node} node
	   * @returns {Node} Returns the input if it's a node, else throws an Error
	   * @protected
	   */
	  Node.prototype._ifNode = function (node) {
	    if (!(node && node.isNode)) {
	      throw new TypeError('Callback function must return a Node');
	    }

	    return node;
	  };

	  /**
	   * Recursively traverse all nodes in a node tree. Executes given callback for
	   * this node and each of its child nodes.
	   * @param {function(node: Node, path: string, parent: Node)} callback
	   *          A callback called for every node in the node tree.
	   */
	  Node.prototype.traverse = function (callback) {
	    // execute callback for itself
	    callback(this, null, null);

	    // recursively traverse over all childs of a node
	    function _traverse(node, callback) {
	      node.forEach(function (child, path, parent) {
	        callback(child, path, parent);
	        _traverse(child, callback);
	      });
	    }

	    _traverse(this, callback);
	  };

	  /**
	   * Recursively transform a node tree via a transform function.
	   *
	   * For example, to replace all nodes of type SymbolNode having name 'x' with a
	   * ConstantNode with value 2:
	   *
	   *     var res = Node.transform(function (node, path, parent) {
	   *       if (node && node.isSymbolNode) && (node.name == 'x')) {
	   *         return new ConstantNode(2);
	   *       }
	   *       else {
	   *         return node;
	   *       }
	   *     });
	   *
	   * @param {function(node: Node, path: string, parent: Node) : Node} callback
	   *          A mapping function accepting a node, and returning
	   *          a replacement for the node or the original node.
	   *          Signature: callback(node: Node, index: string, parent: Node) : Node
	   * @return {Node} Returns the original node or its replacement
	   */
	  Node.prototype.transform = function (callback) {
	    // traverse over all childs
	    function _transform(node, callback) {
	      return node.map(function (child, path, parent) {
	        var replacement = callback(child, path, parent);
	        return _transform(replacement, callback);
	      });
	    }

	    var replacement = callback(this, null, null);
	    return _transform(replacement, callback);
	  };

	  /**
	   * Find any node in the node tree matching given filter function. For example, to
	   * find all nodes of type SymbolNode having name 'x':
	   *
	   *     var results = Node.filter(function (node) {
	   *       return (node && node.isSymbolNode) && (node.name == 'x');
	   *     });
	   *
	   * @param {function(node: Node, path: string, parent: Node) : Node} callback
	   *            A test function returning true when a node matches, and false
	   *            otherwise. Function signature:
	   *            callback(node: Node, index: string, parent: Node) : boolean
	   * @return {Node[]} nodes       An array with nodes matching given filter criteria
	   */
	  Node.prototype.filter = function (callback) {
	    var nodes = [];

	    this.traverse(function (node, path, parent) {
	      if (callback(node, path, parent)) {
	        nodes.push(node);
	      }
	    });

	    return nodes;
	  };

	  // TODO: deprecated since version 1.1.0, remove this some day
	  Node.prototype.find = function () {
	    throw new Error('Function Node.find is deprecated. Use Node.filter instead.');
	  };

	  // TODO: deprecated since version 1.1.0, remove this some day
	  Node.prototype.match = function () {
	    throw new Error('Function Node.match is deprecated. See functions Node.filter, Node.transform, Node.traverse.');
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {Node}
	   */
	  Node.prototype.clone = function () {
	    // must be implemented by each of the Node implementations
	    throw new Error('Cannot clone a Node interface');
	  };

	  /**
	  /**
	   * Get string representation. (wrapper function)
	   *
	   * This function can get an object of the following form:
	   * {
	   *    handler: //This can be a callback function of the form
	   *             // "function callback(node, options)"or
	   *             // a map that maps function names (used in FunctionNodes)
	   *             // to callbacks
	   *    parenthesis: "keep" //the parenthesis option (This is optional)
	   * }
	   *
	   * @param {Object} [options]
	   * @return {string}
	   */
	  Node.prototype.toString = function (options) {
	    var customString;
	    if (options && (typeof options === 'undefined' ? 'undefined' : _typeof(options)) == "object") {
	      switch (_typeof(options.handler)) {
	        case 'object':
	        case 'undefined':
	          break;
	        case 'function':
	          customString = options.handler(this, options);
	          break;
	        default:
	          throw new TypeError('Object or function expected as callback');
	      }
	    }

	    if (typeof customString !== 'undefined') {
	      return customString;
	    }

	    return this._toString(options);
	  };

	  /**
	   * Internal function to generate the string output.
	   * This has to be implemented by every Node
	   *
	   * @throws {Error}
	   */
	  Node.prototype._toString = function () {
	    //must be implemented by each of the Node implementations
	    throw new Error('_toString not implemented for ' + this.type);
	  };

	  /**
	   * Get LaTeX representation. (wrapper function)
	   *
	   * This function can get an object of the following form:
	   * {
	   *    handler: //This can be a callback function of the form
	   *             // "function callback(node, options)"or
	   *             // a map that maps function names (used in FunctionNodes)
	   *             // to callbacks
	   *    parenthesis: "keep" //the parenthesis option (This is optional)
	   * }
	   *
	   * @param {Object} [options]
	   * @return {string}
	   */
	  Node.prototype.toTex = function (options) {
	    var customTex;
	    if (options && (typeof options === 'undefined' ? 'undefined' : _typeof(options)) == 'object') {
	      switch (_typeof(options.handler)) {
	        case 'object':
	        case 'undefined':
	          break;
	        case 'function':
	          customTex = options.handler(this, options);
	          break;
	        default:
	          throw new TypeError('Object or function expected as callback');
	      }
	    }

	    if (typeof customTex !== 'undefined') {
	      return customTex;
	    }

	    return this._toTex(options);
	  };

	  /**
	   * Internal function to generate the LaTeX output.
	   * This has to be implemented by every Node
	   *
	   * @param {Object} [options]
	   * @throws {Error}
	   */
	  Node.prototype._toTex = function (options) {
	    //must be implemented by each of the Node implementations
	    throw new Error('_toTex not implemented for ' + this.type);
	  };

	  /**
	   * Get identifier.
	   * @return {string}
	   */
	  Node.prototype.getIdentifier = function () {
	    return this.type;
	  };

	  /**
	   * Get the content of the current Node.
	   * @return {Node} node
	   **/
	  Node.prototype.getContent = function () {
	    return this;
	  };

	  /**
	   * Validate the symbol names of a scope.
	   * Throws an error when the scope contains an illegal symbol.
	   * @param {Object} scope
	   */
	  function _validateScope(scope) {
	    for (var symbol in scope) {
	      if (scope.hasOwnProperty(symbol)) {
	        if (symbol in keywords) {
	          throw new Error('Scope contains an illegal symbol, "' + symbol + '" is a reserved keyword');
	        }
	      }
	    }
	  }

	  return Node;
	}

	exports.name = 'Node';
	exports.path = 'expression.node';
	exports.math = true; // request access to the math namespace as 5th argument of the factory function
	exports.factory = factory;

/***/ },
/* 442 */
/***/ function(module, exports) {

	'use strict';

	// Reserved keywords not allowed to use in the parser

	module.exports = {
	  end: true
		};

/***/ },
/* 443 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var errorTransform = __webpack_require__(444).transform;

	function factory(type, config, load, typed) {
	  var subset = load(__webpack_require__(445));
	  var matrix = load(__webpack_require__(212));

	  /**
	   * Retrieve part of an object:
	   *
	   * - Retrieve a property from an object
	   * - Retrieve a part of a string
	   * - Retrieve a matrix subset
	   *
	   * @param {Object | Array | Matrix | string} object
	   * @param {Index} index
	   * @return {Object | Array | Matrix | string} Returns the subset
	   */
	  return function access(object, index) {
	    try {
	      if (Array.isArray(object)) {
	        return matrix(object).subset(index).valueOf();
	      } else if (object && typeof object.subset === 'function') {
	        // Matrix
	        return object.subset(index);
	      } else if (typeof object === 'string') {
	        // TODO: move getStringSubset into a separate util file, use that
	        return subset(object, index);
	      } else if ((typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object') {
	        if (!index.isObjectProperty()) {
	          throw TypeError('Cannot apply a numeric index as object property');
	        }
	        return object[index.getObjectProperty()];
	      } else {
	        throw new TypeError('Cannot apply index: unsupported type of object');
	      }
	    } catch (err) {
	      throw errorTransform(err);
	    }
	  };
	}

	exports.factory = factory;

/***/ },
/* 444 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var IndexError = __webpack_require__(203);

	/**
	 * Transform zero-based indices to one-based indices in errors
	 * @param {Error} err
	 * @returns {Error} Returns the transformed error
	 */
	exports.transform = function (err) {
	  if (err && err.isIndexError) {
	    return new IndexError(err.index + 1, err.min + 1, err.max !== undefined ? err.max + 1 : undefined);
	  }

	  return err;
	};

/***/ },
/* 445 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var clone = __webpack_require__(163).clone;
	var validateIndex = __webpack_require__(200).validateIndex;
	var DimensionError = __webpack_require__(202);

	function factory(type, config, load, typed) {
	  var matrix = load(__webpack_require__(212));

	  /**
	   * Get or set a subset of a matrix or string.
	   *
	   * Syntax:
	   *     math.subset(value, index)                                // retrieve a subset
	   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset
	   *
	   * Examples:
	   *
	   *     // get a subset
	   *     var d = [[1, 2], [3, 4]];
	   *     math.subset(d, math.index(1, 0));        // returns 3
	   *     math.subset(d, math.index([0, 2], 1));   // returns [[2], [4]]
	   *
	   *     // replace a subset
	   *     var e = [];
	   *     var f = math.subset(e, math.index(0, [0, 2]), [5, 6]);  // f = [[5, 6]]
	   *     var g = math.subset(f, math.index(1, 1), 7, 0);         // g = [[5, 6], [0, 7]]
	   *
	   * See also:
	   *
	   *     size, resize, squeeze, index
	   *
	   * @param {Array | Matrix | string} matrix  An array, matrix, or string
	   * @param {Index} index                     An index containing ranges for each
	   *                                          dimension
	   * @param {*} [replacement]                 An array, matrix, or scalar.
	   *                                          If provided, the subset is replaced with replacement.
	   *                                          If not provided, the subset is returned
	   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when
	   *                                          the matrix is resized. If not provided,
	   *                                          math.matrix elements will be left undefined.
	   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.
	   */
	  var subset = typed('subset', {
	    // get subset
	    'Array, Index': function ArrayIndex(value, index) {
	      var m = matrix(value);
	      var subset = m.subset(index); // returns a Matrix
	      return subset && subset.valueOf(); // return an Array (like the input)
	    },

	    'Matrix, Index': function MatrixIndex(value, index) {
	      return value.subset(index);
	    },

	    'Object, Index': _getObjectProperty,

	    'string, Index': _getSubstring,

	    // set subset
	    'Array, Index, any': function ArrayIndexAny(value, index, replacement) {
	      return matrix(clone(value)).subset(index, replacement, undefined).valueOf();
	    },

	    'Array, Index, any, any': function ArrayIndexAnyAny(value, index, replacement, defaultValue) {
	      return matrix(clone(value)).subset(index, replacement, defaultValue).valueOf();
	    },

	    'Matrix, Index, any': function MatrixIndexAny(value, index, replacement) {
	      return value.clone().subset(index, replacement);
	    },

	    'Matrix, Index, any, any': function MatrixIndexAnyAny(value, index, replacement, defaultValue) {
	      return value.clone().subset(index, replacement, defaultValue);
	    },

	    'string, Index, string': _setSubstring,
	    'string, Index, string, string': _setSubstring,
	    'Object, Index, any': _setObjectProperty
	  });

	  subset.toTex = undefined; // use default template

	  return subset;

	  /**
	   * Retrieve a subset of a string
	   * @param {string} str            string from which to get a substring
	   * @param {Index} index           An index containing ranges for each dimension
	   * @returns {string} substring
	   * @private
	   */
	  function _getSubstring(str, index) {
	    if (!index || index.isIndex !== true) {
	      // TODO: better error message
	      throw new TypeError('Index expected');
	    }
	    if (index.size().length != 1) {
	      throw new DimensionError(index.size().length, 1);
	    }

	    // validate whether the range is out of range
	    var strLen = str.length;
	    validateIndex(index.min()[0], strLen);
	    validateIndex(index.max()[0], strLen);

	    var range = index.dimension(0);

	    var substr = '';
	    range.forEach(function (v) {
	      substr += str.charAt(v);
	    });

	    return substr;
	  }

	  /**
	   * Replace a substring in a string
	   * @param {string} str            string to be replaced
	   * @param {Index} index           An index containing ranges for each dimension
	   * @param {string} replacement    Replacement string
	   * @param {string} [defaultValue] Default value to be uses when resizing
	   *                                the string. is ' ' by default
	   * @returns {string} result
	   * @private
	   */
	  function _setSubstring(str, index, replacement, defaultValue) {
	    if (!index || index.isIndex !== true) {
	      // TODO: better error message
	      throw new TypeError('Index expected');
	    }
	    if (index.size().length != 1) {
	      throw new DimensionError(index.size().length, 1);
	    }
	    if (defaultValue !== undefined) {
	      if (typeof defaultValue !== 'string' || defaultValue.length !== 1) {
	        throw new TypeError('Single character expected as defaultValue');
	      }
	    } else {
	      defaultValue = ' ';
	    }

	    var range = index.dimension(0);
	    var len = range.size()[0];

	    if (len != replacement.length) {
	      throw new DimensionError(range.size()[0], replacement.length);
	    }

	    // validate whether the range is out of range
	    var strLen = str.length;
	    validateIndex(index.min()[0]);
	    validateIndex(index.max()[0]);

	    // copy the string into an array with characters
	    var chars = [];
	    for (var i = 0; i < strLen; i++) {
	      chars[i] = str.charAt(i);
	    }

	    range.forEach(function (v, i) {
	      chars[v] = replacement.charAt(i[0]);
	    });

	    // initialize undefined characters with a space
	    if (chars.length > strLen) {
	      for (i = strLen - 1, len = chars.length; i < len; i++) {
	        if (!chars[i]) {
	          chars[i] = defaultValue;
	        }
	      }
	    }

	    return chars.join('');
	  }
	}

	/**
	 * Retrieve a property from an object
	 * @param {Object} object
	 * @param {Index} index
	 * @return {*} Returns the value of the property
	 * @private
	 */
	function _getObjectProperty(object, index) {
	  if (index.size().length !== 1) {
	    throw new DimensionError(index.size(), 1);
	  }

	  var key = index.dimension(0);
	  if (typeof key !== 'string') {
	    throw new TypeError('String expected as index to retrieve an object property');
	  }

	  return object[key];
	}

	/**
	 * Set a property on an object
	 * @param {Object} object
	 * @param {Index} index
	 * @param {*} replacement
	 * @return {*} Returns the updated object
	 * @private
	 */
	function _setObjectProperty(object, index, replacement) {
	  if (index.size().length !== 1) {
	    throw new DimensionError(index.size(), 1);
	  }

	  var key = index.dimension(0);
	  if (typeof key !== 'string') {
	    throw new TypeError('String expected as index to retrieve an object property');
	  }

	  // clone the object, and apply the property to the clone
	  var updated = clone(object);
	  updated[key] = replacement;

	  return updated;
	}

	exports.name = 'subset';
	exports.factory = factory;

/***/ },
/* 446 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load, typed) {
	  var Node = load(__webpack_require__(441));

	  /**
	   * @constructor ArrayNode
	   * @extends {Node}
	   * Holds an 1-dimensional array with items
	   * @param {Node[]} [items]   1 dimensional array with items
	   */
	  function ArrayNode(items) {
	    if (!(this instanceof ArrayNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    this.items = items || [];

	    // validate input
	    if (!Array.isArray(this.items) || !this.items.every(function (item) {
	      return item && item.isNode;
	    })) {
	      throw new TypeError('Array containing Nodes expected');
	    }

	    // TODO: deprecated since v3, remove some day
	    var deprecated = function deprecated() {
	      throw new Error('Property `ArrayNode.nodes` is deprecated, use `ArrayNode.items` instead');
	    };
	    Object.defineProperty(this, 'nodes', { get: deprecated, set: deprecated });
	  }

	  ArrayNode.prototype = new Node();

	  ArrayNode.prototype.type = 'ArrayNode';

	  ArrayNode.prototype.isArrayNode = true;

	  /**
	   * Compile the node to javascript code
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @param {Object} args     Object with local function arguments, the key is
	   *                          the name of the argument, and the value is `true`.
	   *                          The object may not be mutated, but must be
	   *                          extended instead.
	   * @private
	   */
	  ArrayNode.prototype._compile = function (defs, args) {
	    var asMatrix = defs.math.config().matrix !== 'Array';

	    var items = this.items.map(function (node) {
	      return node._compile(defs, args);
	    });

	    return (asMatrix ? 'math.matrix([' : '[') + items.join(',') + (asMatrix ? '])' : ']');
	  };

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  ArrayNode.prototype.forEach = function (callback) {
	    for (var i = 0; i < this.items.length; i++) {
	      var node = this.items[i];
	      callback(node, 'items[' + i + ']', this);
	    }
	  };

	  /**
	   * Create a new ArrayNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {ArrayNode} Returns a transformed copy of the node
	   */
	  ArrayNode.prototype.map = function (callback) {
	    var items = [];
	    for (var i = 0; i < this.items.length; i++) {
	      items[i] = this._ifNode(callback(this.items[i], 'items[' + i + ']', this));
	    }
	    return new ArrayNode(items);
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {ArrayNode}
	   */
	  ArrayNode.prototype.clone = function () {
	    return new ArrayNode(this.items.slice(0));
	  };

	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */
	  ArrayNode.prototype._toString = function (options) {
	    var items = this.items.map(function (node) {
	      return node.toString(options);
	    });
	    return '[' + items.join(', ') + ']';
	  };

	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  ArrayNode.prototype._toTex = function (options) {
	    var s = '\\begin{bmatrix}';

	    this.items.forEach(function (node) {
	      if (node.items) {
	        s += node.items.map(function (childNode) {
	          return childNode.toTex(options);
	        }).join('&');
	      } else {
	        s += node.toTex(options);
	      }

	      // new line
	      s += '\\\\';
	    });
	    s += '\\end{bmatrix}';
	    return s;
	  };

	  return ArrayNode;
	}

	exports.name = 'ArrayNode';
	exports.path = 'expression.node';
	exports.factory = factory;

/***/ },
/* 447 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var latex = __webpack_require__(192);

	function factory(type, config, load, typed) {
	  var Node = load(__webpack_require__(441));
	  var ArrayNode = load(__webpack_require__(446));
	  var matrix = load(__webpack_require__(212));
	  var assign = load(__webpack_require__(448));
	  var access = load(__webpack_require__(443));

	  var keywords = __webpack_require__(442);
	  var operators = __webpack_require__(449);

	  /**
	   * @constructor AssignmentNode
	   * @extends {Node}
	   *
	   * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or
	   * replace a subset of a matrix like `A[2,2]=42`.
	   *
	   * Syntax:
	   *
	   *     new AssignmentNode(symbol, value)
	   *     new AssignmentNode(object, index, value)
	   *
	   * Usage:
	   *
	   *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2));                      // a=2
	   *    new AssignmentNode(new SymbolNode('a'), new IndexNode('b'), new ConstantNode(2))   // a.b=2
	   *    new AssignmentNode(new SymbolNode('a'), new IndexNode(1, 2), new ConstantNode(3))  // a[1,2]=3
	   *
	   * @param {SymbolNode | AccessorNode} object  Object on which to assign a value
	   * @param {IndexNode} [index=null]            Index, property name or matrix
	   *                                            index. Optional. If not provided
	   *                                            and `object` is a SymbolNode,
	   *                                            the property is assigned to the
	   *                                            global scope.
	   * @param {Node} value                        The value to be assigned
	   */
	  function AssignmentNode(object, index, value) {
	    if (!(this instanceof AssignmentNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    this.object = object;
	    this.index = value ? index : null;
	    this.value = value ? value : index;

	    // validate input
	    if (!object || !(object.isSymbolNode || object.isAccessorNode)) {
	      throw new TypeError('SymbolNode or AccessorNode expected as "object"');
	    }
	    if (object && object.isSymbolNode && object.name === 'end') {
	      throw new Error('Cannot assign to symbol "end"');
	    }
	    if (this.index && !this.index.isIndexNode) {
	      throw new TypeError('IndexNode expected as "index"');
	    }
	    if (!this.value || !this.value.isNode) {
	      throw new TypeError('Node expected as "value"');
	    }

	    // readonly property name
	    Object.defineProperty(this, 'name', {
	      get: function () {
	        if (this.index) {
	          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';
	        } else {
	          return this.object.name || '';
	        }
	      }.bind(this),
	      set: function set() {
	        throw new Error('Cannot assign a new name, name is read-only');
	      }
	    });
	  }

	  AssignmentNode.prototype = new Node();

	  AssignmentNode.prototype.type = 'AssignmentNode';

	  AssignmentNode.prototype.isAssignmentNode = true;

	  /**
	   * Compile the node to javascript code
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @param {Object} args     Object with local function arguments, the key is
	   *                          the name of the argument, and the value is `true`.
	   *                          The object may not be mutated, but must be
	   *                          extended instead.
	   * @private
	   */
	  AssignmentNode.prototype._compile = function (defs, args) {
	    defs.assign = assign;
	    defs.access = access;

	    var size;
	    var object = this.object._compile(defs, args);
	    var index = this.index ? this.index._compile(defs, args) : null;
	    var value = this.value._compile(defs, args);

	    if (!this.index) {
	      // apply a variable to the scope, for example `a=2`
	      if (!this.object.isSymbolNode) {
	        throw new TypeError('SymbolNode expected as object');
	      }

	      return 'scope["' + this.object.name + '"] = ' + value;
	    } else if (this.index.isObjectProperty()) {
	      // apply an object property for example `a.b=2`
	      return object + '["' + this.index.getObjectProperty() + '"] = ' + value;
	    } else if (this.object.isSymbolNode) {
	      // update a matrix subset, for example `a[2]=3`
	      size = this.index.needsSize() ? 'var size = math.size(object).valueOf();' : '';

	      // apply updated object to scope
	      return '(function () {' + '  var object = ' + object + ';' + '  var value = ' + value + ';' + '  ' + size + '  scope["' + this.object.name + '"] = assign(object, ' + index + ', value);' + '  return value;' + '})()';
	    } else {
	      // this.object.isAccessorNode === true
	      // update a matrix subset, for example `a.b[2]=3`
	      size = this.index.needsSize() ? 'var size = math.size(object).valueOf();' : '';

	      // we will not use the _compile of the AccessorNode, but compile it
	      // ourselves here as we need the parent object of the AccessorNode:
	      // wee need to apply the updated object to parent object
	      var parentObject = this.object.object._compile(defs, args);

	      if (this.object.index.isObjectProperty()) {
	        var parentProperty = '["' + this.object.index.getObjectProperty() + '"]';
	        return '(function () {' + '  var parent = ' + parentObject + ';' + '  var object = parent' + parentProperty + ';' + // parentIndex is a property
	        '  var value = ' + value + ';' + size + '  parent' + parentProperty + ' = assign(object, ' + index + ', value);' + '  return value;' + '})()';
	      } else {
	        // if some parameters use the 'end' parameter, we need to calculate the size
	        var parentSize = this.object.index.needsSize() ? 'var size = math.size(parent).valueOf();' : '';
	        var parentIndex = this.object.index._compile(defs, args);

	        return '(function () {' + '  var parent = ' + parentObject + ';' + '  ' + parentSize + '  var parentIndex = ' + parentIndex + ';' + '  var object = access(parent, parentIndex);' + '  var value = ' + value + ';' + '  ' + size + '  assign(parent, parentIndex, assign(object, ' + index + ', value));' + '  return value;' + '})()';
	      }
	    }
	  };

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  AssignmentNode.prototype.forEach = function (callback) {
	    callback(this.object, 'object', this);
	    if (this.index) {
	      callback(this.index, 'index', this);
	    }
	    callback(this.value, 'value', this);
	  };

	  /**
	   * Create a new AssignmentNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {AssignmentNode} Returns a transformed copy of the node
	   */
	  AssignmentNode.prototype.map = function (callback) {
	    var object = this._ifNode(callback(this.object, 'object', this));
	    var index = this.index ? this._ifNode(callback(this.index, 'index', this)) : null;
	    var value = this._ifNode(callback(this.value, 'value', this));

	    return new AssignmentNode(object, index, value);
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {AssignmentNode}
	   */
	  AssignmentNode.prototype.clone = function () {
	    return new AssignmentNode(this.object, this.index, this.value);
	  };

	  /*
	   * Is parenthesis needed?
	   * @param {node} node
	   * @param {string} [parenthesis='keep']
	   * @private
	   */
	  function needParenthesis(node, parenthesis) {
	    if (!parenthesis) {
	      parenthesis = 'keep';
	    }

	    var precedence = operators.getPrecedence(node, parenthesis);
	    var exprPrecedence = operators.getPrecedence(node.value, parenthesis);
	    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;
	  }

	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string}
	   */
	  AssignmentNode.prototype._toString = function (options) {
	    var object = this.object.toString(options);
	    var index = this.index ? this.index.toString(options) : '';
	    var value = this.value.toString(options);
	    if (needParenthesis(this, options && options.parenthesis)) {
	      value = '(' + value + ')';
	    }

	    return object + index + ' = ' + value;
	  };

	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string}
	   */
	  AssignmentNode.prototype._toTex = function (options) {
	    var object = this.object.toTex(options);
	    var index = this.index ? this.index.toTex(options) : '';
	    var value = this.value.toTex(options);
	    if (needParenthesis(this, options && options.parenthesis)) {
	      value = '\\left(' + value + '\\right)';
	    }

	    return object + index + ':=' + value;
	  };

	  return AssignmentNode;
	}

	exports.name = 'AssignmentNode';
	exports.path = 'expression.node';
	exports.factory = factory;

/***/ },
/* 448 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var errorTransform = __webpack_require__(444).transform;

	function factory(type, config, load, typed) {
	  var subset = load(__webpack_require__(445));
	  var matrix = load(__webpack_require__(212));

	  /**
	   * Replace part of an object:
	   *
	   * - Assign a property to an object
	   * - Replace a part of a string
	   * - Replace a matrix subset
	   *
	   * @param {Object | Array | Matrix | string} object
	   * @param {Index} index
	   * @param {*} value
	   * @return {Object | Array | Matrix | string} Returns the original object
	   *                                            except in case of a string
	   */
	  return function assign(object, index, value) {
	    try {
	      if (Array.isArray(object)) {
	        return matrix(object).subset(index, value).valueOf();
	      } else if (object && typeof object.subset === 'function') {
	        // Matrix
	        return object.subset(index, value);
	      } else if (typeof object === 'string') {
	        // TODO: move setStringSubset into a separate util file, use that
	        return subset(object, index, value);
	      } else if ((typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object') {
	        if (!index.isObjectProperty()) {
	          throw TypeError('Cannot apply a numeric index as object property');
	        }
	        object[index.getObjectProperty()] = value;
	        return object;
	      } else {
	        throw new TypeError('Cannot apply index: unsupported type of object');
	      }
	    } catch (err) {
	      throw errorTransform(err);
	    }
	  };
	}

	exports.factory = factory;

/***/ },
/* 449 */
/***/ function(module, exports) {

	'use strict';

	//list of identifiers of nodes in order of their precedence
	//also contains information about left/right associativity
	//and which other operator the operator is associative with
	//Example:
	// addition is associative with addition and subtraction, because:
	// (a+b)+c=a+(b+c)
	// (a+b)-c=a+(b-c)
	//
	// postfix operators are left associative, prefix operators 
	// are right associative
	//
	//It's also possible to set the following properties:
	// latexParens: if set to false, this node doesn't need to be enclosed
	//              in parentheses when using LaTeX
	// latexLeftParens: if set to false, this !OperatorNode's! 
	//                  left argument doesn't need to be enclosed
	//                  in parentheses
	// latexRightParens: the same for the right argument

	var properties = [{ //assignment
	  'AssignmentNode': {},
	  'FunctionAssignmentNode': {}
	}, { //conditional expression
	  'ConditionalNode': {
	    latexLeftParens: false,
	    latexRightParens: false,
	    latexParens: false
	    //conditionals don't need parentheses in LaTeX because
	    //they are 2 dimensional
	  }
	}, { //logical or
	  'OperatorNode:or': {
	    associativity: 'left',
	    associativeWith: []
	  }

	}, { //logical xor
	  'OperatorNode:xor': {
	    associativity: 'left',
	    associativeWith: []
	  }
	}, { //logical and
	  'OperatorNode:and': {
	    associativity: 'left',
	    associativeWith: []
	  }
	}, { //bitwise or
	  'OperatorNode:bitOr': {
	    associativity: 'left',
	    associativeWith: []
	  }
	}, { //bitwise xor
	  'OperatorNode:bitXor': {
	    associativity: 'left',
	    associativeWith: []
	  }
	}, { //bitwise and
	  'OperatorNode:bitAnd': {
	    associativity: 'left',
	    associativeWith: []
	  }
	}, { //relational operators
	  'OperatorNode:equal': {
	    associativity: 'left',
	    associativeWith: []
	  },
	  'OperatorNode:unequal': {
	    associativity: 'left',
	    associativeWith: []
	  },
	  'OperatorNode:smaller': {
	    associativity: 'left',
	    associativeWith: []
	  },
	  'OperatorNode:larger': {
	    associativity: 'left',
	    associativeWith: []
	  },
	  'OperatorNode:smallerEq': {
	    associativity: 'left',
	    associativeWith: []
	  },
	  'OperatorNode:largerEq': {
	    associativity: 'left',
	    associativeWith: []
	  }
	}, { //bitshift operators
	  'OperatorNode:leftShift': {
	    associativity: 'left',
	    associativeWith: []
	  },
	  'OperatorNode:rightArithShift': {
	    associativity: 'left',
	    associativeWith: []
	  },
	  'OperatorNode:rightLogShift': {
	    associativity: 'left',
	    associativeWith: []
	  }
	}, { //unit conversion
	  'OperatorNode:to': {
	    associativity: 'left',
	    associativeWith: []
	  }
	}, { //range
	  'RangeNode': {}
	}, { //addition, subtraction
	  'OperatorNode:add': {
	    associativity: 'left',
	    associativeWith: ['OperatorNode:add', 'OperatorNode:subtract']
	  },
	  'OperatorNode:subtract': {
	    associativity: 'left',
	    associativeWith: []
	  }
	}, { //multiply, divide, modulus
	  'OperatorNode:multiply': {
	    associativity: 'left',
	    associativeWith: ['OperatorNode:multiply', 'OperatorNode:divide', 'Operator:dotMultiply', 'Operator:dotDivide']
	  },
	  'OperatorNode:divide': {
	    associativity: 'left',
	    associativeWith: [],
	    latexLeftParens: false,
	    latexRightParens: false,
	    latexParens: false
	    //fractions don't require parentheses because
	    //they're 2 dimensional, so parens aren't needed
	    //in LaTeX
	  },
	  'OperatorNode:dotMultiply': {
	    associativity: 'left',
	    associativeWith: ['OperatorNode:multiply', 'OperatorNode:divide', 'OperatorNode:dotMultiply', 'OperatorNode:doDivide']
	  },
	  'OperatorNode:dotDivide': {
	    associativity: 'left',
	    associativeWith: []
	  },
	  'OperatorNode:mod': {
	    associativity: 'left',
	    associativeWith: []
	  }
	}, { //unary prefix operators
	  'OperatorNode:unaryPlus': {
	    associativity: 'right'
	  },
	  'OperatorNode:unaryMinus': {
	    associativity: 'right'
	  },
	  'OperatorNode:bitNot': {
	    associativity: 'right'
	  },
	  'OperatorNode:not': {
	    associativity: 'right'
	  }
	}, { //exponentiation
	  'OperatorNode:pow': {
	    associativity: 'right',
	    associativeWith: [],
	    latexRightParens: false
	    //the exponent doesn't need parentheses in
	    //LaTeX because it's 2 dimensional
	    //(it's on top)
	  },
	  'OperatorNode:dotPow': {
	    associativity: 'right',
	    associativeWith: []
	  }
	}, { //factorial
	  'OperatorNode:factorial': {
	    associativity: 'left'
	  }
	}, { //matrix transpose
	  'OperatorNode:transpose': {
	    associativity: 'left'
	  }
	}];

	/**
	 * Get the precedence of a Node.
	 * Higher number for higher precedence, starting with 0.
	 * Returns null if the precedence is undefined.
	 *
	 * @param {Node}
	 * @param {string} parenthesis
	 * @return {number|null}
	 */
	function getPrecedence(_node, parenthesis) {
	  var node = _node;
	  if (parenthesis !== 'keep') {
	    //ParenthesisNodes are only ignored when not in 'keep' mode
	    node = _node.getContent();
	  }
	  var identifier = node.getIdentifier();
	  for (var i = 0; i < properties.length; i++) {
	    if (identifier in properties[i]) {
	      return i;
	    }
	  }
	  return null;
	}

	/**
	 * Get the associativity of an operator (left or right).
	 * Returns a string containing 'left' or 'right' or null if
	 * the associativity is not defined.
	 *
	 * @param {Node}
	 * @param {string} parenthesis
	 * @return {string|null}
	 * @throws {Error}
	 */
	function getAssociativity(_node, parenthesis) {
	  var node = _node;
	  if (parenthesis !== 'keep') {
	    //ParenthesisNodes are only ignored when not in 'keep' mode
	    node = _node.getContent();
	  }
	  var identifier = node.getIdentifier();
	  var index = getPrecedence(node, parenthesis);
	  if (index === null) {
	    //node isn't in the list
	    return null;
	  }
	  var property = properties[index][identifier];

	  if (property.hasOwnProperty('associativity')) {
	    if (property.associativity === 'left') {
	      return 'left';
	    }
	    if (property.associativity === 'right') {
	      return 'right';
	    }
	    //associativity is invalid
	    throw Error('\'' + identifier + '\' has the invalid associativity \'' + property.associativity + '\'.');
	  }

	  //associativity is undefined
	  return null;
	}

	/**
	 * Check if an operator is associative with another operator.
	 * Returns either true or false or null if not defined.
	 *
	 * @param {Node} nodeA
	 * @param {Node} nodeB
	 * @param {string} parenthesis
	 * @return {bool|null}
	 */
	function isAssociativeWith(nodeA, nodeB, parenthesis) {
	  var a = nodeA;
	  var b = nodeB;
	  if (parenthesis !== 'keep') {
	    //ParenthesisNodes are only ignored when not in 'keep' mode
	    var a = nodeA.getContent();
	    var b = nodeB.getContent();
	  }
	  var identifierA = a.getIdentifier();
	  var identifierB = b.getIdentifier();
	  var index = getPrecedence(a, parenthesis);
	  if (index === null) {
	    //node isn't in the list
	    return null;
	  }
	  var property = properties[index][identifierA];

	  if (property.hasOwnProperty('associativeWith') && property.associativeWith instanceof Array) {
	    for (var i = 0; i < property.associativeWith.length; i++) {
	      if (property.associativeWith[i] === identifierB) {
	        return true;
	      }
	    }
	    return false;
	  }

	  //associativeWith is not defined
	  return null;
	}

	module.exports.properties = properties;
	module.exports.getPrecedence = getPrecedence;
	module.exports.getAssociativity = getAssociativity;
	module.exports.isAssociativeWith = isAssociativeWith;

/***/ },
/* 450 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load, typed) {
	  var Node = load(__webpack_require__(441));
	  var ResultSet = load(__webpack_require__(232));

	  /**
	   * @constructor BlockNode
	   * @extends {Node}
	   * Holds a set with blocks
	   * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks
	   *            An array with blocks, where a block is constructed as an Object
	   *            with properties block, which is a Node, and visible, which is
	   *            a boolean. The property visible is optional and is true by default
	   */
	  function BlockNode(blocks) {
	    if (!(this instanceof BlockNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    // validate input, copy blocks
	    if (!Array.isArray(blocks)) throw new Error('Array expected');
	    this.blocks = blocks.map(function (block) {
	      var node = block && block.node;
	      var visible = block && block.visible !== undefined ? block.visible : true;

	      if (!(node && node.isNode)) throw new TypeError('Property "node" must be a Node');
	      if (typeof visible !== 'boolean') throw new TypeError('Property "visible" must be a boolean');

	      return {
	        node: node,
	        visible: visible
	      };
	    });
	  }

	  BlockNode.prototype = new Node();

	  BlockNode.prototype.type = 'BlockNode';

	  BlockNode.prototype.isBlockNode = true;

	  /**
	   * Compile the node to javascript code
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @param {Object} args     Object with local function arguments, the key is
	   *                          the name of the argument, and the value is `true`.
	   *                          The object may not be mutated, but must be
	   *                          extended instead.
	   * @return {string} js
	   * @private
	   */
	  BlockNode.prototype._compile = function (defs, args) {
	    defs.ResultSet = ResultSet;
	    var blocks = this.blocks.map(function (param) {
	      var js = param.node._compile(defs, args);
	      if (param.visible) {
	        return 'results.push(' + js + ');';
	      } else {
	        return js + ';';
	      }
	    });

	    return '(function () {' + 'var results = [];' + blocks.join('') + 'return new ResultSet(results);' + '})()';
	  };

	  /**
	   * Execute a callback for each of the child blocks of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  BlockNode.prototype.forEach = function (callback) {
	    for (var i = 0; i < this.blocks.length; i++) {
	      callback(this.blocks[i].node, 'blocks[' + i + '].node', this);
	    }
	  };

	  /**
	   * Create a new BlockNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {BlockNode} Returns a transformed copy of the node
	   */
	  BlockNode.prototype.map = function (callback) {
	    var blocks = [];
	    for (var i = 0; i < this.blocks.length; i++) {
	      var block = this.blocks[i];
	      var node = this._ifNode(callback(block.node, 'blocks[' + i + '].node', this));
	      blocks[i] = {
	        node: node,
	        visible: block.visible
	      };
	    }
	    return new BlockNode(blocks);
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {BlockNode}
	   */
	  BlockNode.prototype.clone = function () {
	    var blocks = this.blocks.map(function (block) {
	      return {
	        node: block.node,
	        visible: block.visible
	      };
	    });

	    return new BlockNode(blocks);
	  };

	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */
	  BlockNode.prototype._toString = function (options) {
	    return this.blocks.map(function (param) {
	      return param.node.toString(options) + (param.visible ? '' : ';');
	    }).join('\n');
	  };

	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  BlockNode.prototype._toTex = function (options) {
	    return this.blocks.map(function (param) {
	      return param.node.toTex(options) + (param.visible ? '' : ';');
	    }).join('\\;\\;\n');
	  };

	  return BlockNode;
	}

	exports.name = 'BlockNode';
	exports.path = 'expression.node';
	exports.factory = factory;

/***/ },
/* 451 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var latex = __webpack_require__(192);
	var operators = __webpack_require__(449);

	function factory(type, config, load, typed) {
	  var Node = load(__webpack_require__(441));

	  /**
	   * A lazy evaluating conditional operator: 'condition ? trueExpr : falseExpr'
	   *
	   * @param {Node} condition   Condition, must result in a boolean
	   * @param {Node} trueExpr    Expression evaluated when condition is true
	   * @param {Node} falseExpr   Expression evaluated when condition is true
	   *
	   * @constructor ConditionalNode
	   * @extends {Node}
	   */
	  function ConditionalNode(condition, trueExpr, falseExpr) {
	    if (!(this instanceof ConditionalNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	    if (!(condition && condition.isNode)) throw new TypeError('Parameter condition must be a Node');
	    if (!(trueExpr && trueExpr.isNode)) throw new TypeError('Parameter trueExpr must be a Node');
	    if (!(falseExpr && falseExpr.isNode)) throw new TypeError('Parameter falseExpr must be a Node');

	    this.condition = condition;
	    this.trueExpr = trueExpr;
	    this.falseExpr = falseExpr;
	  }

	  ConditionalNode.prototype = new Node();

	  ConditionalNode.prototype.type = 'ConditionalNode';

	  ConditionalNode.prototype.isConditionalNode = true;

	  /**
	   * Compile the node to javascript code
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @param {Object} args     Object with local function arguments, the key is
	   *                          the name of the argument, and the value is `true`.
	   *                          The object may not be mutated, but must be
	   *                          extended instead.
	   * @return {string} js
	   * @private
	   */
	  ConditionalNode.prototype._compile = function (defs, args) {
	    /**
	     * Test whether a condition is met
	     * @param {*} condition
	     * @returns {boolean} true if condition is true or non-zero, else false
	     */
	    defs.testCondition = function (condition) {
	      if (typeof condition === 'number' || typeof condition === 'boolean' || typeof condition === 'string') {
	        return condition ? true : false;
	      }

	      if (condition) {
	        if (condition.isBigNumber === true) {
	          return condition.isZero() ? false : true;
	        }

	        if (condition.isComplex === true) {
	          return condition.re || condition.im ? true : false;
	        }

	        if (condition.isUnit === true) {
	          return condition.value ? true : false;
	        }
	      }

	      if (condition === null || condition === undefined) {
	        return false;
	      }

	      throw new TypeError('Unsupported type of condition "' + defs.math['typeof'](condition) + '"');
	    };

	    return 'testCondition(' + this.condition._compile(defs, args) + ') ? ' + '( ' + this.trueExpr._compile(defs, args) + ') : ' + '( ' + this.falseExpr._compile(defs, args) + ')';
	  };

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  ConditionalNode.prototype.forEach = function (callback) {
	    callback(this.condition, 'condition', this);
	    callback(this.trueExpr, 'trueExpr', this);
	    callback(this.falseExpr, 'falseExpr', this);
	  };

	  /**
	   * Create a new ConditionalNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {ConditionalNode} Returns a transformed copy of the node
	   */
	  ConditionalNode.prototype.map = function (callback) {
	    return new ConditionalNode(this._ifNode(callback(this.condition, 'condition', this)), this._ifNode(callback(this.trueExpr, 'trueExpr', this)), this._ifNode(callback(this.falseExpr, 'falseExpr', this)));
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {ConditionalNode}
	   */
	  ConditionalNode.prototype.clone = function () {
	    return new ConditionalNode(this.condition, this.trueExpr, this.falseExpr);
	  };

	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  ConditionalNode.prototype._toString = function (options) {
	    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
	    var precedence = operators.getPrecedence(this, parenthesis);

	    //Enclose Arguments in parentheses if they are an OperatorNode
	    //or have lower or equal precedence
	    //NOTE: enclosing all OperatorNodes in parentheses is a decision
	    //purely based on aesthetics and readability
	    var condition = this.condition.toString(options);
	    var conditionPrecedence = operators.getPrecedence(this.condition, parenthesis);
	    if (parenthesis === 'all' || this.condition.type === 'OperatorNode' || conditionPrecedence !== null && conditionPrecedence <= precedence) {
	      condition = '(' + condition + ')';
	    }

	    var trueExpr = this.trueExpr.toString(options);
	    var truePrecedence = operators.getPrecedence(this.trueExpr, parenthesis);
	    if (parenthesis === 'all' || this.trueExpr.type === 'OperatorNode' || truePrecedence !== null && truePrecedence <= precedence) {
	      trueExpr = '(' + trueExpr + ')';
	    }

	    var falseExpr = this.falseExpr.toString(options);
	    var falsePrecedence = operators.getPrecedence(this.falseExpr, parenthesis);
	    if (parenthesis === 'all' || this.falseExpr.type === 'OperatorNode' || falsePrecedence !== null && falsePrecedence <= precedence) {
	      falseExpr = '(' + falseExpr + ')';
	    }
	    return condition + ' ? ' + trueExpr + ' : ' + falseExpr;
	  };

	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  ConditionalNode.prototype._toTex = function (options) {
	    return '\\begin{cases} {' + this.trueExpr.toTex(options) + '}, &\\quad{\\text{if }\\;' + this.condition.toTex(options) + '}\\\\{' + this.falseExpr.toTex(options) + '}, &\\quad{\\text{otherwise}}\\end{cases}';
	  };

	  return ConditionalNode;
	}

	exports.name = 'ConditionalNode';
	exports.path = 'expression.node';
	exports.factory = factory;

/***/ },
/* 452 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var getType = __webpack_require__(201).type;

	function factory(type, config, load, typed) {
	  var Node = load(__webpack_require__(441));

	  /**
	   * A ConstantNode holds a constant value like a number or string. A ConstantNode
	   * stores a stringified version of the value and uses this to compile to
	   * JavaScript.
	   *
	   * In case of a stringified number as input, this may be compiled to a BigNumber
	   * when the math instance is configured for BigNumbers.
	   *
	   * Usage:
	   *
	   *     // stringified values with type
	   *     new ConstantNode('2.3', 'number');
	   *     new ConstantNode('true', 'boolean');
	   *     new ConstantNode('hello', 'string');
	   *
	   *     // non-stringified values, type will be automatically detected
	   *     new ConstantNode(2.3);
	   *     new ConstantNode('hello');
	   *
	   * @param {string | number | boolean | null | undefined} value
	   *                            When valueType is provided, value must contain
	   *                            an uninterpreted string representing the value.
	   *                            When valueType is undefined, value can be a
	   *                            number, string, boolean, null, or undefined, and
	   *                            the type will be determined automatically.
	   * @param {string} [valueType]  The type of value. Choose from 'number', 'string',
	   *                              'boolean', 'undefined', 'null'
	   * @constructor ConstantNode
	   * @extends {Node}
	   */
	  function ConstantNode(value, valueType) {
	    if (!(this instanceof ConstantNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    if (valueType) {
	      if (typeof valueType !== 'string') {
	        throw new TypeError('String expected for parameter "valueType"');
	      }
	      if (typeof value !== 'string') {
	        throw new TypeError('String expected for parameter "value"');
	      }

	      this.value = value;
	      this.valueType = valueType;
	    } else {
	      // stringify the value and determine the type
	      this.value = value + '';
	      this.valueType = getType(value);
	    }

	    if (!SUPPORTED_TYPES[this.valueType]) {
	      throw new TypeError('Unsupported type of value "' + this.valueType + '"');
	    }
	  }

	  var SUPPORTED_TYPES = {
	    'number': true,
	    'string': true,
	    'boolean': true,
	    'undefined': true,
	    'null': true
	  };

	  ConstantNode.prototype = new Node();

	  ConstantNode.prototype.type = 'ConstantNode';

	  ConstantNode.prototype.isConstantNode = true;

	  /**
	   * Compile the node to javascript code
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @param {Object} args     Object with local function arguments, the key is
	   *                          the name of the argument, and the value is `true`.
	   *                          The object may not be mutated, but must be
	   *                          extended instead.
	   * @return {string} js
	   * @private
	   */
	  ConstantNode.prototype._compile = function (defs, args) {
	    switch (this.valueType) {
	      case 'number':
	        // TODO: replace this with using config.number
	        var numConfig = defs.math.config().number;
	        if (numConfig === 'BigNumber') {
	          return 'math.bignumber("' + this.value + '")';
	        } else if (numConfig === 'Fraction') {
	          return 'math.fraction("' + this.value + '")';
	        } else {
	          // remove leading zeros like '003.2' which are not allowed by JavaScript
	          return this.value.replace(/^(0*)[0-9]/, function (match, zeros) {
	            return match.substring(zeros.length);
	          });
	        }

	      case 'string':
	        return '"' + this.value + '"';

	      case 'boolean':
	        return this.value;

	      case 'undefined':
	        return this.value;

	      case 'null':
	        return this.value;

	      default:
	        // TODO: move this error to the constructor?
	        throw new TypeError('Unsupported type of constant "' + this.valueType + '"');
	    }
	  };

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  ConstantNode.prototype.forEach = function (callback) {
	    // nothing to do, we don't have childs
	  };

	  /**
	   * Create a new ConstantNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node) : Node} callback
	   * @returns {ConstantNode} Returns a clone of the node
	   */
	  ConstantNode.prototype.map = function (callback) {
	    return this.clone();
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {ConstantNode}
	   */
	  ConstantNode.prototype.clone = function () {
	    return new ConstantNode(this.value, this.valueType);
	  };

	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  ConstantNode.prototype._toString = function (options) {
	    switch (this.valueType) {
	      case 'string':
	        return '"' + this.value + '"';

	      default:
	        return this.value;
	    }
	  };

	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  ConstantNode.prototype._toTex = function (options) {
	    var value = this.value,
	        index;
	    switch (this.valueType) {
	      case 'string':
	        return '\\mathtt{"' + value + '"}';

	      case 'number':
	        index = value.toLowerCase().indexOf('e');
	        if (index !== -1) {
	          return value.substring(0, index) + '\\cdot10^{' + value.substring(index + 1) + '}';
	        }
	        return value;

	      default:
	        return value;
	    }
	  };

	  return ConstantNode;
	}

	exports.name = 'ConstantNode';
	exports.path = 'expression.node';
	exports.factory = factory;

/***/ },
/* 453 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var keywords = __webpack_require__(442);
	var latex = __webpack_require__(192);
	var operators = __webpack_require__(449);

	function isString(x) {
	  return typeof x === 'string';
	}

	function factory(type, config, load, typed) {
	  var Node = load(__webpack_require__(441));

	  /**
	   * @constructor FunctionAssignmentNode
	   * @extends {Node}
	   * Function assignment
	   *
	   * @param {string} name           Function name
	   * @param {string[] | Array.<{name: string, type: string}>} params
	   *                                Array with function parameter names, or an
	   *                                array with objects containing the name
	   *                                and type of the parameter
	   * @param {Node} expr             The function expression
	   */
	  function FunctionAssignmentNode(name, params, expr) {
	    if (!(this instanceof FunctionAssignmentNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    // validate input
	    if (typeof name !== 'string') throw new TypeError('String expected for parameter "name"');
	    if (!Array.isArray(params)) throw new TypeError('Array containing strings or objects expected for parameter "params"');
	    if (!(expr && expr.isNode)) throw new TypeError('Node expected for parameter "expr"');
	    if (name in keywords) throw new Error('Illegal function name, "' + name + '" is a reserved keyword');

	    this.name = name;
	    this.params = params.map(function (param) {
	      return param && param.name || param;
	    });
	    this.types = params.map(function (param) {
	      return param && param.type || 'any';
	    });
	    this.expr = expr;
	  }

	  FunctionAssignmentNode.prototype = new Node();

	  FunctionAssignmentNode.prototype.type = 'FunctionAssignmentNode';

	  FunctionAssignmentNode.prototype.isFunctionAssignmentNode = true;

	  /**
	   * Compile the node to javascript code
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @param {Object} args     Object with local function arguments, the key is
	   *                          the name of the argument, and the value is `true`.
	   *                          The object may not be mutated, but must be
	   *                          extended instead.
	   * @return {string} js
	   * @private
	   */
	  FunctionAssignmentNode.prototype._compile = function (defs, args) {
	    defs.typed = typed;

	    // we extend the original args and add the args to the child object
	    var childArgs = Object.create(args);
	    this.params.forEach(function (variable) {
	      childArgs[variable] = true;
	    });

	    // compile the function expression with the child args
	    var jsExpr = this.expr._compile(defs, childArgs);

	    return 'scope["' + this.name + '"] = ' + '  (function () {' + '    var fn = typed("' + this.name + '", {' + '      "' + this.types.join(',') + '": function (' + this.params.join(',') + ') {' + '        return ' + jsExpr + '' + '      }' + '    });' + '    fn.syntax = "' + this.name + '(' + this.params.join(', ') + ')";' + '    return fn;' + '  })()';
	  };

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  FunctionAssignmentNode.prototype.forEach = function (callback) {
	    callback(this.expr, 'expr', this);
	  };

	  /**
	   * Create a new FunctionAssignmentNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {FunctionAssignmentNode} Returns a transformed copy of the node
	   */
	  FunctionAssignmentNode.prototype.map = function (callback) {
	    var expr = this._ifNode(callback(this.expr, 'expr', this));

	    return new FunctionAssignmentNode(this.name, this.params.slice(0), expr);
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {FunctionAssignmentNode}
	   */
	  FunctionAssignmentNode.prototype.clone = function () {
	    return new FunctionAssignmentNode(this.name, this.params.slice(0), this.expr);
	  };

	  /**
	   * Is parenthesis needed?
	   * @param {Node} node
	   * @param {Object} parenthesis
	   * @private
	   */
	  function needParenthesis(node, parenthesis) {
	    var precedence = operators.getPrecedence(node, parenthesis);
	    var exprPrecedence = operators.getPrecedence(node.expr, parenthesis);

	    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;
	  }

	  /**
	   * get string representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  FunctionAssignmentNode.prototype._toString = function (options) {
	    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
	    var expr = this.expr.toString(options);
	    if (needParenthesis(this, parenthesis)) {
	      expr = '(' + expr + ')';
	    }
	    return 'function ' + this.name + '(' + this.params.join(', ') + ') = ' + expr;
	  };

	  /**
	   * get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  FunctionAssignmentNode.prototype._toTex = function (options) {
	    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
	    var expr = this.expr.toTex(options);
	    if (needParenthesis(this, parenthesis)) {
	      expr = '\\left(' + expr + '\\right)';
	    }

	    return '\\mathrm{' + this.name + '}\\left(' + this.params.map(latex.toSymbol).join(',') + '\\right):=' + expr;
	  };

	  return FunctionAssignmentNode;
	}
	exports.name = 'FunctionAssignmentNode';
	exports.path = 'expression.node';
	exports.factory = factory;

/***/ },
/* 454 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load, typed) {
	  var Node = load(__webpack_require__(441));
	  var RangeNode = load(__webpack_require__(455));
	  var SymbolNode = load(__webpack_require__(456));

	  var Range = load(__webpack_require__(227));

	  var isArray = Array.isArray;

	  /**
	   * @constructor IndexNode
	   * @extends Node
	   *
	   * Describes a subset of a matrix or an object property.
	   * Cannot be used on its own, needs to be used within an AccessorNode or
	   * AssignmentNode.
	   *
	   * @param {Node[]} dimensions
	   * @param {boolean} [dotNotation=false]  Optional property describing whether
	   *                                       this index was written using dot
	   *                                       notation like `a.b`, or using bracket
	   *                                       notation like `a["b"]` (default).
	   *                                       Used to stringify an IndexNode.
	   */
	  function IndexNode(dimensions, dotNotation) {
	    if (!(this instanceof IndexNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    this.dimensions = dimensions;
	    this.dotNotation = dotNotation || false;

	    // validate input
	    if (!isArray(dimensions) || !dimensions.every(function (range) {
	      return range && range.isNode;
	    })) {
	      throw new TypeError('Array containing Nodes expected for parameter "dimensions"');
	    }
	    if (this.dotNotation && !this.isObjectProperty()) {
	      throw new Error('dotNotation only applicable for object properties');
	    }

	    // TODO: deprecated since v3, remove some day
	    var deprecated = function deprecated() {
	      throw new Error('Property `IndexNode.object` is deprecated, use `IndexNode.fn` instead');
	    };
	    Object.defineProperty(this, 'object', { get: deprecated, set: deprecated });
	  }

	  IndexNode.prototype = new Node();

	  IndexNode.prototype.type = 'IndexNode';

	  IndexNode.prototype.isIndexNode = true;

	  /**
	   * Compile all range nodes
	   *
	   * When some of the dimensions has `end` defined, the IndexNode requires
	   * a variable `size` to be defined in the current closure, and must contain
	   * the size of the matrix that's being handled. To check whether the `size`
	   * variable is needed, call IndexNode.needsSize().
	   *
	   * @param {Object} defs           Object which can be used to define functions
	   *                                or constants globally available for the
	   *                                compiled expression
	   * @param {Object} args           Object with local function arguments, the key is
	   *                                the name of the argument, and the value is `true`.
	   *                                The object may not be mutated, but must be
	   *                                extended instead.
	   * @return {string} code
	   */
	  IndexNode.prototype._compile = function (defs, args) {
	    // args can be mutated by IndexNode, when dimensions use `end`
	    var childArgs = Object.create(args);

	    // helper function to create a Range from start, step and end
	    defs.range = function (start, end, step) {
	      return new Range(start && start.isBigNumber === true ? start.toNumber() : start, end && end.isBigNumber === true ? end.toNumber() : end, step && step.isBigNumber === true ? step.toNumber() : step);
	    };

	    // TODO: implement support for bignumber (currently bignumbers are silently
	    //       reduced to numbers when changing the value to zero-based)

	    // TODO: Optimization: when the range values are ConstantNodes,
	    //       we can beforehand resolve the zero-based value

	    // optimization for a simple object property
	    var dimensions = this.dimensions.map(function (range, i) {
	      if (range && range.isRangeNode) {
	        if (range.needsEnd()) {
	          childArgs.end = true;

	          // resolve end and create range
	          return '(function () {' + 'var end = size[' + i + ']; ' + 'return range(' + range.start._compile(defs, childArgs) + ', ' + range.end._compile(defs, childArgs) + ', ' + (range.step ? range.step._compile(defs, childArgs) : '1') + '); ' + '})()';
	        } else {
	          // create range
	          return 'range(' + range.start._compile(defs, childArgs) + ', ' + range.end._compile(defs, childArgs) + ', ' + (range.step ? range.step._compile(defs, childArgs) : '1') + ')';
	        }
	      }
	      if (range.isSymbolNode && range.name === 'end') {
	        childArgs.end = true;

	        // resolve the parameter 'end'
	        return '(function () {' + 'var end = size[' + i + ']; ' + 'return ' + range._compile(defs, childArgs) + '; ' + '})()';
	      } else {
	        // ConstantNode
	        return range._compile(defs, childArgs);
	      }
	    });

	    return 'math.index(' + dimensions.join(', ') + ')';
	  };

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  IndexNode.prototype.forEach = function (callback) {
	    for (var i = 0; i < this.dimensions.length; i++) {
	      callback(this.dimensions[i], 'dimensions[' + i + ']', this);
	    }
	  };

	  /**
	   * Create a new IndexNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {IndexNode} Returns a transformed copy of the node
	   */
	  IndexNode.prototype.map = function (callback) {
	    var dimensions = [];
	    for (var i = 0; i < this.dimensions.length; i++) {
	      dimensions[i] = this._ifNode(callback(this.dimensions[i], 'dimensions[' + i + ']', this));
	    }

	    return new IndexNode(dimensions);
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {IndexNode}
	   */
	  IndexNode.prototype.clone = function () {
	    return new IndexNode(this.dimensions.slice(0));
	  };

	  /**
	   * Test whether this IndexNode contains a single property name
	   * @return {boolean}
	   */
	  IndexNode.prototype.isObjectProperty = function () {
	    return this.dimensions.length === 1 && this.dimensions[0].isConstantNode && this.dimensions[0].valueType === 'string';
	  };

	  /**
	   * Returns the property name if IndexNode contains a property.
	   * If not, returns null.
	   * @return {string | null}
	   */
	  IndexNode.prototype.getObjectProperty = function () {
	    return this.isObjectProperty() ? this.dimensions[0].value : null;
	  };

	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  IndexNode.prototype._toString = function (options) {
	    // format the parameters like "[1, 0:5]"
	    return this.dotNotation ? '.' + this.getObjectProperty() : '[' + this.dimensions.join(', ') + ']';
	  };

	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  IndexNode.prototype._toTex = function (options) {
	    var dimensions = this.dimensions.map(function (range) {
	      return range.toTex(options);
	    });

	    return this.dotNotation ? '.' + this.getObjectProperty() + '' : '_{' + dimensions.join(',') + '}';
	  };

	  /**
	   * Test whether this IndexNode needs the object size, size of the Matrix
	   * @return {boolean}
	   */
	  IndexNode.prototype.needsSize = function () {
	    return this.dimensions.some(function (range) {
	      return range.isRangeNode && range.needsEnd() || range.isSymbolNode && range.name === 'end';
	    });
	  };

	  return IndexNode;
	}

	exports.name = 'IndexNode';
	exports.path = 'expression.node';
	exports.factory = factory;

/***/ },
/* 455 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var operators = __webpack_require__(449);

	function factory(type, config, load, typed) {
	  var Node = load(__webpack_require__(441));

	  /**
	   * @constructor RangeNode
	   * @extends {Node}
	   * create a range
	   * @param {Node} start  included lower-bound
	   * @param {Node} end    included upper-bound
	   * @param {Node} [step] optional step
	   */
	  function RangeNode(start, end, step) {
	    if (!(this instanceof RangeNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    // validate inputs
	    if (!(start && start.isNode)) throw new TypeError('Node expected');
	    if (!(end && end.isNode)) throw new TypeError('Node expected');
	    if (step && !(step && step.isNode)) throw new TypeError('Node expected');
	    if (arguments.length > 3) throw new Error('Too many arguments');

	    this.start = start; // included lower-bound
	    this.end = end; // included upper-bound
	    this.step = step || null; // optional step
	  }

	  RangeNode.prototype = new Node();

	  RangeNode.prototype.type = 'RangeNode';

	  RangeNode.prototype.isRangeNode = true;

	  /**
	   * Check whether the RangeNode needs the `end` symbol to be defined.
	   * This end is the size of the Matrix in current dimension.
	   * @return {boolean}
	   */
	  RangeNode.prototype.needsEnd = function () {
	    // find all `end` symbols in this RangeNode
	    var endSymbols = this.filter(function (node) {
	      return node && node.isSymbolNode && node.name == 'end';
	    });

	    return endSymbols.length > 0;
	  };

	  /**
	   * Compile the node to javascript code
	   *
	   * When the range has a symbol `end` defined, the RangeNode requires
	   * a variable `end` to be defined in the current closure, which must contain
	   * the length of the of the matrix that's being handled in the range's
	   * dimension. To check whether the `end` variable is needed, call
	   * RangeNode.needsEnd().
	   *
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @param {Object} args     Object with local function arguments, the key is
	   *                          the name of the argument, and the value is `true`.
	   *                          The object may not be mutated, but must be
	   *                          extended instead.
	   * @return {string} js
	   * @private
	   */
	  RangeNode.prototype._compile = function (defs, args) {
	    return 'math.range(' + this.start._compile(defs, args) + ', ' + this.end._compile(defs, args) + (this.step ? ', ' + this.step._compile(defs, args) : '') + ')';
	  };

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  RangeNode.prototype.forEach = function (callback) {
	    callback(this.start, 'start', this);
	    callback(this.end, 'end', this);
	    if (this.step) {
	      callback(this.step, 'step', this);
	    }
	  };

	  /**
	   * Create a new RangeNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {RangeNode} Returns a transformed copy of the node
	   */
	  RangeNode.prototype.map = function (callback) {
	    return new RangeNode(this._ifNode(callback(this.start, 'start', this)), this._ifNode(callback(this.end, 'end', this)), this.step && this._ifNode(callback(this.step, 'step', this)));
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {RangeNode}
	   */
	  RangeNode.prototype.clone = function () {
	    return new RangeNode(this.start, this.end, this.step && this.step);
	  };

	  /**
	   * Calculate the necessary parentheses
	   * @param {Node} node
	   * @param {string} parenthesis
	   * @return {Object} parentheses
	   * @private
	   */
	  function calculateNecessaryParentheses(node, parenthesis) {
	    var precedence = operators.getPrecedence(node, parenthesis);
	    var parens = {};

	    var startPrecedence = operators.getPrecedence(node.start, parenthesis);
	    parens.start = startPrecedence !== null && startPrecedence <= precedence || parenthesis === 'all';

	    if (node.step) {
	      var stepPrecedence = operators.getPrecedence(node.step, parenthesis);
	      parens.step = stepPrecedence !== null && stepPrecedence <= precedence || parenthesis === 'all';
	    }

	    var endPrecedence = operators.getPrecedence(node.end, parenthesis);
	    parens.end = endPrecedence !== null && endPrecedence <= precedence || parenthesis === 'all';

	    return parens;
	  }

	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  RangeNode.prototype._toString = function (options) {
	    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
	    var parens = calculateNecessaryParentheses(this, parenthesis);

	    //format string as start:step:stop
	    var str;

	    var start = this.start.toString(options);
	    if (parens.start) {
	      start = '(' + start + ')';
	    }
	    str = start;

	    if (this.step) {
	      var step = this.step.toString(options);
	      if (parens.step) {
	        step = '(' + step + ')';
	      }
	      str += ':' + step;
	    }

	    var end = this.end.toString(options);
	    if (parens.end) {
	      end = '(' + end + ')';
	    }
	    str += ':' + end;

	    return str;
	  };

	  /**
	   * Get LaTeX representation
	   * @params {Object} options
	   * @return {string} str
	   */
	  RangeNode.prototype._toTex = function (options) {
	    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
	    var parens = calculateNecessaryParentheses(this, parenthesis);

	    var str = this.start.toTex(options);
	    if (parens.start) {
	      str = '\\left(' + str + '\\right)';
	    }

	    if (this.step) {
	      var step = this.step.toTex(options);
	      if (parens.step) {
	        step = '\\left(' + step + '\\right)';
	      }
	      str += ':' + step;
	    }

	    var end = this.end.toTex(options);
	    if (parens.end) {
	      end = '\\left(' + end + '\\right)';
	    }
	    str += ':' + end;

	    return str;
	  };

	  return RangeNode;
	}

	exports.name = 'RangeNode';
	exports.path = 'expression.node';
	exports.factory = factory;

/***/ },
/* 456 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var latex = __webpack_require__(192);

	function factory(type, config, load, typed, math) {
	  var Node = load(__webpack_require__(441));

	  var Unit = load(__webpack_require__(235));

	  /**
	   * @constructor SymbolNode
	   * @extends {Node}
	   * A symbol node can hold and resolve a symbol
	   * @param {string} name
	   * @extends {Node}
	   */
	  function SymbolNode(name) {
	    if (!(this instanceof SymbolNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    // validate input
	    if (typeof name !== 'string') throw new TypeError('String expected for parameter "name"');

	    this.name = name;
	  }

	  SymbolNode.prototype = new Node();

	  SymbolNode.prototype.type = 'SymbolNode';

	  SymbolNode.prototype.isSymbolNode = true;

	  /**
	   * Compile the node to javascript code
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @param {Object} args     Object with local function arguments, the key is
	   *                          the name of the argument, and the value is `true`.
	   *                          The object may not be mutated, but must be
	   *                          extended instead.
	   * @return {string} js
	   * @private
	   */
	  SymbolNode.prototype._compile = function (defs, args) {
	    // add a function to the definitions
	    defs['undef'] = undef;
	    defs['Unit'] = Unit;

	    if (args[this.name]) {
	      // this is a FunctionAssignment argument
	      // (like an x when inside the expression of a function assignment `f(x) = ...`)
	      return this.name;
	    } else if (this.name in defs.math) {
	      return '("' + this.name + '" in scope ? scope["' + this.name + '"] : math["' + this.name + '"])';
	    } else {
	      return '(' + '"' + this.name + '" in scope ? scope["' + this.name + '"] : ' + (Unit.isValuelessUnit(this.name) ? 'new Unit(null, "' + this.name + '")' : 'undef("' + this.name + '")') + ')';
	    }
	  };

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  SymbolNode.prototype.forEach = function (callback) {
	    // nothing to do, we don't have childs
	  };

	  /**
	   * Create a new SymbolNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node) : Node} callback
	   * @returns {SymbolNode} Returns a clone of the node
	   */
	  SymbolNode.prototype.map = function (callback) {
	    return this.clone();
	  };

	  /**
	   * Throws an error 'Undefined symbol {name}'
	   * @param {string} name
	   */
	  function undef(name) {
	    throw new Error('Undefined symbol ' + name);
	  }

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {SymbolNode}
	   */
	  SymbolNode.prototype.clone = function () {
	    return new SymbolNode(this.name);
	  };

	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */
	  SymbolNode.prototype._toString = function (options) {
	    return this.name;
	  };

	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */
	  SymbolNode.prototype._toTex = function (options) {
	    var isUnit = false;
	    if (typeof math[this.name] === 'undefined' && Unit.isValuelessUnit(this.name)) {
	      isUnit = true;
	    }
	    var symbol = latex.toSymbol(this.name, isUnit);
	    if (symbol[0] === '\\') {
	      //no space needed if the symbol starts with '\'
	      return symbol;
	    }
	    //the space prevents symbols from breaking stuff like '\cdot' if it's written right before the symbol
	    return ' ' + symbol;
	  };

	  return SymbolNode;
	}

	exports.name = 'SymbolNode';
	exports.path = 'expression.node';
	exports.math = true; // request access to the math namespace as 5th argument of the factory function
	exports.factory = factory;

/***/ },
/* 457 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var string = __webpack_require__(183);

	function factory(type, config, load, typed) {
	  var Node = load(__webpack_require__(441));

	  /**
	   * @constructor ObjectNode
	   * @extends {Node}
	   * Holds an object with keys/values
	   * @param {Object.<string, Node>} [properties]   array with key/value pairs
	   */
	  function ObjectNode(properties) {
	    if (!(this instanceof ObjectNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    this.properties = properties || {};

	    // validate input
	    if (properties) {
	      if (!((typeof properties === 'undefined' ? 'undefined' : _typeof(properties)) === 'object') || Object.keys(properties).some(function (key) {
	        return !properties[key] || !properties[key].isNode;
	      })) {
	        throw new TypeError('Object containing Nodes expected');
	      }
	    }
	  }

	  ObjectNode.prototype = new Node();

	  ObjectNode.prototype.type = 'ObjectNode';

	  ObjectNode.prototype.isObjectNode = true;

	  /**
	   * Compile the node to javascript code
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @param {Object} args     Object with local function arguments, the key is
	   *                          the name of the argument, and the value is `true`.
	   *                          The object may not be mutated, but must be
	   *                          extended instead.
	   * @return {string} code
	   * @private
	   */
	  ObjectNode.prototype._compile = function (defs, args) {
	    var entries = [];
	    for (var key in this.properties) {
	      if (this.properties.hasOwnProperty(key)) {
	        entries.push('"' + key + '": ' + this.properties[key]._compile(defs, args));
	      }
	    }
	    return '{' + entries.join(', ') + '}';
	  };

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  ObjectNode.prototype.forEach = function (callback) {
	    for (var key in this.properties) {
	      if (this.properties.hasOwnProperty(key)) {
	        callback(this.properties[key], 'properties["' + key + '"]', this);
	      }
	    }
	  };

	  /**
	   * Create a new ObjectNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {ObjectNode} Returns a transformed copy of the node
	   */
	  ObjectNode.prototype.map = function (callback) {
	    var properties = {};
	    for (var key in this.properties) {
	      if (this.properties.hasOwnProperty(key)) {
	        properties[key] = this._ifNode(callback(this.properties[key], 'properties["' + key + '"]', this));
	      }
	    }
	    return new ObjectNode(properties);
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {ObjectNode}
	   */
	  ObjectNode.prototype.clone = function () {
	    var properties = {};
	    for (var key in this.properties) {
	      if (this.properties.hasOwnProperty(key)) {
	        properties[key] = this.properties[key];
	      }
	    }
	    return new ObjectNode(properties);
	  };

	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */
	  ObjectNode.prototype._toString = function (options) {
	    var entries = [];
	    for (var key in this.properties) {
	      if (this.properties.hasOwnProperty(key)) {
	        entries.push('"' + key + '": ' + this.properties[key].toString(options));
	      }
	    }
	    return '{' + entries.join(', ') + '}';
	  };

	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  ObjectNode.prototype._toTex = function (options) {
	    var entries = [];
	    for (var key in this.properties) {
	      if (this.properties.hasOwnProperty(key)) {
	        entries.push("\\mathbf{" + key + ':} & ' + this.properties[key].toTex(options) + "\\\\");
	      }
	    }
	    return '\\left\\{\\begin{array}{ll}' + entries.join('\n') + '\\end{array}\\right\\}';
	  };

	  return ObjectNode;
	}

	exports.name = 'ObjectNode';
	exports.path = 'expression.node';
	exports.factory = factory;

/***/ },
/* 458 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var latex = __webpack_require__(192);
	var operators = __webpack_require__(449);

	function factory(type, config, load, typed, math) {
	  var Node = load(__webpack_require__(441));
	  var ConstantNode = load(__webpack_require__(452));
	  var SymbolNode = load(__webpack_require__(456));
	  var FunctionNode = load(__webpack_require__(459));

	  /**
	   * @constructor OperatorNode
	   * @extends {Node}
	   * An operator with two arguments, like 2+3
	   *
	   * @param {string} op           Operator name, for example '+'
	   * @param {string} fn           Function name, for example 'add'
	   * @param {Node[]} args         Operator arguments
	   * @param {boolean} [implicit]  Is this an implicit multiplication?
	   */
	  function OperatorNode(op, fn, args, implicit) {
	    if (!(this instanceof OperatorNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    //validate input
	    if (typeof op !== 'string') {
	      throw new TypeError('string expected for parameter "op"');
	    }
	    if (typeof fn !== 'string') {
	      throw new TypeError('string expected for parameter "fn"');
	    }
	    if (!Array.isArray(args) || !args.every(function (node) {
	      return node && node.isNode;
	    })) {
	      throw new TypeError('Array containing Nodes expected for parameter "args"');
	    }

	    this.implicit = implicit === true;
	    this.op = op;
	    this.fn = fn;
	    this.args = args || [];
	  }

	  OperatorNode.prototype = new Node();

	  OperatorNode.prototype.type = 'OperatorNode';

	  OperatorNode.prototype.isOperatorNode = true;

	  /**
	   * Compile the node to javascript code
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @param {Object} args     Object with local function arguments, the key is
	   *                          the name of the argument, and the value is `true`.
	   *                          The object may not be mutated, but must be
	   *                          extended instead.
	   * @return {string} js
	   * @private
	   */
	  OperatorNode.prototype._compile = function (defs, args) {
	    if (!defs.math[this.fn]) {
	      throw new Error('Function ' + this.fn + ' missing in provided namespace "math"');
	    }

	    var jsArgs = this.args.map(function (arg) {
	      return arg._compile(defs, args);
	    });

	    return 'math.' + this.fn + '(' + jsArgs.join(', ') + ')';
	  };

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  OperatorNode.prototype.forEach = function (callback) {
	    for (var i = 0; i < this.args.length; i++) {
	      callback(this.args[i], 'args[' + i + ']', this);
	    }
	  };

	  /**
	   * Create a new OperatorNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {OperatorNode} Returns a transformed copy of the node
	   */
	  OperatorNode.prototype.map = function (callback) {
	    var args = [];
	    for (var i = 0; i < this.args.length; i++) {
	      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));
	    }
	    return new OperatorNode(this.op, this.fn, args);
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {OperatorNode}
	   */
	  OperatorNode.prototype.clone = function () {
	    return new OperatorNode(this.op, this.fn, this.args.slice(0));
	  };

	  /**
	   * Calculate which parentheses are necessary. Gets an OperatorNode
	   * (which is the root of the tree) and an Array of Nodes
	   * (this.args) and returns an array where 'true' means that an argument
	   * has to be enclosed in parentheses whereas 'false' means the opposite.
	   *
	   * @param {OperatorNode} root
	   * @param {string} parenthesis
	   * @param {Node[]} args
	   * @param {boolean} latex
	   * @return {boolean[]}
	   * @private
	   */
	  function calculateNecessaryParentheses(root, parenthesis, args, latex) {
	    //precedence of the root OperatorNode
	    var precedence = operators.getPrecedence(root, parenthesis);
	    var associativity = operators.getAssociativity(root, parenthesis);

	    if (parenthesis === 'all' || args.length > 2) {
	      var parens = [];
	      args.forEach(function (arg) {
	        switch (arg.getContent().type) {//Nodes that don't need extra parentheses
	          case 'ArrayNode':
	          case 'ConstantNode':
	          case 'SymbolNode':
	          case 'ParenthesisNode':
	            parens.push(false);
	            break;
	          default:
	            parens.push(true);
	        }
	      });
	      return parens;
	    }

	    switch (args.length) {
	      case 0:
	        return [];
	      case 1:
	        //unary operators
	        //precedence of the operand
	        var operandPrecedence = operators.getPrecedence(args[0], parenthesis);

	        //handle special cases for LaTeX, where some of the parentheses aren't needed
	        if (latex && operandPrecedence !== null) {
	          var operandIdentifier;
	          var rootIdentifier;
	          if (parenthesis === 'keep') {
	            operandIdentifier = args[0].getIdentifier();
	            rootIdentifier = root.getIdentifier();
	          } else {
	            //Ignore Parenthesis Nodes when not in 'keep' mode
	            operandIdentifier = args[0].getContent().getIdentifier();
	            rootIdentifier = root.getContent().getIdentifier();
	          }
	          if (operators.properties[precedence][rootIdentifier].latexLeftParens === false) {
	            return [false];
	          }

	          if (operators.properties[operandPrecedence][operandIdentifier].latexParens === false) {
	            return [false];
	          }
	        }

	        if (operandPrecedence === null) {
	          //if the operand has no defined precedence, no parens are needed
	          return [false];
	        }

	        if (operandPrecedence <= precedence) {
	          //if the operands precedence is lower, parens are needed
	          return [true];
	        }

	        //otherwise, no parens needed
	        return [false];

	      case 2:
	        //binary operators
	        var lhsParens; //left hand side needs parenthesis?
	        //precedence of the left hand side
	        var lhsPrecedence = operators.getPrecedence(args[0], parenthesis);
	        //is the root node associative with the left hand side
	        var assocWithLhs = operators.isAssociativeWith(root, args[0], parenthesis);

	        if (lhsPrecedence === null) {
	          //if the left hand side has no defined precedence, no parens are needed
	          //FunctionNode for example
	          lhsParens = false;
	        } else if (lhsPrecedence === precedence && associativity === 'right' && !assocWithLhs) {
	          //In case of equal precedence, if the root node is left associative
	          // parens are **never** necessary for the left hand side.
	          //If it is right associative however, parens are necessary
	          //if the root node isn't associative with the left hand side
	          lhsParens = true;
	        } else if (lhsPrecedence < precedence) {
	          lhsParens = true;
	        } else {
	          lhsParens = false;
	        }

	        var rhsParens; //right hand side needs parenthesis?
	        //precedence of the right hand side
	        var rhsPrecedence = operators.getPrecedence(args[1], parenthesis);
	        //is the root node associative with the right hand side?
	        var assocWithRhs = operators.isAssociativeWith(root, args[1], parenthesis);

	        if (rhsPrecedence === null) {
	          //if the right hand side has no defined precedence, no parens are needed
	          //FunctionNode for example
	          rhsParens = false;
	        } else if (rhsPrecedence === precedence && associativity === 'left' && !assocWithRhs) {
	          //In case of equal precedence, if the root node is right associative
	          // parens are **never** necessary for the right hand side.
	          //If it is left associative however, parens are necessary
	          //if the root node isn't associative with the right hand side
	          rhsParens = true;
	        } else if (rhsPrecedence < precedence) {
	          rhsParens = true;
	        } else {
	          rhsParens = false;
	        }

	        //handle special cases for LaTeX, where some of the parentheses aren't needed
	        if (latex) {
	          var rootIdentifier;
	          var lhsIdentifier;
	          var rhsIdentifier;
	          if (parenthesis === 'keep') {
	            rootIdentifier = root.getIdentifier();
	            lhsIdentifier = root.args[0].getIdentifier();
	            rhsIdentifier = root.args[1].getIdentifier();
	          } else {
	            //Ignore ParenthesisNodes when not in 'keep' mode
	            rootIdentifier = root.getContent().getIdentifier();
	            lhsIdentifier = root.args[0].getContent().getIdentifier();
	            rhsIdentifier = root.args[1].getContent().getIdentifier();
	          }

	          if (lhsPrecedence !== null) {
	            if (operators.properties[precedence][rootIdentifier].latexLeftParens === false) {
	              lhsParens = false;
	            }

	            if (operators.properties[lhsPrecedence][lhsIdentifier].latexParens === false) {
	              lhsParens = false;
	            }
	          }

	          if (rhsPrecedence !== null) {
	            if (operators.properties[precedence][rootIdentifier].latexRightParens === false) {
	              rhsParens = false;
	            }

	            if (operators.properties[rhsPrecedence][rhsIdentifier].latexParens === false) {
	              rhsParens = false;
	            }
	          }
	        }

	        return [lhsParens, rhsParens];
	    }
	  }

	  /**
	   * Get string representation.
	   * @param {Object} options
	   * @return {string} str
	   */
	  OperatorNode.prototype._toString = function (options) {
	    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
	    var implicit = options && options.implicit ? options.implicit : 'hide';
	    var args = this.args;
	    var parens = calculateNecessaryParentheses(this, parenthesis, args, false);

	    switch (args.length) {
	      case 1:
	        //unary operators
	        var assoc = operators.getAssociativity(this, parenthesis);

	        var operand = args[0].toString(options);
	        if (parens[0]) {
	          operand = '(' + operand + ')';
	        }

	        if (assoc === 'right') {
	          //prefix operator
	          return this.op + operand;
	        } else if (assoc === 'left') {
	          //postfix
	          return operand + this.op;
	        }

	        //fall back to postfix
	        return operand + this.op;

	      case 2:
	        var lhs = args[0].toString(options); //left hand side
	        var rhs = args[1].toString(options); //right hand side
	        if (parens[0]) {
	          //left hand side in parenthesis?
	          lhs = '(' + lhs + ')';
	        }
	        if (parens[1]) {
	          //right hand side in parenthesis?
	          rhs = '(' + rhs + ')';
	        }

	        if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit == 'hide') {
	          return lhs + ' ' + rhs;
	        }

	        return lhs + ' ' + this.op + ' ' + rhs;

	      default:
	        //fallback to formatting as a function call
	        return this.fn + '(' + this.args.join(', ') + ')';
	    }
	  };

	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  OperatorNode.prototype._toTex = function (options) {
	    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
	    var implicit = options && options.implicit ? options.implicit : 'hide';
	    var args = this.args;
	    var parens = calculateNecessaryParentheses(this, parenthesis, args, true);
	    var op = latex.operators[this.fn];
	    op = typeof op === 'undefined' ? this.op : op; //fall back to using this.op

	    switch (args.length) {
	      case 1:
	        //unary operators
	        var assoc = operators.getAssociativity(this, parenthesis);

	        var operand = args[0].toTex(options);
	        if (parens[0]) {
	          operand = '\\left(' + operand + '\\right)';
	        }

	        if (assoc === 'right') {
	          //prefix operator
	          return op + operand;
	        } else if (assoc === 'left') {
	          //postfix operator
	          return operand + op;
	        }

	        //fall back to postfix
	        return operand + op;

	      case 2:
	        //binary operators
	        var lhs = args[0]; //left hand side
	        var lhsTex = lhs.toTex(options);
	        if (parens[0]) {
	          lhsTex = '\\left(' + lhsTex + '\\right)';
	        }

	        var rhs = args[1]; //right hand side
	        var rhsTex = rhs.toTex(options);
	        if (parens[1]) {
	          rhsTex = '\\left(' + rhsTex + '\\right)';
	        }

	        //handle some exceptions (due to the way LaTeX works)
	        var lhsIdentifier;
	        if (parenthesis === 'keep') {
	          lhsIdentifier = lhs.getIdentifier();
	        } else {
	          //Ignore ParenthesisNodes if in 'keep' mode
	          lhsIdentifier = lhs.getContent().getIdentifier();
	        }
	        switch (this.getIdentifier()) {
	          case 'OperatorNode:divide':
	            //op contains '\\frac' at this point
	            return op + '{' + lhsTex + '}' + '{' + rhsTex + '}';
	          case 'OperatorNode:pow':
	            lhsTex = '{' + lhsTex + '}';
	            rhsTex = '{' + rhsTex + '}';
	            switch (lhsIdentifier) {
	              case 'ConditionalNode': //
	              case 'OperatorNode:divide':
	                lhsTex = '\\left(' + lhsTex + '\\right)';
	            }
	          case 'OperatorNode:multiply':
	            if (this.implicit && implicit === 'hide') {
	              return lhsTex + '~' + rhsTex;
	            }
	        }
	        return lhsTex + op + rhsTex;

	      default:
	        //fall back to formatting as a function call
	        //as this is a fallback, it doesn't use
	        //fancy function names
	        return '\\mathrm{' + this.fn + '}\\left(' + args.map(function (arg) {
	          return arg.toTex(options);
	        }).join(',') + '\\right)';
	    }
	  };

	  /**
	   * Get identifier.
	   * @return {string}
	   */
	  OperatorNode.prototype.getIdentifier = function () {
	    return this.type + ':' + this.fn;
	  };

	  return OperatorNode;
	}

	exports.name = 'OperatorNode';
	exports.path = 'expression.node';
	exports.math = true; // request access to the math namespace as 5th argument of the factory function
	exports.factory = factory;

/***/ },
/* 459 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var latex = __webpack_require__(192);

	function factory(type, config, load, typed, math) {
	  var Node = load(__webpack_require__(441));
	  var SymbolNode = load(__webpack_require__(456));

	  /**
	   * @constructor FunctionNode
	   * @extends {./Node}
	   * invoke a list with arguments on a node
	   * @param {./Node} fn       Node resolving with a function on which to invoke
	   *                          the arguments, typically a SymboNode or AccessorNode
	   * @param {./Node[]} args
	   */
	  function FunctionNode(fn, args) {
	    if (!(this instanceof FunctionNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    // TODO deprecated since v3.0, cleanup some day
	    if (typeof fn === 'string') {
	      console.warn('WARNING: passing a string to FunctionNode is deprecated, pass a SymbolNode instead.');
	      fn = new SymbolNode(fn);
	    }

	    // validate input
	    if (!fn || !fn.isNode) throw new TypeError('Node expected as parameter "fn"');
	    if (!Array.isArray(args) || !args.every(function (arg) {
	      return arg && arg.isNode;
	    })) {
	      throw new TypeError('Array containing Nodes expected for parameter "args"');
	    }

	    this.fn = fn;
	    this.args = args || [];

	    // readonly property name
	    Object.defineProperty(this, 'name', {
	      get: function () {
	        return this.fn.name || '';
	      }.bind(this),
	      set: function set() {
	        throw new Error('Cannot assign a new name, name is read-only');
	      }
	    });

	    // TODO: deprecated since v3, remove some day
	    var deprecated = function deprecated() {
	      throw new Error('Property `FunctionNode.object` is deprecated, use `FunctionNode.fn` instead');
	    };
	    Object.defineProperty(this, 'object', { get: deprecated, set: deprecated });
	  }

	  FunctionNode.prototype = new Node();

	  FunctionNode.prototype.type = 'FunctionNode';

	  FunctionNode.prototype.isFunctionNode = true;

	  /**
	   * Compile the node to javascript code
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @param {Object} args     Object with local function arguments, the key is
	   *                          the name of the argument, and the value is `true`.
	   *                          The object may not be mutated, but must be
	   *                          extended instead.
	   * @return {string} js
	   * @private
	   */
	  FunctionNode.prototype._compile = function (defs, args) {
	    // compile fn and arguments
	    var jsFn = this.fn._compile(defs, args);
	    var jsArgs = this.args.map(function (arg) {
	      return arg._compile(defs, args);
	    });
	    var argsName;

	    if (this.fn.isSymbolNode) {
	      // we can statically determine whether the function has an rawArgs property
	      var name = this.fn.name;
	      var fn = defs.math[name];
	      var isRaw = typeof fn === 'function' && fn.rawArgs == true;

	      if (isRaw) {
	        // pass unevaluated parameters (nodes) to the function
	        argsName = this._getUniqueArgumentsName(defs);
	        defs[argsName] = this.args;

	        return jsFn + '(' + argsName + ', math, scope)';
	      } else {
	        // "regular" evaluation
	        return jsFn + '(' + jsArgs.join(', ') + ')';
	      }
	    } else if (this.fn.isAccessorNode && this.fn.index.isObjectProperty()) {
	      // execute the function with the right context: the object of the AccessorNode
	      argsName = this._getUniqueArgumentsName(defs);
	      defs[argsName] = this.args;

	      var jsObject = this.fn.object._compile(defs, args);
	      var prop = this.fn.index.getObjectProperty();

	      return '(function () {' + 'var object = ' + jsObject + ';' + 'return (object["' + prop + '"] && object["' + prop + '"].rawArgs) ' + ' ? object["' + prop + '"](' + argsName + ', math, scope)' + ' : object["' + prop + '"](' + jsArgs.join(', ') + ')' + '})()';
	    } else {
	      // this.fn.isAccessorNode && !this.fn.index.isObjectProperty()
	      // we have to dynamically determine whether the function has a rawArgs property
	      argsName = this._getUniqueArgumentsName(defs);
	      defs[argsName] = this.args;

	      return '(function () {' + 'var fn = ' + jsFn + ';' + 'return (fn && fn.rawArgs) ' + ' ? fn(' + argsName + ', math, scope)' + ' : fn(' + jsArgs.join(', ') + ')' + '})()';
	    }
	  };

	  /**
	   * Get a unique name for a arguments to store in defs
	   * @param {Object} defs
	   * @return {string} A string like 'args1', 'args2', ...
	   * @private
	   */
	  FunctionNode.prototype._getUniqueArgumentsName = function (defs) {
	    var argsName;
	    var i = 0;

	    do {
	      argsName = 'args' + i;
	      i++;
	    } while (argsName in defs);

	    return argsName;
	  };

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  FunctionNode.prototype.forEach = function (callback) {
	    for (var i = 0; i < this.args.length; i++) {
	      callback(this.args[i], 'args[' + i + ']', this);
	    }
	  };

	  /**
	   * Create a new FunctionNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {FunctionNode} Returns a transformed copy of the node
	   */
	  FunctionNode.prototype.map = function (callback) {
	    var fn = this.fn.map(callback);
	    var args = [];
	    for (var i = 0; i < this.args.length; i++) {
	      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));
	    }
	    return new FunctionNode(fn, args);
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {FunctionNode}
	   */
	  FunctionNode.prototype.clone = function () {
	    return new FunctionNode(this.fn, this.args.slice(0));
	  };

	  //backup Node's toString function
	  //@private
	  var nodeToString = FunctionNode.prototype.toString;

	  /**
	   * Get string representation. (wrapper function)
	   * This overrides parts of Node's toString function.
	   * If callback is an object containing callbacks, it
	   * calls the correct callback for the current node,
	   * otherwise it falls back to calling Node's toString
	   * function.
	   *
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */
	  FunctionNode.prototype.toString = function (options) {
	    var customString;
	    var name = this.fn.toString(options);
	    if (options && _typeof(options.handler) === 'object' && options.handler.hasOwnProperty(name)) {
	      //callback is a map of callback functions
	      customString = options.handler[name](this, options);
	    }

	    if (typeof customString !== 'undefined') {
	      return customString;
	    }

	    //fall back to Node's toString
	    return nodeToString.call(this, options);
	  };

	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  FunctionNode.prototype._toString = function (options) {
	    var args = this.args.map(function (arg) {
	      return arg.toString(options);
	    });

	    // format the arguments like "add(2, 4.2)"
	    return this.fn.toString(options) + '(' + args.join(', ') + ')';
	  };

	  /*
	   * Expand a LaTeX template
	   *
	   * @param {string} template
	   * @param {Node} node
	   * @param {Object} options
	   * @private
	   **/
	  function expandTemplate(template, node, options) {
	    var latex = '';

	    // Match everything of the form ${identifier} or ${identifier[2]} or $$
	    // while submatching identifier and 2 (in the second case)
	    var regex = new RegExp('\\$(?:\\{([a-z_][a-z_0-9]*)(?:\\[([0-9]+)\\])?\\}|\\$)', 'ig');

	    var inputPos = 0; //position in the input string
	    var match;
	    while ((match = regex.exec(template)) !== null) {
	      //go through all matches
	      // add everything in front of the match to the LaTeX string
	      latex += template.substring(inputPos, match.index);
	      inputPos = match.index;

	      if (match[0] === '$$') {
	        // escaped dollar sign
	        latex += '$';
	        inputPos++;
	      } else {
	        // template parameter
	        inputPos += match[0].length;
	        var property = node[match[1]];
	        if (!property) {
	          throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');
	        }
	        if (match[2] === undefined) {
	          //no square brackets
	          switch (typeof property === 'undefined' ? 'undefined' : _typeof(property)) {
	            case 'string':
	              latex += property;
	              break;
	            case 'object':
	              if (property.isNode) {
	                latex += property.toTex(options);
	              } else if (Array.isArray(property)) {
	                //make array of Nodes into comma separated list
	                latex += property.map(function (arg, index) {
	                  if (arg && arg.isNode) {
	                    return arg.toTex(options);
	                  }
	                  throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');
	                }).join(',');
	              } else {
	                throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');
	              }
	              break;
	            default:
	              throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');
	          }
	        } else {
	          //with square brackets
	          if (property[match[2]] && property[match[2]].isNode) {
	            latex += property[match[2]].toTex(options);
	          } else {
	            throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');
	          }
	        }
	      }
	    }
	    latex += template.slice(inputPos); //append rest of the template

	    return latex;
	  }

	  //backup Node's toTex function
	  //@private
	  var nodeToTex = FunctionNode.prototype.toTex;

	  /**
	   * Get LaTeX representation. (wrapper function)
	   * This overrides parts of Node's toTex function.
	   * If callback is an object containing callbacks, it
	   * calls the correct callback for the current node,
	   * otherwise it falls back to calling Node's toTex
	   * function.
	   *
	   * @param {Object} options
	   * @return {string}
	   */
	  FunctionNode.prototype.toTex = function (options) {
	    var customTex;
	    if (options && _typeof(options.handler) === 'object' && options.handler.hasOwnProperty(this.name)) {
	      //callback is a map of callback functions
	      customTex = options.handler[this.name](this, options);
	    }

	    if (typeof customTex !== 'undefined') {
	      return customTex;
	    }

	    //fall back to Node's toTex
	    return nodeToTex.call(this, options);
	  };

	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  FunctionNode.prototype._toTex = function (options) {
	    var args = this.args.map(function (arg) {
	      //get LaTeX of the arguments
	      return arg.toTex(options);
	    });

	    var latexConverter;

	    if (math[this.name] && (typeof math[this.name].toTex === 'function' || _typeof(math[this.name].toTex) === 'object' || typeof math[this.name].toTex === 'string')) {
	      //.toTex is a callback function
	      latexConverter = math[this.name].toTex;
	    }

	    var customToTex;
	    switch (typeof latexConverter === 'undefined' ? 'undefined' : _typeof(latexConverter)) {
	      case 'function':
	        //a callback function
	        customToTex = latexConverter(this, options);
	        break;
	      case 'string':
	        //a template string
	        customToTex = expandTemplate(latexConverter, this, options);
	        break;
	      case 'object':
	        //an object with different "converters" for different numbers of arguments
	        switch (_typeof(latexConverter[args.length])) {
	          case 'function':
	            customToTex = latexConverter[args.length](this, options);
	            break;
	          case 'string':
	            customToTex = expandTemplate(latexConverter[args.length], this, options);
	            break;
	        }
	    }

	    if (typeof customToTex !== 'undefined') {
	      return customToTex;
	    }

	    return expandTemplate(latex.defaultTemplate, this, options);
	  };

	  /**
	   * Get identifier.
	   * @return {string}
	   */
	  FunctionNode.prototype.getIdentifier = function () {
	    return this.type + ':' + this.name;
	  };

	  return FunctionNode;
	}

	exports.name = 'FunctionNode';
	exports.path = 'expression.node';
	exports.math = true; // request access to the math namespace as 5th argument of the factory function
	exports.factory = factory;

/***/ },
/* 460 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load, typed) {
	  var Node = load(__webpack_require__(441));

	  /**
	   * @constructor ParenthesisNode
	   * @extends {Node}
	   * A parenthesis node describes manual parenthesis from the user input
	   * @param {Node} content
	   * @extends {Node}
	   */
	  function ParenthesisNode(content) {
	    if (!(this instanceof ParenthesisNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    // validate input
	    if (!(content && content.isNode)) {
	      throw new TypeError('Node expected for parameter "content"');
	    }

	    this.content = content;
	  }

	  ParenthesisNode.prototype = new Node();

	  ParenthesisNode.prototype.type = 'ParenthesisNode';

	  ParenthesisNode.prototype.isParenthesisNode = true;

	  /**
	   * Compile the node to javascript code
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @param {Object} args     Object with local function arguments, the key is
	   *                          the name of the argument, and the value is `true`.
	   *                          The object may not be mutated, but must be
	   *                          extended instead.
	   * @return {string} js
	   * @private
	   */
	  ParenthesisNode.prototype._compile = function (defs, args) {
	    return this.content._compile(defs, args);
	  };

	  /**
	   * Get the content of the current Node.
	   * @return {Node} content
	   * @override
	   **/
	  ParenthesisNode.prototype.getContent = function () {
	    return this.content.getContent();
	  };

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  ParenthesisNode.prototype.forEach = function (callback) {
	    callback(this.content, 'content', this);
	  };

	  /**
	   * Create a new ParenthesisNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node) : Node} callback
	   * @returns {ParenthesisNode} Returns a clone of the node
	   */
	  ParenthesisNode.prototype.map = function (callback) {
	    var content = callback(this.content, 'content', this);
	    return new ParenthesisNode(content);
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {ParenthesisNode}
	   */
	  ParenthesisNode.prototype.clone = function () {
	    return new ParenthesisNode(this.content);
	  };

	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */
	  ParenthesisNode.prototype._toString = function (options) {
	    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {
	      return '(' + this.content.toString(options) + ')';
	    }
	    return this.content.toString(options);
	  };

	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */
	  ParenthesisNode.prototype._toTex = function (options) {
	    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {
	      return '\\left(' + this.content.toTex(options) + '\\right)';
	    }
	    return this.content.toTex(options);
	  };

	  return ParenthesisNode;
	}

	exports.name = 'ParenthesisNode';
	exports.path = 'expression.node';
	exports.factory = factory;

/***/ },
/* 461 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  var parse = load(__webpack_require__(439));

	  /**
	   * Evaluate an expression.
	   *
	   * Syntax:
	   *
	   *     math.eval(expr)
	   *     math.eval(expr, scope)
	   *     math.eval([expr1, expr2, expr3, ...])
	   *     math.eval([expr1, expr2, expr3, ...], scope)
	   *
	   * Example:
	   *
	   *     math.eval('(2+3)/4');                // 1.25
	   *     math.eval('sqrt(3^2 + 4^2)');        // 5
	   *     math.eval('sqrt(-4)');               // 2i
	   *     math.eval(['a=3', 'b=4', 'a*b']);,   // [3, 4, 12]
	   *
	   *     var scope = {a:3, b:4};
	   *     math.eval('a * b', scope);           // 12
	   *
	   * See also:
	   *
	   *    parse, compile
	   *
	   * @param {string | string[] | Matrix} expr   The expression to be evaluated
	   * @param {Object} [scope]                    Scope to read/write variables
	   * @return {*} The result of the expression
	   * @throws {Error}
	   */
	  return typed('compile', {
	    'string': function string(expr) {
	      var scope = {};
	      return parse(expr).compile().eval(scope);
	    },

	    'string, Object': function stringObject(expr, scope) {
	      return parse(expr).compile().eval(scope);
	    },

	    'Array | Matrix': function ArrayMatrix(expr) {
	      var scope = {};
	      return deepMap(expr, function (entry) {
	        return parse(entry).compile().eval(scope);
	      });
	    },

	    'Array | Matrix, Object': function ArrayMatrixObject(expr, scope) {
	      return deepMap(expr, function (entry) {
	        return parse(entry).compile().eval(scope);
	      });
	    }
	  });
	}

	exports.name = 'eval';
	exports.factory = factory;

/***/ },
/* 462 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load, typed, math) {
	  var docs = load(__webpack_require__(263));

	  /**
	   * Retrieve help on a function or data type.
	   * Help files are retrieved from the documentation in math.expression.docs.
	   *
	   * Syntax:
	   *
	   *    math.help(search)
	   *
	   * Examples:
	   *
	   *    console.log(math.help('sin').toString());
	   *    console.log(math.help(math.add).toString());
	   *    console.log(math.help(math.add).toJSON());
	   *
	   * @param {Function | string | Object} search   A function or function name
	   *                                              for which to get help
	   * @return {Help} A help object
	   */
	  return typed('help', {
	    'any': function any(search) {
	      var prop;
	      var name = search;

	      if (typeof search !== 'string') {
	        for (prop in math) {
	          // search in functions and constants
	          if (math.hasOwnProperty(prop) && search === math[prop]) {
	            name = prop;
	            break;
	          }
	        }

	        /* TODO: implement help for data types
	         if (!text) {
	         // search data type
	         for (prop in math.type) {
	         if (math.type.hasOwnProperty(prop)) {
	         if (search === math.type[prop]) {
	         text = prop;
	         break;
	         }
	         }
	         }
	         }
	         */
	      }

	      var doc = docs[name];
	      if (!doc) {
	        throw new Error('No documentation found on "' + name + '"');
	      }
	      return new type.Help(doc);
	    }
	  });
	}

	exports.math = true; // request access to the math namespace as 5th argument of the factory function
	exports.name = 'help';
	exports.factory = factory;

/***/ },
/* 463 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load, typed) {
	  var parse = load(__webpack_require__(439));

	  /**
	   * Parse an expression. Returns a node tree, which can be evaluated by
	   * invoking node.eval();
	   *
	   * Syntax:
	   *
	   *     math.parse(expr)
	   *     math.parse(expr, options)
	   *     math.parse([expr1, expr2, expr3, ...])
	   *     math.parse([expr1, expr2, expr3, ...], options)
	   *
	   * Example:
	   *
	   *     var node = math.parse('sqrt(3^2 + 4^2)');
	   *     node.compile().eval(); // 5
	   *
	   *     var scope = {a:3, b:4}
	   *     var node = math.parse('a * b'); // 12
	   *     var code = node.compile();
	   *     code.eval(scope); // 12
	   *     scope.a = 5;
	   *     code.eval(scope); // 20
	   *
	   *     var nodes = math.parse(['a = 3', 'b = 4', 'a * b']);
	   *     nodes[2].compile().eval(); // 12
	   *
	   * See also:
	   *
	   *     eval, compile
	   *
	   * @param {string | string[] | Matrix} expr          Expression to be parsed
	   * @param {{nodes: Object<string, Node>}} [options]  Available options:
	   *                                                   - `nodes` a set of custom nodes
	   * @return {Node | Node[]} node
	   * @throws {Error}
	   */
	  return typed('parse', {
	    'string | Array | Matrix': parse,
	    'string | Array | Matrix, Object': parse
	  });
	}

	exports.name = 'parse';
	exports.factory = factory;

/***/ },
/* 464 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load, typed, math) {
	  var Parser = load(__webpack_require__(465));

	  /**
	   * Create a parser. The function creates a new `math.expression.Parser` object.
	   *
	   * Syntax:
	   *
	   *    math.parser()
	   *
	   * Examples:
	   *
	   *     var parser = new math.parser();
	   *
	   *     // evaluate expressions
	   *     var a = parser.eval('sqrt(3^2 + 4^2)'); // 5
	   *     var b = parser.eval('sqrt(-4)');        // 2i
	   *     var c = parser.eval('2 inch in cm');    // 5.08 cm
	   *     var d = parser.eval('cos(45 deg)');     // 0.7071067811865476
	   *
	   *     // define variables and functions
	   *     parser.eval('x = 7 / 2');               // 3.5
	   *     parser.eval('x + 3');                   // 6.5
	   *     parser.eval('function f(x, y) = x^y');  // f(x, y)
	   *     parser.eval('f(2, 3)');                 // 8
	   *
	   *     // get and set variables and functions
	   *     var x = parser.get('x');                // 7
	   *     var f = parser.get('f');                // function
	   *     var g = f(3, 2);                        // 9
	   *     parser.set('h', 500);
	   *     var i = parser.eval('h / 2');           // 250
	   *     parser.set('hello', function (name) {
	   *       return 'hello, ' + name + '!';
	   *     });
	   *     parser.eval('hello("user")');           // "hello, user!"
	   *
	   *     // clear defined functions and variables
	   *     parser.clear();
	   *
	   * See also:
	   *
	   *    eval, compile, parse
	   *
	   * @return {Parser} Parser
	   */
	  return typed('parser', {
	    '': function _() {
	      return new Parser(math);
	    }
	  });
	}

	exports.name = 'parser';
	exports.factory = factory;
		exports.math = true; // requires the math namespace as 5th argument

/***/ },
/* 465 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var extend = __webpack_require__(163).extend;

	function factory(type, config, load, typed, math) {
	  var _parse = load(__webpack_require__(439));

	  /**
	   * @constructor Parser
	   * Parser contains methods to evaluate or parse expressions, and has a number
	   * of convenience methods to get, set, and remove variables from memory. Parser
	   * keeps a scope containing variables in memory, which is used for all
	   * evaluations.
	   *
	   * Methods:
	   *    var result = parser.eval(expr);    // evaluate an expression
	   *    var value = parser.get(name);      // retrieve a variable from the parser
	   *    var values = parser.getAll();      // retrieve all defined variables
	   *    parser.set(name, value);           // set a variable in the parser
	   *    parser.remove(name);               // clear a variable from the
	   *                                       // parsers scope
	   *    parser.clear();                    // clear the parsers scope
	   *
	   * Example usage:
	   *    var parser = new Parser();
	   *    // Note: there is a convenience method which can be used instead:
	   *    // var parser = new math.parser();
	   *
	   *    // evaluate expressions
	   *    parser.eval('sqrt(3^2 + 4^2)');         // 5
	   *    parser.eval('sqrt(-4)');                // 2i
	   *    parser.eval('2 inch in cm');            // 5.08 cm
	   *    parser.eval('cos(45 deg)');             // 0.7071067811865476
	   *
	   *    // define variables and functions
	   *    parser.eval('x = 7 / 2');               // 3.5
	   *    parser.eval('x + 3');                   // 6.5
	   *    parser.eval('function f(x, y) = x^y');  // f(x, y)
	   *    parser.eval('f(2, 3)');                 // 8
	   *
	   *    // get and set variables and functions
	   *    var x = parser.get('x');                // 7
	   *    var f = parser.get('f');                // function
	   *    var g = f(3, 2);                        // 9
	   *    parser.set('h', 500);
	   *    var i = parser.eval('h / 2');           // 250
	   *    parser.set('hello', function (name) {
	   *        return 'hello, ' + name + '!';
	   *    });
	   *    parser.eval('hello("user")');           // "hello, user!"
	   *
	   *    // clear defined functions and variables
	   *    parser.clear();
	   *
	   */
	  function Parser() {
	    if (!(this instanceof Parser)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	    this.scope = {};
	  }

	  /**
	   * Attach type information
	   */
	  Parser.prototype.type = 'Parser';
	  Parser.prototype.isParser = true;

	  /**
	   * Parse an expression and return the parsed function node.
	   * The node tree can be compiled via `code = node.compile(math)`,
	   * and the compiled code can be executed as `code.eval([scope])`
	   * @param {string} expr
	   * @return {Node} node
	   * @throws {Error}
	   */
	  Parser.prototype.parse = function (expr) {
	    throw new Error('Parser.parse is deprecated. Use math.parse instead.');
	  };

	  /**
	   * Parse and compile an expression, return the compiled javascript code.
	   * The node can be evaluated via code.eval([scope])
	   * @param {string} expr
	   * @return {{eval: function}} code
	   * @throws {Error}
	   */
	  Parser.prototype.compile = function (expr) {
	    throw new Error('Parser.compile is deprecated. Use math.compile instead.');
	  };

	  /**
	   * Parse and evaluate the given expression
	   * @param {string} expr   A string containing an expression, for example "2+3"
	   * @return {*} result     The result, or undefined when the expression was empty
	   * @throws {Error}
	   */
	  Parser.prototype.eval = function (expr) {
	    // TODO: validate arguments
	    return _parse(expr).compile().eval(this.scope);
	  };

	  /**
	   * Get a variable (a function or variable) by name from the parsers scope.
	   * Returns undefined when not found
	   * @param {string} name
	   * @return {* | undefined} value
	   */
	  Parser.prototype.get = function (name) {
	    // TODO: validate arguments
	    return this.scope[name];
	  };

	  /**
	   * Get a map with all defined variables
	   * @return {Object} values
	   */
	  Parser.prototype.getAll = function () {
	    return extend({}, this.scope);
	  };

	  /**
	   * Set a symbol (a function or variable) by name from the parsers scope.
	   * @param {string} name
	   * @param {* | undefined} value
	   */
	  Parser.prototype.set = function (name, value) {
	    // TODO: validate arguments
	    return this.scope[name] = value;
	  };

	  /**
	   * Remove a variable from the parsers scope
	   * @param {string} name
	   */
	  Parser.prototype.remove = function (name) {
	    // TODO: validate arguments
	    delete this.scope[name];
	  };

	  /**
	   * Clear the scope with variables and functions
	   */
	  Parser.prototype.clear = function () {
	    for (var name in this.scope) {
	      if (this.scope.hasOwnProperty(name)) {
	        delete this.scope[name];
	      }
	    }
	  };

	  return Parser;
	}

	exports.name = 'Parser';
	exports.path = 'expression';
	exports.factory = factory;
	exports.math = true; // requires the math namespace as 5th argument

/***/ },
/* 466 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

		module.exports = [__webpack_require__(440), __webpack_require__(446), __webpack_require__(447), __webpack_require__(450), __webpack_require__(451), __webpack_require__(452), __webpack_require__(454), __webpack_require__(453), __webpack_require__(459), __webpack_require__(441), __webpack_require__(457), __webpack_require__(458), __webpack_require__(460), __webpack_require__(455), __webpack_require__(456), __webpack_require__(467)];

/***/ },
/* 467 */
/***/ function(module, exports) {

	'use strict';

	function factory(type, config, load, typed) {
	  /**
	   * @constructor UpdateNode
	   */
	  function UpdateNode() {
	    // TODO: deprecated since v3. Cleanup some day
	    throw new Error('UpdateNode is deprecated. Use AssignmentNode instead.');
	  }

	  return UpdateNode;
	}

	exports.name = 'UpdateNode';
	exports.path = 'expression.node';
	exports.factory = factory;

/***/ },
/* 468 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

		module.exports = [__webpack_require__(469), __webpack_require__(471), __webpack_require__(473), __webpack_require__(475), __webpack_require__(476), __webpack_require__(478), __webpack_require__(484), __webpack_require__(489), __webpack_require__(491), __webpack_require__(493)];

/***/ },
/* 469 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var errorTransform = __webpack_require__(444).transform;

	/**
	 * Attach a transform function to math.range
	 * Adds a property transform containing the transform function.
	 *
	 * This transform changed the last `dim` parameter of function concat
	 * from one-based to zero based
	 */
	function factory(type, config, load, typed) {
	  var concat = load(__webpack_require__(470));

	  // @see: comment of concat itself
	  return typed('concat', {
	    '...any': function any(args) {
	      // change last argument from one-based to zero-based
	      var lastIndex = args.length - 1;
	      var last = args[lastIndex];
	      if (typeof last === 'number') {
	        args[lastIndex] = last - 1;
	      } else if (last && last.isBigNumber === true) {
	        args[lastIndex] = last.minus(1);
	      }

	      try {
	        return concat.apply(null, args);
	      } catch (err) {
	        throw errorTransform(err);
	      }
	    }
	  });
	}

	exports.name = 'concat';
	exports.path = 'expression.transform';
	exports.factory = factory;

/***/ },
/* 470 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var clone = __webpack_require__(163).clone;
	var isInteger = __webpack_require__(166).isInteger;
	var array = __webpack_require__(200);
	var IndexError = __webpack_require__(203);
	var DimensionError = __webpack_require__(202);

	function factory(type, config, load, typed) {
	  var matrix = load(__webpack_require__(212));

	  /**
	   * Concatenate two or more matrices.
	   *
	   * Syntax:
	   *
	   *     math.concat(A, B, C, ...)
	   *     math.concat(A, B, C, ..., dim)
	   *
	   * Where:
	   *
	   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.
	   *   By default the last dimension of the matrices.
	   *
	   * Examples:
	   *
	   *    var A = [[1, 2], [5, 6]];
	   *    var B = [[3, 4], [7, 8]];
	   *
	   *    math.concat(A, B);                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]
	   *    math.concat(A, B, 0);               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]
	   *    math.concat('hello', ' ', 'world'); // returns 'hello world'
	   *
	   * See also:
	   *
	   *    size, squeeze, subset, transpose
	   *
	   * @param {... Array | Matrix} args     Two or more matrices
	   * @return {Array | Matrix} Concatenated matrix
	   */
	  var concat = typed('concat', {
	    // TODO: change signature to '...Array | Matrix, dim?' when supported
	    '...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumber(args) {
	      var i;
	      var len = args.length;
	      var dim = -1; // zero-based dimension
	      var prevDim;
	      var asMatrix = false;
	      var matrices = []; // contains multi dimensional arrays

	      for (i = 0; i < len; i++) {
	        var arg = args[i];

	        // test whether we need to return a Matrix (if not we return an Array)
	        if (arg && arg.isMatrix === true) {
	          asMatrix = true;
	        }

	        if (typeof arg === 'number' || arg && arg.isBigNumber === true) {
	          if (i !== len - 1) {
	            throw new Error('Dimension must be specified as last argument');
	          }

	          // last argument contains the dimension on which to concatenate
	          prevDim = dim;
	          dim = arg.valueOf(); // change BigNumber to number

	          if (!isInteger(dim)) {
	            throw new TypeError('Integer number expected for dimension');
	          }

	          if (dim < 0 || i > 0 && dim > prevDim) {
	            // TODO: would be more clear when throwing a DimensionError here
	            throw new IndexError(dim, prevDim + 1);
	          }
	        } else {
	          // this is a matrix or array
	          var m = clone(arg).valueOf();
	          var size = array.size(m);
	          matrices[i] = m;
	          prevDim = dim;
	          dim = size.length - 1;

	          // verify whether each of the matrices has the same number of dimensions
	          if (i > 0 && dim != prevDim) {
	            throw new DimensionError(prevDim + 1, dim + 1);
	          }
	        }
	      }

	      if (matrices.length == 0) {
	        throw new SyntaxError('At least one matrix expected');
	      }

	      var res = matrices.shift();
	      while (matrices.length) {
	        res = _concat(res, matrices.shift(), dim, 0);
	      }

	      return asMatrix ? matrix(res) : res;
	    },

	    '...string': function string(args) {
	      return args.join('');
	    }
	  });

	  concat.toTex = undefined; // use default template

	  return concat;
	}

	/**
	 * Recursively concatenate two matrices.
	 * The contents of the matrices is not cloned.
	 * @param {Array} a             Multi dimensional array
	 * @param {Array} b             Multi dimensional array
	 * @param {number} concatDim    The dimension on which to concatenate (zero-based)
	 * @param {number} dim          The current dim (zero-based)
	 * @return {Array} c            The concatenated matrix
	 * @private
	 */
	function _concat(a, b, concatDim, dim) {
	  if (dim < concatDim) {
	    // recurse into next dimension
	    if (a.length != b.length) {
	      throw new DimensionError(a.length, b.length);
	    }

	    var c = [];
	    for (var i = 0; i < a.length; i++) {
	      c[i] = _concat(a[i], b[i], concatDim, dim + 1);
	    }
	    return c;
	  } else {
	    // concatenate this dimension
	    return a.concat(b);
	  }
	}

	exports.name = 'concat';
	exports.factory = factory;

/***/ },
/* 471 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var maxArgumentCount = __webpack_require__(205).maxArgumentCount;

	/**
	 * Attach a transform function to math.filter
	 * Adds a property transform containing the transform function.
	 *
	 * This transform adds support for equations as test function for math.filter,
	 * so you can do something like 'filter([3, -2, 5], x > 0)'.
	 */
	function factory(type, config, load, typed) {
	  var filter = load(__webpack_require__(472));
	  var SymbolNode = load(__webpack_require__(456));

	  function filterTransform(args, math, scope) {
	    var x, test;

	    if (args[0]) {
	      x = args[0].compile().eval(scope);
	    }

	    if (args[1]) {
	      if (args[1] && args[1].isSymbolNode) {
	        // a function pointer, like filter([3, -2, 5], myTestFunction);
	        test = args[1].compile().eval(scope);
	      } else {
	        // an equation like filter([3, -2, 5], x > 0)

	        // find an undefined symbol
	        var _scope = scope || {};
	        var symbol = args[1].filter(function (node) {
	          return node && node.isSymbolNode && !(node.name in math) && !(node.name in _scope);
	        })[0];

	        // create a test function for this equation
	        var sub = Object.create(_scope);
	        var eq = args[1].compile();
	        if (symbol) {
	          var name = symbol.name;
	          test = function test(x) {
	            sub[name] = x;
	            return eq.eval(sub);
	          };
	        } else {
	          throw new Error('No undefined variable found in filter equation');
	        }
	      }
	    }

	    return filter(x, test);
	  }

	  filterTransform.rawArgs = true;

	  return filterTransform;
	}

	exports.name = 'filter';
	exports.path = 'expression.transform';
	exports.factory = factory;

/***/ },
/* 472 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var size = __webpack_require__(200).size;
	var maxArgumentCount = __webpack_require__(205).maxArgumentCount;

	function factory(type, config, load, typed) {
	  var matrix = load(__webpack_require__(212));

	  /**
	   * Filter the items in an array or one dimensional matrix.
	   *
	   * Syntax:
	   *
	   *    math.filter(x, test)
	   *
	   * Examples:
	   *
	   *    function isPositive (x) {
	   *      return x > 0;
	   *    }
	   *    math.filter([6, -2, -1, 4, 3], isPositive); // returns [6, 4, 3]
	   *
	   *    math.filter(["23", "foo", "100", "55", "bar"], /[0-9]+/); // returns ["23", "100", "55"]
	   *
	   * See also:
	   *
	   *    forEach, map, sort
	   *
	   * @param {Matrix | Array} x    A one dimensional matrix or array to filter
	   * @param {Function | RegExp} test
	   *        A function or regular expression to test items.
	   *        All entries for which `test` returns true are returned.
	   *        When `test` is a function, it is invoked with three parameters:
	   *        the value of the element, the index of the element, and the
	   *        matrix/array being traversed. The function must return a boolean.
	   * @return {Matrix | Array} Returns the filtered matrix.
	   */
	  var filter = typed('filter', {
	    'Array, function': _filterCallback,

	    'Array, RegExp': _filterRegExp,

	    'Matrix, function': function MatrixFunction(x, test) {
	      return matrix(_filterCallback(x.toArray(), test));
	    },

	    'Matrix, RegExp': function MatrixRegExp(x, test) {
	      return matrix(_filterRegExp(x.toArray(), test));
	    }
	  });

	  filter.toTex = undefined; // use default template

	  return filter;
	}

	/**
	 * Filter values in a callback given a callback function
	 * @param {Array} x
	 * @param {Function} callback
	 * @return {Array} Returns the filtered array
	 * @private
	 */
	function _filterCallback(x, callback) {
	  if (size(x).length !== 1) {
	    throw new Error('Only one dimensional matrices supported');
	  }

	  // figure out what number of arguments the callback function expects
	  var args = maxArgumentCount(callback);

	  return x.filter(function (value, index, array) {
	    // invoke the callback function with the right number of arguments
	    if (args === 1) {
	      return callback(value);
	    } else if (args === 2) {
	      return callback(value, [index]);
	    } else {
	      // 3 or -1
	      return callback(value, [index], array);
	    }
	  });
	}

	/**
	 * Filter values in a callback given a regular expression
	 * @param {Array} x
	 * @param {Function} regexp
	 * @return {Array} Returns the filtered array
	 * @private
	 */
	function _filterRegExp(x, regexp) {
	  if (size(x).length !== 1) {
	    throw new Error('Only one dimensional matrices supported');
	  }

	  return x.filter(function (entry) {
	    return regexp.test(entry);
	  });
	}

	exports.name = 'filter';
	exports.factory = factory;

/***/ },
/* 473 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var maxArgumentCount = __webpack_require__(205).maxArgumentCount;

	/**
	 * Attach a transform function to math.forEach
	 * Adds a property transform containing the transform function.
	 *
	 * This transform creates a one-based index instead of a zero-based index
	 */
	function factory(type, config, load, typed) {
	  var forEach = load(__webpack_require__(474));

	  return typed('forEach', {
	    'Array | Matrix, function': function ArrayMatrixFunction(array, callback) {
	      // figure out what number of arguments the callback function expects
	      var args = maxArgumentCount(callback);

	      var recurse = function recurse(value, index) {
	        if (Array.isArray(value)) {
	          value.forEach(function (child, i) {
	            // we create a copy of the index array and append the new index value
	            recurse(child, index.concat(i + 1)); // one based index, hence i+1
	          });
	        } else {
	          // invoke the callback function with the right number of arguments
	          if (args === 1) {
	            callback(value);
	          } else if (args === 2) {
	            callback(value, index);
	          } else {
	            // 3 or -1
	            callback(value, index, array);
	          }
	        }
	      };
	      recurse(array.valueOf(), []); // pass Array
	    }
	  });
	}

	exports.name = 'forEach';
	exports.path = 'expression.transform';
	exports.factory = factory;

/***/ },
/* 474 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var maxArgumentCount = __webpack_require__(205).maxArgumentCount;

	function factory(type, config, load, typed) {
	  /**
	   * Iterate over all elements of a matrix/array, and executes the given callback function.
	   *
	   * Syntax:
	   *
	   *    math.forEach(x, callback)
	   *
	   * Examples:
	   *
	   *    math.forEach([1, 2, 3], function(value) {
	   *      console.log(value);
	   *    });
	   *    // outputs 1, 2, 3
	   *
	   * See also:
	   *
	   *    filter, map, sort
	   *
	   * @param {Matrix | Array} x    The matrix to iterate on.
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix/array being traversed.
	   */
	  var forEach = typed('forEach', {
	    'Array, function': _forEach,

	    'Matrix, function': function MatrixFunction(x, callback) {
	      return x.forEach(callback);
	    }
	  });

	  forEach.toTex = undefined; // use default template

	  return forEach;
	}

	/**
	 * forEach for a multi dimensional array
	 * @param {Array} array
	 * @param {Function} callback
	 * @private
	 */
	function _forEach(array, callback) {
	  // figure out what number of arguments the callback function expects
	  var args = maxArgumentCount(callback);

	  var recurse = function recurse(value, index) {
	    if (Array.isArray(value)) {
	      value.forEach(function (child, i) {
	        // we create a copy of the index array and append the new index value
	        recurse(child, index.concat(i));
	      });
	    } else {
	      // invoke the callback function with the right number of arguments
	      if (args === 1) {
	        callback(value);
	      } else if (args === 2) {
	        callback(value, index);
	      } else {
	        // 3 or -1
	        callback(value, index, array);
	      }
	    }
	  };
	  recurse(array, []);
	}

	exports.name = 'forEach';
	exports.factory = factory;

/***/ },
/* 475 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isArray = Array.isArray;

	/**
	 * Attach a transform function to math.index
	 * Adds a property transform containing the transform function.
	 *
	 * This transform creates a one-based index instead of a zero-based index
	 */
	function factory(type, config, load) {
	  var indexFactory = load(__webpack_require__(228));

	  return function indexTransform() {
	    var args = [];
	    for (var i = 0, ii = arguments.length; i < ii; i++) {
	      var arg = arguments[i];

	      // change from one-based to zero based, and convert BigNumber to number
	      if (arg && arg.isRange === true) {
	        arg.start--;
	        arg.end -= arg.step > 0 ? 0 : 2;
	      } else if (arg && arg.isSet === true) {
	        arg = arg.map(function (v) {
	          return v - 1;
	        });
	      } else if (arg && (arg.isArray === true || arg.isMatrix)) {
	        arg = arg.map(function (v) {
	          return v - 1;
	        });
	      } else if (typeof arg === 'number') {
	        arg--;
	      } else if (arg && arg.isBigNumber === true) {
	        arg = arg.toNumber() - 1;
	      } else if (typeof arg === 'string') {
	        // leave as is
	      } else {
	        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');
	      }

	      args[i] = arg;
	    }

	    var res = new type.Index();
	    type.Index.apply(res, args);
	    return res;
	  };
	}

	exports.name = 'index';
	exports.path = 'expression.transform';
	exports.factory = factory;

/***/ },
/* 476 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var maxArgumentCount = __webpack_require__(205).maxArgumentCount;

	/**
	 * Attach a transform function to math.map
	 * Adds a property transform containing the transform function.
	 *
	 * This transform creates a one-based index instead of a zero-based index
	 */
	function factory(type, config, load, typed) {
	  var map = load(__webpack_require__(477));
	  var matrix = load(__webpack_require__(212));

	  return typed('max', {
	    'Array, function': function ArrayFunction(x, callback) {
	      return _map(x, callback, x);
	    },

	    'Matrix, function': function MatrixFunction(x, callback) {
	      return matrix(_map(x.valueOf(), callback, x));
	    }
	  });
	}

	/**
	 * Map for a multi dimensional array. One-based indexes
	 * @param {Array} array
	 * @param {function} callback
	 * @param {Array} orig
	 * @return {Array}
	 * @private
	 */
	function _map(array, callback, orig) {
	  // figure out what number of arguments the callback function expects
	  var args = maxArgumentCount(callback);

	  function recurse(value, index) {
	    if (Array.isArray(value)) {
	      return value.map(function (child, i) {
	        // we create a copy of the index array and append the new index value
	        return recurse(child, index.concat(i + 1)); // one based index, hence i + 1
	      });
	    } else {
	      // invoke the callback function with the right number of arguments
	      if (args === 1) {
	        return callback(value);
	      } else if (args === 2) {
	        return callback(value, index);
	      } else {
	        // 3 or -1
	        return callback(value, index, orig);
	      }
	    }
	  }

	  return recurse(array, []);
	}

	exports.name = 'map';
	exports.path = 'expression.transform';
	exports.factory = factory;

/***/ },
/* 477 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var maxArgumentCount = __webpack_require__(205).maxArgumentCount;

	function factory(type, config, load, typed) {
	  /**
	   * Create a new matrix or array with the results of the callback function executed on
	   * each entry of the matrix/array.
	   *
	   * Syntax:
	   *
	   *    math.map(x, callback)
	   *
	   * Examples:
	   *
	   *    math.map([1, 2, 3], function(value) {
	   *      return value * value;
	   *    });  // returns [1, 4, 9]
	   *
	   * See also:
	   *
	   *    filter, forEach, sort
	   *
	   * @param {Matrix | Array} x    The matrix to iterate on.
	   * @param {Function} callback   The callback method is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the matrix being traversed.
	   * @return {Matrix | array}     Transformed map of x
	   */
	  var map = typed('map', {
	    'Array, function': _map,

	    'Matrix, function': function MatrixFunction(x, callback) {
	      return x.map(callback);
	    }
	  });

	  map.toTex = undefined; // use default template

	  return map;
	}

	/**
	 * Map for a multi dimensional array
	 * @param {Array} array
	 * @param {Function} callback
	 * @return {Array}
	 * @private
	 */
	function _map(array, callback) {
	  // figure out what number of arguments the callback function expects
	  var args = maxArgumentCount(callback);

	  var recurse = function recurse(value, index) {
	    if (Array.isArray(value)) {
	      return value.map(function (child, i) {
	        // we create a copy of the index array and append the new index value
	        return recurse(child, index.concat(i));
	      });
	    } else {
	      // invoke the callback function with the right number of arguments
	      if (args === 1) {
	        return callback(value);
	      } else if (args === 2) {
	        return callback(value, index);
	      } else {
	        // 3 or -1
	        return callback(value, index, array);
	      }
	    }
	  };

	  return recurse(array, []);
	}

	exports.name = 'map';
	exports.factory = factory;

/***/ },
/* 478 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var errorTransform = __webpack_require__(444).transform;
	var isCollection = __webpack_require__(479);

	/**
	 * Attach a transform function to math.max
	 * Adds a property transform containing the transform function.
	 *
	 * This transform changed the last `dim` parameter of function max
	 * from one-based to zero based
	 */
	function factory(type, config, load, typed) {
	  var max = load(__webpack_require__(480));

	  return typed('max', {
	    '...any': function any(args) {
	      // change last argument dim from one-based to zero-based
	      if (args.length == 2 && isCollection(args[0])) {
	        var dim = args[1];
	        if (typeof dim === 'number') {
	          args[1] = dim - 1;
	        } else if (dim && dim.isBigNumber === true) {
	          args[1] = dim.minus(1);
	        }
	      }

	      try {
	        return max.apply(null, args);
	      } catch (err) {
	        throw errorTransform(err);
	      }
	    }
	  });
	}

	exports.name = 'max';
	exports.path = 'expression.transform';
	exports.factory = factory;

/***/ },
/* 479 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Test whether a value is a collection: an Array or Matrix
	 * @param {*} x
	 * @returns {boolean} isCollection
	 */

	module.exports = function isCollection(x) {
	  return Array.isArray(x) || x && x.isMatrix === true;
	};

/***/ },
/* 480 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepForEach = __webpack_require__(481);
	var reduce = __webpack_require__(482);
	var containsCollections = __webpack_require__(483);

	function factory(type, config, load, typed) {
	  var larger = load(__webpack_require__(224));

	  /**
	   * Compute the maximum value of a matrix or a  list with values.
	   * In case of a multi dimensional array, the maximum of the flattened array
	   * will be calculated. When `dim` is provided, the maximum over the selected
	   * dimension will be calculated. Parameter `dim` is zero-based.
	   *
	   * Syntax:
	   *
	   *     math.max(a, b, c, ...)
	   *     math.max(A)
	   *     math.max(A, dim)
	   *
	   * Examples:
	   *
	   *     math.max(2, 1, 4, 3);                  // returns 4
	   *     math.max([2, 1, 4, 3]);                // returns 4
	   *
	   *     // maximum over a specified dimension (zero-based)
	   *     math.max([[2, 5], [4, 3], [1, 7]], 0); // returns [4, 7]
	   *     math.max([[2, 5], [4, 3]], [1, 7], 1); // returns [5, 4, 7]
	   *
	   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1);    // returns 7.1
	   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1);    // returns -4.5
	   *
	   * See also:
	   *
	   *    mean, median, min, prod, std, sum, var
	   *
	   * @param {... *} args  A single matrix or or multiple scalar values
	   * @return {*} The maximum value
	   */
	  var max = typed('max', {
	    // max([a, b, c, d, ...])
	    'Array | Matrix': _max,

	    // max([a, b, c, d, ...], dim)
	    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
	      return reduce(array, dim.valueOf(), _largest);
	    },

	    // max(a, b, c, d, ...)
	    '...': function _(args) {
	      if (containsCollections(args)) {
	        throw new TypeError('Scalar values expected in function max');
	      }

	      return _max(args);
	    }
	  });

	  max.toTex = '\\max\\left(${args}\\right)';

	  return max;

	  /**
	   * Return the largest of two values
	   * @param {*} x
	   * @param {*} y
	   * @returns {*} Returns x when x is largest, or y when y is largest
	   * @private
	   */
	  function _largest(x, y) {
	    return larger(x, y) ? x : y;
	  }

	  /**
	   * Recursively calculate the maximum value in an n-dimensional array
	   * @param {Array} array
	   * @return {number} max
	   * @private
	   */
	  function _max(array) {
	    var max = undefined;

	    deepForEach(array, function (value) {
	      if (max === undefined || larger(value, max)) {
	        max = value;
	      }
	    });

	    if (max === undefined) {
	      throw new Error('Cannot calculate max of an empty array');
	    }

	    return max;
	  }
	}

	exports.name = 'max';
	exports.factory = factory;

/***/ },
/* 481 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Recursively loop over all elements in a given multi dimensional array
	 * and invoke the callback on each of the elements.
	 * @param {Array | Matrix} array
	 * @param {Function} callback     The callback method is invoked with one
	 *                                parameter: the current element in the array
	 */

	module.exports = function deepForEach(array, callback) {
	  if (array && array.isMatrix === true) {
	    array = array.valueOf();
	  }

	  for (var i = 0, ii = array.length; i < ii; i++) {
	    var value = array[i];

	    if (Array.isArray(value)) {
	      deepForEach(value, callback);
	    } else {
	      callback(value);
	    }
	  }
	};

/***/ },
/* 482 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var arraySize = __webpack_require__(200).size;
	var IndexError = __webpack_require__(203);

	/**
	 * Reduce a given matrix or array to a new matrix or
	 * array with one less dimension, applying the given
	 * callback in the selected dimension.
	 * @param {Array | Matrix} mat
	 * @param {number} dim
	 * @param {Function} callback
	 * @return {Array | Matrix} res
	 */
	module.exports = function (mat, dim, callback) {
	  var size = Array.isArray(mat) ? arraySize(mat) : mat.size();
	  if (dim < 0 || dim >= size.length) {
	    // TODO: would be more clear when throwing a DimensionError here
	    throw new IndexError(dim, size.length);
	  }

	  if (mat && mat.isMatrix === true) {
	    return mat.create(_reduce(mat.valueOf(), dim, callback));
	  } else {
	    return _reduce(mat, dim, callback);
	  }
	};

	/**
	 * Recursively reduce a matrix
	 * @param {Array} mat
	 * @param {number} dim
	 * @param {Function} callback
	 * @returns {Array} ret
	 * @private
	 */
	function _reduce(mat, dim, callback) {
	  var i, ret, val, tran;

	  if (dim <= 0) {
	    if (!Array.isArray(mat[0])) {
	      val = mat[0];
	      for (i = 1; i < mat.length; i++) {
	        val = callback(val, mat[i]);
	      }
	      return val;
	    } else {
	      tran = _switch(mat);
	      ret = [];
	      for (i = 0; i < tran.length; i++) {
	        ret[i] = _reduce(tran[i], dim - 1, callback);
	      }
	      return ret;
	    }
	  } else {
	    ret = [];
	    for (i = 0; i < mat.length; i++) {
	      ret[i] = _reduce(mat[i], dim - 1, callback);
	    }
	    return ret;
	  }
	}

	/**
	 * Transpose a matrix
	 * @param {Array} mat
	 * @returns {Array} ret
	 * @private
	 */
	function _switch(mat) {
	  var I = mat.length;
	  var J = mat[0].length;
	  var i, j;
	  var ret = [];
	  for (j = 0; j < J; j++) {
	    var tmp = [];
	    for (i = 0; i < I; i++) {
	      tmp.push(mat[i][j]);
	    }
	    ret.push(tmp);
	  }
	  return ret;
	}

/***/ },
/* 483 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isCollection = __webpack_require__(479);

	/**
	 * Test whether an array contains collections
	 * @param {Array} array
	 * @returns {boolean} Returns true when the array contains one or multiple
	 *                    collections (Arrays or Matrices). Returns false otherwise.
	 */
	module.exports = function containsCollections(array) {
	  for (var i = 0; i < array.length; i++) {
	    if (isCollection(array[i])) {
	      return true;
	    }
	  }
	  return false;
	};

/***/ },
/* 484 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var errorTransform = __webpack_require__(444).transform;
	var isCollection = __webpack_require__(479);

	/**
	 * Attach a transform function to math.mean
	 * Adds a property transform containing the transform function.
	 *
	 * This transform changed the last `dim` parameter of function mean
	 * from one-based to zero based
	 */
	function factory(type, config, load, typed) {
	  var mean = load(__webpack_require__(485));

	  return typed('mean', {
	    '...any': function any(args) {
	      // change last argument dim from one-based to zero-based
	      if (args.length == 2 && isCollection(args[0])) {
	        var dim = args[1];
	        if (typeof dim === 'number') {
	          args[1] = dim - 1;
	        } else if (dim && dim.isBigNumber === true) {
	          args[1] = dim.minus(1);
	        }
	      }

	      try {
	        return mean.apply(null, args);
	      } catch (err) {
	        throw errorTransform(err);
	      }
	    }
	  });
	}

	exports.name = 'mean';
	exports.path = 'expression.transform';
	exports.factory = factory;

/***/ },
/* 485 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var size = __webpack_require__(200).size;
	var deepForEach = __webpack_require__(481);
	var reduce = __webpack_require__(482);
	var containsCollections = __webpack_require__(483);

	function factory(type, config, load, typed) {
	  var add = load(__webpack_require__(211));
	  var divide = load(__webpack_require__(486));

	  /**
	   * Compute the mean value of matrix or a list with values.
	   * In case of a multi dimensional array, the mean of the flattened array
	   * will be calculated. When `dim` is provided, the maximum over the selected
	   * dimension will be calculated. Parameter `dim` is zero-based.
	   *
	   * Syntax:
	   *
	   *     math.mean(a, b, c, ...)
	   *     math.mean(A)
	   *     math.mean(A, dim)
	   *
	   * Examples:
	   *
	   *     math.mean(2, 1, 4, 3);                     // returns 2.5
	   *     math.mean([1, 2.7, 3.2, 4]);               // returns 2.725
	   *
	   *     math.mean([[2, 5], [6, 3], [1, 7]], 0);    // returns [3, 5]
	   *     math.mean([[2, 5], [6, 3], [1, 7]], 1);    // returns [3.5, 4.5, 4]
	   *
	   * See also:
	   *
	   *     median, min, max, sum, prod, std, var
	   *
	   * @param {... *} args  A single matrix or or multiple scalar values
	   * @return {*} The mean of all values
	   */
	  var mean = typed('mean', {
	    // mean([a, b, c, d, ...])
	    'Array | Matrix': _mean,

	    // mean([a, b, c, d, ...], dim)
	    'Array | Matrix, number | BigNumber': _nmean,

	    // mean(a, b, c, d, ...)
	    '...': function _(args) {
	      if (containsCollections(args)) {
	        throw new TypeError('Scalar values expected in function mean');
	      }

	      return _mean(args);
	    }
	  });

	  mean.toTex = undefined; // use default template

	  return mean;

	  /**
	   * Calculate the mean value in an n-dimensional array, returning a
	   * n-1 dimensional array
	   * @param {Array} array
	   * @param {number} dim
	   * @return {number} mean
	   * @private
	   */
	  function _nmean(array, dim) {
	    var sum = reduce(array, dim, add);
	    var s = Array.isArray(array) ? size(array) : array.size();
	    return divide(sum, s[dim]);
	  }

	  /**
	   * Recursively calculate the mean value in an n-dimensional array
	   * @param {Array} array
	   * @return {number} mean
	   * @private
	   */
	  function _mean(array) {
	    var sum = 0;
	    var num = 0;

	    deepForEach(array, function (value) {
	      sum = add(sum, value);
	      num++;
	    });

	    if (num === 0) {
	      throw new Error('Cannot calculate mean of an empty array');
	    }

	    return divide(sum, num);
	  }
	}

	exports.name = 'mean';
	exports.factory = factory;

/***/ },
/* 486 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var extend = __webpack_require__(163).extend;

	function factory(type, config, load, typed) {

	  var divideScalar = load(__webpack_require__(241));
	  var multiply = load(__webpack_require__(244));
	  var inv = load(__webpack_require__(487));
	  var matrix = load(__webpack_require__(212));

	  var algorithm11 = load(__webpack_require__(245));
	  var algorithm14 = load(__webpack_require__(218));

	  /**
	   * Divide two values, `x / y`.
	   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.
	   *
	   * Syntax:
	   *
	   *    math.divide(x, y)
	   *
	   * Examples:
	   *
	   *    math.divide(2, 3);            // returns number 0.6666666666666666
	   *
	   *    var a = math.complex(5, 14);
	   *    var b = math.complex(4, 1);
	   *    math.divide(a, b);            // returns Complex 2 + 3i
	   *
	   *    var c = [[7, -6], [13, -4]];
	   *    var d = [[1, 2], [4, 3]];
	   *    math.divide(c, d);            // returns Array [[-9, 4], [-11, 6]]
	   *
	   *    var e = math.unit('18 km');
	   *    math.divide(e, 4.5);          // returns Unit 4 km
	   *
	   * See also:
	   *
	   *    multiply
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`
	   */
	  var divide = typed('divide', extend({
	    // we extend the signatures of divideScalar with signatures dealing with matrices

	    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(x, y) {
	      // TODO: implement matrix right division using pseudo inverse
	      // http://www.mathworks.nl/help/matlab/ref/mrdivide.html
	      // http://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html
	      // http://stackoverflow.com/questions/12263932/how-does-gnu-octave-matrix-division-work-getting-unexpected-behaviour
	      return multiply(x, inv(y));
	    },

	    'Matrix, any': function MatrixAny(x, y) {
	      // result
	      var c;

	      // process storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm11(x, y, divideScalar, false);
	          break;
	        case 'dense':
	          c = algorithm14(x, y, divideScalar, false);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, divideScalar, false).valueOf();
	    },

	    'any, Array | Matrix': function anyArrayMatrix(x, y) {
	      return multiply(x, inv(y));
	    }
	  }, divideScalar.signatures));

	  divide.toTex = { 2: '\\frac{${args[0]}}{${args[1]}}' };

	  return divide;
	}

	exports.name = 'divide';
	exports.factory = factory;

/***/ },
/* 487 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__(199);

	function factory(type, config, load, typed) {
	  var matrix = load(__webpack_require__(212));
	  var divideScalar = load(__webpack_require__(241));
	  var addScalar = load(__webpack_require__(213));
	  var multiply = load(__webpack_require__(244));
	  var unaryMinus = load(__webpack_require__(238));
	  var det = load(__webpack_require__(488));
	  var eye = load(__webpack_require__(243));

	  /**
	   * Calculate the inverse of a square matrix.
	   *
	   * Syntax:
	   *
	   *     math.inv(x)
	   *
	   * Examples:
	   *
	   *     math.inv([[1, 2], [3, 4]]);  // returns [[-2, 1], [1.5, -0.5]]
	   *     math.inv(4);                 // returns 0.25
	   *     1 / 4;                       // returns 0.25
	   *
	   * See also:
	   *
	   *     det, transpose
	   *
	   * @param {number | Complex | Array | Matrix} x     Matrix to be inversed
	   * @return {number | Complex | Array | Matrix} The inverse of `x`.
	   */
	  var inv = typed('inv', {
	    'Array | Matrix': function ArrayMatrix(x) {
	      var size = x.isMatrix === true ? x.size() : util.array.size(x);
	      switch (size.length) {
	        case 1:
	          // vector
	          if (size[0] == 1) {
	            if (x.isMatrix === true) {
	              return matrix([divideScalar(1, x.valueOf()[0])]);
	            } else {
	              return [divideScalar(1, x[0])];
	            }
	          } else {
	            throw new RangeError('Matrix must be square ' + '(size: ' + util.string.format(size) + ')');
	          }

	        case 2:
	          // two dimensional array
	          var rows = size[0];
	          var cols = size[1];
	          if (rows == cols) {
	            if (x.isMatrix === true) {
	              return matrix(_inv(x.valueOf(), rows, cols), x.storage());
	            } else {
	              // return an Array
	              return _inv(x, rows, cols);
	            }
	          } else {
	            throw new RangeError('Matrix must be square ' + '(size: ' + util.string.format(size) + ')');
	          }

	        default:
	          // multi dimensional array
	          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + util.string.format(size) + ')');
	      }
	    },

	    'any': function any(x) {
	      // scalar
	      return divideScalar(1, x); // FIXME: create a BigNumber one when configured for bignumbers
	    }
	  });

	  /**
	   * Calculate the inverse of a square matrix
	   * @param {Array[]} mat     A square matrix
	   * @param {number} rows     Number of rows
	   * @param {number} cols     Number of columns, must equal rows
	   * @return {Array[]} inv    Inverse matrix
	   * @private
	   */
	  function _inv(mat, rows, cols) {
	    var r, s, f, value, temp;

	    if (rows == 1) {
	      // this is a 1 x 1 matrix
	      value = mat[0][0];
	      if (value == 0) {
	        throw Error('Cannot calculate inverse, determinant is zero');
	      }
	      return [[divideScalar(1, value)]];
	    } else if (rows == 2) {
	      // this is a 2 x 2 matrix
	      var d = det(mat);
	      if (d == 0) {
	        throw Error('Cannot calculate inverse, determinant is zero');
	      }
	      return [[divideScalar(mat[1][1], d), divideScalar(unaryMinus(mat[0][1]), d)], [divideScalar(unaryMinus(mat[1][0]), d), divideScalar(mat[0][0], d)]];
	    } else {
	      // this is a matrix of 3 x 3 or larger
	      // calculate inverse using gauss-jordan elimination
	      //      http://en.wikipedia.org/wiki/Gaussian_elimination
	      //      http://mathworld.wolfram.com/MatrixInverse.html
	      //      http://math.uww.edu/~mcfarlat/inverse.htm

	      // make a copy of the matrix (only the arrays, not of the elements)
	      var A = mat.concat();
	      for (r = 0; r < rows; r++) {
	        A[r] = A[r].concat();
	      }

	      // create an identity matrix which in the end will contain the
	      // matrix inverse
	      var B = eye(rows).valueOf();

	      // loop over all columns, and perform row reductions
	      for (var c = 0; c < cols; c++) {
	        // element Acc should be non zero. if not, swap content
	        // with one of the lower rows
	        r = c;
	        while (r < rows && A[r][c] == 0) {
	          r++;
	        }
	        if (r == rows || A[r][c] == 0) {
	          // TODO: in case of zero det, just return a matrix wih Infinity values? (like octave)
	          throw Error('Cannot calculate inverse, determinant is zero');
	        }
	        if (r != c) {
	          temp = A[c];A[c] = A[r];A[r] = temp;
	          temp = B[c];B[c] = B[r];B[r] = temp;
	        }

	        // eliminate non-zero values on the other rows at column c
	        var Ac = A[c],
	            Bc = B[c];
	        for (r = 0; r < rows; r++) {
	          var Ar = A[r],
	              Br = B[r];
	          if (r != c) {
	            // eliminate value at column c and row r
	            if (Ar[c] != 0) {
	              f = divideScalar(unaryMinus(Ar[c]), Ac[c]);

	              // add (f * row c) to row r to eliminate the value
	              // at column c
	              for (s = c; s < cols; s++) {
	                Ar[s] = addScalar(Ar[s], multiply(f, Ac[s]));
	              }
	              for (s = 0; s < cols; s++) {
	                Br[s] = addScalar(Br[s], multiply(f, Bc[s]));
	              }
	            }
	          } else {
	            // normalize value at Acc to 1,
	            // divide each value on row r with the value at Acc
	            f = Ac[c];
	            for (s = c; s < cols; s++) {
	              Ar[s] = divideScalar(Ar[s], f);
	            }
	            for (s = 0; s < cols; s++) {
	              Br[s] = divideScalar(Br[s], f);
	            }
	          }
	        }
	      }
	      return B;
	    }
	  }

	  inv.toTex = { 1: '\\left(${args[0]}\\right)^{-1}' };

	  return inv;
	}

	exports.name = 'inv';
	exports.factory = factory;

/***/ },
/* 488 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__(199);
	var object = util.object;
	var string = util.string;

	function factory(type, config, load, typed) {
	  var matrix = load(__webpack_require__(212));
	  var add = load(__webpack_require__(211));
	  var subtract = load(__webpack_require__(237));
	  var multiply = load(__webpack_require__(244));
	  var unaryMinus = load(__webpack_require__(238));

	  /**
	   * Calculate the determinant of a matrix.
	   *
	   * Syntax:
	   *
	   *    math.det(x)
	   *
	   * Examples:
	   *
	   *    math.det([[1, 2], [3, 4]]); // returns -2
	   *
	   *    var A = [
	   *      [-2, 2, 3],
	   *      [-1, 1, 3],
	   *      [2, 0, -1]
	   *    ]
	   *    math.det(A); // returns 6
	   *
	   * See also:
	   *
	   *    inv
	   *
	   * @param {Array | Matrix} x  A matrix
	   * @return {number} The determinant of `x`
	   */
	  var det = typed('det', {
	    'any': function any(x) {
	      return object.clone(x);
	    },

	    'Array | Matrix': function det(x) {
	      var size;
	      if (x && x.isMatrix === true) {
	        size = x.size();
	      } else if (Array.isArray(x)) {
	        x = matrix(x);
	        size = x.size();
	      } else {
	        // a scalar
	        size = [];
	      }

	      switch (size.length) {
	        case 0:
	          // scalar
	          return object.clone(x);

	        case 1:
	          // vector
	          if (size[0] == 1) {
	            return object.clone(x.valueOf()[0]);
	          } else {
	            throw new RangeError('Matrix must be square ' + '(size: ' + string.format(size) + ')');
	          }

	        case 2:
	          // two dimensional array
	          var rows = size[0];
	          var cols = size[1];
	          if (rows == cols) {
	            return _det(x.clone().valueOf(), rows, cols);
	          } else {
	            throw new RangeError('Matrix must be square ' + '(size: ' + string.format(size) + ')');
	          }

	        default:
	          // multi dimensional array
	          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + string.format(size) + ')');
	      }
	    }
	  });

	  det.toTex = { 1: '\\det\\left(${args[0]}\\right)' };

	  return det;

	  /**
	   * Calculate the determinant of a matrix
	   * @param {Array[]} matrix  A square, two dimensional matrix
	   * @param {number} rows     Number of rows of the matrix (zero-based)
	   * @param {number} cols     Number of columns of the matrix (zero-based)
	   * @returns {number} det
	   * @private
	   */
	  function _det(matrix, rows, cols) {
	    if (rows == 1) {
	      // this is a 1 x 1 matrix
	      return object.clone(matrix[0][0]);
	    } else if (rows == 2) {
	      // this is a 2 x 2 matrix
	      // the determinant of [a11,a12;a21,a22] is det = a11*a22-a21*a12
	      return subtract(multiply(matrix[0][0], matrix[1][1]), multiply(matrix[1][0], matrix[0][1]));
	    } else {
	      // this is an n x n matrix
	      var compute_mu = function compute_mu(matrix) {
	        var i, j;

	        // Compute the matrix with zero lower triangle, same upper triangle,
	        // and diagonals given by the negated sum of the below diagonal
	        // elements.
	        var mu = new Array(matrix.length);
	        var sum = 0;
	        for (i = 1; i < matrix.length; i++) {
	          sum = add(sum, matrix[i][i]);
	        }

	        for (i = 0; i < matrix.length; i++) {
	          mu[i] = new Array(matrix.length);
	          mu[i][i] = unaryMinus(sum);

	          for (j = 0; j < i; j++) {
	            mu[i][j] = 0; // TODO: make bignumber 0 in case of bignumber computation
	          }

	          for (j = i + 1; j < matrix.length; j++) {
	            mu[i][j] = matrix[i][j];
	          }

	          if (i + 1 < matrix.length) {
	            sum = subtract(sum, matrix[i + 1][i + 1]);
	          }
	        }

	        return mu;
	      };

	      var fa = matrix;
	      for (var i = 0; i < rows - 1; i++) {
	        fa = multiply(compute_mu(fa), matrix);
	      }

	      if (rows % 2 == 0) {
	        return unaryMinus(fa[0][0]);
	      } else {
	        return fa[0][0];
	      }
	    }
	  }
	}

	exports.name = 'det';
	exports.factory = factory;

/***/ },
/* 489 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var errorTransform = __webpack_require__(444).transform;
	var isCollection = __webpack_require__(479);

	/**
	 * Attach a transform function to math.min
	 * Adds a property transform containing the transform function.
	 *
	 * This transform changed the last `dim` parameter of function min
	 * from one-based to zero based
	 */
	function factory(type, config, load, typed) {
	  var min = load(__webpack_require__(490));

	  return typed('min', {
	    '...any': function any(args) {
	      // change last argument dim from one-based to zero-based
	      if (args.length == 2 && isCollection(args[0])) {
	        var dim = args[1];
	        if (typeof dim === 'number') {
	          args[1] = dim - 1;
	        } else if (dim && dim.isBigNumber === true) {
	          args[1] = dim.minus(1);
	        }
	      }

	      try {
	        return min.apply(null, args);
	      } catch (err) {
	        throw errorTransform(err);
	      }
	    }
	  });
	}

	exports.name = 'min';
	exports.path = 'expression.transform';
	exports.factory = factory;

/***/ },
/* 490 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepForEach = __webpack_require__(481);
	var reduce = __webpack_require__(482);
	var containsCollections = __webpack_require__(483);

	function factory(type, config, load, typed) {
	  var smaller = load(__webpack_require__(220));

	  /**
	   * Compute the maximum value of a matrix or a  list of values.
	   * In case of a multi dimensional array, the maximum of the flattened array
	   * will be calculated. When `dim` is provided, the maximum over the selected
	   * dimension will be calculated. Parameter `dim` is zero-based.
	   *
	   * Syntax:
	   *
	   *     math.min(a, b, c, ...)
	   *     math.min(A)
	   *     math.min(A, dim)
	   *
	   * Examples:
	   *
	   *     math.min(2, 1, 4, 3);                  // returns 1
	   *     math.min([2, 1, 4, 3]);                // returns 1
	   *
	   *     // maximum over a specified dimension (zero-based)
	   *     math.min([[2, 5], [4, 3], [1, 7]], 0); // returns [1, 3]
	   *     math.min([[2, 5], [4, 3], [1, 7]], 1); // returns [2, 3, 1]
	   *
	   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1);    // returns 7.1
	   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1);    // returns -4.5
	   *
	   * See also:
	   *
	   *    mean, median, max, prod, std, sum, var
	   *
	   * @param {... *} args  A single matrix or or multiple scalar values
	   * @return {*} The minimum value
	   */
	  var min = typed('min', {
	    // min([a, b, c, d, ...])
	    'Array | Matrix': _min,

	    // min([a, b, c, d, ...], dim)
	    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
	      return reduce(array, dim.valueOf(), _smallest);
	    },

	    // min(a, b, c, d, ...)
	    '...': function _(args) {
	      if (containsCollections(args)) {
	        throw new TypeError('Scalar values expected in function min');
	      }

	      return _min(args);
	    }
	  });

	  min.toTex = '\\min\\left(${args}\\right)';

	  return min;

	  /**
	   * Return the smallest of two values
	   * @param {*} x
	   * @param {*} y
	   * @returns {*} Returns x when x is smallest, or y when y is smallest
	   * @private
	   */
	  function _smallest(x, y) {
	    return smaller(x, y) ? x : y;
	  }

	  /**
	   * Recursively calculate the minimum value in an n-dimensional array
	   * @param {Array} array
	   * @return {number} min
	   * @private
	   */
	  function _min(array) {
	    var min = undefined;

	    deepForEach(array, function (value) {
	      if (min === undefined || smaller(value, min)) {
	        min = value;
	      }
	    });

	    if (min === undefined) {
	      throw new Error('Cannot calculate min of an empty array');
	    }

	    return min;
	  }
	}

	exports.name = 'min';
	exports.factory = factory;

/***/ },
/* 491 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Attach a transform function to math.range
	 * Adds a property transform containing the transform function.
	 *
	 * This transform creates a range which includes the end value
	 */

	function factory(type, config, load, typed) {
	  var range = load(__webpack_require__(492));

	  return typed('range', {
	    '...any': function any(args) {
	      var lastIndex = args.length - 1;
	      var last = args[lastIndex];
	      if (typeof last !== 'boolean') {
	        // append a parameter includeEnd=true
	        args.push(true);
	      }

	      return range.apply(null, args);
	    }
	  });
	}

	exports.name = 'range';
	exports.path = 'expression.transform';
	exports.factory = factory;

/***/ },
/* 492 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load, typed) {
	  var matrix = load(__webpack_require__(212));

	  var ZERO = new type.BigNumber(0);
	  var ONE = new type.BigNumber(1);

	  /**
	   * Create an array from a range.
	   * By default, the range end is excluded. This can be customized by providing
	   * an extra parameter `includeEnd`.
	   *
	   * Syntax:
	   *
	   *     math.range(str [, includeEnd])               // Create a range from a string,
	   *                                                  // where the string contains the
	   *                                                  // start, optional step, and end,
	   *                                                  // separated by a colon.
	   *     math.range(start, end [, includeEnd])        // Create a range with start and
	   *                                                  // end and a step size of 1.
	   *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,
	   *                                                  // and end.
	   *
	   * Where:
	   *
	   * - `str: string`
	   *   A string 'start:end' or 'start:step:end'
	   * - `start: {number | BigNumber}`
	   *   Start of the range
	   * - `end: number | BigNumber`
	   *   End of the range, excluded by default, included when parameter includeEnd=true
	   * - `step: number | BigNumber`
	   *   Step size. Default value is 1.
	   * - `includeEnd: boolean`
	   *   Option to specify whether to include the end or not. False by default.
	   *
	   * Examples:
	   *
	   *     math.range(2, 6);        // [2, 3, 4, 5]
	   *     math.range(2, -3, -1);   // [2, 1, 0, -1, -2]
	   *     math.range('2:1:6');     // [2, 3, 4, 5]
	   *     math.range(2, 6, true);  // [2, 3, 4, 5, 6]
	   *
	   * See also:
	   *
	   *     ones, zeros, size, subset
	   *
	   * @param {*} args   Parameters describing the ranges `start`, `end`, and optional `step`.
	   * @return {Array | Matrix} range
	   */
	  var range = typed('range', {
	    // TODO: simplify signatures when typed-function supports default values and optional arguments

	    // TODO: a number or boolean should not be converted to string here
	    'string': _strRange,
	    'string, boolean': _strRange,

	    'number, number': function numberNumber(start, end) {
	      return _out(_rangeEx(start, end, 1));
	    },
	    'number, number, number': function numberNumberNumber(start, end, step) {
	      return _out(_rangeEx(start, end, step));
	    },
	    'number, number, boolean': function numberNumberBoolean(start, end, includeEnd) {
	      return includeEnd ? _out(_rangeInc(start, end, 1)) : _out(_rangeEx(start, end, 1));
	    },
	    'number, number, number, boolean': function numberNumberNumberBoolean(start, end, step, includeEnd) {
	      return includeEnd ? _out(_rangeInc(start, end, step)) : _out(_rangeEx(start, end, step));
	    },

	    'BigNumber, BigNumber': function BigNumberBigNumber(start, end) {
	      return _out(_bigRangeEx(start, end, ONE));
	    },
	    'BigNumber, BigNumber, BigNumber': function BigNumberBigNumberBigNumber(start, end, step) {
	      return _out(_bigRangeEx(start, end, step));
	    },
	    'BigNumber, BigNumber, boolean': function BigNumberBigNumberBoolean(start, end, includeEnd) {
	      return includeEnd ? _out(_bigRangeInc(start, end, ONE)) : _out(_bigRangeEx(start, end, ONE));
	    },
	    'BigNumber, BigNumber, BigNumber, boolean': function BigNumberBigNumberBigNumberBoolean(start, end, step, includeEnd) {
	      return includeEnd ? _out(_bigRangeInc(start, end, step)) : _out(_bigRangeEx(start, end, step));
	    }

	  });

	  range.toTex = undefined; // use default template

	  return range;

	  function _out(arr) {
	    return config.matrix === 'Array' ? arr : matrix(arr);
	  }

	  function _strRange(str, includeEnd) {
	    var r = _parse(str);
	    if (!r) {
	      throw new SyntaxError('String "' + str + '" is no valid range');
	    }

	    var fn;
	    if (config.number === 'BigNumber') {
	      fn = includeEnd ? _bigRangeInc : _bigRangeEx;
	      return _out(fn(new type.BigNumber(r.start), new type.BigNumber(r.end), new type.BigNumber(r.step)));
	    } else {
	      fn = includeEnd ? _rangeInc : _rangeEx;
	      return _out(fn(r.start, r.end, r.step));
	    }
	  }

	  /**
	   * Create a range with numbers. End is excluded
	   * @param {number} start
	   * @param {number} end
	   * @param {number} step
	   * @returns {Array} range
	   * @private
	   */
	  function _rangeEx(start, end, step) {
	    var array = [],
	        x = start;
	    if (step > 0) {
	      while (x < end) {
	        array.push(x);
	        x += step;
	      }
	    } else if (step < 0) {
	      while (x > end) {
	        array.push(x);
	        x += step;
	      }
	    }

	    return array;
	  }

	  /**
	   * Create a range with numbers. End is included
	   * @param {number} start
	   * @param {number} end
	   * @param {number} step
	   * @returns {Array} range
	   * @private
	   */
	  function _rangeInc(start, end, step) {
	    var array = [],
	        x = start;
	    if (step > 0) {
	      while (x <= end) {
	        array.push(x);
	        x += step;
	      }
	    } else if (step < 0) {
	      while (x >= end) {
	        array.push(x);
	        x += step;
	      }
	    }

	    return array;
	  }

	  /**
	   * Create a range with big numbers. End is excluded
	   * @param {BigNumber} start
	   * @param {BigNumber} end
	   * @param {BigNumber} step
	   * @returns {Array} range
	   * @private
	   */
	  function _bigRangeEx(start, end, step) {
	    var array = [],
	        x = start;
	    if (step.gt(ZERO)) {
	      while (x.lt(end)) {
	        array.push(x);
	        x = x.plus(step);
	      }
	    } else if (step.lt(ZERO)) {
	      while (x.gt(end)) {
	        array.push(x);
	        x = x.plus(step);
	      }
	    }

	    return array;
	  }

	  /**
	   * Create a range with big numbers. End is included
	   * @param {BigNumber} start
	   * @param {BigNumber} end
	   * @param {BigNumber} step
	   * @returns {Array} range
	   * @private
	   */
	  function _bigRangeInc(start, end, step) {
	    var array = [],
	        x = start;
	    if (step.gt(ZERO)) {
	      while (x.lte(end)) {
	        array.push(x);
	        x = x.plus(step);
	      }
	    } else if (step.lt(ZERO)) {
	      while (x.gte(end)) {
	        array.push(x);
	        x = x.plus(step);
	      }
	    }

	    return array;
	  }

	  /**
	   * Parse a string into a range,
	   * The string contains the start, optional step, and end, separated by a colon.
	   * If the string does not contain a valid range, null is returned.
	   * For example str='0:2:11'.
	   * @param {string} str
	   * @return {{start: number, end: number, step: number} | null} range Object containing properties start, end, step
	   * @private
	   */
	  function _parse(str) {
	    var args = str.split(':');

	    // number
	    var nums = args.map(function (arg) {
	      // use Number and not parseFloat as Number returns NaN on invalid garbage in the string
	      return Number(arg);
	    });

	    var invalid = nums.some(function (num) {
	      return isNaN(num);
	    });
	    if (invalid) {
	      return null;
	    }

	    switch (nums.length) {
	      case 2:
	        return {
	          start: nums[0],
	          end: nums[1],
	          step: 1
	        };

	      case 3:
	        return {
	          start: nums[0],
	          end: nums[2],
	          step: nums[1]
	        };

	      default:
	        return null;
	    }
	  }
	}

	exports.name = 'range';
	exports.factory = factory;

/***/ },
/* 493 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var errorTransform = __webpack_require__(444).transform;

	/**
	 * Attach a transform function to math.subset
	 * Adds a property transform containing the transform function.
	 *
	 * This transform creates a range which includes the end value
	 */
	function factory(type, config, load, typed) {
	  var subset = load(__webpack_require__(445));

	  return typed('subset', {
	    '...any': function any(args) {
	      try {
	        return subset.apply(null, args);
	      } catch (err) {
	        throw errorTransform(err);
	      }
	    }
	  });
	}

	exports.name = 'subset';
	exports.path = 'expression.transform';
	exports.factory = factory;

/***/ },
/* 494 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var object = __webpack_require__(163);
	var string = __webpack_require__(183);

	function factory(type, config, load, typed) {
	  var parser = load(__webpack_require__(464))();

	  /**
	   * Documentation object
	   * @param {Object} doc  Object containing properties:
	   *                      {string} name
	   *                      {string} category
	   *                      {string} description
	   *                      {string[]} syntax
	   *                      {string[]} examples
	   *                      {string[]} seealso
	   * @constructor
	   */
	  function Help(doc) {
	    if (!(this instanceof Help)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    if (!doc) throw new Error('Argument "doc" missing');

	    this.doc = doc;
	  }

	  /**
	   * Attach type information
	   */
	  Help.prototype.type = 'Help';
	  Help.prototype.isHelp = true;

	  /**
	   * Generate a string representation of the Help object
	   * @return {string} Returns a string
	   * @private
	   */
	  Help.prototype.toString = function () {
	    var doc = this.doc || {};
	    var desc = '\n';

	    if (doc.name) {
	      desc += 'Name: ' + doc.name + '\n\n';
	    }
	    if (doc.category) {
	      desc += 'Category: ' + doc.category + '\n\n';
	    }
	    if (doc.description) {
	      desc += 'Description:\n    ' + doc.description + '\n\n';
	    }
	    if (doc.syntax) {
	      desc += 'Syntax:\n    ' + doc.syntax.join('\n    ') + '\n\n';
	    }
	    if (doc.examples) {
	      desc += 'Examples:\n';
	      for (var i = 0; i < doc.examples.length; i++) {
	        var expr = doc.examples[i];
	        desc += '    ' + expr + '\n';

	        var res;
	        try {
	          res = parser.eval(expr);
	        } catch (e) {
	          res = e;
	        }
	        if (res && !res.isHelp) {
	          desc += '        ' + string.format(res, { precision: 14 }) + '\n';
	        }
	      }
	      desc += '\n';
	    }
	    if (doc.seealso) {
	      desc += 'See also: ' + doc.seealso.join(', ') + '\n';
	    }

	    return desc;
	  };

	  /**
	   * Export the help object to JSON
	   */
	  Help.prototype.toJSON = function () {
	    var obj = object.clone(this.doc);
	    obj.mathjs = 'Help';
	    return obj;
	  };

	  /**
	   * Instantiate a Help object from a JSON object
	   * @param {Object} json
	   * @returns {Help} Returns a new Help object
	   */
	  Help.fromJSON = function (json) {
	    var doc = {};
	    for (var prop in json) {
	      if (prop !== 'mathjs') {
	        // ignore mathjs field
	        doc[prop] = json[prop];
	      }
	    }
	    return new Help(doc);
	  };

	  /**
	   * Returns a string representation of the Help object
	   */
	  Help.prototype.valueOf = Help.prototype.toString;

	  return Help;
	}

	exports.name = 'Help';
	exports.path = 'type';
	exports.factory = factory;

/***/ },
/* 495 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

		module.exports = [__webpack_require__(496), __webpack_require__(523), __webpack_require__(554), __webpack_require__(570), __webpack_require__(579), __webpack_require__(584), __webpack_require__(587), __webpack_require__(593), __webpack_require__(605), __webpack_require__(614), __webpack_require__(618), __webpack_require__(625), __webpack_require__(627), __webpack_require__(653), __webpack_require__(655)];

/***/ },
/* 496 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = [
	// decomposition
	__webpack_require__(497), __webpack_require__(498),

	// solver
	__webpack_require__(518), __webpack_require__(520), __webpack_require__(522)];

/***/ },
/* 497 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__(199);

	var object = util.object;

	function factory(type, config, load, typed) {

	  var matrix = load(__webpack_require__(212));
	  var abs = load(__webpack_require__(246));
	  var addScalar = load(__webpack_require__(213));
	  var divideScalar = load(__webpack_require__(241));
	  var multiplyScalar = load(__webpack_require__(240));
	  var subtract = load(__webpack_require__(237));
	  var larger = load(__webpack_require__(224));
	  var equalScalar = load(__webpack_require__(208));
	  var unaryMinus = load(__webpack_require__(238));

	  var SparseMatrix = type.SparseMatrix;
	  var DenseMatrix = type.DenseMatrix;
	  var Spa = type.Spa;

	  /**
	   * Calculate the Matrix LU decomposition with partial pivoting. Matrix `A` is decomposed in two matrices (`L`, `U`) and a
	   * row permutation vector `p` where `A[p,:] = L * U`
	   *
	   * Syntax:
	   *
	   *    math.lup(A);
	   *
	   * Example:
	   *
	   *    var m = [[2, 1], [1, 4]];
	   *    var r = math.lup();
	   *    // r = {
	   *    //   L: [[1, 0], [0.5, 1]],
	   *    //   U: [[2, 1], [0, 3.5]],
	   *    //   P: [0, 1]
	   *    // }
	   *
	   * See also:
	   *
	   *    slu, lsolve, lusolve, usolve
	   *
	   * @param {Matrix | Array} A    A two dimensional matrix or array for which to get the LUP decomposition.
	   *
	   * @return {Array<Matrix>}      The lower triangular matrix, the upper triangular matrix and the permutation matrix.
	   */
	  var lup = typed('lup', {

	    'DenseMatrix': function DenseMatrix(m) {
	      return _denseLUP(m);
	    },

	    'SparseMatrix': function SparseMatrix(m) {
	      return _sparseLUP(m);
	    },

	    'Array': function Array(a) {
	      // create dense matrix from array
	      var m = matrix(a);
	      // lup, use matrix implementation
	      var r = _denseLUP(m);
	      // result
	      return {
	        L: r.L.valueOf(),
	        U: r.U.valueOf(),
	        p: r.p
	      };
	    }
	  });

	  var _denseLUP = function _denseLUP(m) {
	    // rows & columns
	    var rows = m._size[0];
	    var columns = m._size[1];
	    // minimum rows and columns
	    var n = Math.min(rows, columns);
	    // matrix array, clone original data
	    var data = object.clone(m._data);
	    // l matrix arrays
	    var ldata = [];
	    var lsize = [rows, n];
	    // u matrix arrays
	    var udata = [];
	    var usize = [n, columns];
	    // vars
	    var i, j, k;
	    // permutation vector    
	    var p = [];
	    for (i = 0; i < rows; i++) {
	      p[i] = i;
	    } // loop columns
	    for (j = 0; j < columns; j++) {
	      // skip first column in upper triangular matrix
	      if (j > 0) {
	        // loop rows
	        for (i = 0; i < rows; i++) {
	          // min i,j
	          var min = Math.min(i, j);
	          // v[i, j]
	          var s = 0;
	          // loop up to min
	          for (k = 0; k < min; k++) {
	            // s = l[i, k] - data[k, j]
	            s = addScalar(s, multiplyScalar(data[i][k], data[k][j]));
	          }
	          data[i][j] = subtract(data[i][j], s);
	        }
	      }
	      // row with larger value in cvector, row >= j
	      var pi = j;
	      var pabsv = 0;
	      var vjj = 0;
	      // loop rows
	      for (i = j; i < rows; i++) {
	        // data @ i, j
	        var v = data[i][j];
	        // absolute value
	        var absv = abs(v);
	        // value is greater than pivote value
	        if (larger(absv, pabsv)) {
	          // store row
	          pi = i;
	          // update max value
	          pabsv = absv;
	          // value @ [j, j]
	          vjj = v;
	        }
	      }
	      // swap rows (j <-> pi)
	      if (j !== pi) {
	        // swap values j <-> pi in p
	        p[j] = [p[pi], p[pi] = p[j]][0];
	        // swap j <-> pi in data
	        DenseMatrix._swapRows(j, pi, data);
	      }
	      // check column is in lower triangular matrix
	      if (j < rows) {
	        // loop rows (lower triangular matrix)
	        for (i = j + 1; i < rows; i++) {
	          // value @ i, j
	          var vij = data[i][j];
	          if (!equalScalar(vij, 0)) {
	            // update data
	            data[i][j] = divideScalar(data[i][j], vjj);
	          }
	        }
	      }
	    }
	    // loop columns
	    for (j = 0; j < columns; j++) {
	      // loop rows
	      for (i = 0; i < rows; i++) {
	        // initialize row in arrays
	        if (j === 0) {
	          // check row exists in upper triangular matrix
	          if (i < columns) {
	            // U
	            udata[i] = [];
	          }
	          // L
	          ldata[i] = [];
	        }
	        // check we are in the upper triangular matrix
	        if (i < j) {
	          // check row exists in upper triangular matrix
	          if (i < columns) {
	            // U
	            udata[i][j] = data[i][j];
	          }
	          // check column exists in lower triangular matrix
	          if (j < rows) {
	            // L
	            ldata[i][j] = 0;
	          }
	          continue;
	        }
	        // diagonal value
	        if (i === j) {
	          // check row exists in upper triangular matrix
	          if (i < columns) {
	            // U
	            udata[i][j] = data[i][j];
	          }
	          // check column exists in lower triangular matrix
	          if (j < rows) {
	            // L
	            ldata[i][j] = 1;
	          }
	          continue;
	        }
	        // check row exists in upper triangular matrix
	        if (i < columns) {
	          // U
	          udata[i][j] = 0;
	        }
	        // check column exists in lower triangular matrix
	        if (j < rows) {
	          // L
	          ldata[i][j] = data[i][j];
	        }
	      }
	    }
	    // l matrix
	    var l = new DenseMatrix({
	      data: ldata,
	      size: lsize
	    });
	    // u matrix
	    var u = new DenseMatrix({
	      data: udata,
	      size: usize
	    });
	    // p vector
	    var pv = [];
	    for (i = 0, n = p.length; i < n; i++) {
	      pv[p[i]] = i;
	    } // return matrices
	    return {
	      L: l,
	      U: u,
	      p: pv,
	      toString: function toString() {
	        return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\nP: ' + this.p;
	      }
	    };
	  };

	  var _sparseLUP = function _sparseLUP(m) {
	    // rows & columns
	    var rows = m._size[0];
	    var columns = m._size[1];
	    // minimum rows and columns
	    var n = Math.min(rows, columns);
	    // matrix arrays (will not be modified, thanks to permutation vector)
	    var values = m._values;
	    var index = m._index;
	    var ptr = m._ptr;
	    // l matrix arrays
	    var lvalues = [];
	    var lindex = [];
	    var lptr = [];
	    var lsize = [rows, n];
	    // u matrix arrays
	    var uvalues = [];
	    var uindex = [];
	    var uptr = [];
	    var usize = [n, columns];
	    // vars
	    var i, j, k;
	    // permutation vectors, (current index -> original index) and (original index -> current index)
	    var pv_co = [];
	    var pv_oc = [];
	    for (i = 0; i < rows; i++) {
	      pv_co[i] = i;
	      pv_oc[i] = i;
	    }
	    // swap indices in permutation vectors (condition x < y)!
	    var swapIndeces = function swapIndeces(x, y) {
	      // find pv indeces getting data from x and y
	      var kx = pv_oc[x];
	      var ky = pv_oc[y];
	      // update permutation vector current -> original
	      pv_co[kx] = y;
	      pv_co[ky] = x;
	      // update permutation vector original -> current
	      pv_oc[x] = ky;
	      pv_oc[y] = kx;
	    };
	    // loop columns
	    for (j = 0; j < columns; j++) {
	      // sparse accumulator
	      var spa = new Spa();
	      // check lower triangular matrix has a value @ column j
	      if (j < rows) {
	        // update ptr
	        lptr.push(lvalues.length);
	        // first value in j column for lower triangular matrix
	        lvalues.push(1);
	        lindex.push(j);
	      }
	      // update ptr
	      uptr.push(uvalues.length);
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = ptr[j];
	      var k1 = ptr[j + 1];
	      // copy column j into sparse accumulator
	      for (k = k0; k < k1; k++) {
	        // row
	        i = index[k];
	        // copy column values into sparse accumulator (use permutation vector)
	        spa.set(pv_co[i], values[k]);
	      }
	      // skip first column in upper triangular matrix
	      if (j > 0) {
	        // loop rows in column j (above diagonal)
	        spa.forEach(0, j - 1, function (k, vkj) {
	          // loop rows in column k (L)
	          SparseMatrix._forEachRow(k, lvalues, lindex, lptr, function (i, vik) {
	            // check row is below k
	            if (i > k) {
	              // update spa value
	              spa.accumulate(i, unaryMinus(multiplyScalar(vik, vkj)));
	            }
	          });
	        });
	      }
	      // row with larger value in spa, row >= j
	      var pi = j;
	      var vjj = spa.get(j);
	      var pabsv = abs(vjj);
	      // loop values in spa (order by row, below diagonal)
	      spa.forEach(j + 1, rows - 1, function (x, v) {
	        // absolute value
	        var absv = abs(v);
	        // value is greater than pivote value
	        if (larger(absv, pabsv)) {
	          // store row
	          pi = x;
	          // update max value
	          pabsv = absv;
	          // value @ [j, j]
	          vjj = v;
	        }
	      });
	      // swap rows (j <-> pi)
	      if (j !== pi) {
	        // swap values j <-> pi in L
	        SparseMatrix._swapRows(j, pi, lsize[1], lvalues, lindex, lptr);
	        // swap values j <-> pi in U
	        SparseMatrix._swapRows(j, pi, usize[1], uvalues, uindex, uptr);
	        // swap values in spa
	        spa.swap(j, pi);
	        // update permutation vector (swap values @ j, pi)
	        swapIndeces(j, pi);
	      }
	      // loop values in spa (order by row)
	      spa.forEach(0, rows - 1, function (x, v) {
	        // check we are above diagonal
	        if (x <= j) {
	          // update upper triangular matrix
	          uvalues.push(v);
	          uindex.push(x);
	        } else {
	          // update value
	          v = divideScalar(v, vjj);
	          // check value is non zero
	          if (!equalScalar(v, 0)) {
	            // update lower triangular matrix
	            lvalues.push(v);
	            lindex.push(x);
	          }
	        }
	      });
	    }
	    // update ptrs
	    uptr.push(uvalues.length);
	    lptr.push(lvalues.length);

	    // return matrices
	    return {
	      L: new SparseMatrix({
	        values: lvalues,
	        index: lindex,
	        ptr: lptr,
	        size: lsize
	      }),
	      U: new SparseMatrix({
	        values: uvalues,
	        index: uindex,
	        ptr: uptr,
	        size: usize
	      }),
	      p: pv_co,
	      toString: function toString() {
	        return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\nP: ' + this.p;
	      }
	    };
	  };

	  return lup;
	}

	exports.name = 'lup';
	exports.factory = factory;

/***/ },
/* 498 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__(199);

	var number = util.number,
	    isInteger = number.isInteger;

	function factory(type, config, load, typed) {

	  var cs_sqr = load(__webpack_require__(499));
	  var cs_lu = load(__webpack_require__(510));

	  /**
	   * Calculate the Sparse Matrix LU decomposition with full pivoting. Sparse Matrix `A` is decomposed in two matrices (`L`, `U`) and two permutation vectors (`pinv`, `q`) where
	   *
	   * `P * A * Q = L * U`
	   *
	   * Syntax:
	   *
	   *    math.slu(A, order, threshold);
	   *
	   * See also:
	   *
	   *    lup, lsolve, usolve, lusolve
	   *
	   * @param {SparseMatrix} A              A two dimensional sparse matrix for which to get the LU decomposition.
	   * @param {Number}       order          The Symbolic Ordering and Analysis order:
	   *                                       0 - Natural ordering, no permutation vector q is returned
	   *                                       1 - Matrix must be square, symbolic ordering and analisis is performed on M = A + A'
	   *                                       2 - Symbolic ordering and analisis is performed on M = A' * A. Dense columns from A' are dropped, A recreated from A'. 
	   *                                           This is appropriatefor LU factorization of unsymmetric matrices.
	   *                                       3 - Symbolic ordering and analisis is performed on M = A' * A. This is best used for LU factorization is matrix M has no dense rows.
	   *                                           A dense row is a row with more than 10*sqr(columns) entries.
	   * @param {Number}       threshold       Partial pivoting threshold (1 for partial pivoting)
	   *
	   * @return {Object} The lower triangular matrix, the upper triangular matrix and the permutation vectors.
	   */
	  var slu = typed('slu', {

	    'SparseMatrix, number, number': function SparseMatrixNumberNumber(a, order, threshold) {
	      // verify order
	      if (!isInteger(order) || order < 0 || order > 3) throw new Error('Symbolic Ordering and Analysis order must be an integer number in the interval [0, 3]');
	      // verify threshold
	      if (threshold < 0 || threshold > 1) throw new Error('Partial pivoting threshold must be a number from 0 to 1');

	      // perform symbolic ordering and analysis
	      var s = cs_sqr(order, a, false);

	      // perform lu decomposition
	      var f = cs_lu(a, s, threshold);

	      // return decomposition
	      return {
	        L: f.L,
	        U: f.U,
	        p: f.pinv,
	        q: s.q,
	        toString: function toString() {
	          return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\np: ' + this.p.toString() + (this.q ? '\nq: ' + this.q.toString() : '') + '\n';
	        }
	      };
	    }
	  });

	  return slu;
	}

	exports.name = 'slu';
	exports.factory = factory;

/***/ },
/* 499 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load) {

	  var cs_amd = load(__webpack_require__(500));
	  var cs_permute = load(__webpack_require__(505));
	  var cs_etree = load(__webpack_require__(506));
	  var cs_post = load(__webpack_require__(507));
	  var cs_counts = load(__webpack_require__(508));

	  /**
	   * Symbolic ordering and analysis for QR and LU decompositions.
	   *
	   * @param {Number}  order           The ordering strategy (see cs_amd for more details)
	   * @param {Matrix}  a               The A matrix
	   * @param {boolean} qr              Symbolic ordering and analysis for QR decomposition (true) or
	   *                                  symbolic ordering and analysis for LU decomposition (false)
	   *
	   * @return {Object}                 The Symbolic ordering and analysis for matrix A
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_sqr = function cs_sqr(order, a, qr) {
	    // a arrays
	    var aptr = a._ptr;
	    var asize = a._size;
	    // columns
	    var n = asize[1];
	    // vars
	    var k;
	    // symbolic analysis result
	    var s = {};
	    // fill-reducing ordering
	    s.q = cs_amd(order, a);
	    // validate results
	    if (order && !s.q) return null;
	    // QR symbolic analysis
	    if (qr) {
	      // apply permutations if needed
	      var c = order ? cs_permute(a, null, s.q, 0) : a;
	      // etree of C'*C, where C=A(:,q)
	      s.parent = cs_etree(c, 1);
	      // post order elimination tree
	      var post = cs_post(s.parent, n);
	      // col counts chol(C'*C)
	      s.cp = cs_counts(c, s.parent, post, 1);
	      // check we have everything needed to calculate number of nonzero elements
	      if (c && s.parent && s.cp && _vcount(c, s)) {
	        // calculate number of nonzero elements
	        for (s.unz = 0, k = 0; k < n; k++) {
	          s.unz += s.cp[k];
	        }
	      }
	    } else {
	      // for LU factorization only, guess nnz(L) and nnz(U)
	      s.unz = 4 * aptr[n] + n;
	      s.lnz = s.unz;
	    }
	    // return result S
	    return s;
	  };

	  /**
	   * Compute nnz(V) = s.lnz, s.pinv, s.leftmost, s.m2 from A and s.parent
	   */
	  var _vcount = function _vcount(a, s) {
	    // a arrays
	    var aptr = a._ptr;
	    var aindex = a._index;
	    var asize = a._size;
	    // rows & columns
	    var m = asize[0];
	    var n = asize[1];
	    // initialize s arrays
	    s.pinv = []; // (m + n);
	    s.leftmost = []; // (m);
	    // vars
	    var parent = s.parent;
	    var pinv = s.pinv;
	    var leftmost = s.leftmost;
	    // workspace, next: first m entries, head: next n entries, tail: next n entries, nque: next n entries
	    var w = []; // (m + 3 * n);
	    var next = 0;
	    var head = m;
	    var tail = m + n;
	    var nque = m + 2 * n;
	    // vars
	    var i, k, p, p0, p1;
	    // initialize w
	    for (k = 0; k < n; k++) {
	      // queue k is empty
	      w[head + k] = -1;
	      w[tail + k] = -1;
	      w[nque + k] = 0;
	    }
	    // initialize row arrays
	    for (i = 0; i < m; i++) {
	      leftmost[i] = -1;
	    } // loop columns backwards    
	    for (k = n - 1; k >= 0; k--) {
	      // values & index for column k
	      for (p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {
	        // leftmost[i] = min(find(A(i,:)))
	        leftmost[aindex[p]] = k;
	      }
	    }
	    // scan rows in reverse order
	    for (i = m - 1; i >= 0; i--) {
	      // row i is not yet ordered
	      pinv[i] = -1;
	      k = leftmost[i];
	      // check row i is empty
	      if (k == -1) continue;
	      // first row in queue k
	      if (w[nque + k]++ === 0) w[tail + k] = i;
	      // put i at head of queue k
	      w[next + i] = w[head + k];
	      w[head + k] = i;
	    }
	    s.lnz = 0;
	    s.m2 = m;
	    // find row permutation and nnz(V)
	    for (k = 0; k < n; k++) {
	      // remove row i from queue k
	      i = w[head + k];
	      // count V(k,k) as nonzero
	      s.lnz++;
	      // add a fictitious row
	      if (i < 0) i = s.m2++;
	      // associate row i with V(:,k)
	      pinv[i] = k;
	      // skip if V(k+1:m,k) is empty
	      if (--nque[k] <= 0) continue;
	      // nque[k] is nnz (V(k+1:m,k))
	      s.lnz += w[nque + k];
	      // move all rows to parent of k
	      var pa = parent[k];
	      if (pa != -1) {
	        if (w[nque + pa] === 0) w[tail + pa] = w[tail + k];
	        w[next + w[tail + k]] = w[head + pa];
	        w[head + pa] = w[next + i];
	        w[nque + pa] += w[nque + k];
	      }
	    }
	    for (i = 0; i < m; i++) {
	      if (pinv[i] < 0) pinv[i] = k++;
	    }
	    return true;
	  };

	  return cs_sqr;
	}

	exports.name = 'cs_sqr';
	exports.path = 'sparse';
	exports.factory = factory;

/***/ },
/* 500 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load) {

	  var cs_flip = load(__webpack_require__(501));
	  var cs_fkeep = load(__webpack_require__(502));
	  var cs_tdfs = load(__webpack_require__(503));

	  var add = load(__webpack_require__(211));
	  var multiply = load(__webpack_require__(244));
	  var transpose = load(__webpack_require__(504));

	  /**
	   * Approximate minimum degree ordering. The minimum degree algorithm is a widely used 
	   * heuristic for finding a permutation P so that P*A*P' has fewer nonzeros in its factorization
	   * than A. It is a gready method that selects the sparsest pivot row and column during the course
	   * of a right looking sparse Cholesky factorization.
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   *
	   * @param {Number} order    0: Natural, 1: Cholesky, 2: LU, 3: QR
	   * @param {Matrix} m        Sparse Matrix
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_amd = function cs_amd(order, a) {
	    // check input parameters
	    if (!a || order <= 0 || order > 3) return null;
	    // a matrix arrays
	    var asize = a._size;
	    // rows and columns
	    var m = asize[0];
	    var n = asize[1];
	    // initialize vars
	    var lemax = 0;
	    // dense threshold
	    var dense = Math.max(16, 10 * Math.sqrt(n));
	    dense = Math.min(n - 2, dense);
	    // create target matrix C
	    var cm = _createTargetMatrix(order, a, m, n, dense);
	    // drop diagonal entries
	    cs_fkeep(cm, _diag, null);
	    // C matrix arrays
	    var cindex = cm._index;
	    var cptr = cm._ptr;

	    // number of nonzero elements in C
	    var cnz = cptr[n];

	    // allocate result (n+1)
	    var P = [];

	    // create workspace (8 * (n + 1))
	    var W = [];
	    var len = 0; // first n + 1 entries
	    var nv = n + 1; // next n + 1 entries
	    var next = 2 * (n + 1); // next n + 1 entries
	    var head = 3 * (n + 1); // next n + 1 entries
	    var elen = 4 * (n + 1); // next n + 1 entries
	    var degree = 5 * (n + 1); // next n + 1 entries
	    var w = 6 * (n + 1); // next n + 1 entries
	    var hhead = 7 * (n + 1); // last n + 1 entries    

	    // use P as workspace for last
	    var last = P;

	    // initialize quotient graph
	    var mark = _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree);

	    // initialize degree lists
	    var nel = _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next);

	    // minimum degree node
	    var mindeg = 0;

	    // vars
	    var i, j, k, k1, k2, e, pj, ln, nvi, pk, eln, p1, p2, pn, h, d;

	    // while (selecting pivots) do
	    while (nel < n) {
	      // select node of minimum approximate degree. amd() is now ready to start eliminating the graph. It first
	      // finds a node k of minimum degree and removes it from its degree list. The variable nel keeps track of thow
	      // many nodes have been eliminated.
	      for (k = -1; mindeg < n && (k = W[head + mindeg]) == -1; mindeg++) {}
	      if (W[next + k] != -1) last[W[next + k]] = -1;
	      // remove k from degree list
	      W[head + mindeg] = W[next + k];
	      // elenk = |Ek|
	      var elenk = W[elen + k];
	      // # of nodes k represents
	      var nvk = W[nv + k];
	      // W[nv + k] nodes of A eliminated
	      nel += nvk;

	      // Construct a new element. The new element Lk is constructed in place if |Ek| = 0. nv[i] is 
	      // negated for all nodes i in Lk to flag them as members of this set. Each node i is removed from the
	      // degree lists. All elements e in Ek are absorved into element k.
	      var dk = 0;
	      // flag k as in Lk
	      W[nv + k] = -nvk;
	      var p = cptr[k];
	      // do in place if W[elen + k] == 0
	      var pk1 = elenk === 0 ? p : cnz;
	      var pk2 = pk1;
	      for (k1 = 1; k1 <= elenk + 1; k1++) {
	        if (k1 > elenk) {
	          // search the nodes in k
	          e = k;
	          // list of nodes starts at cindex[pj]
	          pj = p;
	          // length of list of nodes in k
	          ln = W[len + k] - elenk;
	        } else {
	          // search the nodes in e
	          e = cindex[p++];
	          pj = cptr[e];
	          // length of list of nodes in e
	          ln = W[len + e];
	        }
	        for (k2 = 1; k2 <= ln; k2++) {
	          i = cindex[pj++];
	          // check  node i dead, or seen
	          if ((nvi = W[nv + i]) <= 0) continue;
	          // W[degree + Lk] += size of node i
	          dk += nvi;
	          // negate W[nv + i] to denote i in Lk
	          W[nv + i] = -nvi;
	          // place i in Lk
	          cindex[pk2++] = i;
	          if (W[next + i] != -1) last[W[next + i]] = last[i];
	          // check we need to remove i from degree list
	          if (last[i] != -1) W[next + last[i]] = W[next + i];else W[head + W[degree + i]] = W[next + i];
	        }
	        if (e != k) {
	          // absorb e into k
	          cptr[e] = cs_flip(k);
	          // e is now a dead element
	          W[w + e] = 0;
	        }
	      }
	      // cindex[cnz...nzmax] is free
	      if (elenk !== 0) cnz = pk2;
	      // external degree of k - |Lk\i|
	      W[degree + k] = dk;
	      // element k is in cindex[pk1..pk2-1]
	      cptr[k] = pk1;
	      W[len + k] = pk2 - pk1;
	      // k is now an element
	      W[elen + k] = -2;

	      // Find set differences. The scan1 function now computes the set differences |Le \ Lk| for all elements e. At the start of the
	      // scan, no entry in the w array is greater than or equal to mark.

	      // clear w if necessary
	      mark = _wclear(mark, lemax, W, w, n);
	      // scan 1: find |Le\Lk|
	      for (pk = pk1; pk < pk2; pk++) {
	        i = cindex[pk];
	        // check if W[elen + i] empty, skip it
	        if ((eln = W[elen + i]) <= 0) continue;
	        // W[nv + i] was negated
	        nvi = -W[nv + i];
	        var wnvi = mark - nvi;
	        // scan Ei
	        for (p = cptr[i], p1 = cptr[i] + eln - 1; p <= p1; p++) {
	          e = cindex[p];
	          if (W[w + e] >= mark) {
	            // decrement |Le\Lk|
	            W[w + e] -= nvi;
	          } else if (W[w + e] !== 0) {
	            // ensure e is a live element, 1st time e seen in scan 1
	            W[w + e] = W[degree + e] + wnvi;
	          }
	        }
	      }

	      // degree update
	      // The second pass computes the approximate degree di, prunes the sets Ei and Ai, and computes a hash
	      // function h(i) for all nodes in Lk.

	      // scan2: degree update
	      for (pk = pk1; pk < pk2; pk++) {
	        // consider node i in Lk
	        i = cindex[pk];
	        p1 = cptr[i];
	        p2 = p1 + W[elen + i] - 1;
	        pn = p1;
	        // scan Ei
	        for (h = 0, d = 0, p = p1; p <= p2; p++) {
	          e = cindex[p];
	          // check e is an unabsorbed element
	          if (W[w + e] !== 0) {
	            // dext = |Le\Lk|
	            var dext = W[w + e] - mark;
	            if (dext > 0) {
	              // sum up the set differences
	              d += dext;
	              // keep e in Ei
	              cindex[pn++] = e;
	              // compute the hash of node i
	              h += e;
	            } else {
	              // aggressive absorb. e->k
	              cptr[e] = cs_flip(k);
	              // e is a dead element
	              W[w + e] = 0;
	            }
	          }
	        }
	        // W[elen + i] = |Ei|
	        W[elen + i] = pn - p1 + 1;
	        var p3 = pn;
	        var p4 = p1 + W[len + i];
	        // prune edges in Ai
	        for (p = p2 + 1; p < p4; p++) {
	          j = cindex[p];
	          // check node j dead or in Lk
	          var nvj = W[nv + j];
	          if (nvj <= 0) continue;
	          // degree(i) += |j|
	          d += nvj;
	          // place j in node list of i
	          cindex[pn++] = j;
	          // compute hash for node i
	          h += j;
	        }
	        // check for mass elimination
	        if (d === 0) {
	          // absorb i into k
	          cptr[i] = cs_flip(k);
	          nvi = -W[nv + i];
	          // |Lk| -= |i|
	          dk -= nvi;
	          // |k| += W[nv + i]
	          nvk += nvi;
	          nel += nvi;
	          W[nv + i] = 0;
	          // node i is dead
	          W[elen + i] = -1;
	        } else {
	          // update degree(i)
	          W[degree + i] = Math.min(W[degree + i], d);
	          // move first node to end
	          cindex[pn] = cindex[p3];
	          // move 1st el. to end of Ei
	          cindex[p3] = cindex[p1];
	          // add k as 1st element in of Ei
	          cindex[p1] = k;
	          // new len of adj. list of node i
	          W[len + i] = pn - p1 + 1;
	          // finalize hash of i
	          h = (h < 0 ? -h : h) % n;
	          // place i in hash bucket
	          W[next + i] = W[hhead + h];
	          W[hhead + h] = i;
	          // save hash of i in last[i]
	          last[i] = h;
	        }
	      }
	      // finalize |Lk|
	      W[degree + k] = dk;
	      lemax = Math.max(lemax, dk);
	      // clear w
	      mark = _wclear(mark + lemax, lemax, W, w, n);

	      // Supernode detection. Supernode detection relies on the hash function h(i) computed for each node i.
	      // If two nodes have identical adjacency lists, their hash functions wil be identical.
	      for (pk = pk1; pk < pk2; pk++) {
	        i = cindex[pk];
	        // check i is dead, skip it
	        if (W[nv + i] >= 0) continue;
	        // scan hash bucket of node i
	        h = last[i];
	        i = W[hhead + h];
	        // hash bucket will be empty
	        W[hhead + h] = -1;
	        for (; i != -1 && W[next + i] != -1; i = W[next + i], mark++) {
	          ln = W[len + i];
	          eln = W[elen + i];
	          for (p = cptr[i] + 1; p <= cptr[i] + ln - 1; p++) {
	            W[w + cindex[p]] = mark;
	          }var jlast = i;
	          // compare i with all j
	          for (j = W[next + i]; j != -1;) {
	            var ok = W[len + j] === ln && W[elen + j] === eln;
	            for (p = cptr[j] + 1; ok && p <= cptr[j] + ln - 1; p++) {
	              // compare i and j
	              if (W[w + cindex[p]] != mark) ok = 0;
	            }
	            // check i and j are identical
	            if (ok) {
	              // absorb j into i
	              cptr[j] = cs_flip(i);
	              W[nv + i] += W[nv + j];
	              W[nv + j] = 0;
	              // node j is dead
	              W[elen + j] = -1;
	              // delete j from hash bucket
	              j = W[next + j];
	              W[next + jlast] = j;
	            } else {
	              // j and i are different
	              jlast = j;
	              j = W[next + j];
	            }
	          }
	        }
	      }

	      // Finalize new element. The elimination of node k is nearly complete. All nodes i in Lk are scanned one last time.
	      // Node i is removed from Lk if it is dead. The flagged status of nv[i] is cleared.
	      for (p = pk1, pk = pk1; pk < pk2; pk++) {
	        i = cindex[pk];
	        // check  i is dead, skip it
	        if ((nvi = -W[nv + i]) <= 0) continue;
	        // restore W[nv + i]
	        W[nv + i] = nvi;
	        // compute external degree(i)
	        d = W[degree + i] + dk - nvi;
	        d = Math.min(d, n - nel - nvi);
	        if (W[head + d] != -1) last[W[head + d]] = i;
	        // put i back in degree list
	        W[next + i] = W[head + d];
	        last[i] = -1;
	        W[head + d] = i;
	        // find new minimum degree
	        mindeg = Math.min(mindeg, d);
	        W[degree + i] = d;
	        // place i in Lk
	        cindex[p++] = i;
	      }
	      // # nodes absorbed into k
	      W[nv + k] = nvk;
	      // length of adj list of element k
	      if ((W[len + k] = p - pk1) === 0) {
	        // k is a root of the tree
	        cptr[k] = -1;
	        // k is now a dead element
	        W[w + k] = 0;
	      }
	      if (elenk !== 0) {
	        // free unused space in Lk
	        cnz = p;
	      }
	    }

	    // Postordering. The elimination is complete, but no permutation has been computed. All that is left 
	    // of the graph is the assembly tree (ptr) and a set of dead nodes and elements (i is a dead node if
	    // nv[i] is zero and a dead element if nv[i] > 0). It is from this information only that the final permutation
	    // is computed. The tree is restored by unflipping all of ptr.

	    // fix assembly tree
	    for (i = 0; i < n; i++) {
	      cptr[i] = cs_flip(cptr[i]);
	    }for (j = 0; j <= n; j++) {
	      W[head + j] = -1;
	    } // place unordered nodes in lists
	    for (j = n; j >= 0; j--) {
	      // skip if j is an element
	      if (W[nv + j] > 0) continue;
	      // place j in list of its parent
	      W[next + j] = W[head + cptr[j]];
	      W[head + cptr[j]] = j;
	    }
	    // place elements in lists
	    for (e = n; e >= 0; e--) {
	      // skip unless e is an element
	      if (W[nv + e] <= 0) continue;
	      if (cptr[e] != -1) {
	        // place e in list of its parent
	        W[next + e] = W[head + cptr[e]];
	        W[head + cptr[e]] = e;
	      }
	    }
	    // postorder the assembly tree
	    for (k = 0, i = 0; i <= n; i++) {
	      if (cptr[i] == -1) k = cs_tdfs(i, k, W, head, next, P, w);
	    }
	    // remove last item in array
	    P.splice(P.length - 1, 1);
	    // return P
	    return P;
	  };

	  /**
	   * Creates the matrix that will be used by the approximate minimum degree ordering algorithm. The function accepts the matrix M as input and returns a permutation
	   * vector P. The amd algorithm operates on a symmetrix matrix, so one of three symmetric matrices is formed.
	   *
	   * Order: 0
	   *   A natural ordering P=null matrix is returned.
	   *
	   * Order: 1
	   *   Matrix must be square. This is appropriate for a Cholesky or LU factorization.
	   *   P = M + M'
	   *
	   * Order: 2
	   *   Dense columns from M' are dropped, M recreated from M'. This is appropriatefor LU factorization of unsymmetric matrices.
	   *   P = M' * M
	   * 
	   * Order: 3
	   *   This is best used for QR factorization or LU factorization is matrix M has no dense rows. A dense row is a row with more than 10*sqr(columns) entries.
	   *   P = M' * M
	   */
	  var _createTargetMatrix = function _createTargetMatrix(order, a, m, n, dense) {
	    // compute A'
	    var at = transpose(a);

	    // check order = 1, matrix must be square
	    if (order === 1 && n === m) {
	      // C = A + A'
	      return add(a, at);
	    }

	    // check order = 2, drop dense columns from M'
	    if (order == 2) {
	      // transpose arrays
	      var tindex = at._index;
	      var tptr = at._ptr;
	      // new column index
	      var p2 = 0;
	      // loop A' columns (rows)
	      for (var j = 0; j < m; j++) {
	        // column j of AT starts here
	        var p = tptr[j];
	        // new column j starts here
	        tptr[j] = p2;
	        // skip dense col j
	        if (tptr[j + 1] - p > dense) continue;
	        // map rows in column j of A
	        for (var p1 = tptr[j + 1]; p < p1; p++) {
	          tindex[p2++] = tindex[p];
	        }
	      }
	      // finalize AT
	      tptr[m] = p2;
	      // recreate A from new transpose matrix
	      a = transpose(at);
	      // use A' * A
	      return multiply(at, a);
	    }

	    // use A' * A, square or rectangular matrix
	    return multiply(at, a);
	  };

	  /**
	   * Initialize quotient graph. There are four kind of nodes and elements that must be represented:
	   *
	   *  - A live node is a node i (or a supernode) that has not been selected as a pivot nad has not been merged into another supernode.
	   *  - A dead node i is one that has been removed from the graph, having been absorved into r = flip(ptr[i]).
	   *  - A live element e is one that is in the graph, having been formed when node e was selected as the pivot.
	   *  - A dead element e is one that has benn absorved into a subsequent element s = flip(ptr[e]).
	   */
	  var _initializeQuotientGraph = function _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree) {
	    // Initialize quotient graph
	    for (var k = 0; k < n; k++) {
	      W[len + k] = cptr[k + 1] - cptr[k];
	    }W[len + n] = 0;
	    // initialize workspace
	    for (var i = 0; i <= n; i++) {
	      // degree list i is empty
	      W[head + i] = -1;
	      last[i] = -1;
	      W[next + i] = -1;
	      // hash list i is empty
	      W[hhead + i] = -1;
	      // node i is just one node
	      W[nv + i] = 1;
	      // node i is alive
	      W[w + i] = 1;
	      // Ek of node i is empty
	      W[elen + i] = 0;
	      // degree of node i
	      W[degree + i] = W[len + i];
	    }
	    // clear w
	    var mark = _wclear(0, 0, W, w, n);
	    // n is a dead element
	    W[elen + n] = -2;
	    // n is a root of assembly tree
	    cptr[n] = -1;
	    // n is a dead element
	    W[w + n] = 0;
	    // return mark
	    return mark;
	  };

	  /**
	   * Initialize degree lists. Each node is placed in its degree lists. Nodes of zero degree are eliminated immediately. Nodes with 
	   * degree >= dense are alsol eliminated and merged into a placeholder node n, a dead element. Thes nodes will appera last in the
	   * output permutation p.
	   */
	  var _initializeDegreeLists = function _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next) {
	    // result
	    var nel = 0;
	    // loop columns
	    for (var i = 0; i < n; i++) {
	      // degree @ i
	      var d = W[degree + i];
	      // check node i is empty
	      if (d === 0) {
	        // element i is dead
	        W[elen + i] = -2;
	        nel++;
	        // i is a root of assembly tree
	        cptr[i] = -1;
	        W[w + i] = 0;
	      } else if (d > dense) {
	        // absorb i into element n
	        W[nv + i] = 0;
	        // node i is dead
	        W[elen + i] = -1;
	        nel++;
	        cptr[i] = cs_flip(n);
	        W[nv + n]++;
	      } else {
	        var h = W[head + d];
	        if (h != -1) last[h] = i;
	        // put node i in degree list d
	        W[next + i] = W[head + d];
	        W[head + d] = i;
	      }
	    }
	    return nel;
	  };

	  var _wclear = function _wclear(mark, lemax, W, w, n) {
	    if (mark < 2 || mark + lemax < 0) {
	      for (var k = 0; k < n; k++) {
	        if (W[w + k] !== 0) W[w + k] = 1;
	      }
	      mark = 2;
	    }
	    // at this point, W [0..n-1] < mark holds
	    return mark;
	  };

	  var _diag = function _diag(i, j) {
	    return i != j;
	  };

	  return cs_amd;
	}

	exports.name = 'cs_amd';
	exports.path = 'sparse';
	exports.factory = factory;

/***/ },
/* 501 */
/***/ function(module, exports) {

	'use strict';

	function factory() {

	  /**
	   * This function "flips" its input about the integer -1.
	   *
	   * @param {Number}  i               The value to flip
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_flip = function cs_flip(i) {
	    // flip the value
	    return -i - 2;
	  };

	  return cs_flip;
	}

	exports.name = 'cs_flip';
	exports.path = 'sparse';
	exports.factory = factory;

/***/ },
/* 502 */
/***/ function(module, exports) {

	'use strict';

	function factory() {

	  /**
	   * Keeps entries in the matrix when the callback function returns true, removes the entry otherwise
	   *
	   * @param {Matrix}   a              The sparse matrix
	   * @param {function} callback       The callback function, function will be invoked with the following args:
	   *                                    - The entry row
	   *                                    - The entry column
	   *                                    - The entry value
	   *                                    - The state parameter
	   * @param {any}      other          The state
	   *
	   * @return                          The number of nonzero elements in the matrix
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_fkeep = function cs_fkeep(a, callback, other) {
	    // a arrays
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var asize = a._size;
	    // columns
	    var n = asize[1];
	    // nonzero items
	    var nz = 0;
	    // loop columns
	    for (var j = 0; j < n; j++) {
	      // get current location of col j
	      var p = aptr[j];
	      // record new location of col j
	      aptr[j] = nz;
	      for (; p < aptr[j + 1]; p++) {
	        // check we need to keep this item
	        if (callback(aindex[p], j, avalues ? avalues[p] : 1, other)) {
	          // keep A(i,j)
	          aindex[nz] = aindex[p];
	          // check we need to process values (pattern only)
	          if (avalues) avalues[nz] = avalues[p];
	          // increment nonzero items
	          nz++;
	        }
	      }
	    }
	    // finalize A
	    aptr[n] = nz;
	    // trim arrays
	    aindex.splice(nz, aindex.length - nz);
	    // check we need to process values (pattern only)
	    if (avalues) avalues.splice(nz, avalues.length - nz);
	    // return number of nonzero items
	    return nz;
	  };

	  return cs_fkeep;
	}

	exports.name = 'cs_fkeep';
	exports.path = 'sparse';
	exports.factory = factory;

/***/ },
/* 503 */
/***/ function(module, exports) {

	'use strict';

	function factory() {

	  /**
	   * Depth-first search and postorder of a tree rooted at node j
	   *
	   * @param {Number}  j               The tree node
	   * @param {Number}  k               
	   * @param {Array}   w               The workspace array
	   * @param {Number}  head            The index offset within the workspace for the head array
	   * @param {Number}  next            The index offset within the workspace for the next array
	   * @param {Array}   post            The post ordering array
	   * @param {Number}  stack           The index offset within the workspace for the stack array
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_tdfs = function cs_tdfs(j, k, w, head, next, post, stack) {
	    // variables
	    var top = 0;
	    // place j on the stack
	    w[stack] = j;
	    // while (stack is not empty) 
	    while (top >= 0) {
	      // p = top of stack
	      var p = w[stack + top];
	      // i = youngest child of p
	      var i = w[head + p];
	      if (i == -1) {
	        // p has no unordered children left
	        top--;
	        // node p is the kth postordered node
	        post[k++] = p;
	      } else {
	        // remove i from children of p
	        w[head + p] = w[next + i];
	        // increment top
	        ++top;
	        // start dfs on child node i
	        w[stack + top] = i;
	      }
	    }
	    return k;
	  };

	  return cs_tdfs;
	}

	exports.name = 'cs_tdfs';
	exports.path = 'sparse';
	exports.factory = factory;

/***/ },
/* 504 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var clone = __webpack_require__(163).clone;
	var format = __webpack_require__(183).format;

	function factory(type, config, load, typed) {
	  var latex = __webpack_require__(192);

	  var matrix = load(__webpack_require__(212));

	  var DenseMatrix = type.DenseMatrix,
	      SparseMatrix = type.SparseMatrix;

	  /**
	   * Transpose a matrix. All values of the matrix are reflected over its
	   * main diagonal. Only two dimensional matrices are supported.
	   *
	   * Syntax:
	   *
	   *     math.transpose(x)
	   *
	   * Examples:
	   *
	   *     var A = [[1, 2, 3], [4, 5, 6]];
	   *     math.transpose(A);               // returns [[1, 4], [2, 5], [3, 6]]
	   *
	   * See also:
	   *
	   *     diag, inv, subset, squeeze
	   *
	   * @param {Array | Matrix} x  Matrix to be transposed
	   * @return {Array | Matrix}   The transposed matrix
	   */
	  var transpose = typed('transpose', {

	    'Array': function Array(x) {
	      // use dense matrix implementation
	      return transpose(matrix(x)).valueOf();
	    },

	    'Matrix': function Matrix(x) {
	      // matrix size
	      var size = x.size();

	      // result
	      var c;

	      // process dimensions
	      switch (size.length) {
	        case 1:
	          // vector
	          c = x.clone();
	          break;

	        case 2:
	          // rows and columns
	          var rows = size[0];
	          var columns = size[1];

	          // check columns
	          if (columns === 0) {
	            // throw exception
	            throw new RangeError('Cannot transpose a 2D matrix with no columns (size: ' + format(size) + ')');
	          }

	          // process storage format
	          switch (x.storage()) {
	            case 'dense':
	              c = _denseTranspose(x, rows, columns);
	              break;
	            case 'sparse':
	              c = _sparseTranspose(x, rows, columns);
	              break;
	          }
	          break;

	        default:
	          // multi dimensional
	          throw new RangeError('Matrix must be a vector or two dimensional (size: ' + format(this._size) + ')');
	      }
	      return c;
	    },

	    // scalars
	    'any': function any(x) {
	      return clone(x);
	    }
	  });

	  var _denseTranspose = function _denseTranspose(m, rows, columns) {
	    // matrix array
	    var data = m._data;
	    // transposed matrix data
	    var transposed = [];
	    var transposedRow;
	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // initialize row
	      transposedRow = transposed[j] = [];
	      // loop rows
	      for (var i = 0; i < rows; i++) {
	        // set data
	        transposedRow[i] = clone(data[i][j]);
	      }
	    }
	    // return matrix
	    return new DenseMatrix({
	      data: transposed,
	      size: [columns, rows],
	      datatype: m._datatype
	    });
	  };

	  var _sparseTranspose = function _sparseTranspose(m, rows, columns) {
	    // matrix arrays
	    var values = m._values;
	    var index = m._index;
	    var ptr = m._ptr;
	    // result matrices
	    var cvalues = values ? [] : undefined;
	    var cindex = [];
	    var cptr = [];
	    // row counts
	    var w = [];
	    for (var x = 0; x < rows; x++) {
	      w[x] = 0;
	    } // vars
	    var p, l, j;
	    // loop values in matrix
	    for (p = 0, l = index.length; p < l; p++) {
	      // number of values in row
	      w[index[p]]++;
	    }
	    // cumulative sum
	    var sum = 0;
	    // initialize cptr with the cummulative sum of row counts
	    for (var i = 0; i < rows; i++) {
	      // update cptr
	      cptr.push(sum);
	      // update sum
	      sum += w[i];
	      // update w
	      w[i] = cptr[i];
	    }
	    // update cptr
	    cptr.push(sum);
	    // loop columns
	    for (j = 0; j < columns; j++) {
	      // values & index in column
	      for (var k0 = ptr[j], k1 = ptr[j + 1], k = k0; k < k1; k++) {
	        // C values & index
	        var q = w[index[k]]++;
	        // C[j, i] = A[i, j]
	        cindex[q] = j;
	        // check we need to process values (pattern matrix)
	        if (values) cvalues[q] = clone(values[k]);
	      }
	    }
	    // return matrix
	    return new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [columns, rows],
	      datatype: m._datatype
	    });
	  };

	  transpose.toTex = { 1: '\\left(${args[0]}\\right)' + latex.operators['transpose'] };

	  return transpose;
	}

	exports.name = 'transpose';
	exports.factory = factory;

/***/ },
/* 505 */
/***/ function(module, exports) {

	'use strict';

	function factory(type) {

	  var SparseMatrix = type.SparseMatrix;

	  /**
	   * Permutes a sparse matrix C = P * A * Q
	   *
	   * @param {Matrix}  a               The Matrix A
	   * @param {Array}   pinv            The row permutation vector
	   * @param {Array}   q               The column permutation vector
	   * @param {boolean} values          Create a pattern matrix (false), values and pattern otherwise
	   *
	   * @return {Matrix}                 C = P * A * Q, null on error
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_permute = function cs_permute(a, pinv, q, values) {
	    // a arrays
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var asize = a._size;
	    var adt = a._datatype;
	    // rows & columns
	    var m = asize[0];
	    var n = asize[1];
	    // c arrays
	    var cvalues = values && a._values ? [] : null;
	    var cindex = []; // (aptr[n]);
	    var cptr = []; // (n + 1);
	    // initialize vars
	    var nz = 0;
	    // loop columns    
	    for (var k = 0; k < n; k++) {
	      // column k of C is column q[k] of A
	      cptr[k] = nz;
	      // apply column permutation
	      var j = q ? q[k] : k;
	      // loop values in column j of A
	      for (var t0 = aptr[j], t1 = aptr[j + 1], t = t0; t < t1; t++) {
	        // row i of A is row pinv[i] of C
	        var r = pinv ? pinv[aindex[t]] : aindex[t];
	        // index
	        cindex[nz] = r;
	        // check we need to populate values
	        if (cvalues) cvalues[nz] = avalues[t];
	        // increment number of nonzero elements
	        nz++;
	      }
	    }
	    // finalize the last column of C
	    cptr[n] = nz;
	    // return C matrix
	    return new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [m, n],
	      datatype: adt
	    });
	  };

	  return cs_permute;
	}

	exports.name = 'cs_permute';
	exports.path = 'sparse';
	exports.factory = factory;

/***/ },
/* 506 */
/***/ function(module, exports) {

	'use strict';

	function factory() {

	  /**
	   * Computes the elimination tree of Matrix A (using triu(A)) or the 
	   * elimination tree of A'A without forming A'A.
	   *
	   * @param {Matrix}  a               The A Matrix
	   * @param {boolean} ata             A value of true the function computes the etree of A'A
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_etree = function cs_etree(a, ata) {
	    // check inputs
	    if (!a) return null;
	    // a arrays
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var asize = a._size;
	    // rows & columns
	    var m = asize[0];
	    var n = asize[1];

	    // allocate result
	    var parent = []; // (n)

	    // allocate workspace
	    var w = []; // (n + (ata ? m : 0))
	    var ancestor = 0; // first n entries in w
	    var prev = n; // last m entries (ata = true)

	    var i, inext;

	    // check we are calculating A'A
	    if (ata) {
	      // initialize workspace
	      for (i = 0; i < m; i++) {
	        w[prev + i] = -1;
	      }
	    }
	    // loop columns
	    for (var k = 0; k < n; k++) {
	      // node k has no parent yet
	      parent[k] = -1;
	      // nor does k have an ancestor
	      w[ancestor + k] = -1;
	      // values in column k
	      for (var p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {
	        // row
	        var r = aindex[p];
	        // node
	        i = ata ? w[prev + r] : r;
	        // traverse from i to k 
	        for (; i != -1 && i < k; i = inext) {
	          // inext = ancestor of i
	          inext = w[ancestor + i];
	          // path compression
	          w[ancestor + i] = k;
	          // check no anc., parent is k
	          if (inext == -1) parent[i] = k;
	        }
	        if (ata) w[prev + r] = k;
	      }
	    }
	    return parent;
	  };

	  return cs_etree;
	}

	exports.name = 'cs_etree';
	exports.path = 'sparse';
	exports.factory = factory;

/***/ },
/* 507 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load) {

	  var cs_tdfs = load(__webpack_require__(503));

	  /**
	   * Post order a tree of forest
	   *
	   * @param {Array}   parent          The tree or forest
	   * @param {Number}  n               Number of columns
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_post = function cs_post(parent, n) {
	    // check inputs
	    if (!parent) return null;
	    // vars 
	    var k = 0;
	    var j;
	    // allocate result
	    var post = []; // (n);
	    // workspace, head: first n entries, next: next n entries, stack: last n entries
	    var w = []; // (3 * n);
	    var head = 0;
	    var next = n;
	    var stack = 2 * n;
	    // initialize workspace
	    for (j = 0; j < n; j++) {
	      // empty linked lists
	      w[head + j] = -1;
	    }
	    // traverse nodes in reverse order
	    for (j = n - 1; j >= 0; j--) {
	      // check j is a root
	      if (parent[j] == -1) continue;
	      // add j to list of its parent
	      w[next + j] = w[head + parent[j]];
	      w[head + parent[j]] = j;
	    }
	    // loop nodes
	    for (j = 0; j < n; j++) {
	      // skip j if it is not a root
	      if (parent[j] != -1) continue;
	      // depth-first search
	      k = cs_tdfs(j, k, w, head, next, post, stack);
	    }
	    return post;
	  };

	  return cs_post;
	}

	exports.name = 'cs_post';
	exports.path = 'sparse';
	exports.factory = factory;

/***/ },
/* 508 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load) {

	  var transpose = load(__webpack_require__(504));

	  var cs_leaf = load(__webpack_require__(509));

	  /**
	   * Computes the column counts using the upper triangular part of A.
	   * It transposes A internally, none of the input parameters are modified.
	   *
	   * @param {Matrix} a           The sparse matrix A
	   *
	   * @param {Matrix} ata         Count the columns of A'A instead
	   *
	   * @return                     An array of size n of the column counts or null on error
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_counts = function cs_counts(a, parent, post, ata) {
	    // check inputs
	    if (!a || !parent || !post) return null;
	    // a matrix arrays
	    var asize = a._size;
	    // rows and columns
	    var m = asize[0];
	    var n = asize[1];
	    // variables
	    var i, j, k, J, p, p0, p1;

	    // workspace size
	    var s = 4 * n + (ata ? n + m + 1 : 0);
	    // allocate workspace
	    var w = []; // (s)
	    var ancestor = 0; // first n entries
	    var maxfirst = n; // next n entries
	    var prevleaf = 2 * n; // next n entries
	    var first = 3 * n; // next n entries
	    var head = 4 * n; // next n + 1 entries (used when ata is true)
	    var next = 5 * n + 1; // last entries in workspace
	    // clear workspace w[0..s-1]
	    for (k = 0; k < s; k++) {
	      w[k] = -1;
	    } // allocate result
	    var colcount = []; // (n);

	    // AT = A'
	    var at = transpose(a);
	    // at arrays
	    var tindex = at._index;
	    var tptr = at._ptr;

	    // find w[first + j]
	    for (k = 0; k < n; k++) {
	      j = post[k];
	      // colcount[j]=1 if j is a leaf
	      colcount[j] = w[first + j] == -1 ? 1 : 0;
	      for (; j != -1 && w[first + j] == -1; j = parent[j]) {
	        w[first + j] = k;
	      }
	    }

	    // initialize ata if needed
	    if (ata) {
	      // invert post
	      for (k = 0; k < n; k++) {
	        w[post[k]] = k;
	      } // loop rows (columns in AT)
	      for (i = 0; i < m; i++) {
	        // values in column i of AT
	        for (k = n, p0 = tptr[i], p1 = tptr[i + 1], p = p0; p < p1; p++) {
	          k = Math.min(k, w[tindex[p]]);
	        } // place row i in linked list k
	        w[next + i] = w[head + k];
	        w[head + k] = i;
	      }
	    }

	    // each node in its own set
	    for (i = 0; i < n; i++) {
	      w[ancestor + i] = i;
	    }for (k = 0; k < n; k++) {
	      // j is the kth node in postordered etree
	      j = post[k];
	      // check j is not a root
	      if (parent[j] != -1) colcount[parent[j]]--;

	      // J=j for LL'=A case
	      for (J = ata ? w[head + k] : j; J != -1; J = ata ? w[next + J] : -1) {
	        for (p = tptr[J]; p < tptr[J + 1]; p++) {
	          i = tindex[p];
	          var r = cs_leaf(i, j, w, first, maxfirst, prevleaf, ancestor);
	          // check A(i,j) is in skeleton
	          if (r.jleaf >= 1) colcount[j]++;
	          // check account for overlap in q
	          if (r.jleaf == 2) colcount[r.q]--;
	        }
	      }
	      if (parent[j] != -1) w[ancestor + j] = parent[j];
	    }
	    // sum up colcount's of each child
	    for (j = 0; j < n; j++) {
	      if (parent[j] != -1) colcount[parent[j]] += colcount[j];
	    }
	    return colcount;
	  };

	  return cs_counts;
	}

	exports.name = 'cs_counts';
	exports.path = 'sparse';
	exports.factory = factory;

/***/ },
/* 509 */
/***/ function(module, exports) {

	'use strict';

	function factory() {

	  /**
	   * This function determines if j is a leaf of the ith row subtree.
	   * Consider A(i,j), node j in ith row subtree and return lca(jprev,j)
	   *
	   * @param {Number}  i               The ith row subtree
	   * @param {Number}  j               The node to test
	   * @param {Array}   w               The workspace array
	   * @param {Number}  first           The index offset within the workspace for the first array
	   * @param {Number}  maxfirst        The index offset within the workspace for the maxfirst array
	   * @param {Number}  prevleaf        The index offset within the workspace for the prevleaf array
	   * @param {Number}  ancestor        The index offset within the workspace for the ancestor array
	   *
	   * @return {Object}
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_leaf = function cs_leaf(i, j, w, first, maxfirst, prevleaf, ancestor) {

	    var s, sparent, jprev;

	    // our result
	    var jleaf = 0;
	    var q;

	    // check j is a leaf
	    if (i <= j || w[first + j] <= w[maxfirst + i]) return -1;
	    // update max first[j] seen so far
	    w[maxfirst + i] = w[first + j];
	    // jprev = previous leaf of ith subtree
	    jprev = w[prevleaf + i];
	    w[prevleaf + i] = j;

	    // check j is first or subsequent leaf
	    if (jprev === -1) {
	      // 1st leaf, q = root of ith subtree
	      jleaf = 1;
	      q = i;
	    } else {
	      // update jleaf
	      jleaf = 2;
	      // q = least common ancester (jprev,j)
	      for (q = jprev; q != w[ancestor + q]; q = w[ancestor + q]) {}
	      for (s = jprev; s != q; s = sparent) {
	        // path compression
	        sparent = w[ancestor + s];
	        w[ancestor + s] = q;
	      }
	    }
	    return {
	      jleaf: jleaf,
	      q: q
	    };
	  };

	  return cs_leaf;
	}

	exports.name = 'cs_leaf';
	exports.path = 'sparse';
	exports.factory = factory;

/***/ },
/* 510 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load) {

	  var abs = load(__webpack_require__(246));
	  var divideScalar = load(__webpack_require__(241));
	  var multiply = load(__webpack_require__(244));

	  var larger = load(__webpack_require__(224));
	  var largerEq = load(__webpack_require__(511));

	  var cs_spsolve = load(__webpack_require__(512));

	  var SparseMatrix = type.SparseMatrix;

	  /**
	   * Computes the numeric LU factorization of the sparse matrix A. Implements a Left-looking LU factorization
	   * algorithm that computes L and U one column at a tume. At the kth step, it access columns 1 to k-1 of L 
	   * and column k of A. Given the fill-reducing column ordering q (see parameter s) computes L, U and pinv so
	   * L * U = A(p, q), where p is the inverse of pinv.
	   *
	   * @param {Matrix}  m               The A Matrix to factorize
	   * @param {Object}  s               The symbolic analysis from cs_sqr(). Provides the fill-reducing 
	   *                                  column ordering q
	   * @param {Number}  tol             Partial pivoting threshold (1 for partial pivoting)
	   *
	   * @return {Number}                 The numeric LU factorization of A or null
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_lu = function cs_lu(m, s, tol) {
	    // validate input
	    if (!m) return null;
	    // m arrays
	    var size = m._size;
	    // columns
	    var n = size[1];
	    // symbolic analysis result
	    var q;
	    var lnz = 100;
	    var unz = 100;
	    // update symbolic analysis parameters
	    if (s) {
	      q = s.q;
	      lnz = s.lnz || lnz;
	      unz = s.unz || unz;
	    }
	    // L arrays
	    var lvalues = []; // (lnz)
	    var lindex = []; // (lnz);
	    var lptr = []; // (n + 1);
	    // L
	    var L = new SparseMatrix({
	      values: lvalues,
	      index: lindex,
	      ptr: lptr,
	      size: [n, n]
	    });
	    // U arrays
	    var uvalues = []; // (unz);
	    var uindex = []; // (unz);
	    var uptr = []; // (n + 1);
	    // U
	    var U = new SparseMatrix({
	      values: uvalues,
	      index: uindex,
	      ptr: uptr,
	      size: [n, n]
	    });
	    // inverse of permutation vector
	    var pinv = []; // (n);
	    // vars 
	    var i, p;
	    // allocate arrays
	    var x = []; // (n);
	    var xi = []; // (2 * n);
	    // initialize variables
	    for (i = 0; i < n; i++) {
	      // clear workspace
	      x[i] = 0;
	      // no rows pivotal yet
	      pinv[i] = -1;
	      // no cols of L yet
	      lptr[i + 1] = 0;
	    }
	    // reset number of nonzero elements in L and U
	    lnz = 0;
	    unz = 0;
	    // compute L(:,k) and U(:,k)
	    for (var k = 0; k < n; k++) {
	      // update ptr
	      lptr[k] = lnz;
	      uptr[k] = unz;
	      // apply column permutations if needed
	      var col = q ? q[k] : k;
	      // solve triangular system, x = L\A(:,col)
	      var top = cs_spsolve(L, m, col, xi, x, pinv, 1);
	      // find pivot
	      var ipiv = -1;
	      var a = -1;
	      // loop xi[] from top -> n
	      for (p = top; p < n; p++) {
	        // x[i] is nonzero
	        i = xi[p];
	        // check row i is not yet pivotal
	        if (pinv[i] < 0) {
	          // absolute value of x[i]          
	          var xabs = abs(x[i]);
	          // check absoulte value is greater than pivot value
	          if (larger(xabs, a)) {
	            // largest pivot candidate so far
	            a = xabs;
	            ipiv = i;
	          }
	        } else {
	          // x(i) is the entry U(pinv[i],k)
	          uindex[unz] = pinv[i];
	          uvalues[unz++] = x[i];
	        }
	      }
	      // validate we found a valid pivot
	      if (ipiv == -1 || a <= 0) return null;
	      // update actual pivot column, give preference to diagonal value
	      if (pinv[col] < 0 && largerEq(abs(x[col]), multiply(a, tol))) ipiv = col;
	      // the chosen pivot
	      var pivot = x[ipiv];
	      // last entry in U(:,k) is U(k,k)
	      uindex[unz] = k;
	      uvalues[unz++] = pivot;
	      // ipiv is the kth pivot row
	      pinv[ipiv] = k;
	      // first entry in L(:,k) is L(k,k) = 1
	      lindex[lnz] = ipiv;
	      lvalues[lnz++] = 1;
	      // L(k+1:n,k) = x / pivot      
	      for (p = top; p < n; p++) {
	        // row
	        i = xi[p];
	        // check x(i) is an entry in L(:,k)
	        if (pinv[i] < 0) {
	          // save unpermuted row in L
	          lindex[lnz] = i;
	          // scale pivot column
	          lvalues[lnz++] = divideScalar(x[i], pivot);
	        }
	        // x[0..n-1] = 0 for next k
	        x[i] = 0;
	      }
	    }
	    // update ptr
	    lptr[n] = lnz;
	    uptr[n] = unz;
	    // fix row indices of L for final pinv
	    for (p = 0; p < lnz; p++) {
	      lindex[p] = pinv[lindex[p]];
	    } // trim arrays
	    lvalues.splice(lnz, lvalues.length - lnz);
	    lindex.splice(lnz, lindex.length - lnz);
	    uvalues.splice(unz, uvalues.length - unz);
	    uindex.splice(unz, uindex.length - unz);
	    // return LU factor
	    return {
	      L: L,
	      U: U,
	      pinv: pinv
	    };
	  };

	  return cs_lu;
	}

	exports.name = 'cs_lu';
	exports.path = 'sparse';
	exports.factory = factory;

/***/ },
/* 511 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var nearlyEqual = __webpack_require__(166).nearlyEqual;
	var bigNearlyEqual = __webpack_require__(209);

	function factory(type, config, load, typed) {

	  var matrix = load(__webpack_require__(212));

	  var algorithm03 = load(__webpack_require__(221));
	  var algorithm07 = load(__webpack_require__(222));
	  var algorithm12 = load(__webpack_require__(223));
	  var algorithm13 = load(__webpack_require__(217));
	  var algorithm14 = load(__webpack_require__(218));

	  var latex = __webpack_require__(192);

	  /**
	   * Test whether value x is larger or equal to y.
	   *
	   * The function returns true when x is larger than y or the relative
	   * difference between x and y is smaller than the configured epsilon. The
	   * function cannot be used to compare values smaller than approximately 2.22e-16.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.largerEq(x, y)
	   *
	   * Examples:
	   *
	   *    math.larger(2, 1 + 1);         // returns false
	   *    math.largerEq(2, 1 + 1);       // returns true
	   *
	   * See also:
	   *
	   *    equal, unequal, smaller, smallerEq, larger, compare
	   *
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
	   * @return {boolean | Array | Matrix} Returns true when the x is larger or equal to y, else returns false
	   */
	  var largerEq = typed('largerEq', {

	    'boolean, boolean': function booleanBoolean(x, y) {
	      return x >= y;
	    },

	    'number, number': function numberNumber(x, y) {
	      return x >= y || nearlyEqual(x, y, config.epsilon);
	    },

	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.gte(y) || bigNearlyEqual(x, y, config.epsilon);
	    },

	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.compare(y) !== -1;
	    },

	    'Complex, Complex': function ComplexComplex() {
	      throw new TypeError('No ordering relation is defined for complex numbers');
	    },

	    'Unit, Unit': function UnitUnit(x, y) {
	      if (!x.equalBase(y)) {
	        throw new Error('Cannot compare units with different base');
	      }
	      return largerEq(x.value, y.value);
	    },

	    'string, string': function stringString(x, y) {
	      return x >= y;
	    },

	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm07(x, y, largerEq);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm03(y, x, largerEq, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm03(x, y, largerEq, false);
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, largerEq);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return largerEq(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return largerEq(matrix(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return largerEq(x, matrix(y));
	    },

	    'Matrix, any': function MatrixAny(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm12(x, y, largerEq, false);
	          break;
	        default:
	          c = algorithm14(x, y, largerEq, false);
	          break;
	      }
	      return c;
	    },

	    'any, Matrix': function anyMatrix(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, largerEq, true);
	          break;
	        default:
	          c = algorithm14(y, x, largerEq, true);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, largerEq, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, largerEq, true).valueOf();
	    }
	  });

	  largerEq.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['largerEq'] + '${args[1]}\\right)'
	  };

	  return largerEq;
	}

	exports.name = 'largerEq';
	exports.factory = factory;

/***/ },
/* 512 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load) {

	  var divideScalar = load(__webpack_require__(241));
	  var multiply = load(__webpack_require__(244));
	  var subtract = load(__webpack_require__(237));

	  var cs_reach = load(__webpack_require__(513));

	  /**
	   * The function cs_spsolve() computes the solution to G * x = bk, where bk is the
	   * kth column of B. When lo is true, the function assumes G = L is lower triangular with the
	   * diagonal entry as the first entry in each column. When lo is true, the function assumes G = U 
	   * is upper triangular with the diagonal entry as the last entry in each column.
	   *
	   * @param {Matrix}  g               The G matrix
	   * @param {Matrix}  b               The B matrix
	   * @param {Number}  k               The kth column in B
	   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
	   *                                  The first n entries is the nonzero pattern, the last n entries is the stack
	   * @param {Array}   x               The soluton to the linear system G * x = b
	   * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b
	   * @param {boolean} lo              The lower (true) upper triangular (false) flag
	   *
	   * @return {Number}                 The index for the nonzero pattern
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_spsolve = function cs_spsolve(g, b, k, xi, x, pinv, lo) {
	    // g arrays
	    var gvalues = g._values;
	    var gindex = g._index;
	    var gptr = g._ptr;
	    var gsize = g._size;
	    // columns
	    var n = gsize[1];
	    // b arrays
	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    // vars
	    var p, p0, p1, q;
	    // xi[top..n-1] = cs_reach(B(:,k))
	    var top = cs_reach(g, b, k, xi, pinv);
	    // clear x
	    for (p = top; p < n; p++) {
	      x[xi[p]] = 0;
	    } // scatter b
	    for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) {
	      x[bindex[p]] = bvalues[p];
	    } // loop columns
	    for (var px = top; px < n; px++) {
	      // x array index for px
	      var j = xi[px];
	      // apply permutation vector (U x = b), j maps to column J of G
	      var J = pinv ? pinv[j] : j;
	      // check column J is empty
	      if (J < 0) continue;
	      // column value indeces in G, p0 <= p < p1
	      p0 = gptr[J];
	      p1 = gptr[J + 1];
	      // x(j) /= G(j,j)
	      x[j] = divideScalar(x[j], gvalues[lo ? p0 : p1 - 1]);
	      // first entry L(j,j)
	      p = lo ? p0 + 1 : p0;
	      q = lo ? p1 : p1 - 1;
	      // loop
	      for (; p < q; p++) {
	        // row
	        var i = gindex[p];
	        // x(i) -= G(i,j) * x(j)
	        x[i] = subtract(x[i], multiply(gvalues[p], x[j]));
	      }
	    }
	    // return top of stack
	    return top;
	  };

	  return cs_spsolve;
	}

	exports.name = 'cs_spsolve';
	exports.path = 'sparse';
	exports.factory = factory;

/***/ },
/* 513 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load) {

	  var cs_dfs = load(__webpack_require__(514));
	  var cs_marked = load(__webpack_require__(515));
	  var cs_mark = load(__webpack_require__(516));

	  /**
	   * The cs_reach function computes X = Reach(B), where B is the nonzero pattern of the n-by-1 
	   * sparse column of vector b. The function returns the set of nodes reachable from any node in B. The
	   * nonzero pattern xi of the solution x to the sparse linear system Lx=b is given by X=Reach(B).
	   *
	   * @param {Matrix}  g               The G matrix
	   * @param {Matrix}  b               The B matrix
	   * @param {Number}  k               The kth column in B
	   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
	   *                                  The first n entries is the nonzero pattern, the last n entries is the stack
	   * @param {Array}   pinv            The inverse row permutation vector
	   *
	   * @return {Number}                 The index for the nonzero pattern
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_reach = function cs_reach(g, b, k, xi, pinv) {
	    // g arrays
	    var gptr = g._ptr;
	    var gsize = g._size;
	    // b arrays
	    var bindex = b._index;
	    var bptr = b._ptr;
	    // columns
	    var n = gsize[1];
	    // vars
	    var p, p0, p1;
	    // initialize top
	    var top = n;
	    // loop column indeces in B
	    for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) {
	      // node i
	      var i = bindex[p];
	      // check node i is marked
	      if (!cs_marked(gptr, i)) {
	        // start a dfs at unmarked node i
	        top = cs_dfs(i, g, top, xi, pinv);
	      }
	    }
	    // loop columns from top -> n - 1
	    for (p = top; p < n; p++) {
	      // restore G
	      cs_mark(gptr, xi[p]);
	    }
	    return top;
	  };

	  return cs_reach;
	}

	exports.name = 'cs_reach';
	exports.path = 'sparse';
	exports.factory = factory;

/***/ },
/* 514 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load) {

	  var cs_marked = load(__webpack_require__(515));
	  var cs_mark = load(__webpack_require__(516));
	  var cs_unflip = load(__webpack_require__(517));

	  /**
	   * Depth-first search computes the nonzero pattern xi of the directed graph G (Matrix) starting
	   * at nodes in B (see cs_reach()).
	   *
	   * @param {Number}  j               The starting node for the DFS algorithm
	   * @param {Matrix}  g               The G matrix to search, ptr array modified, then restored
	   * @param {Number}  top             Start index in stack xi[top..n-1]
	   * @param {Number}  k               The kth column in B
	   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
	   *                                  The first n entries is the nonzero pattern, the last n entries is the stack
	   * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b
	   *
	   * @return {Number}                 New value of top
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_dfs = function cs_dfs(j, g, top, xi, pinv) {
	    // g arrays
	    var index = g._index;
	    var ptr = g._ptr;
	    var size = g._size;
	    // columns
	    var n = size[1];
	    // vars
	    var i, p, p2;
	    // initialize head
	    var head = 0;
	    // initialize the recursion stack
	    xi[0] = j;
	    // loop
	    while (head >= 0) {
	      // get j from the top of the recursion stack
	      j = xi[head];
	      // apply permutation vector
	      var jnew = pinv ? pinv[j] : j;
	      // check node j is marked
	      if (!cs_marked(ptr, j)) {
	        // mark node j as visited
	        cs_mark(ptr, j);
	        // update stack (last n entries in xi)
	        xi[n + head] = jnew < 0 ? 0 : cs_unflip(ptr[jnew]);
	      }
	      // node j done if no unvisited neighbors
	      var done = 1;
	      // examine all neighbors of j, stack (last n entries in xi)
	      for (p = xi[n + head], p2 = jnew < 0 ? 0 : cs_unflip(ptr[jnew + 1]); p < p2; p++) {
	        // consider neighbor node i
	        i = index[p];
	        // check we have visited node i, skip it
	        if (cs_marked(ptr, i)) continue;
	        // pause depth-first search of node j, update stack (last n entries in xi)
	        xi[n + head] = p;
	        // start dfs at node i
	        xi[++head] = i;
	        // node j is not done
	        done = 0;
	        // break, to start dfs(i)
	        break;
	      }
	      // check depth-first search at node j is done
	      if (done) {
	        // remove j from the recursion stack
	        head--;
	        // and place in the output stack
	        xi[--top] = j;
	      }
	    }
	    return top;
	  };

	  return cs_dfs;
	}

	exports.name = 'cs_dfs';
	exports.path = 'sparse';
	exports.factory = factory;

/***/ },
/* 515 */
/***/ function(module, exports) {

	'use strict';

	function factory() {

	  /**
	   * Checks if the node at w[j] is marked
	   *
	   * @param {Array}   w               The array
	   * @param {Number}  j               The array index
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_marked = function cs_marked(w, j) {
	    // check node is marked
	    return w[j] < 0;
	  };

	  return cs_marked;
	}

	exports.name = 'cs_marked';
	exports.path = 'sparse';
	exports.factory = factory;

/***/ },
/* 516 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load) {

	  var cs_flip = load(__webpack_require__(501));

	  /**
	   * Marks the node at w[j]
	   *
	   * @param {Array}   w               The array
	   * @param {Number}  j               The array index
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_mark = function cs_mark(w, j) {
	    // mark w[j]
	    w[j] = cs_flip(w[j]);
	  };

	  return cs_mark;
	}

	exports.name = 'cs_mark';
	exports.path = 'sparse';
	exports.factory = factory;

/***/ },
/* 517 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load) {

	  var cs_flip = load(__webpack_require__(501));

	  /**
	   * Flips the value if it is negative of returns the same value otherwise.
	   *
	   * @param {Number}  i               The value to flip
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_unflip = function cs_unflip(i) {
	    // flip the value if it is negative
	    return i < 0 ? cs_flip(i) : i;
	  };

	  return cs_unflip;
	}

	exports.name = 'cs_unflip';
	exports.path = 'sparse';
	exports.factory = factory;

/***/ },
/* 518 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load, typed) {

	  var matrix = load(__webpack_require__(212));
	  var divideScalar = load(__webpack_require__(241));
	  var multiplyScalar = load(__webpack_require__(240));
	  var subtract = load(__webpack_require__(237));
	  var equalScalar = load(__webpack_require__(208));

	  var solveValidation = load(__webpack_require__(519));

	  var DenseMatrix = type.DenseMatrix;

	  /** 
	   * Solves the linear equation system by forwards substitution. Matrix must be a lower triangular matrix.
	   *
	   * `L * x = b`
	   *
	   * Syntax:
	   *
	   *    math.lsolve(L, b);
	   *
	   * Examples:
	   *
	   *    var a = [[-2, 3], [2, 1]];
	   *    var b = [11, 9];
	   *    var x = lsolve(a, b);  // [[-5.5], [20]]
	   *
	   * See also:
	   *
	   *    lup, slu, usolve, lusolve
	   *
	   * @param {Matrix, Array} L       A N x N matrix or array (L)
	   * @param {Matrix, Array} b       A column vector with the b values
	   *
	   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)
	   */
	  var lsolve = typed('lsolve', {

	    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {
	      // process matrix
	      return _sparseForwardSubstitution(m, b);
	    },

	    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {
	      // process matrix
	      return _denseForwardSubstitution(m, b);
	    },

	    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
	      // create dense matrix from array
	      var m = matrix(a);
	      // use matrix implementation
	      var r = _denseForwardSubstitution(m, b);
	      // result
	      return r.valueOf();
	    }
	  });

	  var _denseForwardSubstitution = function _denseForwardSubstitution(m, b) {
	    // validate matrix and vector, return copy of column vector b
	    b = solveValidation(m, b, true);
	    // column vector data
	    var bdata = b._data;
	    // rows & columns
	    var rows = m._size[0];
	    var columns = m._size[1];
	    // result
	    var x = [];
	    // data
	    var data = m._data;
	    // forward solve m * x = b, loop columns
	    for (var j = 0; j < columns; j++) {
	      // b[j]
	      var bj = bdata[j][0] || 0;
	      // x[j]
	      var xj;
	      // forward substitution (outer product) avoids inner looping when bj == 0
	      if (!equalScalar(bj, 0)) {
	        // value @ [j, j]
	        var vjj = data[j][j];
	        // check vjj
	        if (equalScalar(vjj, 0)) {
	          // system cannot be solved
	          throw new Error('Linear system cannot be solved since matrix is singular');
	        }
	        // calculate xj
	        xj = divideScalar(bj, vjj);
	        // loop rows
	        for (var i = j + 1; i < rows; i++) {
	          // update copy of b
	          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, data[i][j]))];
	        }
	      } else {
	        // zero @ j
	        xj = 0;
	      }
	      // update x
	      x[j] = [xj];
	    }
	    // return vector
	    return new DenseMatrix({
	      data: x,
	      size: [rows, 1]
	    });
	  };

	  var _sparseForwardSubstitution = function _sparseForwardSubstitution(m, b) {
	    // validate matrix and vector, return copy of column vector b
	    b = solveValidation(m, b, true);
	    // column vector data
	    var bdata = b._data;
	    // rows & columns
	    var rows = m._size[0];
	    var columns = m._size[1];
	    // matrix arrays
	    var values = m._values;
	    var index = m._index;
	    var ptr = m._ptr;
	    // vars
	    var i, k;
	    // result
	    var x = [];
	    // forward solve m * x = b, loop columns
	    for (var j = 0; j < columns; j++) {
	      // b[j]
	      var bj = bdata[j][0] || 0;
	      // forward substitution (outer product) avoids inner looping when bj == 0
	      if (!equalScalar(bj, 0)) {
	        // value @ [j, j]
	        var vjj = 0;
	        // lower triangular matrix values & index (column j)
	        var jvalues = [];
	        var jindex = [];
	        // last index in column
	        var l = ptr[j + 1];
	        // values in column, find value @ [j, j]
	        for (k = ptr[j]; k < l; k++) {
	          // row
	          i = index[k];
	          // check row (rows are not sorted!)
	          if (i === j) {
	            // update vjj
	            vjj = values[k];
	          } else if (i > j) {
	            // store lower triangular
	            jvalues.push(values[k]);
	            jindex.push(i);
	          }
	        }
	        // at this point we must have a value @ [j, j]
	        if (equalScalar(vjj, 0)) {
	          // system cannot be solved, there is no value @ [j, j]
	          throw new Error('Linear system cannot be solved since matrix is singular');
	        }
	        // calculate xj
	        var xj = divideScalar(bj, vjj);
	        // loop lower triangular
	        for (k = 0, l = jindex.length; k < l; k++) {
	          // row
	          i = jindex[k];
	          // update copy of b
	          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, jvalues[k]))];
	        }
	        // update x
	        x[j] = [xj];
	      } else {
	        // update x
	        x[j] = [0];
	      }
	    }
	    // return vector
	    return new DenseMatrix({
	      data: x,
	      size: [rows, 1]
	    });
	  };

	  return lsolve;
	}

	exports.name = 'lsolve';
	exports.factory = factory;

/***/ },
/* 519 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__(199);

	var string = util.string;
	var array = util.array;

	var isArray = Array.isArray;

	function factory(type) {

	  var DenseMatrix = type.DenseMatrix;

	  /**
	   * Validates matrix and column vector b for backward/forward substitution algorithms.
	   *
	   * @param {Matrix} m            An N x N matrix
	   * @param {Array | Matrix} b    A column vector
	   * @param {Boolean} copy        Return a copy of vector b
	   *
	   * @return {DenseMatrix}        Dense column vector b
	   */
	  var solveValidation = function solveValidation(m, b, copy) {
	    // matrix size
	    var size = m.size();
	    // validate matrix dimensions
	    if (size.length !== 2) throw new RangeError('Matrix must be two dimensional (size: ' + string.format(size) + ')');
	    // rows & columns
	    var rows = size[0];
	    var columns = size[1];
	    // validate rows & columns
	    if (rows !== columns) throw new RangeError('Matrix must be square (size: ' + string.format(size) + ')');
	    // vars
	    var data, i, bdata;
	    // check b is matrix
	    if (b && b.isMatrix === true) {
	      // matrix size
	      var msize = b.size();
	      // vector
	      if (msize.length === 1) {
	        // check vector length
	        if (msize[0] !== rows) throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
	        // create data array
	        data = [];
	        // matrix data (DenseMatrix)
	        bdata = b._data;
	        // loop b data
	        for (i = 0; i < rows; i++) {
	          // row array
	          data[i] = [bdata[i]];
	        }
	        // return Dense Matrix
	        return new DenseMatrix({
	          data: data,
	          size: [rows, 1],
	          datatype: b._datatype
	        });
	      }
	      // two dimensions
	      if (msize.length === 2) {
	        // array must be a column vector
	        if (msize[0] !== rows || msize[1] !== 1) throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
	        // check matrix type
	        if (b.isDenseMatrix === true) {
	          // check a copy is needed
	          if (copy) {
	            // create data array
	            data = [];
	            // matrix data (DenseMatrix)
	            bdata = b._data;
	            // loop b data
	            for (i = 0; i < rows; i++) {
	              // row array
	              data[i] = [bdata[i][0]];
	            }
	            // return Dense Matrix
	            return new DenseMatrix({
	              data: data,
	              size: [rows, 1],
	              datatype: b._datatype
	            });
	          }
	          // b is already a column vector
	          return b;
	        }
	        // create data array
	        data = [];
	        for (i = 0; i < rows; i++) {
	          data[i] = [0];
	        } // sparse matrix arrays
	        var values = b._values;
	        var index = b._index;
	        var ptr = b._ptr;
	        // loop values in column 0
	        for (var k1 = ptr[1], k = ptr[0]; k < k1; k++) {
	          // row
	          i = index[k];
	          // add to data
	          data[i][0] = values[k];
	        }
	        // return Dense Matrix
	        return new DenseMatrix({
	          data: data,
	          size: [rows, 1],
	          datatype: b._datatype
	        });
	      }
	      // throw error
	      throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
	    }
	    // check b is array
	    if (isArray(b)) {
	      // size
	      var asize = array.size(b);
	      // check matrix dimensions, vector
	      if (asize.length === 1) {
	        // check vector length
	        if (asize[0] !== rows) throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
	        // create data array
	        data = [];
	        // loop b
	        for (i = 0; i < rows; i++) {
	          // row array
	          data[i] = [b[i]];
	        }
	        // return Dense Matrix
	        return new DenseMatrix({
	          data: data,
	          size: [rows, 1]
	        });
	      }
	      if (asize.length === 2) {
	        // array must be a column vector
	        if (asize[0] !== rows || asize[1] !== 1) throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
	        // create data array
	        data = [];
	        // loop b data
	        for (i = 0; i < rows; i++) {
	          // row array
	          data[i] = [b[i][0]];
	        }
	        // return Dense Matrix
	        return new DenseMatrix({
	          data: data,
	          size: [rows, 1]
	        });
	      }
	      // throw error
	      throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
	    }
	  };

	  return solveValidation;
	}

	exports.factory = factory;

/***/ },
/* 520 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isArray = Array.isArray;

	function factory(type, config, load, typed) {

	  var matrix = load(__webpack_require__(212));
	  var lup = load(__webpack_require__(497));
	  var slu = load(__webpack_require__(498));
	  var cs_ipvec = load(__webpack_require__(521));

	  var solveValidation = load(__webpack_require__(519));

	  var usolve = load(__webpack_require__(522));
	  var lsolve = load(__webpack_require__(518));

	  /**
	   * Solves the linear system `A * x = b` where `A` is an [n x n] matrix and `b` is a [n] column vector.
	   *
	   * Syntax:
	   *
	   *    math.lusolve(A, b)     // returns column vector with the solution to the linear system A * x = b
	   *    math.lusolve(lup, b)   // returns column vector with the solution to the linear system A * x = b, lup = math.lup(A)
	   *
	   * Examples:
	   *
	   *    var m = [[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 0], [0, 0, 0, 4]];
	   *
	   *    var x = math.lusolve(m, [-1, -1, -1, -1]);        // x = [[-1], [-0.5], [-1/3], [-0.25]]
	   *
	   *    var f = math.lup(m);
	   *    var x1 = math.lusolve(f, [-1, -1, -1, -1]);       // x1 = [[-1], [-0.5], [-1/3], [-0.25]]
	   *    var x2 = math.lusolve(f, [1, 2, 1, -1]);          // x2 = [[1], [1], [1/3], [-0.25]]
	   *
	   *    var a = [[-2, 3], [2, 1]];
	   *    var b = [11, 9];
	   *    var x = lusolve(a, b);  // [[-5.5], [20]]
	   *
	   * See also:
	   *
	   *    lup, slu, lsolve, usolve
	   *
	   * @param {Matrix | Array | Object} A      Invertible Matrix or the Matrix LU decomposition
	   * @param {Matrix | Array} b               Column Vector
	   * @param {number} [order]                 The Symbolic Ordering and Analysis order, see slu for details. Matrix must be a SparseMatrix
	   * @param {Number} [threshold]             Partial pivoting threshold (1 for partial pivoting), see slu for details. Matrix must be a SparseMatrix.
	   *
	   * @return {DenseMatrix | Array}           Column vector with the solution to the linear system A * x = b
	   */
	  var lusolve = typed('lusolve', {

	    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
	      // convert a to matrix
	      a = matrix(a);
	      // matrix lup decomposition
	      var d = lup(a);
	      // solve
	      var x = _lusolve(d.L, d.U, d.p, null, b);
	      // convert result to array
	      return x.valueOf();
	    },

	    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(a, b) {
	      // matrix lup decomposition
	      var d = lup(a);
	      // solve
	      return _lusolve(d.L, d.U, d.p, null, b);
	    },

	    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(a, b) {
	      // matrix lup decomposition
	      var d = lup(a);
	      // solve
	      return _lusolve(d.L, d.U, d.p, null, b);
	    },

	    'SparseMatrix, Array | Matrix, number, number': function SparseMatrixArrayMatrixNumberNumber(a, b, order, threshold) {
	      // matrix lu decomposition
	      var d = slu(a, order, threshold);
	      // solve
	      return _lusolve(d.L, d.U, d.p, d.q, b);
	    },

	    'Object, Array | Matrix': function ObjectArrayMatrix(d, b) {
	      // solve
	      return _lusolve(d.L, d.U, d.p, d.q, b);
	    }
	  });

	  var _toMatrix = function _toMatrix(a) {
	    // check it is a matrix
	    if (a && a.isMatrix === true) return a;
	    // check array
	    if (isArray(a)) return matrix(a);
	    // throw
	    throw new TypeError('Invalid Matrix LU decomposition');
	  };

	  var _lusolve = function _lusolve(l, u, p, q, b) {
	    // verify L, U, P
	    l = _toMatrix(l);
	    u = _toMatrix(u);
	    // validate matrix and vector
	    b = solveValidation(l, b, false);
	    // apply row permutations if needed (b is a DenseMatrix)
	    if (p) b._data = cs_ipvec(p, b._data);
	    // use forward substitution to resolve L * y = b
	    var y = lsolve(l, b);
	    // use backward substitution to resolve U * x = y
	    var x = usolve(u, y);
	    // apply column permutations if needed (x is a DenseMatrix)
	    if (q) x._data = cs_ipvec(q, x._data);
	    // return solution
	    return x;
	  };

	  return lusolve;
	}

	exports.name = 'lusolve';
	exports.factory = factory;

/***/ },
/* 521 */
/***/ function(module, exports) {

	'use strict';

	function factory() {

	  /**
	   * Permutes a vector; x = P'b. In MATLAB notation, x(p)=b.
	   *
	   * @param {Array} p           The permutation vector of length n. null value denotes identity
	   * @param {Array} b           The input vector
	   *
	   * @return {Array}            The output vector x = P'b
	   */
	  var cs_ipvec = function cs_ipvec(p, b, n) {
	    // vars 
	    var k;
	    var n = b.length;
	    var x = [];
	    // check permutation vector was provided, p = null denotes identity
	    if (p) {
	      // loop vector
	      for (k = 0; k < n; k++) {
	        // apply permutation
	        x[p[k]] = b[k];
	      }
	    } else {
	      // loop vector
	      for (k = 0; k < n; k++) {
	        // x[i] = b[i]
	        x[k] = b[k];
	      }
	    }
	    return x;
	  };

	  return cs_ipvec;
	}

	exports.name = 'cs_ipvec';
	exports.path = 'sparse';
	exports.factory = factory;

/***/ },
/* 522 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load, typed) {

	  var matrix = load(__webpack_require__(212));
	  var divideScalar = load(__webpack_require__(241));
	  var multiplyScalar = load(__webpack_require__(240));
	  var subtract = load(__webpack_require__(237));
	  var equalScalar = load(__webpack_require__(208));

	  var solveValidation = load(__webpack_require__(519));

	  var DenseMatrix = type.DenseMatrix;

	  /**
	   * Solves the linear equation system by backward substitution. Matrix must be an upper triangular matrix.
	   *
	   * `U * x = b`
	   *
	   * Syntax:
	   *
	   *    math.usolve(U, b);
	   *
	   * Examples:
	   *
	   *    var a = [[-2, 3], [2, 1]];
	   *    var b = [11, 9];
	   *    var x = usolve(a, b);  // [[8], [9]]
	   *
	   * See also:
	   *
	   *    lup, slu, usolve, lusolve
	   *
	   * @param {Matrix, Array} U       A N x N matrix or array (U)
	   * @param {Matrix, Array} b       A column vector with the b values
	   *
	   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)
	   */
	  var usolve = typed('usolve', {

	    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {
	      // process matrix
	      return _sparseBackwardSubstitution(m, b);
	    },

	    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {
	      // process matrix
	      return _denseBackwardSubstitution(m, b);
	    },

	    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
	      // create dense matrix from array
	      var m = matrix(a);
	      // use matrix implementation
	      var r = _denseBackwardSubstitution(m, b);
	      // result
	      return r.valueOf();
	    }
	  });

	  var _denseBackwardSubstitution = function _denseBackwardSubstitution(m, b) {
	    // validate matrix and vector, return copy of column vector b
	    b = solveValidation(m, b, true);
	    // column vector data
	    var bdata = b._data;
	    // rows & columns
	    var rows = m._size[0];
	    var columns = m._size[1];
	    // result
	    var x = [];
	    // arrays
	    var data = m._data;
	    // backward solve m * x = b, loop columns (backwards)
	    for (var j = columns - 1; j >= 0; j--) {
	      // b[j]
	      var bj = bdata[j][0] || 0;
	      // x[j]
	      var xj;
	      // backward substitution (outer product) avoids inner looping when bj == 0
	      if (!equalScalar(bj, 0)) {
	        // value @ [j, j]
	        var vjj = data[j][j];
	        // check vjj
	        if (equalScalar(vjj, 0)) {
	          // system cannot be solved
	          throw new Error('Linear system cannot be solved since matrix is singular');
	        }
	        // calculate xj
	        xj = divideScalar(bj, vjj);
	        // loop rows
	        for (var i = j - 1; i >= 0; i--) {
	          // update copy of b
	          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, data[i][j]))];
	        }
	      } else {
	        // zero value @ j
	        xj = 0;
	      }
	      // update x
	      x[j] = [xj];
	    }
	    // return column vector
	    return new DenseMatrix({
	      data: x,
	      size: [rows, 1]
	    });
	  };

	  var _sparseBackwardSubstitution = function _sparseBackwardSubstitution(m, b) {
	    // validate matrix and vector, return copy of column vector b
	    b = solveValidation(m, b, true);
	    // column vector data
	    var bdata = b._data;
	    // rows & columns
	    var rows = m._size[0];
	    var columns = m._size[1];
	    // matrix arrays
	    var values = m._values;
	    var index = m._index;
	    var ptr = m._ptr;
	    // vars
	    var i, k;
	    // result
	    var x = [];
	    // backward solve m * x = b, loop columns (backwards)
	    for (var j = columns - 1; j >= 0; j--) {
	      // b[j]
	      var bj = bdata[j][0] || 0;
	      // backward substitution (outer product) avoids inner looping when bj == 0
	      if (!equalScalar(bj, 0)) {
	        // value @ [j, j]
	        var vjj = 0;
	        // upper triangular matrix values & index (column j)
	        var jvalues = [];
	        var jindex = [];
	        // first & last indeces in column
	        var f = ptr[j];
	        var l = ptr[j + 1];
	        // values in column, find value @ [j, j], loop backwards
	        for (k = l - 1; k >= f; k--) {
	          // row
	          i = index[k];
	          // check row
	          if (i === j) {
	            // update vjj
	            vjj = values[k];
	          } else if (i < j) {
	            // store upper triangular
	            jvalues.push(values[k]);
	            jindex.push(i);
	          }
	        }
	        // at this point we must have a value @ [j, j]
	        if (equalScalar(vjj, 0)) {
	          // system cannot be solved, there is no value @ [j, j]
	          throw new Error('Linear system cannot be solved since matrix is singular');
	        }
	        // calculate xj
	        var xj = divideScalar(bj, vjj);
	        // loop upper triangular
	        for (k = 0, l = jindex.length; k < l; k++) {
	          // row
	          i = jindex[k];
	          // update copy of b
	          bdata[i] = [subtract(bdata[i][0], multiplyScalar(xj, jvalues[k]))];
	        }
	        // update x
	        x[j] = [xj];
	      } else {
	        // update x
	        x[j] = [0];
	      }
	    }
	    // return vector
	    return new DenseMatrix({
	      data: x,
	      size: [rows, 1]
	    });
	  };

	  return usolve;
	}

	exports.name = 'usolve';
	exports.factory = factory;

/***/ },
/* 523 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

		module.exports = [__webpack_require__(246), __webpack_require__(211), __webpack_require__(213), __webpack_require__(524), __webpack_require__(526), __webpack_require__(527), __webpack_require__(486), __webpack_require__(528), __webpack_require__(530), __webpack_require__(532), __webpack_require__(533), __webpack_require__(247), __webpack_require__(534), __webpack_require__(535), __webpack_require__(536), __webpack_require__(539), __webpack_require__(542), __webpack_require__(543), __webpack_require__(544), __webpack_require__(244), __webpack_require__(545), __webpack_require__(547), __webpack_require__(242), __webpack_require__(548), __webpack_require__(550), __webpack_require__(537), __webpack_require__(551), __webpack_require__(237), __webpack_require__(238), __webpack_require__(552), __webpack_require__(553)];

/***/ },
/* 524 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  var unaryMinus = load(__webpack_require__(238));
	  var isNegative = load(__webpack_require__(525));
	  var matrix = load(__webpack_require__(212));

	  /**
	   * Calculate the cubic root of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.cbrt(x)
	   *    math.cbrt(x, allRoots)
	   *
	   * Examples:
	   *
	   *    math.cbrt(27);                  // returns 3
	   *    math.cube(3);                   // returns 27
	   *    math.cbrt(-64);                 // returns -4
	   *    math.cbrt(math.unit('27 m^3')); // returns Unit 3 m
	   *    math.cbrt([27, 64, 125]);       // returns [3, 4, 5]
	   *
	   *    var x = math.complex('8i');
	   *    math.cbrt(x);                   // returns Complex 1.7320508075689 + i
	   *    math.cbrt(x, true);             // returns Matrix [
	   *                                    //    1.7320508075689 + i
	   *                                    //   -1.7320508075689 + i
	   *                                    //   -2i
	   *                                    // ]
	   *
	   * See also:
	   *
	   *    square, sqrt, cube
	   *
	   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x
	   *            Value for which to calculate the cubic root.
	   * @param {boolean} [allRoots]  Optional, false by default. Only applicable
	   *            when `x` is a number or complex number. If true, all complex
	   *            roots are returned, if false (default) the principal root is
	   *            returned.
	   * @return {number | BigNumber | Complex | Unit | Array | Matrix}
	   *            Returns the cubic root of `x`
	   */
	  var cbrt = typed('cbrt', {
	    'number': _cbrtNumber,
	    // note: signature 'number, boolean' is also supported,
	    //       created by typed as it knows how to convert number to Complex

	    'Complex': _cbrtComplex,

	    'Complex, boolean': _cbrtComplex,

	    'BigNumber': function BigNumber(x) {
	      return x.cbrt();
	    },

	    'Unit': _cbrtUnit,

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since cbrt(0) = 0
	      return deepMap(x, cbrt, true);
	    }
	  });

	  /**
	   * Calculate the cubic root for a complex number
	   * @param {Complex} x
	   * @param {boolean} [allRoots]   If true, the function will return an array
	   *                               with all three roots. If false or undefined,
	   *                               the principal root is returned.
	   * @returns {Complex | Array.<Complex> | Matrix.<Complex>} Returns the cubic root(s) of x
	   * @private
	   */
	  function _cbrtComplex(x, allRoots) {
	    // https://www.wikiwand.com/en/Cube_root#/Complex_numbers

	    var arg_3 = x.arg() / 3;
	    var abs = x.abs();

	    // principal root:
	    var principal = new type.Complex(_cbrtNumber(abs), 0).mul(new type.Complex(0, arg_3).exp());

	    if (allRoots) {
	      var all = [principal, new type.Complex(_cbrtNumber(abs), 0).mul(new type.Complex(0, arg_3 + Math.PI * 2 / 3).exp()), new type.Complex(_cbrtNumber(abs), 0).mul(new type.Complex(0, arg_3 - Math.PI * 2 / 3).exp())];

	      return config.matrix === 'Array' ? all : matrix(all);
	    } else {
	      return principal;
	    }
	  }

	  /**
	   * Calculate the cubic root for a Unit
	   * @param {Unit} x
	   * @return {Unit} Returns the cubic root of x
	   * @private
	   */
	  function _cbrtUnit(x) {
	    if (x.value && x.value.isComplex) {
	      var result = x.clone();
	      result.value = 1.0;
	      result = result.pow(1.0 / 3); // Compute the units
	      result.value = _cbrtComplex(x.value); // Compute the value
	      return result;
	    } else {
	      var negate = isNegative(x.value);
	      if (negate) {
	        x.value = unaryMinus(x.value);
	      }

	      // TODO: create a helper function for this
	      var third;
	      if (x.value && x.value.isBigNumber) {
	        third = new type.BigNumber(1).div(3);
	      } else if (x.value && x.value.isFraction) {
	        third = new type.Fraction(1, 3);
	      } else {
	        third = 1 / 3;
	      }

	      var result = x.pow(third);

	      if (negate) {
	        result.value = unaryMinus(result.value);
	      }

	      return result;
	    }
	  }

	  cbrt.toTex = { 1: '\\sqrt[3]{${args[0]}}' };

	  return cbrt;
	}

	/**
	 * Calculate cbrt for a number
	 *
	 * Code from es6-shim.js:
	 *   https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1564-L1577
	 *
	 * @param {number} x
	 * @returns {number | Complex} Returns the cubic root of x
	 * @private
	 */
	var _cbrtNumber = Math.cbrt || function (x) {
	  if (x === 0) {
	    return x;
	  }

	  var negate = x < 0;
	  var result;
	  if (negate) {
	    x = -x;
	  }

	  if (isFinite(x)) {
	    result = Math.exp(Math.log(x) / 3);
	    // from http://en.wikipedia.org/wiki/Cube_root#Numerical_methods
	    result = (x / (result * result) + 2 * result) / 3;
	  } else {
	    result = x;
	  }

	  return negate ? -result : result;
	};

	exports.name = 'cbrt';
	exports.factory = factory;

/***/ },
/* 525 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);
	var number = __webpack_require__(166);

	function factory(type, config, load, typed) {
	  /**
	   * Test whether a value is negative: smaller than zero.
	   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.
	   *
	   * The function is evaluated element-wise in case of Array or Matrix input.
	   *
	   * Syntax:
	   *
	   *     math.isNegative(x)
	   *
	   * Examples:
	   *
	   *    math.isNegative(3);                     // returns false
	   *    math.isNegative(-2);                    // returns true
	   *    math.isNegative(0);                     // returns false
	   *    math.isNegative(-0);                    // returns false
	   *    math.isNegative(math.bignumber(2));     // returns false
	   *    math.isNegative(math.fraction(-2, 5));  // returns true
	   *    math.isNegative('-2');                  // returns true
	   *    math.isNegative([2, 0, -3]');           // returns [false, false, true]
	   *
	   * See also:
	   *
	   *    isNumeric, isPositive, isZero, isInteger
	   *
	   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
	   * @return {boolean}  Returns true when `x` is larger than zero.
	   *                    Throws an error in case of an unknown data type.
	   */
	  var isNegative = typed('isNegative', {
	    'number': function number(x) {
	      return x < 0;
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.isNeg() && !x.isZero() && !x.isNaN();
	    },

	    'Fraction': function Fraction(x) {
	      return x.s < 0; // It's enough to decide on the sign
	    },

	    'Unit': function Unit(x) {
	      return isNegative(x.value);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, isNegative);
	    }
	  });

	  return isNegative;
	}

	exports.name = 'isNegative';
	exports.factory = factory;

/***/ },
/* 526 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  /**
	   * Round a value towards plus infinity
	   * If `x` is complex, both real and imaginary part are rounded towards plus infinity.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.ceil(x)
	   *
	   * Examples:
	   *
	   *    math.ceil(3.2);               // returns number 4
	   *    math.ceil(3.8);               // returns number 4
	   *    math.ceil(-4.2);              // returns number -4
	   *    math.ceil(-4.7);              // returns number -4
	   *
	   *    var c = math.complex(3.2, -2.7);
	   *    math.ceil(c);                 // returns Complex 4 - 2i
	   *
	   *    math.ceil([3.2, 3.8, -4.7]);  // returns Array [4, 4, -4]
	   *
	   * See also:
	   *
	   *    floor, fix, round
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
	   */
	  var ceil = typed('ceil', {
	    'number': Math.ceil,

	    'Complex': function Complex(x) {
	      return x.ceil();
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.ceil();
	    },

	    'Fraction': function Fraction(x) {
	      return x.ceil();
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since ceil(0) = 0
	      return deepMap(x, ceil, true);
	    }
	  });

	  ceil.toTex = { 1: '\\left\\lceil${args[0]}\\right\\rceil' };

	  return ceil;
	}

	exports.name = 'ceil';
	exports.factory = factory;

/***/ },
/* 527 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {

	  /**
	   * Compute the cube of a value, `x * x * x`.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.cube(x)
	   *
	   * Examples:
	   *
	   *    math.cube(2);            // returns number 8
	   *    math.pow(2, 3);          // returns number 8
	   *    math.cube(4);            // returns number 64
	   *    4 * 4 * 4;               // returns number 64
	   *
	   *    math.cube([1, 2, 3, 4]); // returns Array [1, 8, 27, 64]
	   *
	   * See also:
	   *
	   *    multiply, square, pow, cbrt
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x  Number for which to calculate the cube
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} Cube of x
	   */
	  var cube = typed('cube', {
	    'number': function number(x) {
	      return x * x * x;
	    },

	    'Complex': function Complex(x) {
	      return x.mul(x).mul(x); // Is faster than pow(x, 3)
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.times(x).times(x);
	    },

	    'Fraction': function Fraction(x) {
	      return x.pow(3); // Is faster than mul()mul()mul()
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since cube(0) = 0
	      return deepMap(x, cube, true);
	    },

	    'Unit': function Unit(x) {
	      return x.pow(3);
	    }
	  });

	  cube.toTex = { 1: '\\left(${args[0]}\\right)^3' };

	  return cube;
	}

	exports.name = 'cube';
	exports.factory = factory;

/***/ },
/* 528 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load, typed) {

	  var matrix = load(__webpack_require__(212));
	  var divideScalar = load(__webpack_require__(241));
	  var latex = __webpack_require__(192);

	  var algorithm02 = load(__webpack_require__(529));
	  var algorithm03 = load(__webpack_require__(221));
	  var algorithm07 = load(__webpack_require__(222));
	  var algorithm11 = load(__webpack_require__(245));
	  var algorithm12 = load(__webpack_require__(223));
	  var algorithm13 = load(__webpack_require__(217));
	  var algorithm14 = load(__webpack_require__(218));

	  /**
	   * Divide two matrices element wise. The function accepts both matrices and
	   * scalar values.
	   *
	   * Syntax:
	   *
	   *    math.dotDivide(x, y)
	   *
	   * Examples:
	   *
	   *    math.dotDivide(2, 4);   // returns 0.5
	   *
	   *    a = [[9, 5], [6, 1]];
	   *    b = [[3, 2], [5, 2]];
	   *
	   *    math.dotDivide(a, b);   // returns [[3, 2.5], [1.2, 0.5]]
	   *    math.divide(a, b);      // returns [[1.75, 0.75], [-1.75, 2.25]]
	   *
	   * See also:
	   *
	   *    divide, multiply, dotMultiply
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Numerator
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Denominator
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Quotient, `x ./ y`
	   */
	  var dotDivide = typed('dotDivide', {

	    'any, any': divideScalar,

	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse ./ sparse
	              c = algorithm07(x, y, divideScalar, false);
	              break;
	            default:
	              // sparse ./ dense
	              c = algorithm02(y, x, divideScalar, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense ./ sparse
	              c = algorithm03(x, y, divideScalar, false);
	              break;
	            default:
	              // dense ./ dense
	              c = algorithm13(x, y, divideScalar);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return dotDivide(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return dotDivide(matrix(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return dotDivide(x, matrix(y));
	    },

	    'Matrix, any': function MatrixAny(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm11(x, y, divideScalar, false);
	          break;
	        default:
	          c = algorithm14(x, y, divideScalar, false);
	          break;
	      }
	      return c;
	    },

	    'any, Matrix': function anyMatrix(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, divideScalar, true);
	          break;
	        default:
	          c = algorithm14(y, x, divideScalar, true);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, divideScalar, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, divideScalar, true).valueOf();
	    }
	  });

	  dotDivide.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['dotDivide'] + '${args[1]}\\right)'
	  };

	  return dotDivide;
	}

	exports.name = 'dotDivide';
	exports.factory = factory;

/***/ },
/* 529 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var DimensionError = __webpack_require__(202);

	function factory(type, config, load, typed) {

	  var equalScalar = load(__webpack_require__(208));

	  var SparseMatrix = type.SparseMatrix;

	  /**
	   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij). 
	   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).
	   *
	   *
	   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
	   * C(i,j) = ┤
	   *          └  0            ; otherwise
	   *
	   *
	   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
	   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)
	   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
	   */
	  var algorithm02 = function algorithm02(denseMatrix, sparseMatrix, callback, inverse) {
	    // dense matrix arrays
	    var adata = denseMatrix._data;
	    var asize = denseMatrix._size;
	    var adt = denseMatrix._datatype;
	    // sparse matrix arrays
	    var bvalues = sparseMatrix._values;
	    var bindex = sparseMatrix._index;
	    var bptr = sparseMatrix._ptr;
	    var bsize = sparseMatrix._size;
	    var bdt = sparseMatrix._datatype;

	    // validate dimensions
	    if (asize.length !== bsize.length) throw new DimensionError(asize.length, bsize.length);

	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');

	    // sparse matrix cannot be a Pattern matrix
	    if (!bvalues) throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // datatype
	    var dt;
	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // find signature that matches (dt, dt)
	      eq = typed.find(equalScalar, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // result (SparseMatrix)
	    var cvalues = [];
	    var cindex = [];
	    var cptr = [];

	    // loop columns in b
	    for (var j = 0; j < columns; j++) {
	      // update cptr
	      cptr[j] = cindex.length;
	      // values in column j
	      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        var i = bindex[k];
	        // update C(i,j)
	        var cij = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
	        // check for nonzero
	        if (!eq(cij, zero)) {
	          // push i & v
	          cindex.push(i);
	          cvalues.push(cij);
	        }
	      }
	    }
	    // update cptr
	    cptr[columns] = cindex.length;

	    // return sparse matrix
	    return new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    });
	  };

	  return algorithm02;
	}

	exports.name = 'algorithm02';
	exports.factory = factory;

/***/ },
/* 530 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load, typed) {

	  var matrix = load(__webpack_require__(212));
	  var multiplyScalar = load(__webpack_require__(240));
	  var latex = __webpack_require__(192);

	  var algorithm02 = load(__webpack_require__(529));
	  var algorithm09 = load(__webpack_require__(531));
	  var algorithm11 = load(__webpack_require__(245));
	  var algorithm13 = load(__webpack_require__(217));
	  var algorithm14 = load(__webpack_require__(218));

	  /**
	   * Multiply two matrices element wise. The function accepts both matrices and
	   * scalar values.
	   *
	   * Syntax:
	   *
	   *    math.dotMultiply(x, y)
	   *
	   * Examples:
	   *
	   *    math.dotMultiply(2, 4); // returns 8
	   *
	   *    a = [[9, 5], [6, 1]];
	   *    b = [[3, 2], [5, 2]];
	   *
	   *    math.dotMultiply(a, b); // returns [[27, 10], [30, 2]]
	   *    math.multiply(a, b);    // returns [[52, 28], [23, 14]]
	   *
	   * See also:
	   *
	   *    multiply, divide, dotDivide
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Left hand value
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Right hand value
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Multiplication of `x` and `y`
	   */
	  var dotMultiply = typed('dotMultiply', {

	    'any, any': multiplyScalar,

	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse .* sparse
	              c = algorithm09(x, y, multiplyScalar, false);
	              break;
	            default:
	              // sparse .* dense
	              c = algorithm02(y, x, multiplyScalar, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense .* sparse
	              c = algorithm02(x, y, multiplyScalar, false);
	              break;
	            default:
	              // dense .* dense
	              c = algorithm13(x, y, multiplyScalar);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return dotMultiply(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return dotMultiply(matrix(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return dotMultiply(x, matrix(y));
	    },

	    'Matrix, any': function MatrixAny(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm11(x, y, multiplyScalar, false);
	          break;
	        default:
	          c = algorithm14(x, y, multiplyScalar, false);
	          break;
	      }
	      return c;
	    },

	    'any, Matrix': function anyMatrix(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm11(y, x, multiplyScalar, true);
	          break;
	        default:
	          c = algorithm14(y, x, multiplyScalar, true);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();
	    }
	  });

	  dotMultiply.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['dotMultiply'] + '${args[1]}\\right)'
	  };

	  return dotMultiply;
	}

	exports.name = 'dotMultiply';
	exports.factory = factory;

/***/ },
/* 531 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var DimensionError = __webpack_require__(202);

	function factory(type, config, load, typed) {

	  var equalScalar = load(__webpack_require__(208));

	  var SparseMatrix = type.SparseMatrix;

	  /**
	   * Iterates over SparseMatrix A and invokes the callback function f(Aij, Bij). 
	   * Callback function invoked NZA times, number of nonzero elements in A.
	   *
	   *
	   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0
	   * C(i,j) = ┤  
	   *          └  0            ; otherwise
	   *
	   *
	   * @param {Matrix}   a                 The SparseMatrix instance (A)
	   * @param {Matrix}   b                 The SparseMatrix instance (B)
	   * @param {Function} callback          The f(Aij,Bij) operation to invoke
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
	   */
	  var algorithm09 = function algorithm09(a, b, callback) {
	    // sparse matrix arrays
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var asize = a._size;
	    var adt = a._datatype;
	    // sparse matrix arrays
	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    var bsize = b._size;
	    var bdt = b._datatype;

	    // validate dimensions
	    if (asize.length !== bsize.length) throw new DimensionError(asize.length, bsize.length);

	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // datatype
	    var dt;
	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // find signature that matches (dt, dt)
	      eq = typed.find(equalScalar, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // result arrays
	    var cvalues = avalues && bvalues ? [] : undefined;
	    var cindex = [];
	    var cptr = [];
	    // matrix
	    var c = new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    });

	    // workspaces
	    var x = cvalues ? [] : undefined;
	    // marks indicating we have a value in x for a given column
	    var w = [];

	    // vars
	    var i, j, k, k0, k1;

	    // loop columns
	    for (j = 0; j < columns; j++) {
	      // update cptr
	      cptr[j] = cindex.length;
	      // column mark
	      var mark = j + 1;
	      // check we need to process values
	      if (x) {
	        // loop B(:,j)
	        for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
	          // row
	          i = bindex[k];
	          // update workspace
	          w[i] = mark;
	          x[i] = bvalues[k];
	        }
	      }
	      // loop A(:,j)
	      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        i = aindex[k];
	        // check we need to process values
	        if (x) {
	          // b value @ i,j
	          var vb = w[i] === mark ? x[i] : zero;
	          // invoke f
	          var vc = cf(avalues[k], vb);
	          // check zero value
	          if (!eq(vc, zero)) {
	            // push index
	            cindex.push(i);
	            // push value
	            cvalues.push(vc);
	          }
	        } else {
	          // push index
	          cindex.push(i);
	        }
	      }
	    }
	    // update cptr
	    cptr[columns] = cindex.length;

	    // return sparse matrix
	    return c;
	  };

	  return algorithm09;
	}

	exports.name = 'algorithm09';
	exports.factory = factory;

/***/ },
/* 532 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load, typed) {

	  var matrix = load(__webpack_require__(212));
	  var pow = load(__webpack_require__(242));
	  var latex = __webpack_require__(192);

	  var algorithm03 = load(__webpack_require__(221));
	  var algorithm07 = load(__webpack_require__(222));
	  var algorithm11 = load(__webpack_require__(245));
	  var algorithm12 = load(__webpack_require__(223));
	  var algorithm13 = load(__webpack_require__(217));
	  var algorithm14 = load(__webpack_require__(218));

	  /**
	   * Calculates the power of x to y element wise.
	   *
	   * Syntax:
	   *
	   *    math.dotPow(x, y)
	   *
	   * Examples:
	   *
	   *    math.dotPow(2, 3);            // returns number 8
	   *
	   *    var a = [[1, 2], [4, 3]];
	   *    math.dotPow(a, 2);            // returns Array [[1, 4], [16, 9]]
	   *    math.pow(a, 2);               // returns Array [[9, 8], [16, 17]]
	   *
	   * See also:
	   *
	   *    pow, sqrt, multiply
	   *
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y  The exponent
	   * @return {number | BigNumber | Complex | Unit | Array | Matrix}                     The value of `x` to the power `y`
	   */
	  var dotPow = typed('dotPow', {

	    'any, any': pow,

	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse .^ sparse
	              c = algorithm07(x, y, pow, false);
	              break;
	            default:
	              // sparse .^ dense
	              c = algorithm03(y, x, pow, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense .^ sparse
	              c = algorithm03(x, y, pow, false);
	              break;
	            default:
	              // dense .^ dense
	              c = algorithm13(x, y, pow);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return dotPow(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return dotPow(matrix(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return dotPow(x, matrix(y));
	    },

	    'Matrix, any': function MatrixAny(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm11(x, y, dotPow, false);
	          break;
	        default:
	          c = algorithm14(x, y, dotPow, false);
	          break;
	      }
	      return c;
	    },

	    'any, Matrix': function anyMatrix(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, dotPow, true);
	          break;
	        default:
	          c = algorithm14(y, x, dotPow, true);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, dotPow, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, dotPow, true).valueOf();
	    }
	  });

	  dotPow.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['dotPow'] + '${args[1]}\\right)'
	  };

	  return dotPow;
	}

	exports.name = 'dotPow';
	exports.factory = factory;

/***/ },
/* 533 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  /**
	   * Calculate the exponent of a value.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.exp(x)
	   *
	   * Examples:
	   *
	   *    math.exp(2);                  // returns number 7.3890560989306495
	   *    math.pow(math.e, 2);          // returns number 7.3890560989306495
	   *    math.log(math.exp(2));        // returns number 2
	   *
	   *    math.exp([1, 2, 3]);
	   *    // returns Array [
	   *    //   2.718281828459045,
	   *    //   7.3890560989306495,
	   *    //   20.085536923187668
	   *    // ]
	   *
	   * See also:
	   *
	   *    log, pow
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to exponentiate
	   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`
	   */
	  var exp = typed('exp', {
	    'number': Math.exp,

	    'Complex': function Complex(x) {
	      return x.exp();
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.exp();
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // TODO: exp(sparse) should return a dense matrix since exp(0)==1
	      return deepMap(x, exp);
	    }
	  });

	  exp.toTex = { 1: '\\exp\\left(${args[0]}\\right)' };

	  return exp;
	}

	exports.name = 'exp';
	exports.factory = factory;

/***/ },
/* 534 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  /**
	   * Round a value towards minus infinity.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.floor(x)
	   *
	   * Examples:
	   *
	   *    math.floor(3.2);              // returns number 3
	   *    math.floor(3.8);              // returns number 3
	   *    math.floor(-4.2);             // returns number -5
	   *    math.floor(-4.7);             // returns number -5
	   *
	   *    var c = math.complex(3.2, -2.7);
	   *    math.floor(c);                // returns Complex 3 - 3i
	   *
	   *    math.floor([3.2, 3.8, -4.7]); // returns Array [3, 3, -5]
	   *
	   * See also:
	   *
	   *    ceil, fix, round
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
	   */
	  var floor = typed('floor', {
	    'number': Math.floor,

	    'Complex': function Complex(x) {
	      return x.floor();
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.floor();
	    },

	    'Fraction': function Fraction(x) {
	      return x.floor();
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since floor(0) = 0
	      return deepMap(x, floor, true);
	    }
	  });

	  floor.toTex = { 1: '\\left\\lfloor${args[0]}\\right\\rfloor' };

	  return floor;
	}

	exports.name = 'floor';
	exports.factory = factory;

/***/ },
/* 535 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isInteger = __webpack_require__(166).isInteger;

	function factory(type, config, load, typed) {

	  var matrix = load(__webpack_require__(212));

	  var algorithm01 = load(__webpack_require__(214));
	  var algorithm04 = load(__webpack_require__(215));
	  var algorithm10 = load(__webpack_require__(216));
	  var algorithm13 = load(__webpack_require__(217));
	  var algorithm14 = load(__webpack_require__(218));

	  /**
	   * Calculate the greatest common divisor for two or more values or arrays.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.gcd(a, b)
	   *    math.gcd(a, b, c, ...)
	   *
	   * Examples:
	   *
	   *    math.gcd(8, 12);              // returns 4
	   *    math.gcd(-4, 6);              // returns 2
	   *    math.gcd(25, 15, -10);        // returns 5
	   *
	   *    math.gcd([8, -4], [12, 6]);   // returns [4, 2]
	   *
	   * See also:
	   *
	   *    lcm, xgcd
	   *
	   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers
	   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor
	   */
	  var gcd = typed('gcd', {

	    'number, number': _gcd,

	    'BigNumber, BigNumber': _gcdBigNumber,

	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.gcd(y);
	    },

	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm04(x, y, gcd);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm01(y, x, gcd, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm01(x, y, gcd, false);
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, gcd);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return gcd(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return gcd(matrix(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return gcd(x, matrix(y));
	    },

	    'Matrix, number | BigNumber': function MatrixNumberBigNumber(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm10(x, y, gcd, false);
	          break;
	        default:
	          c = algorithm14(x, y, gcd, false);
	          break;
	      }
	      return c;
	    },

	    'number | BigNumber, Matrix': function numberBigNumberMatrix(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm10(y, x, gcd, true);
	          break;
	        default:
	          c = algorithm14(y, x, gcd, true);
	          break;
	      }
	      return c;
	    },

	    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, gcd, false).valueOf();
	    },

	    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, gcd, true).valueOf();
	    },

	    // TODO: need a smarter notation here
	    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber(a, b, args) {
	      var res = gcd(a, b);
	      for (var i = 0; i < args.length; i++) {
	        res = gcd(res, args[i]);
	      }
	      return res;
	    }
	  });

	  gcd.toTex = '\\gcd\\left(${args}\\right)';

	  return gcd;

	  /**
	   * Calculate gcd for BigNumbers
	   * @param {BigNumber} a
	   * @param {BigNumber} b
	   * @returns {BigNumber} Returns greatest common denominator of a and b
	   * @private
	   */
	  function _gcdBigNumber(a, b) {
	    if (!a.isInt() || !b.isInt()) {
	      throw new Error('Parameters in function gcd must be integer numbers');
	    }

	    // http://en.wikipedia.org/wiki/Euclidean_algorithm
	    var zero = new type.BigNumber(0);
	    while (!b.isZero()) {
	      var r = a.mod(b);
	      a = b;
	      b = r;
	    }
	    return a.lt(zero) ? a.neg() : a;
	  }
	}

	/**
	 * Calculate gcd for numbers
	 * @param {number} a
	 * @param {number} b
	 * @returns {number} Returns the greatest common denominator of a and b
	 * @private
	 */
	function _gcd(a, b) {
	  if (!isInteger(a) || !isInteger(b)) {
	    throw new Error('Parameters in function gcd must be integer numbers');
	  }

	  // http://en.wikipedia.org/wiki/Euclidean_algorithm
	  var r;
	  while (b != 0) {
	    r = a % b;
	    a = b;
	    b = r;
	  }
	  return a < 0 ? -a : a;
	}

	exports.name = 'gcd';
	exports.factory = factory;

/***/ },
/* 536 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var flatten = __webpack_require__(200).flatten;

	function factory(type, config, load, typed) {
	  var abs = load(__webpack_require__(246));
	  var add = load(__webpack_require__(213));
	  var divide = load(__webpack_require__(241));
	  var multiply = load(__webpack_require__(240));
	  var sqrt = load(__webpack_require__(537));
	  var smaller = load(__webpack_require__(220));
	  var isPositive = load(__webpack_require__(538));

	  /**
	   * Calculate the hypotenusa of a list with values. The hypotenusa is defined as:
	   *
	   *     hypot(a, b, c, ...) = sqrt(a^2 + b^2 + c^2 + ...)
	   *
	   * For matrix input, the hypotenusa is calculated for all values in the matrix.
	   *
	   * Syntax:
	   *
	   *     math.hypot(a, b, ...)
	   *     math.hypot([a, b, c, ...])
	   *
	   * Examples:
	   *
	   *     math.hypot(3, 4);      // 5
	   *     math.hypot(3, 4, 5);   // 7.0710678118654755
	   *     math.hypot([3, 4, 5]); // 7.0710678118654755
	   *     math.hypot(-2);        // 2
	   *
	   * See also:
	   *
	   *     abs, norm
	   *
	   * @param {... number | BigNumber} args
	   * @return {number | BigNumber} Returns the hypothenusa of the input values.
	   */
	  var hypot = typed('hypot', {
	    '... number | BigNumber': _hypot,

	    'Array': function Array(x) {
	      return hypot.apply(hypot, flatten(x));
	    },

	    'Matrix': function Matrix(x) {
	      return hypot.apply(hypot, flatten(x.toArray()));
	    }
	  });

	  /**
	   * Calculate the hypotenusa for an Array with values
	   * @param {Array.<number | BigNumber>} args
	   * @return {number | BigNumber} Returns the result
	   * @private
	   */
	  function _hypot(args) {
	    // code based on `hypot` from es6-shim:
	    // https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1619-L1633
	    var result = 0;
	    var largest = 0;

	    for (var i = 0; i < args.length; i++) {
	      var value = abs(args[i]);
	      if (smaller(largest, value)) {
	        result = multiply(result, multiply(divide(largest, value), divide(largest, value)));
	        result = add(result, 1);
	        largest = value;
	      } else {
	        result = add(result, isPositive(value) ? multiply(divide(value, largest), divide(value, largest)) : value);
	      }
	    }

	    return multiply(largest, sqrt(result));
	  }

	  hypot.toTex = '\\hypot\\left(${args}\\right)';

	  return hypot;
	}

	exports.name = 'hypot';
	exports.factory = factory;

/***/ },
/* 537 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  /**
	   * Calculate the square root of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.sqrt(x)
	   *
	   * Examples:
	   *
	   *    math.sqrt(25);                // returns 5
	   *    math.square(5);               // returns 25
	   *    math.sqrt(-4);                // returns Complex 2i
	   *
	   * See also:
	   *
	   *    square, multiply, cube, cbrt
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix | Unit} x
	   *            Value for which to calculate the square root.
	   * @return {number | BigNumber | Complex | Array | Matrix | Unit}
	   *            Returns the square root of `x`
	   */
	  var sqrt = typed('sqrt', {
	    'number': _sqrtNumber,

	    'Complex': function Complex(x) {
	      return x.sqrt();
	    },

	    'BigNumber': function BigNumber(x) {
	      if (!x.isNegative() || config.predictable) {
	        return x.sqrt();
	      } else {
	        // negative value -> downgrade to number to do complex value computation
	        return _sqrtNumber(x.toNumber());
	      }
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since sqrt(0) = 0
	      return deepMap(x, sqrt, true);
	    },

	    'Unit': function Unit(x) {
	      // Someday will work for complex units when they are implemented
	      return x.pow(0.5);
	    }

	  });

	  /**
	   * Calculate sqrt for a number
	   * @param {number} x
	   * @returns {number | Complex} Returns the square root of x
	   * @private
	   */
	  function _sqrtNumber(x) {
	    if (x >= 0 || config.predictable) {
	      return Math.sqrt(x);
	    } else {
	      return new type.Complex(x, 0).sqrt();
	    }
	  }

	  sqrt.toTex = { 1: '\\sqrt{${args[0]}}' };

	  return sqrt;
	}

	exports.name = 'sqrt';
	exports.factory = factory;

/***/ },
/* 538 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);
	var number = __webpack_require__(166);

	function factory(type, config, load, typed) {
	  /**
	   * Test whether a value is positive: larger than zero.
	   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.
	   *
	   * The function is evaluated element-wise in case of Array or Matrix input.
	   *
	   * Syntax:
	   *
	   *     math.isPositive(x)
	   *
	   * Examples:
	   *
	   *    math.isPositive(3);                     // returns true
	   *    math.isPositive(-2);                    // returns false
	   *    math.isPositive(0);                     // returns false
	   *    math.isPositive(-0);                    // returns false
	   *    math.isPositive(0.5);                   // returns true
	   *    math.isPositive(math.bignumber(2));     // returns true
	   *    math.isPositive(math.fraction(-2, 5));  // returns false
	   *    math.isPositive(math.fraction(1,3));    // returns false
	   *    math.isPositive('2');                   // returns true
	   *    math.isPositive([2, 0, -3]');           // returns [true, false, false]
	   *
	   * See also:
	   *
	   *    isNumeric, isZero, isNegative, isInteger
	   *
	   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
	   * @return {boolean}  Returns true when `x` is larger than zero.
	   *                    Throws an error in case of an unknown data type.
	   */
	  var isPositive = typed('isPositive', {
	    'number': function number(x) {
	      return x > 0;
	    },

	    'BigNumber': function BigNumber(x) {
	      return !x.isNeg() && !x.isZero() && !x.isNaN();
	    },

	    'Fraction': function Fraction(x) {
	      return x.s > 0 && x.n > 0;
	    },

	    'Unit': function Unit(x) {
	      return isPositive(x.value);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, isPositive);
	    }
	  });

	  return isPositive;
	}

	exports.name = 'isPositive';
	exports.factory = factory;

/***/ },
/* 539 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isInteger = __webpack_require__(166).isInteger;

	function factory(type, config, load, typed) {

	  var matrix = load(__webpack_require__(212));

	  var algorithm02 = load(__webpack_require__(529));
	  var algorithm06 = load(__webpack_require__(540));
	  var algorithm11 = load(__webpack_require__(245));
	  var algorithm13 = load(__webpack_require__(217));
	  var algorithm14 = load(__webpack_require__(218));

	  /**
	   * Calculate the least common multiple for two or more values or arrays.
	   *
	   * lcm is defined as:
	   *
	   *     lcm(a, b) = abs(a * b) / gcd(a, b)
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.lcm(a, b)
	   *    math.lcm(a, b, c, ...)
	   *
	   * Examples:
	   *
	   *    math.lcm(4, 6);               // returns 12
	   *    math.lcm(6, 21);              // returns 42
	   *    math.lcm(6, 21, 5);           // returns 210
	   *
	   *    math.lcm([4, 6], [6, 21]);    // returns [12, 42]
	   *
	   * See also:
	   *
	   *    gcd, xgcd
	   *
	   * @param {... number | BigNumber | Array | Matrix} args  Two or more integer numbers
	   * @return {number | BigNumber | Array | Matrix}                           The least common multiple
	   */
	  var lcm = typed('lcm', {
	    'number, number': _lcm,

	    'BigNumber, BigNumber': _lcmBigNumber,

	    'Fraction, Fraction': function FractionFraction(x, y) {

	      return x.lcm(y);
	    },

	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm06(x, y, lcm);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm02(y, x, lcm, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm02(x, y, lcm, false);
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, lcm);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return lcm(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return lcm(matrix(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return lcm(x, matrix(y));
	    },

	    'Matrix, number | BigNumber': function MatrixNumberBigNumber(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm11(x, y, lcm, false);
	          break;
	        default:
	          c = algorithm14(x, y, lcm, false);
	          break;
	      }
	      return c;
	    },

	    'number | BigNumber, Matrix': function numberBigNumberMatrix(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm11(y, x, lcm, true);
	          break;
	        default:
	          c = algorithm14(y, x, lcm, true);
	          break;
	      }
	      return c;
	    },

	    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, lcm, false).valueOf();
	    },

	    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, lcm, true).valueOf();
	    },

	    // TODO: need a smarter notation here
	    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber(a, b, args) {
	      var res = lcm(a, b);
	      for (var i = 0; i < args.length; i++) {
	        res = lcm(res, args[i]);
	      }
	      return res;
	    }
	  });

	  lcm.toTex = undefined; // use default template

	  return lcm;

	  /**
	   * Calculate lcm for two BigNumbers
	   * @param {BigNumber} a
	   * @param {BigNumber} b
	   * @returns {BigNumber} Returns the least common multiple of a and b
	   * @private
	   */
	  function _lcmBigNumber(a, b) {
	    if (!a.isInt() || !b.isInt()) {
	      throw new Error('Parameters in function lcm must be integer numbers');
	    }

	    if (a.isZero() || b.isZero()) {
	      return new type.BigNumber(0);
	    }

	    // http://en.wikipedia.org/wiki/Euclidean_algorithm
	    // evaluate lcm here inline to reduce overhead
	    var prod = a.times(b);
	    while (!b.isZero()) {
	      var t = b;
	      b = a.mod(t);
	      a = t;
	    }
	    return prod.div(a).abs();
	  }
	}

	/**
	 * Calculate lcm for two numbers
	 * @param {number} a
	 * @param {number} b
	 * @returns {number} Returns the least common multiple of a and b
	 * @private
	 */
	function _lcm(a, b) {
	  if (!isInteger(a) || !isInteger(b)) {
	    throw new Error('Parameters in function lcm must be integer numbers');
	  }

	  if (a == 0 || b == 0) {
	    return 0;
	  }

	  // http://en.wikipedia.org/wiki/Euclidean_algorithm
	  // evaluate lcm here inline to reduce overhead
	  var t;
	  var prod = a * b;
	  while (b != 0) {
	    t = b;
	    b = a % t;
	    a = t;
	  }
	  return Math.abs(prod / a);
	}

	exports.name = 'lcm';
	exports.factory = factory;

/***/ },
/* 540 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var scatter = __webpack_require__(541);
	var DimensionError = __webpack_require__(202);

	function factory(type, config, load, typed) {

	  var equalScalar = load(__webpack_require__(208));

	  var SparseMatrix = type.SparseMatrix;

	  /**
	   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). 
	   * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.
	   *
	   *
	   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
	   * C(i,j) = ┤  
	   *          └  0            ; otherwise
	   *
	   *
	   * @param {Matrix}   a                 The SparseMatrix instance (A)
	   * @param {Matrix}   b                 The SparseMatrix instance (B)
	   * @param {Function} callback          The f(Aij,Bij) operation to invoke
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
	   */
	  var algorithm06 = function algorithm06(a, b, callback) {
	    // sparse matrix arrays
	    var avalues = a._values;
	    var asize = a._size;
	    var adt = a._datatype;
	    // sparse matrix arrays
	    var bvalues = b._values;
	    var bsize = b._size;
	    var bdt = b._datatype;

	    // validate dimensions
	    if (asize.length !== bsize.length) throw new DimensionError(asize.length, bsize.length);

	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // datatype
	    var dt;
	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // find signature that matches (dt, dt)
	      eq = typed.find(equalScalar, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // result arrays
	    var cvalues = avalues && bvalues ? [] : undefined;
	    var cindex = [];
	    var cptr = [];
	    // matrix
	    var c = new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    });

	    // workspaces
	    var x = cvalues ? [] : undefined;
	    // marks indicating we have a value in x for a given column
	    var w = [];
	    // marks indicating value in a given row has been updated
	    var u = [];

	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // update cptr
	      cptr[j] = cindex.length;
	      // columns mark
	      var mark = j + 1;
	      // scatter the values of A(:,j) into workspace
	      scatter(a, j, w, x, u, mark, c, cf);
	      // scatter the values of B(:,j) into workspace
	      scatter(b, j, w, x, u, mark, c, cf);
	      // check we need to process values (non pattern matrix)
	      if (x) {
	        // initialize first index in j
	        var k = cptr[j];
	        // loop index in j
	        while (k < cindex.length) {
	          // row
	          var i = cindex[k];
	          // check function was invoked on current row (Aij !=0 && Bij != 0)
	          if (u[i] === mark) {
	            // value @ i
	            var v = x[i];
	            // check for zero value
	            if (!eq(v, zero)) {
	              // push value
	              cvalues.push(v);
	              // increment pointer
	              k++;
	            } else {
	              // remove value @ i, do not increment pointer
	              cindex.splice(k, 1);
	            }
	          } else {
	            // remove value @ i, do not increment pointer
	            cindex.splice(k, 1);
	          }
	        }
	      } else {
	        // initialize first index in j
	        var p = cptr[j];
	        // loop index in j
	        while (p < cindex.length) {
	          // row
	          var r = cindex[p];
	          // check function was invoked on current row (Aij !=0 && Bij != 0)
	          if (u[r] !== mark) {
	            // remove value @ i, do not increment pointer
	            cindex.splice(p, 1);
	          } else {
	            // increment pointer
	            p++;
	          }
	        }
	      }
	    }
	    // update cptr
	    cptr[columns] = cindex.length;

	    // return sparse matrix
	    return c;
	  };

	  return algorithm06;
	}

	exports.name = 'algorithm06';
	exports.factory = factory;

/***/ },
/* 541 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function scatter(a, j, w, x, u, mark, c, f, inverse, update, value) {
	  // a arrays
	  var avalues = a._values;
	  var aindex = a._index;
	  var aptr = a._ptr;
	  // c arrays
	  var cindex = c._index;

	  // vars
	  var k, k0, k1, i;

	  // check we need to process values (pattern matrix)
	  if (x) {
	    // values in j
	    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	      // row
	      i = aindex[k];
	      // check value exists in current j
	      if (w[i] !== mark) {
	        // i is new entry in j
	        w[i] = mark;
	        // add i to pattern of C
	        cindex.push(i);
	        // x(i) = A, check we need to call function this time
	        if (update) {
	          // copy value to workspace calling callback function
	          x[i] = inverse ? f(avalues[k], value) : f(value, avalues[k]);
	          // function was called on current row
	          u[i] = mark;
	        } else {
	          // copy value to workspace
	          x[i] = avalues[k];
	        }
	      } else {
	        // i exists in C already
	        x[i] = inverse ? f(avalues[k], x[i]) : f(x[i], avalues[k]);
	        // function was called on current row
	        u[i] = mark;
	      }
	    }
	  } else {
	    // values in j
	    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	      // row
	      i = aindex[k];
	      // check value exists in current j
	      if (w[i] !== mark) {
	        // i is new entry in j
	        w[i] = mark;
	        // add i to pattern of C
	        cindex.push(i);
	      } else {
	        // indicate function was called on current row
	        u[i] = mark;
	      }
	    }
	  }
	};

/***/ },
/* 542 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  var divideScalar = load(__webpack_require__(241));

	  /**
	   * Calculate the logarithm of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.log(x)
	   *    math.log(x, base)
	   *
	   * Examples:
	   *
	   *    math.log(3.5);                  // returns 1.252762968495368
	   *    math.exp(math.log(2.4));        // returns 2.4
	   *
	   *    math.pow(10, 4);                // returns 10000
	   *    math.log(10000, 10);            // returns 4
	   *    math.log(10000) / math.log(10); // returns 4
	   *
	   *    math.log(1024, 2);              // returns 10
	   *    math.pow(2, 10);                // returns 1024
	   *
	   * See also:
	   *
	   *    exp, log10
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x
	   *            Value for which to calculate the logarithm.
	   * @param {number | BigNumber | Complex} [base=e]
	   *            Optional base for the logarithm. If not provided, the natural
	   *            logarithm of `x` is calculated.
	   * @return {number | BigNumber | Complex | Array | Matrix}
	   *            Returns the logarithm of `x`
	   */
	  var log = typed('log', {
	    'number': function number(x) {
	      if (x >= 0 || config.predictable) {
	        return Math.log(x);
	      } else {
	        // negative value -> complex value computation
	        return new type.Complex(x, 0).log();
	      }
	    },

	    'Complex': function Complex(x) {
	      return x.log();
	    },

	    'BigNumber': function BigNumber(x) {
	      if (!x.isNegative() || config.predictable) {
	        return x.ln();
	      } else {
	        // downgrade to number, return Complex valued result
	        return new type.Complex(x.toNumber(), 0).log();
	      }
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, log);
	    },

	    'any, any': function anyAny(x, base) {
	      // calculate logarithm for a specified base, log(x, base)
	      return divideScalar(log(x), log(base));
	    }
	  });

	  log.toTex = {
	    1: '\\ln\\left(${args[0]}\\right)',
	    2: '\\log_{${args[1]}}\\left(${args[0]}\\right)'
	  };

	  return log;
	}

	exports.name = 'log';
	exports.factory = factory;

/***/ },
/* 543 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  /**
	   * Calculate the 10-base logarithm of a value. This is the same as calculating `log(x, 10)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.log10(x)
	   *
	   * Examples:
	   *
	   *    math.log10(0.00001);            // returns -5
	   *    math.log10(10000);              // returns 4
	   *    math.log(10000) / math.log(10); // returns 4
	   *    math.pow(10, 4);                // returns 10000
	   *
	   * See also:
	   *
	   *    exp, log
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x
	   *            Value for which to calculate the logarithm.
	   * @return {number | BigNumber | Complex | Array | Matrix}
	   *            Returns the 10-base logarithm of `x`
	   */
	  var log10 = typed('log10', {
	    'number': function number(x) {
	      if (x >= 0 || config.predictable) {
	        return _log10(x);
	      } else {
	        // negative value -> complex value computation
	        return new type.Complex(x, 0).log().div(Math.LN10);
	      }
	    },

	    'Complex': function Complex(x) {
	      return new type.Complex(x).log().div(Math.LN10);
	    },

	    'BigNumber': function BigNumber(x) {
	      if (!x.isNegative() || config.predictable) {
	        return x.log();
	      } else {
	        // downgrade to number, return Complex valued result
	        return new type.Complex(x.toNumber(), 0).log().div(Math.LN10);
	      }
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, log10);
	    }
	  });

	  log10.toTex = { 1: '\\log_{10}\\left(${args[0]}\\right)' };

	  return log10;
	}

	/**
	 * Calculate the 10-base logarithm of a number
	 * @param {number} x
	 * @return {number}
	 * @private
	 */
	var _log10 = Math.log10 || function (x) {
	  return Math.log(x) / Math.LN10;
	};

	exports.name = 'log10';
	exports.factory = factory;

/***/ },
/* 544 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load, typed) {

	  var matrix = load(__webpack_require__(212));
	  var latex = __webpack_require__(192);

	  var algorithm02 = load(__webpack_require__(529));
	  var algorithm03 = load(__webpack_require__(221));
	  var algorithm05 = load(__webpack_require__(239));
	  var algorithm11 = load(__webpack_require__(245));
	  var algorithm12 = load(__webpack_require__(223));
	  var algorithm13 = load(__webpack_require__(217));
	  var algorithm14 = load(__webpack_require__(218));

	  /**
	   * Calculates the modulus, the remainder of an integer division.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * The modulus is defined as:
	   *
	   *     x - y * floor(x / y)
	   *
	   * See http://en.wikipedia.org/wiki/Modulo_operation.
	   *
	   * Syntax:
	   *
	   *    math.mod(x, y)
	   *
	   * Examples:
	   *
	   *    math.mod(8, 3);                // returns 2
	   *    math.mod(11, 2);               // returns 1
	   *
	   *    function isOdd(x) {
	   *      return math.mod(x, 2) != 0;
	   *    }
	   *
	   *    isOdd(2);                      // returns false
	   *    isOdd(3);                      // returns true
	   *
	   * See also:
	   *
	   *    divide
	   *
	   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend
	   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor
	   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.
	   */
	  var mod = typed('mod', {

	    'number, number': _mod,

	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return y.isZero() ? x : x.mod(y);
	    },

	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.mod(y);
	    },

	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // mod(sparse, sparse)
	              c = algorithm05(x, y, mod, false);
	              break;
	            default:
	              // mod(sparse, dense)
	              c = algorithm02(y, x, mod, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // mod(dense, sparse)
	              c = algorithm03(x, y, mod, false);
	              break;
	            default:
	              // mod(dense, dense)
	              c = algorithm13(x, y, mod);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return mod(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return mod(matrix(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return mod(x, matrix(y));
	    },

	    'Matrix, any': function MatrixAny(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm11(x, y, mod, false);
	          break;
	        default:
	          c = algorithm14(x, y, mod, false);
	          break;
	      }
	      return c;
	    },

	    'any, Matrix': function anyMatrix(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, mod, true);
	          break;
	        default:
	          c = algorithm14(y, x, mod, true);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, mod, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, mod, true).valueOf();
	    }
	  });

	  mod.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['mod'] + '${args[1]}\\right)'
	  };

	  return mod;

	  /**
	   * Calculate the modulus of two numbers
	   * @param {number} x
	   * @param {number} y
	   * @returns {number} res
	   * @private
	   */
	  function _mod(x, y) {
	    if (y > 0) {
	      // We don't use JavaScript's % operator here as this doesn't work
	      // correctly for x < 0 and x == 0
	      // see http://en.wikipedia.org/wiki/Modulo_operation
	      return x - y * Math.floor(x / y);
	    } else if (y === 0) {
	      return x;
	    } else {
	      // y < 0
	      // TODO: implement mod for a negative divisor
	      throw new Error('Cannot calculate mod for a negative divisor');
	    }
	  }
	}

	exports.name = 'mod';
	exports.factory = factory;

/***/ },
/* 545 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load, typed) {

	  var abs = load(__webpack_require__(246));
	  var add = load(__webpack_require__(211));
	  var pow = load(__webpack_require__(242));
	  var sqrt = load(__webpack_require__(537));
	  var multiply = load(__webpack_require__(244));
	  var equalScalar = load(__webpack_require__(208));
	  var larger = load(__webpack_require__(224));
	  var smaller = load(__webpack_require__(220));
	  var matrix = load(__webpack_require__(212));
	  var trace = load(__webpack_require__(546));
	  var transpose = load(__webpack_require__(504));

	  /**
	   * Calculate the norm of a number, vector or matrix.
	   *
	   * The second parameter p is optional. If not provided, it defaults to 2.
	   *
	   * Syntax:
	   *
	   *    math.norm(x)
	   *    math.norm(x, p)
	   *
	   * Examples:
	   *
	   *    math.abs(-3.5);                         // returns 3.5
	   *    math.norm(-3.5);                        // returns 3.5
	   *
	   *    math.norm(math.complex(3, -4));         // returns 5
	   *
	   *    math.norm([1, 2, -3], Infinity);        // returns 3
	   *    math.norm([1, 2, -3], -Infinity);       // returns 1
	   *
	   *    math.norm([3, 4], 2);                   // returns 5
	   *
	   *    math.norm([[1, 2], [3, 4]], 1)          // returns 6
	   *    math.norm([[1, 2], [3, 4]], 'inf');     // returns 7
	   *    math.norm([[1, 2], [3, 4]], 'fro');     // returns 5.477225575051661
	   *
	   * See also:
	   *
	   *    abs, hypot
	   *
	   * @param  {number | BigNumber | Complex | Array | Matrix} x
	   *            Value for which to calculate the norm
	   * @param  {number | BigNumber | string} [p=2]
	   *            Vector space.
	   *            Supported numbers include Infinity and -Infinity.
	   *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)
	   * @return {number | BigNumber} the p-norm
	   */
	  var norm = typed('norm', {
	    'number': Math.abs,

	    'Complex': function Complex(x) {
	      return x.abs();
	    },

	    'BigNumber': function BigNumber(x) {
	      // norm(x) = abs(x)
	      return x.abs();
	    },

	    'boolean | null': function booleanNull(x) {
	      // norm(x) = abs(x)
	      return Math.abs(x);
	    },

	    'Array': function Array(x) {
	      return _norm(matrix(x), 2);
	    },

	    'Matrix': function Matrix(x) {
	      return _norm(x, 2);
	    },

	    'number | Complex | BigNumber | boolean | null, number | BigNumber | string': function numberComplexBigNumberBooleanNullNumberBigNumberString(x) {
	      // ignore second parameter, TODO: remove the option of second parameter for these types
	      return norm(x);
	    },

	    'Array, number | BigNumber | string': function ArrayNumberBigNumberString(x, p) {
	      return _norm(matrix(x), p);
	    },

	    'Matrix, number | BigNumber | string': function MatrixNumberBigNumberString(x, p) {
	      return _norm(x, p);
	    }
	  });

	  /**
	   * Calculate the norm for an array
	   * @param {Array} x
	   * @param {number | string} p
	   * @returns {number} Returns the norm
	   * @private
	   */
	  function _norm(x, p) {
	    // size
	    var sizeX = x.size();

	    // check if it is a vector
	    if (sizeX.length == 1) {
	      // check p
	      if (p === Number.POSITIVE_INFINITY || p === 'inf') {
	        // norm(x, Infinity) = max(abs(x))
	        var pinf = 0;
	        // skip zeros since abs(0) == 0
	        x.forEach(function (value) {
	          var v = abs(value);
	          if (larger(v, pinf)) pinf = v;
	        }, true);
	        return pinf;
	      }
	      if (p === Number.NEGATIVE_INFINITY || p === '-inf') {
	        // norm(x, -Infinity) = min(abs(x))
	        var ninf;
	        // skip zeros since abs(0) == 0
	        x.forEach(function (value) {
	          var v = abs(value);
	          if (!ninf || smaller(v, ninf)) ninf = v;
	        }, true);
	        return ninf || 0;
	      }
	      if (p === 'fro') {
	        return _norm(x, 2);
	      }
	      if (typeof p === 'number' && !isNaN(p)) {
	        // check p != 0
	        if (!equalScalar(p, 0)) {
	          // norm(x, p) = sum(abs(xi) ^ p) ^ 1/p
	          var n = 0;
	          // skip zeros since abs(0) == 0
	          x.forEach(function (value) {
	            n = add(pow(abs(value), p), n);
	          }, true);
	          return pow(n, 1 / p);
	        }
	        return Number.POSITIVE_INFINITY;
	      }
	      // invalid parameter value
	      throw new Error('Unsupported parameter value');
	    }
	    // MxN matrix
	    if (sizeX.length == 2) {
	      // check p
	      if (p === 1) {
	        // norm(x) = the largest column sum
	        var c = [];
	        // result
	        var maxc = 0;
	        // skip zeros since abs(0) == 0
	        x.forEach(function (value, index) {
	          var j = index[1];
	          var cj = add(c[j] || 0, abs(value));
	          if (larger(cj, maxc)) maxc = cj;
	          c[j] = cj;
	        }, true);
	        return maxc;
	      }
	      if (p === Number.POSITIVE_INFINITY || p === 'inf') {
	        // norm(x) = the largest row sum
	        var r = [];
	        // result
	        var maxr = 0;
	        // skip zeros since abs(0) == 0
	        x.forEach(function (value, index) {
	          var i = index[0];
	          var ri = add(r[i] || 0, abs(value));
	          if (larger(ri, maxr)) maxr = ri;
	          r[i] = ri;
	        }, true);
	        return maxr;
	      }
	      if (p === 'fro') {
	        // norm(x) = sqrt(sum(diag(x'x)))
	        return sqrt(trace(multiply(transpose(x), x)));
	      }
	      if (p === 2) {
	        // not implemented
	        throw new Error('Unsupported parameter value, missing implementation of matrix singular value decomposition');
	      }
	      // invalid parameter value
	      throw new Error('Unsupported parameter value');
	    }
	  }

	  norm.toTex = {
	    1: '\\left\\|${args[0]}\\right\\|',
	    2: undefined // use default template
	  };

	  return norm;
	}

	exports.name = 'norm';
	exports.factory = factory;

/***/ },
/* 546 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var clone = __webpack_require__(163).clone;
	var format = __webpack_require__(183).format;

	function factory(type, config, load, typed) {

	  var matrix = load(__webpack_require__(212));
	  var add = load(__webpack_require__(211));

	  /**
	   * Calculate the trace of a matrix: the sum of the elements on the main
	   * diagonal of a square matrix.
	   *
	   * Syntax:
	   *
	   *    math.trace(x)
	   *
	   * Examples:
	   *
	   *    math.trace([[1, 2], [3, 4]]); // returns 5
	   *
	   *    var A = [
	   *      [1, 2, 3],
	   *      [-1, 2, 3],
	   *      [2, 0, 3]
	   *    ]
	   *    math.trace(A); // returns 6
	   *
	   * See also:
	   *
	   *    diag
	   *
	   * @param {Array | Matrix} x  A matrix
	   *
	   * @return {number} The trace of `x`
	   */
	  var trace = typed('trace', {

	    'Array': function Array(x) {
	      // use dense matrix implementation
	      return trace(matrix(x));
	    },

	    'Matrix': function Matrix(x) {
	      // result
	      var c;
	      // process storage format
	      switch (x.storage()) {
	        case 'dense':
	          c = _denseTrace(x);
	          break;
	        case 'sparse':
	          c = _sparseTrace(x);
	          break;
	      }
	      return c;
	    },

	    'any': clone
	  });

	  var _denseTrace = function _denseTrace(m) {
	    // matrix size & data
	    var size = m._size;
	    var data = m._data;

	    // process dimensions
	    switch (size.length) {
	      case 1:
	        // vector
	        if (size[0] == 1) {
	          // return data[0]
	          return clone(data[0]);
	        }
	        throw new RangeError('Matrix must be square (size: ' + format(size) + ')');
	      case 2:
	        // two dimensional
	        var rows = size[0];
	        var cols = size[1];
	        if (rows === cols) {
	          // calulate sum
	          var sum = 0;
	          // loop diagonal
	          for (var i = 0; i < rows; i++) {
	            sum = add(sum, data[i][i]);
	          } // return trace
	          return sum;
	        }
	        throw new RangeError('Matrix must be square (size: ' + format(size) + ')');
	      default:
	        // multi dimensional
	        throw new RangeError('Matrix must be two dimensional (size: ' + format(size) + ')');
	    }
	  };

	  var _sparseTrace = function _sparseTrace(m) {
	    // matrix arrays
	    var values = m._values;
	    var index = m._index;
	    var ptr = m._ptr;
	    var size = m._size;
	    // check dimensions
	    var rows = size[0];
	    var columns = size[1];
	    // matrix must be square
	    if (rows === columns) {
	      // calulate sum
	      var sum = 0;
	      // check we have data (avoid looping columns)
	      if (values.length > 0) {
	        // loop columns
	        for (var j = 0; j < columns; j++) {
	          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	          var k0 = ptr[j];
	          var k1 = ptr[j + 1];
	          // loop k within [k0, k1[
	          for (var k = k0; k < k1; k++) {
	            // row index
	            var i = index[k];
	            // check row
	            if (i === j) {
	              // accumulate value
	              sum = add(sum, values[k]);
	              // exit loop
	              break;
	            }
	            if (i > j) {
	              // exit loop, no value on the diagonal for column j
	              break;
	            }
	          }
	        }
	      }
	      // return trace
	      return sum;
	    }
	    throw new RangeError('Matrix must be square (size: ' + format(size) + ')');
	  };

	  trace.toTex = { 1: '\\mathrm{tr}\\left(${args[0]}\\right)' };

	  return trace;
	}

	exports.name = 'trace';
	exports.factory = factory;

/***/ },
/* 547 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load, typed) {

	  var matrix = load(__webpack_require__(212));

	  var algorithm01 = load(__webpack_require__(214));
	  var algorithm02 = load(__webpack_require__(529));
	  var algorithm06 = load(__webpack_require__(540));
	  var algorithm11 = load(__webpack_require__(245));
	  var algorithm13 = load(__webpack_require__(217));
	  var algorithm14 = load(__webpack_require__(218));

	  /**
	   * Calculate the nth root of a value.
	   * The principal nth root of a positive real number A, is the positive real
	   * solution of the equation
	   *
	   *     x^root = A
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *     math.nthRoot(a)
	   *     math.nthRoot(a, root)
	   *
	   * Examples:
	   *
	   *     math.nthRoot(9, 2);    // returns 3, as 3^2 == 9
	   *     math.sqrt(9);          // returns 3, as 3^2 == 9
	   *     math.nthRoot(64, 3);   // returns 4, as 4^3 == 64
	   *
	   * See also:
	   *
	   *     sqrt, pow
	   *
	   * @param {number | BigNumber | Array | Matrix | Complex} a
	   *              Value for which to calculate the nth root
	   * @param {number | BigNumber} [root=2]    The root.
	   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`
	   */
	  var nthRoot = typed('nthRoot', {

	    'number': function number(x) {
	      return _nthRoot(x, 2);
	    },
	    'number, number': _nthRoot,

	    'BigNumber': function BigNumber(x) {
	      return _bigNthRoot(x, new type.BigNumber(2));
	    },
	    'Complex': function Complex(x) {
	      return _nthComplexRoot(x, 2);
	    },
	    'Complex, number': _nthComplexRoot,
	    'BigNumber, BigNumber': _bigNthRoot,

	    'Array | Matrix': function ArrayMatrix(x) {
	      return nthRoot(x, 2);
	    },

	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // density must be one (no zeros in matrix)
	              if (y.density() === 1) {
	                // sparse + sparse
	                c = algorithm06(x, y, nthRoot);
	              } else {
	                // throw exception
	                throw new Error('Root must be non-zero');
	              }
	              break;
	            default:
	              // sparse + dense
	              c = algorithm02(y, x, nthRoot, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // density must be one (no zeros in matrix)
	              if (y.density() === 1) {
	                // dense + sparse
	                c = algorithm01(x, y, nthRoot, false);
	              } else {
	                // throw exception
	                throw new Error('Root must be non-zero');
	              }
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, nthRoot);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return nthRoot(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return nthRoot(matrix(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return nthRoot(x, matrix(y));
	    },

	    'Matrix, number | BigNumber': function MatrixNumberBigNumber(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm11(x, y, nthRoot, false);
	          break;
	        default:
	          c = algorithm14(x, y, nthRoot, false);
	          break;
	      }
	      return c;
	    },

	    'number | BigNumber, Matrix': function numberBigNumberMatrix(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          // density must be one (no zeros in matrix)
	          if (y.density() === 1) {
	            // sparse - scalar
	            c = algorithm11(y, x, nthRoot, true);
	          } else {
	            // throw exception
	            throw new Error('Root must be non-zero');
	          }
	          break;
	        default:
	          c = algorithm14(y, x, nthRoot, true);
	          break;
	      }
	      return c;
	    },

	    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
	      // use matrix implementation
	      return nthRoot(matrix(x), y).valueOf();
	    },

	    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
	      // use matrix implementation
	      return nthRoot(x, matrix(y)).valueOf();
	    }
	  });

	  nthRoot.toTex = { 2: '\\sqrt[${args[1]}]{${args[0]}}' };

	  return nthRoot;

	  /**
	   * Calculate the nth root of a for BigNumbers, solve x^root == a
	   * http://rosettacode.org/wiki/Nth_root#JavaScript
	   * @param {BigNumber} a
	   * @param {BigNumber} root
	   * @private
	   */
	  function _bigNthRoot(a, root) {
	    var precision = type.BigNumber.precision;
	    var Big = type.BigNumber.clone({ precision: precision + 2 });
	    var zero = new type.BigNumber(0);

	    var one = new Big(1);
	    var inv = root.isNegative();
	    if (inv) {
	      root = root.neg();
	    }

	    if (root.isZero()) {
	      throw new Error('Root must be non-zero');
	    }
	    if (a.isNegative() && !root.abs().mod(2).equals(1)) {
	      throw new Error('Root must be odd when a is negative.');
	    }

	    // edge cases zero and infinity
	    if (a.isZero()) {
	      return inv ? new Big(Infinity) : 0;
	    }
	    if (!a.isFinite()) {
	      return inv ? zero : a;
	    }

	    var x = a.abs().pow(one.div(root));
	    // If a < 0, we require that root is an odd integer,
	    // so (-1) ^ (1/root) = -1
	    x = a.isNeg() ? x.neg() : x;
	    return new type.BigNumber((inv ? one.div(x) : x).toPrecision(precision));
	  }
	}

	/**
	 * Calculate the nth root of a, solve x^root == a
	 * http://rosettacode.org/wiki/Nth_root#JavaScript
	 * @param {number} a
	 * @param {number} root
	 * @private
	 */
	function _nthRoot(a, root) {
	  var inv = root < 0;
	  if (inv) {
	    root = -root;
	  }

	  if (root === 0) {
	    throw new Error('Root must be non-zero');
	  }
	  if (a < 0 && Math.abs(root) % 2 != 1) {
	    throw new Error('Root must be odd when a is negative.');
	  }

	  // edge cases zero and infinity
	  if (a == 0) {
	    return inv ? Infinity : 0;
	  }
	  if (!isFinite(a)) {
	    return inv ? 0 : a;
	  }

	  var x = Math.pow(Math.abs(a), 1 / root);
	  // If a < 0, we require that root is an odd integer,
	  // so (-1) ^ (1/root) = -1
	  x = a < 0 ? -x : x;
	  return inv ? 1 / x : x;

	  // Very nice algorithm, but fails with nthRoot(-2, 3).
	  // Newton's method has some well-known problems at times:
	  // https://en.wikipedia.org/wiki/Newton%27s_method#Failure_analysis
	  /*
	  var x = 1; // Initial guess
	  var xPrev = 1;
	  var i = 0;
	  var iMax = 10000;
	  do {
	    var delta = (a / Math.pow(x, root - 1) - x) / root;
	    xPrev = x;
	    x = x + delta;
	    i++;
	  }
	  while (xPrev !== x && i < iMax);
	   if (xPrev !== x) {
	    throw new Error('Function nthRoot failed to converge');
	  }
	   return inv ? 1 / x : x;
	  */
	}

	/**
	 * Calculate the nth root of a Complex Number a using De Moviers Theorem.
	 * @param  {Complex} a
	 * @param  {number} root
	 * @return {Array} array or n Complex Roots in Polar Form.
	 */
	function _nthComplexRoot(a, root) {
	  if (root < 0) throw new Error('Root must be greater than zero');
	  if (root === 0) throw new Error('Root must be non-zero');
	  if (root % 1 !== 0) throw new Error('Root must be an integer');
	  var arg = a.arg();
	  var abs = a.abs();
	  var roots = [];
	  var r = Math.pow(abs, 1 / root);
	  for (var k = 0; k < root; k++) {
	    roots.push({ r: r, phi: (arg + 2 * Math.PI * k) / root });
	  }
	  return roots;
	}

	exports.name = 'nthRoot';
	exports.factory = factory;

/***/ },
/* 548 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isInteger = __webpack_require__(166).isInteger;
	var toFixed = __webpack_require__(166).toFixed;
	var deepMap = __webpack_require__(179);

	var NO_INT = 'Number of decimals in function round must be an integer';

	function factory(type, config, load, typed) {
	  var matrix = load(__webpack_require__(212));
	  var equalScalar = load(__webpack_require__(208));
	  var zeros = load(__webpack_require__(549));

	  var algorithm11 = load(__webpack_require__(245));
	  var algorithm12 = load(__webpack_require__(223));
	  var algorithm14 = load(__webpack_require__(218));

	  /**
	   * Round a value towards the nearest integer.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.round(x)
	   *    math.round(x, n)
	   *
	   * Examples:
	   *
	   *    math.round(3.2);              // returns number 3
	   *    math.round(3.8);              // returns number 4
	   *    math.round(-4.2);             // returns number -4
	   *    math.round(-4.7);             // returns number -5
	   *    math.round(math.pi, 3);       // returns number 3.142
	   *    math.round(123.45678, 2);     // returns number 123.46
	   *
	   *    var c = math.complex(3.2, -2.7);
	   *    math.round(c);                // returns Complex 3 - 3i
	   *
	   *    math.round([3.2, 3.8, -4.7]); // returns Array [3, 4, -5]
	   *
	   * See also:
	   *
	   *    ceil, fix, floor
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
	   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
	   */
	  var round = typed('round', {

	    'number': Math.round,

	    'number, number': function numberNumber(x, n) {
	      if (!isInteger(n)) {
	        throw new TypeError(NO_INT);
	      }
	      if (n < 0 || n > 15) {
	        throw new Error('Number of decimals in function round must be in te range of 0-15');
	      }

	      return _round(x, n);
	    },

	    'Complex': function Complex(x) {
	      return x.round();
	    },

	    'Complex, number': function ComplexNumber(x, n) {
	      if (n % 1) {
	        throw new TypeError(NO_INT);
	      }

	      return x.round(n);
	    },

	    'Complex, BigNumber': function ComplexBigNumber(x, n) {
	      if (!n.isInteger()) {
	        throw new TypeError(NO_INT);
	      }

	      var _n = n.toNumber();
	      return x.round(_n);
	    },

	    'number, BigNumber': function numberBigNumber(x, n) {
	      if (!n.isInteger()) {
	        throw new TypeError(NO_INT);
	      }

	      return new type.BigNumber(x).toDecimalPlaces(n.toNumber());
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.toDecimalPlaces(0);
	    },

	    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {
	      if (!n.isInteger()) {
	        throw new TypeError(NO_INT);
	      }

	      return x.toDecimalPlaces(n.toNumber());
	    },

	    'Fraction': function Fraction(x) {
	      return x.round();
	    },

	    'Fraction, number': function FractionNumber(x, n) {
	      if (n % 1) {
	        throw new TypeError(NO_INT);
	      }
	      return x.round(n);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since round(0) = 0
	      return deepMap(x, round, true);
	    },

	    'Matrix, number | BigNumber': function MatrixNumberBigNumber(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm11(x, y, round, false);
	          break;
	        default:
	          c = algorithm14(x, y, round, false);
	          break;
	      }
	      return c;
	    },

	    'number | Complex | BigNumber, Matrix': function numberComplexBigNumberMatrix(x, y) {
	      // check scalar is zero
	      if (!equalScalar(x, 0)) {
	        // result
	        var c;
	        // check storage format
	        switch (y.storage()) {
	          case 'sparse':
	            c = algorithm12(y, x, round, true);
	            break;
	          default:
	            c = algorithm14(y, x, round, true);
	            break;
	        }
	        return c;
	      }
	      // do not execute algorithm, result will be a zero matrix
	      return zeros(y.size(), y.storage());
	    },

	    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, round, false).valueOf();
	    },

	    'number | Complex | BigNumber, Array': function numberComplexBigNumberArray(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, round, true).valueOf();
	    }
	  });

	  round.toTex = {
	    1: '\\left\\lfloor${args[0]}\\right\\rceil',
	    2: undefined // use default template
	  };

	  return round;
	}

	/**
	 * round a number to the given number of decimals, or to zero if decimals is
	 * not provided
	 * @param {number} value
	 * @param {number} decimals       number of decimals, between 0 and 15 (0 by default)
	 * @return {number} roundedValue
	 * @private
	 */
	function _round(value, decimals) {
	  return parseFloat(toFixed(value, decimals));
	}

	exports.name = 'round';
	exports.factory = factory;

/***/ },
/* 549 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isInteger = __webpack_require__(166).isInteger;
	var resize = __webpack_require__(200).resize;

	function factory(type, config, load, typed) {
	  var matrix = load(__webpack_require__(212));

	  /**
	   * Create a matrix filled with zeros. The created matrix can have one or
	   * multiple dimensions.
	   *
	   * Syntax:
	   *
	   *    math.zeros(m)
	   *    math.zeros(m, format)
	   *    math.zeros(m, n)
	   *    math.zeros(m, n, format)
	   *    math.zeros([m, n])
	   *    math.zeros([m, n], format)
	   *
	   * Examples:
	   *
	   *    math.zeros(3);                  // returns [0, 0, 0]
	   *    math.zeros(3, 2);               // returns [[0, 0], [0, 0], [0, 0]]
	   *    math.zeros(3, 'dense');         // returns [0, 0, 0]
	   *
	   *    var A = [[1, 2, 3], [4, 5, 6]];
	   *    math.zeros(math.size(A));       // returns [[0, 0, 0], [0, 0, 0]]
	   *
	   * See also:
	   *
	   *    ones, eye, size, range
	   *
	   * @param {...number | Array} size    The size of each dimension of the matrix
	   * @param {string} [format]           The Matrix storage format
	   *
	   * @return {Array | Matrix}           A matrix filled with zeros
	   */
	  var zeros = typed('zeros', {
	    '': function _() {
	      return config.matrix === 'Array' ? _zeros([]) : _zeros([], 'default');
	    },

	    // math.zeros(m, n, p, ..., format)
	    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this
	    '...number | BigNumber | string': function numberBigNumberString(size) {
	      var last = size[size.length - 1];
	      if (typeof last === 'string') {
	        var format = size.pop();
	        return _zeros(size, format);
	      } else if (config.matrix === 'Array') {
	        return _zeros(size);
	      } else {
	        return _zeros(size, 'default');
	      }
	    },

	    'Array': _zeros,

	    'Matrix': function Matrix(size) {
	      var format = size.storage();
	      return _zeros(size.valueOf(), format);
	    },

	    'Array | Matrix, string': function ArrayMatrixString(size, format) {
	      return _zeros(size.valueOf(), format);
	    }
	  });

	  zeros.toTex = undefined; // use default template

	  return zeros;

	  /**
	   * Create an Array or Matrix with zeros
	   * @param {Array} size
	   * @param {string} [format='default']
	   * @return {Array | Matrix}
	   * @private
	   */
	  function _zeros(size, format) {
	    var hasBigNumbers = _normalize(size);
	    var defaultValue = hasBigNumbers ? new type.BigNumber(0) : 0;
	    _validate(size);

	    if (format) {
	      // return a matrix
	      var m = matrix(format);
	      if (size.length > 0) {
	        return m.resize(size, defaultValue);
	      }
	      return m;
	    } else {
	      // return an Array
	      var arr = [];
	      if (size.length > 0) {
	        return resize(arr, size, defaultValue);
	      }
	      return arr;
	    }
	  }

	  // replace BigNumbers with numbers, returns true if size contained BigNumbers
	  function _normalize(size) {
	    var hasBigNumbers = false;
	    size.forEach(function (value, index, arr) {
	      if (value && value.isBigNumber === true) {
	        hasBigNumbers = true;
	        arr[index] = value.toNumber();
	      }
	    });
	    return hasBigNumbers;
	  }

	  // validate arguments
	  function _validate(size) {
	    size.forEach(function (value) {
	      if (typeof value !== 'number' || !isInteger(value) || value < 0) {
	        throw new Error('Parameters in function zeros must be positive integers');
	      }
	    });
	  }
	}

	// TODO: zeros contains almost the same code as ones. Reuse this?

	exports.name = 'zeros';
	exports.factory = factory;

/***/ },
/* 550 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var number = __webpack_require__(166);
	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  /**
	   * Compute the sign of a value. The sign of a value x is:
	   *
	   * -  1 when x > 1
	   * - -1 when x < 0
	   * -  0 when x == 0
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.sign(x)
	   *
	   * Examples:
	   *
	   *    math.sign(3.5);               // returns 1
	   *    math.sign(-4.2);              // returns -1
	   *    math.sign(0);                 // returns 0
	   *
	   *    math.sign([3, 5, -2, 0, 2]);  // returns [1, 1, -1, 0, 1]
	   *
	   * See also:
	   *
	   *    abs
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
	   *            The number for which to determine the sign
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}e
	   *            The sign of `x`
	   */
	  var sign = typed('sign', {
	    'number': number.sign,

	    'Complex': function Complex(x) {
	      return x.sign();
	    },

	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(x.cmp(0));
	    },

	    'Fraction': function Fraction(x) {
	      return new type.Fraction(x.s, 1);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since sign(0) = 0
	      return deepMap(x, sign, true);
	    },

	    'Unit': function Unit(x) {
	      return sign(x.value);
	    }
	  });

	  sign.toTex = { 1: '\\mathrm{${name}}\\left(${args[0]}\\right)' };

	  return sign;
	}

	exports.name = 'sign';
	exports.factory = factory;

/***/ },
/* 551 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  /**
	   * Compute the square of a value, `x * x`.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.square(x)
	   *
	   * Examples:
	   *
	   *    math.square(2);           // returns number 4
	   *    math.square(3);           // returns number 9
	   *    math.pow(3, 2);           // returns number 9
	   *    math.multiply(3, 3);      // returns number 9
	   *
	   *    math.square([1, 2, 3, 4]);  // returns Array [1, 4, 9, 16]
	   *
	   * See also:
	   *
	   *    multiply, cube, sqrt, pow
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
	   *            Number for which to calculate the square
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}
	   *            Squared value
	   */
	  var square = typed('square', {
	    'number': function number(x) {
	      return x * x;
	    },

	    'Complex': function Complex(x) {
	      return x.mul(x);
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.times(x);
	    },

	    'Fraction': function Fraction(x) {
	      return x.mul(x);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since square(0) = 0
	      return deepMap(x, square, true);
	    },

	    'Unit': function Unit(x) {
	      return x.pow(2);
	    }
	  });

	  square.toTex = { 1: '\\left(${args[0]}\\right)^2' };

	  return square;
	}

	exports.name = 'square';
	exports.factory = factory;

/***/ },
/* 552 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  var latex = __webpack_require__(192);

	  /**
	   * Unary plus operation.
	   * Boolean values and strings will be converted to a number, numeric values will be returned as is.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.unaryPlus(x)
	   *
	   * Examples:
	   *
	   *    math.unaryPlus(3.5);      // returns 3.5
	   *    math.unaryPlus(1);     // returns 1
	   *
	   * See also:
	   *
	   *    unaryMinus, add, subtract
	   *
	   * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x
	   *            Input value
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
	   *            Returns the input value when numeric, converts to a number when input is non-numeric.
	   */
	  var unaryPlus = typed('unaryPlus', {
	    'number': function number(x) {
	      return x;
	    },

	    'Complex': function Complex(x) {
	      return x; // complex numbers are immutable
	    },

	    'BigNumber': function BigNumber(x) {
	      return x; // bignumbers are immutable
	    },

	    'Fraction': function Fraction(x) {
	      return x; // fractions are immutable
	    },

	    'Unit': function Unit(x) {
	      return x.clone();
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since unaryPlus(0) = 0
	      return deepMap(x, unaryPlus, true);
	    },

	    'boolean | string | null': function booleanStringNull(x) {
	      // convert to a number or bignumber
	      return config.number == 'BigNumber' ? new type.BigNumber(+x) : +x;
	    }
	  });

	  unaryPlus.toTex = {
	    1: latex.operators['unaryPlus'] + '\\left(${args[0]}\\right)'
	  };

	  return unaryPlus;
	}

	exports.name = 'unaryPlus';
	exports.factory = factory;

/***/ },
/* 553 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isInteger = __webpack_require__(166).isInteger;

	function factory(type, config, load, typed) {
	  var matrix = load(__webpack_require__(212));

	  /**
	   * Calculate the extended greatest common divisor for two values.
	   * See http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.
	   *
	   * Syntax:
	   *
	   *    math.xgcd(a, b)
	   *
	   * Examples:
	   *
	   *    math.xgcd(8, 12);             // returns [4, -1, 1]
	   *    math.gcd(8, 12);              // returns 4
	   *    math.xgcd(36163, 21199);      // returns [1247, -7, 12]
	   *
	   * See also:
	   *
	   *    gcd, lcm
	   *
	   * @param {number | BigNumber} a  An integer number
	   * @param {number | BigNumber} b  An integer number
	   * @return {Array}              Returns an array containing 3 integers `[div, m, n]`
	   *                              where `div = gcd(a, b)` and `a*m + b*n = div`
	   */
	  var xgcd = typed('xgcd', {
	    'number, number': _xgcd,
	    'BigNumber, BigNumber': _xgcdBigNumber
	    // TODO: implement support for Fraction
	  });

	  xgcd.toTex = undefined; // use default template

	  return xgcd;

	  /**
	   * Calculate xgcd for two numbers
	   * @param {number} a
	   * @param {number} b
	   * @return {number} result
	   * @private
	   */
	  function _xgcd(a, b) {
	    // source: http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
	    var t,
	        // used to swap two variables
	    q,
	        // quotient
	    r,
	        // remainder
	    x = 0,
	        lastx = 1,
	        y = 1,
	        lasty = 0;

	    if (!isInteger(a) || !isInteger(b)) {
	      throw new Error('Parameters in function xgcd must be integer numbers');
	    }

	    while (b) {
	      q = Math.floor(a / b);
	      r = a % b;

	      t = x;
	      x = lastx - q * x;
	      lastx = t;

	      t = y;
	      y = lasty - q * y;
	      lasty = t;

	      a = b;
	      b = r;
	    }

	    var res;
	    if (a < 0) {
	      res = [-a, -lastx, -lasty];
	    } else {
	      res = [a, a ? lastx : 0, lasty];
	    }
	    return config.matrix === 'Array' ? res : matrix(res);
	  }

	  /**
	   * Calculate xgcd for two BigNumbers
	   * @param {BigNumber} a
	   * @param {BigNumber} b
	   * @return {BigNumber[]} result
	   * @private
	   */
	  function _xgcdBigNumber(a, b) {
	    // source: http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
	    var t,
	        // used to swap two variables
	    q,
	        // quotient
	    r,
	        // remainder
	    zero = new type.BigNumber(0),
	        one = new type.BigNumber(1),
	        x = zero,
	        lastx = one,
	        y = one,
	        lasty = zero;

	    if (!a.isInt() || !b.isInt()) {
	      throw new Error('Parameters in function xgcd must be integer numbers');
	    }

	    //console.log('start', [a, b].toString())

	    while (!b.isZero()) {
	      //console.log('inner', [a, b, t, q, r, x, y, lastx, lasty].toString());
	      q = a.div(b).floor();
	      r = a.mod(b);
	      //console.log('MOD', [a, b, a.mod(b), r].toString())

	      t = x;
	      x = lastx.minus(q.times(x));
	      lastx = t;

	      t = y;
	      y = lasty.minus(q.times(y));
	      lasty = t;

	      a = b;
	      b = r;

	      //console.log('inner end', [a, b, t, q, r, x, y, lastx, lasty].toString());
	    }

	    //console.log('end', [a, lastx, lasty].toString())

	    var res;
	    if (a.lt(zero)) {
	      res = [a.neg(), lastx.neg(), lasty.neg()];
	    } else {
	      res = [a, !a.isZero() ? lastx : 0, lasty];
	    }
	    return config.matrix === 'Array' ? res : matrix(res);
	  }
	}

	exports.name = 'xgcd';
	exports.factory = factory;

/***/ },
/* 554 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

		module.exports = [__webpack_require__(555), __webpack_require__(559), __webpack_require__(560), __webpack_require__(562), __webpack_require__(564), __webpack_require__(567), __webpack_require__(569)];

/***/ },
/* 555 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isInteger = __webpack_require__(166).isInteger;
	var bigBitAnd = __webpack_require__(556);

	function factory(type, config, load, typed) {
	  var latex = __webpack_require__(192);

	  var matrix = load(__webpack_require__(212));

	  var algorithm02 = load(__webpack_require__(529));
	  var algorithm06 = load(__webpack_require__(540));
	  var algorithm11 = load(__webpack_require__(245));
	  var algorithm13 = load(__webpack_require__(217));
	  var algorithm14 = load(__webpack_require__(218));

	  /**
	   * Bitwise AND two values, `x & y`.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.bitAnd(x, y)
	   *
	   * Examples:
	   *
	   *    math.bitAnd(53, 131);               // returns number 1
	   *
	   *    math.bitAnd([1, 12, 31], 42);       // returns Array [0, 8, 10]
	   *
	   * See also:
	   *
	   *    bitNot, bitOr, bitXor, leftShift, rightArithShift, rightLogShift
	   *
	   * @param  {number | BigNumber | Array | Matrix} x First value to and
	   * @param  {number | BigNumber | Array | Matrix} y Second value to and
	   * @return {number | BigNumber | Array | Matrix} AND of `x` and `y`
	   */
	  var bitAnd = typed('bitAnd', {

	    'number, number': function numberNumber(x, y) {
	      if (!isInteger(x) || !isInteger(y)) {
	        throw new Error('Integers expected in function bitAnd');
	      }

	      return x & y;
	    },

	    'BigNumber, BigNumber': bigBitAnd,

	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse & sparse
	              c = algorithm06(x, y, bitAnd, false);
	              break;
	            default:
	              // sparse & dense
	              c = algorithm02(y, x, bitAnd, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense & sparse
	              c = algorithm02(x, y, bitAnd, false);
	              break;
	            default:
	              // dense & dense
	              c = algorithm13(x, y, bitAnd);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return bitAnd(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return bitAnd(matrix(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return bitAnd(x, matrix(y));
	    },

	    'Matrix, any': function MatrixAny(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm11(x, y, bitAnd, false);
	          break;
	        default:
	          c = algorithm14(x, y, bitAnd, false);
	          break;
	      }
	      return c;
	    },

	    'any, Matrix': function anyMatrix(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm11(y, x, bitAnd, true);
	          break;
	        default:
	          c = algorithm14(y, x, bitAnd, true);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, bitAnd, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, bitAnd, true).valueOf();
	    }
	  });

	  bitAnd.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['bitAnd'] + '${args[1]}\\right)'
	  };

	  return bitAnd;
	}

	exports.name = 'bitAnd';
	exports.factory = factory;

/***/ },
/* 556 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var bitwise = __webpack_require__(557);

	/**
	 * Bitwise and for Bignumbers
	 *
	 * Special Cases:
	 *   N &  n =  N
	 *   n &  0 =  0
	 *   n & -1 =  n
	 *   n &  n =  n
	 *   I &  I =  I
	 *  -I & -I = -I
	 *   I & -I =  0
	 *   I &  n =  n
	 *   I & -n =  I
	 *  -I &  n =  0
	 *  -I & -n = -I
	 *
	 * @param {BigNumber} x
	 * @param {BigNumber} y
	 * @return {BigNumber} Result of `x` & `y`, is fully precise
	 * @private
	 */
	module.exports = function bitAnd(x, y) {
	  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
	    throw new Error('Integers expected in function bitAnd');
	  }

	  var BigNumber = x.constructor;
	  if (x.isNaN() || y.isNaN()) {
	    return new BigNumber(NaN);
	  }

	  if (x.isZero() || y.eq(-1) || x.eq(y)) {
	    return x;
	  }
	  if (y.isZero() || x.eq(-1)) {
	    return y;
	  }

	  if (!x.isFinite() || !y.isFinite()) {
	    if (!x.isFinite() && !y.isFinite()) {
	      if (x.isNegative() == y.isNegative()) {
	        return x;
	      }
	      return new BigNumber(0);
	    }
	    if (!x.isFinite()) {
	      if (y.isNegative()) {
	        return x;
	      }
	      if (x.isNegative()) {
	        return new BigNumber(0);
	      }
	      return y;
	    }
	    if (!y.isFinite()) {
	      if (x.isNegative()) {
	        return y;
	      }
	      if (y.isNegative()) {
	        return new BigNumber(0);
	      }
	      return x;
	    }
	  }
	  return bitwise(x, y, function (a, b) {
	    return a & b;
	  });
	};

/***/ },
/* 557 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var bitNot = __webpack_require__(558);

	/**
	 * Applies bitwise function to numbers
	 * @param {BigNumber} x
	 * @param {BigNumber} y
	 * @param {function (a, b)} func
	 * @return {BigNumber}
	 */
	module.exports = function bitwise(x, y, func) {
	  var BigNumber = x.constructor;

	  var xBits, yBits;
	  var xSign = +(x.s < 0);
	  var ySign = +(y.s < 0);
	  if (xSign) {
	    xBits = decCoefficientToBinaryString(bitNot(x));
	    for (var i = 0; i < xBits.length; ++i) {
	      xBits[i] ^= 1;
	    }
	  } else {
	    xBits = decCoefficientToBinaryString(x);
	  }
	  if (ySign) {
	    yBits = decCoefficientToBinaryString(bitNot(y));
	    for (var i = 0; i < yBits.length; ++i) {
	      yBits[i] ^= 1;
	    }
	  } else {
	    yBits = decCoefficientToBinaryString(y);
	  }

	  var minBits, maxBits, minSign;
	  if (xBits.length <= yBits.length) {
	    minBits = xBits;
	    maxBits = yBits;
	    minSign = xSign;
	  } else {
	    minBits = yBits;
	    maxBits = xBits;
	    minSign = ySign;
	  }

	  var shortLen = minBits.length;
	  var longLen = maxBits.length;
	  var expFuncVal = func(xSign, ySign) ^ 1;
	  var outVal = new BigNumber(expFuncVal ^ 1);
	  var twoPower = new BigNumber(1);
	  var two = new BigNumber(2);

	  var prevPrec = BigNumber.precision;
	  BigNumber.config({ precision: 1E9 });

	  while (shortLen > 0) {
	    if (func(minBits[--shortLen], maxBits[--longLen]) == expFuncVal) {
	      outVal = outVal.plus(twoPower);
	    }
	    twoPower = twoPower.times(two);
	  }
	  while (longLen > 0) {
	    if (func(minSign, maxBits[--longLen]) == expFuncVal) {
	      outVal = outVal.plus(twoPower);
	    }
	    twoPower = twoPower.times(two);
	  }

	  BigNumber.config({ precision: prevPrec });

	  if (expFuncVal == 0) {
	    outVal.s = -outVal.s;
	  }
	  return outVal;
	};

	/* Extracted from decimal.js, and edited to specialize. */
	function decCoefficientToBinaryString(x) {
	  // Convert to string
	  var a = x.d; // array with digits
	  var r = a[0] + '';

	  for (var i = 1; i < a.length; ++i) {
	    var s = a[i] + '';
	    for (var z = 7 - s.length; z--;) {
	      s = '0' + s;
	    }

	    r += s;
	  }

	  var j;
	  for (j = r.length - 1; r.charAt(j) == '0'; --j) {}

	  var xe = x.e;
	  var str = r.slice(0, j + 1 || 1);
	  var strL = str.length;
	  if (xe > 0) {
	    if (++xe > strL) {
	      // Append zeros.
	      for (xe -= strL; xe--; str += '0') {}
	    } else if (xe < strL) {
	      str = str.slice(0, xe) + '.' + str.slice(xe);
	    }
	  }

	  // Convert from base 10 (decimal) to base 2
	  var arr = [0];
	  for (var i = 0; i < str.length;) {
	    for (var arrL = arr.length; arrL--; arr[arrL] *= 10) {}

	    arr[0] += str.charAt(i++) << 0; // convert to int
	    for (var j = 0; j < arr.length; ++j) {
	      if (arr[j] > 1) {
	        if (arr[j + 1] == null) {
	          arr[j + 1] = 0;
	        }

	        arr[j + 1] += arr[j] >> 1;
	        arr[j] &= 1;
	      }
	    }
	  }

	  return arr.reverse();
	}

/***/ },
/* 558 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Bitwise not
	 * @param {BigNumber} value
	 * @return {BigNumber} Result of ~`x`, fully precise
	 *
	 */
	module.exports = function bitNot(x) {
	  if (x.isFinite() && !x.isInteger()) {
	    throw new Error('Integer expected in function bitNot');
	  }

	  var BigNumber = x.constructor;
	  var prevPrec = BigNumber.precision;
	  BigNumber.config({ precision: 1E9 });

	  var x = x.plus(new BigNumber(1));
	  x.s = -x.s || null;

	  BigNumber.config({ precision: prevPrec });
	  return x;
	};

/***/ },
/* 559 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);
	var bigBitNot = __webpack_require__(558);
	var isInteger = __webpack_require__(166).isInteger;

	function factory(type, config, load, typed) {
	  var latex = __webpack_require__(192);

	  /**
	   * Bitwise NOT value, `~x`.
	   * For matrices, the function is evaluated element wise.
	   * For units, the function is evaluated on the best prefix base.
	   *
	   * Syntax:
	   *
	   *    math.bitNot(x)
	   *
	   * Examples:
	   *
	   *    math.bitNot(1);               // returns number -2
	   *
	   *    math.bitNot([2, -3, 4]);      // returns Array [-3, 2, 5]
	   *
	   * See also:
	   *
	   *    bitAnd, bitOr, bitXor, leftShift, rightArithShift, rightLogShift
	   *
	   * @param  {number | BigNumber | Array | Matrix} x Value to not
	   * @return {number | BigNumber | Array | Matrix} NOT of `x`
	   */
	  var bitNot = typed('bitNot', {
	    'number': function number(x) {
	      if (!isInteger(x)) {
	        throw new Error('Integer expected in function bitNot');
	      }

	      return ~x;
	    },

	    'BigNumber': bigBitNot,

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, bitNot);
	    }
	  });

	  bitNot.toTex = {
	    1: latex.operators['bitNot'] + '\\left(${args[0]}\\right)'
	  };

	  return bitNot;
	}

	exports.name = 'bitNot';
	exports.factory = factory;

/***/ },
/* 560 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isInteger = __webpack_require__(166).isInteger;
	var bigBitOr = __webpack_require__(561);

	function factory(type, config, load, typed) {
	  var latex = __webpack_require__(192);

	  var matrix = load(__webpack_require__(212));

	  var algorithm01 = load(__webpack_require__(214));
	  var algorithm04 = load(__webpack_require__(215));
	  var algorithm10 = load(__webpack_require__(216));
	  var algorithm13 = load(__webpack_require__(217));
	  var algorithm14 = load(__webpack_require__(218));

	  /**
	   * Bitwise OR two values, `x | y`.
	   * For matrices, the function is evaluated element wise.
	   * For units, the function is evaluated on the lowest print base.
	   *
	   * Syntax:
	   *
	   *    math.bitOr(x, y)
	   *
	   * Examples:
	   *
	   *    math.bitOr(1, 2);               // returns number 3
	   *
	   *    math.bitOr([1, 2, 3], 4);       // returns Array [5, 6, 7]
	   *
	   * See also:
	   *
	   *    bitAnd, bitNot, bitXor, leftShift, rightArithShift, rightLogShift
	   *
	   * @param  {number | BigNumber | Array | Matrix} x First value to or
	   * @param  {number | BigNumber | Array | Matrix} y Second value to or
	   * @return {number | BigNumber | Array | Matrix} OR of `x` and `y`
	   */
	  var bitOr = typed('bitOr', {

	    'number, number': function numberNumber(x, y) {
	      if (!isInteger(x) || !isInteger(y)) {
	        throw new Error('Integers expected in function bitOr');
	      }

	      return x | y;
	    },

	    'BigNumber, BigNumber': bigBitOr,

	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm04(x, y, bitOr);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm01(y, x, bitOr, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm01(x, y, bitOr, false);
	              break;
	            default:
	              c = algorithm13(x, y, bitOr);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return bitOr(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return bitOr(matrix(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return bitOr(x, matrix(y));
	    },

	    'Matrix, any': function MatrixAny(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm10(x, y, bitOr, false);
	          break;
	        default:
	          c = algorithm14(x, y, bitOr, false);
	          break;
	      }
	      return c;
	    },

	    'any, Matrix': function anyMatrix(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm10(y, x, bitOr, true);
	          break;
	        default:
	          c = algorithm14(y, x, bitOr, true);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, bitOr, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, bitOr, true).valueOf();
	    }
	  });

	  bitOr.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['bitOr'] + '${args[1]}\\right)'
	  };

	  return bitOr;
	}

	exports.name = 'bitOr';
	exports.factory = factory;

/***/ },
/* 561 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var bitwise = __webpack_require__(557);

	/**
	 * Bitwise OR for BigNumbers
	 *
	 * Special Cases:
	 *   N |  n =  N
	 *   n |  0 =  n
	 *   n | -1 = -1
	 *   n |  n =  n
	 *   I |  I =  I
	 *  -I | -I = -I
	 *   I | -n = -1
	 *   I | -I = -1
	 *   I |  n =  I
	 *  -I |  n = -I
	 *  -I | -n = -n
	 *
	 * @param {BigNumber} x
	 * @param {BigNumber} y
	 * @return {BigNumber} Result of `x` | `y`, fully precise
	 */
	module.exports = function bitOr(x, y) {
	  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
	    throw new Error('Integers expected in function bitOr');
	  }

	  var BigNumber = x.constructor;
	  if (x.isNaN() || y.isNaN()) {
	    return new BigNumber(NaN);
	  }

	  var negOne = new BigNumber(-1);
	  if (x.isZero() || y.eq(negOne) || x.eq(y)) {
	    return y;
	  }
	  if (y.isZero() || x.eq(negOne)) {
	    return x;
	  }

	  if (!x.isFinite() || !y.isFinite()) {
	    if (!x.isFinite() && !x.isNegative() && y.isNegative() || x.isNegative() && !y.isNegative() && !y.isFinite()) {
	      return negOne;
	    }
	    if (x.isNegative() && y.isNegative()) {
	      return x.isFinite() ? x : y;
	    }
	    return x.isFinite() ? y : x;
	  }

	  return bitwise(x, y, function (a, b) {
	    return a | b;
	  });
	};

/***/ },
/* 562 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isInteger = __webpack_require__(166).isInteger;
	var bigBitXor = __webpack_require__(563);

	function factory(type, config, load, typed) {
	  var latex = __webpack_require__(192);

	  var matrix = load(__webpack_require__(212));

	  var algorithm03 = load(__webpack_require__(221));
	  var algorithm07 = load(__webpack_require__(222));
	  var algorithm12 = load(__webpack_require__(223));
	  var algorithm13 = load(__webpack_require__(217));
	  var algorithm14 = load(__webpack_require__(218));

	  /**
	   * Bitwise XOR two values, `x ^ y`.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.bitXor(x, y)
	   *
	   * Examples:
	   *
	   *    math.bitXor(1, 2);               // returns number 3
	   *
	   *    math.bitXor([2, 3, 4], 4);       // returns Array [6, 7, 0]
	   *
	   * See also:
	   *
	   *    bitAnd, bitNot, bitOr, leftShift, rightArithShift, rightLogShift
	   *
	   * @param  {number | BigNumber | Array | Matrix} x First value to xor
	   * @param  {number | BigNumber | Array | Matrix} y Second value to xor
	   * @return {number | BigNumber | Array | Matrix} XOR of `x` and `y`
	   */
	  var bitXor = typed('bitXor', {

	    'number, number': function numberNumber(x, y) {
	      if (!isInteger(x) || !isInteger(y)) {
	        throw new Error('Integers expected in function bitXor');
	      }

	      return x ^ y;
	    },

	    'BigNumber, BigNumber': bigBitXor,

	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm07(x, y, bitXor);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm03(y, x, bitXor, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm03(x, y, bitXor, false);
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, bitXor);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return bitXor(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return bitXor(matrix(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return bitXor(x, matrix(y));
	    },

	    'Matrix, any': function MatrixAny(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm12(x, y, bitXor, false);
	          break;
	        default:
	          c = algorithm14(x, y, bitXor, false);
	          break;
	      }
	      return c;
	    },

	    'any, Matrix': function anyMatrix(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, bitXor, true);
	          break;
	        default:
	          c = algorithm14(y, x, bitXor, true);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, bitXor, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, bitXor, true).valueOf();
	    }
	  });

	  bitXor.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['bitXor'] + '${args[1]}\\right)'
	  };

	  return bitXor;
	}

	exports.name = 'bitXor';
	exports.factory = factory;

/***/ },
/* 563 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var bitwise = __webpack_require__(557);
	var bitNot = __webpack_require__(558);

	/**
	 * Bitwise XOR for BigNumbers
	 *
	 * Special Cases:
	 *   N ^  n =  N
	 *   n ^  0 =  n
	 *   n ^  n =  0
	 *   n ^ -1 = ~n
	 *   I ^  n =  I
	 *   I ^ -n = -I
	 *   I ^ -I = -1
	 *  -I ^  n = -I
	 *  -I ^ -n =  I
	 *
	 * @param {BigNumber} x
	 * @param {BigNumber} y
	 * @return {BigNumber} Result of `x` ^ `y`, fully precise
	 *
	 */
	module.exports = function bitXor(x, y) {
	  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
	    throw new Error('Integers expected in function bitXor');
	  }

	  var BigNumber = x.constructor;
	  if (x.isNaN() || y.isNaN()) {
	    return new BigNumber(NaN);
	  }
	  if (x.isZero()) {
	    return y;
	  }
	  if (y.isZero()) {
	    return x;
	  }

	  if (x.eq(y)) {
	    return new BigNumber(0);
	  }

	  var negOne = new BigNumber(-1);
	  if (x.eq(negOne)) {
	    return bitNot(y);
	  }
	  if (y.eq(negOne)) {
	    return bitNot(x);
	  }

	  if (!x.isFinite() || !y.isFinite()) {
	    if (!x.isFinite() && !y.isFinite()) {
	      return negOne;
	    }
	    return new BigNumber(x.isNegative() == y.isNegative() ? Infinity : -Infinity);
	  }
	  return bitwise(x, y, function (a, b) {
	    return a ^ b;
	  });
	};

/***/ },
/* 564 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isInteger = __webpack_require__(166).isInteger;
	var bigLeftShift = __webpack_require__(565);

	function factory(type, config, load, typed) {
	  var latex = __webpack_require__(192);

	  var matrix = load(__webpack_require__(212));
	  var equalScalar = load(__webpack_require__(208));
	  var zeros = load(__webpack_require__(549));

	  var algorithm01 = load(__webpack_require__(214));
	  var algorithm02 = load(__webpack_require__(529));
	  var algorithm08 = load(__webpack_require__(566));
	  var algorithm10 = load(__webpack_require__(216));
	  var algorithm11 = load(__webpack_require__(245));
	  var algorithm13 = load(__webpack_require__(217));
	  var algorithm14 = load(__webpack_require__(218));

	  /**
	   * Bitwise left logical shift of a value x by y number of bits, `x << y`.
	   * For matrices, the function is evaluated element wise.
	   * For units, the function is evaluated on the best prefix base.
	   *
	   * Syntax:
	   *
	   *    math.leftShift(x, y)
	   *
	   * Examples:
	   *
	   *    math.leftShift(1, 2);               // returns number 4
	   *
	   *    math.leftShift([1, 2, 3], 4);       // returns Array [16, 32, 64]
	   *
	   * See also:
	   *
	   *    leftShift, bitNot, bitOr, bitXor, rightArithShift, rightLogShift
	   *
	   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted
	   * @param  {number | BigNumber} y Amount of shifts
	   * @return {number | BigNumber | Array | Matrix} `x` shifted left `y` times
	   */
	  var leftShift = typed('leftShift', {

	    'number, number': function numberNumber(x, y) {
	      if (!isInteger(x) || !isInteger(y)) {
	        throw new Error('Integers expected in function leftShift');
	      }

	      return x << y;
	    },

	    'BigNumber, BigNumber': bigLeftShift,

	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse & sparse
	              c = algorithm08(x, y, leftShift, false);
	              break;
	            default:
	              // sparse & dense
	              c = algorithm02(y, x, leftShift, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense & sparse
	              c = algorithm01(x, y, leftShift, false);
	              break;
	            default:
	              // dense & dense
	              c = algorithm13(x, y, leftShift);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return leftShift(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return leftShift(matrix(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return leftShift(x, matrix(y));
	    },

	    'Matrix, number | BigNumber': function MatrixNumberBigNumber(x, y) {
	      // check scalar
	      if (!equalScalar(y, 0)) {
	        // result
	        var c;
	        // check storage format
	        switch (x.storage()) {
	          case 'sparse':
	            c = algorithm11(x, y, leftShift, false);
	            break;
	          default:
	            c = algorithm14(x, y, leftShift, false);
	            break;
	        }
	        return c;
	      }
	      return x.clone();
	    },

	    'number | BigNumber, Matrix': function numberBigNumberMatrix(x, y) {
	      // check scalar
	      if (!equalScalar(x, 0)) {
	        // result
	        var c;
	        // check storage format
	        switch (y.storage()) {
	          case 'sparse':
	            c = algorithm10(y, x, leftShift, true);
	            break;
	          default:
	            c = algorithm14(y, x, leftShift, true);
	            break;
	        }
	        return c;
	      }
	      return zeros(y.size(), y.storage());
	    },

	    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
	      // use matrix implementation
	      return leftShift(matrix(x), y).valueOf();
	    },

	    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
	      // use matrix implementation
	      return leftShift(x, matrix(y)).valueOf();
	    }
	  });

	  leftShift.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['leftShift'] + '${args[1]}\\right)'
	  };

	  return leftShift;
	}

	exports.name = 'leftShift';
	exports.factory = factory;

/***/ },
/* 565 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Bitwise left shift
	 *
	 * Special Cases:
	 *  n << -n = N
	 *  n <<  N = N
	 *  N <<  n = N
	 *  n <<  0 = n
	 *  0 <<  n = 0
	 *  I <<  I = N
	 *  I <<  n = I
	 *  n <<  I = I
	 *
	 * @param {BigNumber} x
	 * @param {BigNumber} y
	 * @return {BigNumber} Result of `x` << `y`
	 *
	 */
	module.exports = function leftShift(x, y) {
	  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
	    throw new Error('Integers expected in function leftShift');
	  }

	  var BigNumber = x.constructor;
	  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {
	    return new BigNumber(NaN);
	  }
	  if (x.isZero() || y.isZero()) {
	    return x;
	  }
	  if (!x.isFinite() && !y.isFinite()) {
	    return new BigNumber(NaN);
	  }

	  // Math.pow(2, y) is fully precise for y < 55, and fast
	  if (y.lt(55)) {
	    return x.times(Math.pow(2, y.toNumber()) + '');
	  }
	  return x.times(new BigNumber(2).pow(y));
	};

/***/ },
/* 566 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var DimensionError = __webpack_require__(202);

	function factory(type, config, load, typed) {

	  var equalScalar = load(__webpack_require__(208));

	  var SparseMatrix = type.SparseMatrix;

	  /**
	   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). 
	   * Callback function invoked MAX(NNZA, NNZB) times
	   *
	   *
	   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
	   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0
	   *          └  0            ; otherwise
	   *
	   *
	   * @param {Matrix}   a                 The SparseMatrix instance (A)
	   * @param {Matrix}   b                 The SparseMatrix instance (B)
	   * @param {Function} callback          The f(Aij,Bij) operation to invoke
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
	   */
	  var algorithm08 = function algorithm08(a, b, callback) {
	    // sparse matrix arrays
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var asize = a._size;
	    var adt = a._datatype;
	    // sparse matrix arrays
	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    var bsize = b._size;
	    var bdt = b._datatype;

	    // validate dimensions
	    if (asize.length !== bsize.length) throw new DimensionError(asize.length, bsize.length);

	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');

	    // sparse matrix cannot be a Pattern matrix
	    if (!avalues || !bvalues) throw new Error('Cannot perform operation on Pattern Sparse Matrices');

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // datatype
	    var dt;
	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // find signature that matches (dt, dt)
	      eq = typed.find(equalScalar, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // result arrays
	    var cvalues = [];
	    var cindex = [];
	    var cptr = [];
	    // matrix
	    var c = new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    });

	    // workspace
	    var x = [];
	    // marks indicating we have a value in x for a given column
	    var w = [];

	    // vars
	    var k, k0, k1, i;

	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // update cptr
	      cptr[j] = cindex.length;
	      // columns mark
	      var mark = j + 1;
	      // loop values in a
	      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        i = aindex[k];
	        // mark workspace
	        w[i] = mark;
	        // set value
	        x[i] = avalues[k];
	        // add index
	        cindex.push(i);
	      }
	      // loop values in b
	      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        i = bindex[k];
	        // check value exists in workspace
	        if (w[i] === mark) {
	          // evaluate callback
	          x[i] = cf(x[i], bvalues[k]);
	        }
	      }
	      // initialize first index in j
	      k = cptr[j];
	      // loop index in j
	      while (k < cindex.length) {
	        // row
	        i = cindex[k];
	        // value @ i
	        var v = x[i];
	        // check for zero value
	        if (!eq(v, zero)) {
	          // push value
	          cvalues.push(v);
	          // increment pointer
	          k++;
	        } else {
	          // remove value @ i, do not increment pointer
	          cindex.splice(k, 1);
	        }
	      }
	    }
	    // update cptr
	    cptr[columns] = cindex.length;

	    // return sparse matrix
	    return c;
	  };

	  return algorithm08;
	}

	exports.name = 'algorithm08';
	exports.factory = factory;

/***/ },
/* 567 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isInteger = __webpack_require__(166).isInteger;
	var bigRightArithShift = __webpack_require__(568);

	function factory(type, config, load, typed) {
	  var latex = __webpack_require__(192);

	  var matrix = load(__webpack_require__(212));
	  var equalScalar = load(__webpack_require__(208));
	  var zeros = load(__webpack_require__(549));

	  var algorithm01 = load(__webpack_require__(214));
	  var algorithm02 = load(__webpack_require__(529));
	  var algorithm08 = load(__webpack_require__(566));
	  var algorithm10 = load(__webpack_require__(216));
	  var algorithm11 = load(__webpack_require__(245));
	  var algorithm13 = load(__webpack_require__(217));
	  var algorithm14 = load(__webpack_require__(218));

	  /**
	   * Bitwise right arithmetic shift of a value x by y number of bits, `x >> y`.
	   * For matrices, the function is evaluated element wise.
	   * For units, the function is evaluated on the best prefix base.
	   *
	   * Syntax:
	   *
	   *    math.rightArithShift(x, y)
	   *
	   * Examples:
	   *
	   *    math.rightArithShift(4, 2);               // returns number 1
	   *
	   *    math.rightArithShift([16, -32, 64], 4);   // returns Array [1, -2, 3]
	   *
	   * See also:
	   *
	   *    bitAnd, bitNot, bitOr, bitXor, rightArithShift, rightLogShift
	   *
	   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted
	   * @param  {number | BigNumber} y Amount of shifts
	   * @return {number | BigNumber | Array | Matrix} `x` sign-filled shifted right `y` times
	   */
	  var rightArithShift = typed('rightArithShift', {

	    'number, number': function numberNumber(x, y) {
	      if (!isInteger(x) || !isInteger(y)) {
	        throw new Error('Integers expected in function rightArithShift');
	      }

	      return x >> y;
	    },

	    'BigNumber, BigNumber': bigRightArithShift,

	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse & sparse
	              c = algorithm08(x, y, rightArithShift, false);
	              break;
	            default:
	              // sparse & dense
	              c = algorithm02(y, x, rightArithShift, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense & sparse
	              c = algorithm01(x, y, rightArithShift, false);
	              break;
	            default:
	              // dense & dense
	              c = algorithm13(x, y, rightArithShift);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return rightArithShift(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return rightArithShift(matrix(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return rightArithShift(x, matrix(y));
	    },

	    'Matrix, number | BigNumber': function MatrixNumberBigNumber(x, y) {
	      // check scalar
	      if (!equalScalar(y, 0)) {
	        // result
	        var c;
	        // check storage format
	        switch (x.storage()) {
	          case 'sparse':
	            c = algorithm11(x, y, rightArithShift, false);
	            break;
	          default:
	            c = algorithm14(x, y, rightArithShift, false);
	            break;
	        }
	        return c;
	      }
	      return x.clone();
	    },

	    'number | BigNumber, Matrix': function numberBigNumberMatrix(x, y) {
	      // check scalar
	      if (!equalScalar(x, 0)) {
	        // result
	        var c;
	        // check storage format
	        switch (y.storage()) {
	          case 'sparse':
	            c = algorithm10(y, x, rightArithShift, true);
	            break;
	          default:
	            c = algorithm14(y, x, rightArithShift, true);
	            break;
	        }
	        return c;
	      }
	      return zeros(y.size(), y.storage());
	    },

	    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
	      // use matrix implementation
	      return rightArithShift(matrix(x), y).valueOf();
	    },

	    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
	      // use matrix implementation
	      return rightArithShift(x, matrix(y)).valueOf();
	    }
	  });

	  rightArithShift.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['rightArithShift'] + '${args[1]}\\right)'
	  };

	  return rightArithShift;
	}

	exports.name = 'rightArithShift';
	exports.factory = factory;

/***/ },
/* 568 */
/***/ function(module, exports) {

	'use strict';

	/*
	 * Special Cases:
	 *   n >> -n =  N
	 *   n >>  N =  N
	 *   N >>  n =  N
	 *   I >>  I =  N
	 *   n >>  0 =  n
	 *   I >>  n =  I
	 *  -I >>  n = -I
	 *  -I >>  I = -I
	 *   n >>  I =  I
	 *  -n >>  I = -1
	 *   0 >>  n =  0
	 *
	 * @param {BigNumber} value
	 * @param {BigNumber} value
	 * @return {BigNumber} Result of `x` >> `y`
	 *
	 */
	module.exports = function rightArithShift(x, y) {
	  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
	    throw new Error('Integers expected in function rightArithShift');
	  }

	  var BigNumber = x.constructor;
	  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {
	    return new BigNumber(NaN);
	  }
	  if (x.isZero() || y.isZero()) {
	    return x;
	  }
	  if (!y.isFinite()) {
	    if (x.isNegative()) {
	      return new BigNumber(-1);
	    }
	    if (!x.isFinite()) {
	      return new BigNumber(NaN);
	    }
	    return new BigNumber(0);
	  }

	  // Math.pow(2, y) is fully precise for y < 55, and fast
	  if (y.lt(55)) {
	    return x.div(Math.pow(2, y.toNumber()) + '').floor();
	  }
	  return x.div(new BigNumber(2).pow(y)).floor();
	};

/***/ },
/* 569 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isInteger = __webpack_require__(166).isInteger;

	function factory(type, config, load, typed) {
	  var latex = __webpack_require__(192);

	  var matrix = load(__webpack_require__(212));
	  var equalScalar = load(__webpack_require__(208));
	  var zeros = load(__webpack_require__(549));

	  var algorithm01 = load(__webpack_require__(214));
	  var algorithm02 = load(__webpack_require__(529));
	  var algorithm08 = load(__webpack_require__(566));
	  var algorithm10 = load(__webpack_require__(216));
	  var algorithm11 = load(__webpack_require__(245));
	  var algorithm13 = load(__webpack_require__(217));
	  var algorithm14 = load(__webpack_require__(218));

	  /**
	   * Bitwise right logical shift of value x by y number of bits, `x >>> y`.
	   * For matrices, the function is evaluated element wise.
	   * For units, the function is evaluated on the best prefix base.
	   *
	   * Syntax:
	   *
	   *    math.rightLogShift(x, y)
	   *
	   * Examples:
	   *
	   *    math.rightLogShift(4, 2);               // returns number 1
	   *
	   *    math.rightLogShift([16, -32, 64], 4);   // returns Array [1, 2, 3]
	   *
	   * See also:
	   *
	   *    bitAnd, bitNot, bitOr, bitXor, leftShift, rightLogShift
	   *
	   * @param  {number | Array | Matrix} x Value to be shifted
	   * @param  {number} y Amount of shifts
	   * @return {number | Array | Matrix} `x` zero-filled shifted right `y` times
	   */

	  var rightLogShift = typed('rightLogShift', {

	    'number, number': function numberNumber(x, y) {
	      if (!isInteger(x) || !isInteger(y)) {
	        throw new Error('Integers expected in function rightLogShift');
	      }

	      return x >>> y;
	    },

	    // 'BigNumber, BigNumber': ..., // TODO: implement BigNumber support for rightLogShift

	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse & sparse
	              c = algorithm08(x, y, rightLogShift, false);
	              break;
	            default:
	              // sparse & dense
	              c = algorithm02(y, x, rightLogShift, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense & sparse
	              c = algorithm01(x, y, rightLogShift, false);
	              break;
	            default:
	              // dense & dense
	              c = algorithm13(x, y, rightLogShift);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return rightLogShift(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return rightLogShift(matrix(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return rightLogShift(x, matrix(y));
	    },

	    'Matrix, number | BigNumber': function MatrixNumberBigNumber(x, y) {
	      // check scalar
	      if (!equalScalar(y, 0)) {
	        // result
	        var c;
	        // check storage format
	        switch (x.storage()) {
	          case 'sparse':
	            c = algorithm11(x, y, rightLogShift, false);
	            break;
	          default:
	            c = algorithm14(x, y, rightLogShift, false);
	            break;
	        }
	        return c;
	      }
	      return x.clone();
	    },

	    'number | BigNumber, Matrix': function numberBigNumberMatrix(x, y) {
	      // check scalar
	      if (!equalScalar(x, 0)) {
	        // result
	        var c;
	        // check storage format
	        switch (y.storage()) {
	          case 'sparse':
	            c = algorithm10(y, x, rightLogShift, true);
	            break;
	          default:
	            c = algorithm14(y, x, rightLogShift, true);
	            break;
	        }
	        return c;
	      }
	      return zeros(y.size(), y.storage());
	    },

	    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
	      // use matrix implementation
	      return rightLogShift(matrix(x), y).valueOf();
	    },

	    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
	      // use matrix implementation
	      return rightLogShift(x, matrix(y)).valueOf();
	    }
	  });

	  rightLogShift.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['rightLogShift'] + '${args[1]}\\right)'
	  };

	  return rightLogShift;
	}

	exports.name = 'rightLogShift';
	exports.factory = factory;

/***/ },
/* 570 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

		module.exports = [__webpack_require__(571), __webpack_require__(577), __webpack_require__(572), __webpack_require__(578)];

/***/ },
/* 571 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load, typed) {
	  var add = load(__webpack_require__(211));
	  var stirlingS2 = load(__webpack_require__(572));
	  var isNegative = load(__webpack_require__(525));
	  var isInteger = load(__webpack_require__(576));

	  /**
	   * The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S.
	   * bellNumbers only takes integer arguments.
	   * The following condition must be enforced: n >= 0
	   *
	   * Syntax:
	   *
	   *   math.bellNumbers(n)
	   *
	   * Examples:
	   *
	   *    math.bellNumbers(3); // returns 5;
	   *    math.bellNumbers(8); // returns 4140;
	   *
	   * See also:
	   *
	   *    stirlingS2
	   *
	   * @param {Number | BigNumber} n    Total number of objects in the set
	   * @return {Number | BigNumber}     B(n)
	   */
	  var bellNumbers = typed('bellNumbers', {
	    'number | BigNumber': function numberBigNumber(n) {

	      if (!isInteger(n) || isNegative(n)) {
	        throw new TypeError('Non-negative integer value expected in function bellNumbers');
	      }

	      // Sum (k=0, n) S(n,k).
	      var result = 0;
	      for (var i = 0; i <= n; i++) {
	        result = add(result, stirlingS2(n, i));
	      }

	      return result;
	    }
	  });

	  bellNumbers.toTex = { 1: '\\mathrm{B}_{${args[0]}}' };

	  return bellNumbers;
	}

	exports.name = 'bellNumbers';
	exports.factory = factory;

/***/ },
/* 572 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load, typed) {
	  var add = load(__webpack_require__(211));
	  var subtract = load(__webpack_require__(237));
	  var multiply = load(__webpack_require__(244));
	  var divide = load(__webpack_require__(486));
	  var pow = load(__webpack_require__(242));
	  var factorial = load(__webpack_require__(573));
	  var combinations = load(__webpack_require__(575));
	  var isNegative = load(__webpack_require__(525));
	  var isInteger = load(__webpack_require__(576));
	  var larger = load(__webpack_require__(224));

	  /**
	   * The Stirling numbers of the second kind, counts the number of ways to partition
	   * a set of n labelled objects into k nonempty unlabelled subsets.
	   * stirlingS2 only takes integer arguments.
	   * The following condition must be enforced: k <= n.
	   *
	   *  If n = k or k = 1, then s(n,k) = 1
	   *
	   * Syntax:
	   *
	   *   math.stirlingS2(n, k)
	   *
	   * Examples:
	   *
	   *    math.stirlingS2(5, 3); //returns 25
	   *
	   * See also:
	   *
	   *    Bell numbers
	   *
	   * @param {Number | BigNumber} n    Total number of objects in the set
	   * @param {Number | BigNumber} k    Number of objects in the subset
	   * @return {Number | BigNumber}     S(n,k)
	   */
	  var stirlingS2 = typed('stirlingS2', {
	    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {
	      if (!isInteger(n) || isNegative(n) || !isInteger(k) || isNegative(k)) {
	        throw new TypeError('Non-negative integer value expected in function stirlingS2');
	      } else if (larger(k, n)) {
	        throw new TypeError('k must be less than or equal to n in function stirlingS2');
	      }

	      // 1/k! Sum(i=0 -> k) [(-1)^(k-i)*C(k,j)* i^n]
	      var kFactorial = factorial(k);
	      var result = 0;
	      for (var i = 0; i <= k; i++) {
	        var negativeOne = pow(-1, subtract(k, i));
	        var kChooseI = combinations(k, i);
	        var iPower = pow(i, n);

	        result = add(result, multiply(multiply(kChooseI, iPower), negativeOne));
	      }

	      return divide(result, kFactorial);
	    }
	  });

	  stirlingS2.toTex = { 2: '\\mathrm{S}\\left(${args}\\right)' };

	  return stirlingS2;
	}

	exports.name = 'stirlingS2';
	exports.factory = factory;

/***/ },
/* 573 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  var gamma = load(__webpack_require__(574));
	  var latex = __webpack_require__(192);

	  /**
	   * Compute the factorial of a value
	   *
	   * Factorial only supports an integer value as argument.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.factorial(n)
	   *
	   * Examples:
	   *
	   *    math.factorial(5);    // returns 120
	   *    math.factorial(3);    // returns 6
	   *
	   * See also:
	   *
	   *    combinations, gamma, permutations
	   *
	   * @param {number | BigNumber | Array | Matrix} n   An integer number
	   * @return {number | BigNumber | Array | Matrix}    The factorial of `n`
	   */
	  var factorial = typed('factorial', {
	    'number': function number(n) {
	      if (n < 0) {
	        throw new Error('Value must be non-negative');
	      }

	      return gamma(n + 1);
	    },

	    'BigNumber': function BigNumber(n) {
	      if (n.isNegative()) {
	        throw new Error('Value must be non-negative');
	      }

	      return gamma(n.plus(1));
	    },

	    'Array | Matrix': function ArrayMatrix(n) {
	      return deepMap(n, factorial);
	    }
	  });

	  factorial.toTex = {
	    1: '\\left(${args[0]}\\right)' + latex.operators['factorial']
	  };

	  return factorial;
	}

	exports.name = 'factorial';
	exports.factory = factory;

/***/ },
/* 574 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);
	var isInteger = __webpack_require__(166).isInteger;

	function factory(type, config, load, typed) {
	  var multiply = load(__webpack_require__(244));
	  var pow = load(__webpack_require__(242));

	  /**
	   * Compute the gamma function of a value using Lanczos approximation for
	   * small values, and an extended Stirling approximation for large values.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.gamma(n)
	   *
	   * Examples:
	   *
	   *    math.gamma(5);       // returns 24
	   *    math.gamma(-0.5);    // returns -3.5449077018110335
	   *    math.gamma(math.i);  // returns -0.15494982830180973 - 0.49801566811835596i
	   *
	   * See also:
	   *
	   *    combinations, factorial, permutations
	   *
	   * @param {number | Array | Matrix} n   A real or complex number
	   * @return {number | Array | Matrix}    The gamma of `n`
	   */
	  var gamma = typed('gamma', {
	    'number': function number(n) {
	      var t, x;

	      if (isInteger(n)) {
	        if (n <= 0) {
	          return isFinite(n) ? Infinity : NaN;
	        }

	        if (n > 171) {
	          return Infinity; // Will overflow
	        }

	        var value = n - 2;
	        var res = n - 1;
	        while (value > 1) {
	          res *= value;
	          value--;
	        }

	        if (res == 0) {
	          res = 1; // 0! is per definition 1
	        }

	        return res;
	      }

	      if (n < 0.5) {
	        return Math.PI / (Math.sin(Math.PI * n) * gamma(1 - n));
	      }

	      if (n >= 171.35) {
	        return Infinity; // will overflow
	      }

	      if (n > 85.0) {
	        // Extended Stirling Approx
	        var twoN = n * n;
	        var threeN = twoN * n;
	        var fourN = threeN * n;
	        var fiveN = fourN * n;
	        return Math.sqrt(2 * Math.PI / n) * Math.pow(n / Math.E, n) * (1 + 1 / (12 * n) + 1 / (288 * twoN) - 139 / (51840 * threeN) - 571 / (2488320 * fourN) + 163879 / (209018880 * fiveN) + 5246819 / (75246796800 * fiveN * n));
	      }

	      --n;
	      x = p[0];
	      for (var i = 1; i < p.length; ++i) {
	        x += p[i] / (n + i);
	      }

	      t = n + g + 0.5;
	      return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * x;
	    },

	    'Complex': function Complex(n) {
	      var t, x;

	      if (n.im == 0) {
	        return gamma(n.re);
	      }

	      n = new type.Complex(n.re - 1, n.im);
	      x = new type.Complex(p[0], 0);
	      for (var i = 1; i < p.length; ++i) {
	        var real = n.re + i; // x += p[i]/(n+i)
	        var den = real * real + n.im * n.im;
	        if (den != 0) {
	          x.re += p[i] * real / den;
	          x.im += -(p[i] * n.im) / den;
	        } else {
	          x.re = p[i] < 0 ? -Infinity : Infinity;
	        }
	      }

	      t = new type.Complex(n.re + g + 0.5, n.im);
	      var twoPiSqrt = Math.sqrt(2 * Math.PI);

	      n.re += 0.5;
	      var result = pow(t, n);
	      if (result.im == 0) {
	        // sqrt(2*PI)*result
	        result.re *= twoPiSqrt;
	      } else if (result.re == 0) {
	        result.im *= twoPiSqrt;
	      } else {
	        result.re *= twoPiSqrt;
	        result.im *= twoPiSqrt;
	      }

	      var r = Math.exp(-t.re); // exp(-t)
	      t.re = r * Math.cos(-t.im);
	      t.im = r * Math.sin(-t.im);

	      return multiply(multiply(result, t), x);
	    },

	    'BigNumber': function BigNumber(n) {
	      if (n.isInteger()) {
	        return n.isNegative() || n.isZero() ? new type.BigNumber(Infinity) : bigFactorial(n.minus(1));
	      }

	      if (!n.isFinite()) {
	        return new type.BigNumber(n.isNegative() ? NaN : Infinity);
	      }

	      throw new Error('Integer BigNumber expected');
	    },

	    'Array | Matrix': function ArrayMatrix(n) {
	      return deepMap(n, gamma);
	    }
	  });

	  /**
	   * Calculate factorial for a BigNumber
	   * @param {BigNumber} n
	   * @returns {BigNumber} Returns the factorial of n
	   */
	  function bigFactorial(n) {
	    if (n.isZero()) {
	      return new type.BigNumber(1); // 0! is per definition 1
	    }

	    var precision = config.precision + (Math.log(n.toNumber()) | 0);
	    var Big = type.BigNumber.clone({ precision: precision });

	    var res = new Big(n);
	    var value = n.toNumber() - 1; // number
	    while (value > 1) {
	      res = res.times(value);
	      value--;
	    }

	    return new type.BigNumber(res.toPrecision(type.BigNumber.precision));
	  }

	  gamma.toTex = { 1: '\\Gamma\\left(${args[0]}\\right)' };

	  return gamma;
	}

	// TODO: comment on the variables g and p

	var g = 4.7421875;

	var p = [0.99999999999999709182, 57.156235665862923517, -59.597960355475491248, 14.136097974741747174, -0.49191381609762019978, 0.33994649984811888699e-4, 0.46523628927048575665e-4, -0.98374475304879564677e-4, 0.15808870322491248884e-3, -0.21026444172410488319e-3, 0.21743961811521264320e-3, -0.16431810653676389022e-3, 0.84418223983852743293e-4, -0.26190838401581408670e-4, 0.36899182659531622704e-5];

	exports.name = 'gamma';
	exports.factory = factory;

/***/ },
/* 575 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isInteger = __webpack_require__(166).isInteger;

	function factory(type, config, load, typed) {
	  /**
	   * Compute the number of ways of picking `k` unordered outcomes from `n`
	   * possibilities.
	   *
	   * Combinations only takes integer arguments.
	   * The following condition must be enforced: k <= n.
	   *
	   * Syntax:
	   *
	   *     math.combinations(n, k)
	   *
	   * Examples:
	   *
	   *    math.combinations(7, 5); // returns 21
	   *
	   * See also:
	   *
	   *    permutations, factorial
	   *
	   * @param {number | BigNumber} n    Total number of objects in the set
	   * @param {number | BigNumber} k    Number of objects in the subset
	   * @return {number | BigNumber}     Number of possible combinations.
	   */
	  var combinations = typed('combinations', {
	    'number, number': function numberNumber(n, k) {
	      var max, result, i;

	      if (!isInteger(n) || n < 0) {
	        throw new TypeError('Positive integer value expected in function combinations');
	      }
	      if (!isInteger(k) || k < 0) {
	        throw new TypeError('Positive integer value expected in function combinations');
	      }
	      if (k > n) {
	        throw new TypeError('k must be less than or equal to n');
	      }

	      max = Math.max(k, n - k);
	      result = 1;
	      for (i = 1; i <= n - max; i++) {
	        result = result * (max + i) / i;
	      }

	      return result;
	    },

	    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {
	      var max, result, i, ii;
	      var one = new type.BigNumber(1);

	      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {
	        throw new TypeError('Positive integer value expected in function combinations');
	      }
	      if (k.gt(n)) {
	        throw new TypeError('k must be less than n in function combinations');
	      }

	      max = n.minus(k);
	      if (k.lt(max)) max = k;
	      result = one;
	      for (i = one, ii = n.minus(max); i.lte(ii); i = i.plus(1)) {
	        result = result.times(max.plus(i)).dividedBy(i);
	      }

	      return result;
	    }

	    // TODO: implement support for collection in combinations
	  });

	  combinations.toTex = { 2: '\\binom{${args[0]}}{${args[1]}}' };

	  return combinations;
	}

	/**
	 * Test whether BigNumber n is a positive integer
	 * @param {BigNumber} n
	 * @returns {boolean} isPositiveInteger
	 */
	function isPositiveInteger(n) {
	  return n.isInteger() && n.gte(0);
	}

	exports.name = 'combinations';
	exports.factory = factory;

/***/ },
/* 576 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);
	var number = __webpack_require__(166);

	function factory(type, config, load, typed) {
	  /**
	   * Test whether a value is an integer number.
	   * The function supports `number`, `BigNumber`, and `Fraction`.
	   *
	   * The function is evaluated element-wise in case of Array or Matrix input.
	   *
	   * Syntax:
	   *
	   *     math.isInteger(x)
	   *
	   * Examples:
	   *
	   *    math.isInteger(2);                     // returns true
	   *    math.isInteger(0);                     // returns true
	   *    math.isInteger(0.5);                   // returns false
	   *    math.isInteger(math.bignumber(500));   // returns true
	   *    math.isInteger(math.fraction(4));      // returns true
	   *    math.isInteger('3');                   // returns true
	   *    math.isInteger([3, 0.5, -2]);          // returns [true, false, true]
	   *    math.isInteger(math.complex('2-4i');   // throws an error
	   *
	   * See also:
	   *
	   *    isNumeric, isPositive, isNegative, isZero
	   *
	   * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested
	   * @return {boolean}  Returns true when `x` contains a numeric, integer value.
	   *                    Throws an error in case of an unknown data type.
	   */
	  var isInteger = typed('isInteger', {
	    'number': number.isInteger, // TODO: what to do with isInteger(add(0.1, 0.2))  ?

	    'BigNumber': function BigNumber(x) {
	      return x.isInt();
	    },

	    'Fraction': function Fraction(x) {
	      return x.d === 1 && isFinite(x.n);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, isInteger);
	    }
	  });

	  return isInteger;
	}

	exports.name = 'isInteger';
	exports.factory = factory;

/***/ },
/* 577 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load, typed) {
	  var combinations = load(__webpack_require__(575));
	  var add = load(__webpack_require__(213));
	  var isPositive = load(__webpack_require__(538));
	  var isInteger = load(__webpack_require__(576));
	  var larger = load(__webpack_require__(224));

	  /**
	   * The composition counts of n into k parts.
	   *
	   * composition only takes integer arguments.
	   * The following condition must be enforced: k <= n.
	   *
	   * Syntax:
	   *
	   *   math.composition(n, k)
	   *
	   * Examples:
	   *
	   *    math.composition(5, 3); // returns 6
	   *
	   * See also:
	   *
	   *    combinations
	   *
	   * @param {Number | BigNumber} n    Total number of objects in the set
	   * @param {Number | BigNumber} k    Number of objects in the subset
	   * @return {Number | BigNumber}     Returns the composition counts of n into k parts.
	   */
	  var composition = typed('composition', {
	    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {
	      if (!isInteger(n) || !isPositive(n) || !isInteger(k) || !isPositive(k)) {
	        throw new TypeError('Positive integer value expected in function composition');
	      } else if (larger(k, n)) {
	        throw new TypeError('k must be less than or equal to n in function composition');
	      }

	      return combinations(add(n, -1), add(k, -1));
	    }
	  });

	  composition.toTex = undefined; // use default template

	  return composition;
	}

	exports.name = 'composition';
	exports.factory = factory;

/***/ },
/* 578 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load, typed) {
	  var add = load(__webpack_require__(211));
	  var divide = load(__webpack_require__(486));
	  var multiply = load(__webpack_require__(244));
	  var combinations = load(__webpack_require__(575));
	  var isNegative = load(__webpack_require__(525));
	  var isInteger = load(__webpack_require__(576));

	  /**
	   * The Catalan Numbers enumerate combinatorial structures of many different types.
	   * catalan only takes integer arguments.
	   * The following condition must be enforced: n >= 0
	   *
	   * Syntax:
	   *
	   *   math.catalan(n)
	   *
	   * Examples:
	   *
	   *    math.catalan(3); // returns 5;
	   *    math.catalan(8); // returns 1430;
	   *
	   * See also:
	   *
	   *    bellNumbers
	   *
	   * @param {Number | BigNumber} n    nth Catalan number
	   * @return {Number | BigNumber}     Cn(n)
	   */
	  var catalan = typed('catalan', {
	    'number | BigNumber': function numberBigNumber(n) {

	      if (!isInteger(n) || isNegative(n)) {
	        throw new TypeError('Non-negative integer value expected in function catalan');
	      }

	      return divide(combinations(multiply(n, 2), n), add(n, 1));
	    }
	  });

	  catalan.toTex = { 1: '\\mathrm{C}_{${args[0]}}' };

	  return catalan;
	}

	exports.name = 'catalan';
	exports.factory = factory;

/***/ },
/* 579 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

		module.exports = [__webpack_require__(580), __webpack_require__(581), __webpack_require__(582), __webpack_require__(583)];

/***/ },
/* 580 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  /**
	   * Compute the argument of a complex value.
	   * For a complex number `a + bi`, the argument is computed as `atan2(b, a)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.arg(x)
	   *
	   * Examples:
	   *
	   *    var a = math.complex(2, 2);
	   *    math.arg(a) / math.pi;          // returns number 0.25
	   *
	   *    var b = math.complex('2 + 3i');
	   *    math.arg(b);                    // returns number 0.982793723247329
	   *    math.atan2(3, 2);               // returns number 0.982793723247329
	   *
	   * See also:
	   *
	   *    re, im, conj, abs
	   *
	   * @param {number | Complex | Array | Matrix} x
	   *            A complex number or array with complex numbers
	   * @return {number | Array | Matrix} The argument of x
	   */
	  var arg = typed('arg', {
	    'number': function number(x) {
	      return Math.atan2(0, x);
	    },

	    'Complex': function Complex(x) {
	      return x.arg();
	    },

	    // TODO: implement BigNumber support for function arg

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, arg);
	    }
	  });

	  arg.toTex = { 1: '\\arg\\left(${args[0]}\\right)' };

	  return arg;
	}

	exports.name = 'arg';
	exports.factory = factory;

/***/ },
/* 581 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  /**
	   * Compute the complex conjugate of a complex value.
	   * If `x = a+bi`, the complex conjugate of `x` is `a - bi`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.conj(x)
	   *
	   * Examples:
	   *
	   *    math.conj(math.complex('2 + 3i'));  // returns Complex 2 - 3i
	   *    math.conj(math.complex('2 - 3i'));  // returns Complex 2 + 3i
	   *    math.conj(math.complex('-5.2i'));  // returns Complex 5.2i
	   *
	   * See also:
	   *
	   *    re, im, arg, abs
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x
	   *            A complex number or array with complex numbers
	   * @return {number | BigNumber | Complex | Array | Matrix}
	   *            The complex conjugate of x
	   */
	  var conj = typed('conj', {
	    'number': function number(x) {
	      return x;
	    },

	    'BigNumber': function BigNumber(x) {
	      return x;
	    },

	    'Complex': function Complex(x) {
	      return x.conjugate();
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, conj);
	    }
	  });

	  conj.toTex = { 1: '\\left(${args[0]}\\right)^*' };

	  return conj;
	}

	exports.name = 'conj';
	exports.factory = factory;

/***/ },
/* 582 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  /**
	   * Get the imaginary part of a complex number.
	   * For a complex number `a + bi`, the function returns `b`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.im(x)
	   *
	   * Examples:
	   *
	   *    var a = math.complex(2, 3);
	   *    math.re(a);                     // returns number 2
	   *    math.im(a);                     // returns number 3
	   *
	   *    math.re(math.complex('-5.2i')); // returns number -5.2
	   *    math.re(math.complex(2.4));     // returns number 0
	   *
	   * See also:
	   *
	   *    re, conj, abs, arg
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x
	   *            A complex number or array with complex numbers
	   * @return {number | BigNumber | Array | Matrix} The imaginary part of x
	   */
	  var im = typed('im', {
	    'number': function number(x) {
	      return 0;
	    },

	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(0);
	    },

	    'Complex': function Complex(x) {
	      return x.im;
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, im);
	    }
	  });

	  im.toTex = { 1: '\\Im\\left\\lbrace${args[0]}\\right\\rbrace' };

	  return im;
	}

	exports.name = 'im';
	exports.factory = factory;

/***/ },
/* 583 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  /**
	   * Get the real part of a complex number.
	   * For a complex number `a + bi`, the function returns `a`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.re(x)
	   *
	   * Examples:
	   *
	   *    var a = math.complex(2, 3);
	   *    math.re(a);                     // returns number 2
	   *    math.im(a);                     // returns number 3
	   *
	   *    math.re(math.complex('-5.2i')); // returns number 0
	   *    math.re(math.complex(2.4));     // returns number 2.4
	   *
	   * See also:
	   *
	   *    im, conj, abs, arg
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x
	   *            A complex number or array with complex numbers
	   * @return {number | BigNumber | Array | Matrix} The real part of x
	   */
	  var re = typed('re', {
	    'number': function number(x) {
	      return x;
	    },

	    'BigNumber': function BigNumber(x) {
	      return x;
	    },

	    'Complex': function Complex(x) {
	      return x.re;
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, re);
	    }
	  });

	  re.toTex = { 1: '\\Re\\left\\lbrace${args[0]}\\right\\rbrace' };

	  return re;
	}

	exports.name = 're';
	exports.factory = factory;

/***/ },
/* 584 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

		module.exports = [__webpack_require__(585), __webpack_require__(586)];

/***/ },
/* 585 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load, typed) {

	  var abs = load(__webpack_require__(246));
	  var add = load(__webpack_require__(211));
	  var matrix = load(__webpack_require__(212));
	  var multiply = load(__webpack_require__(244));
	  var subtract = load(__webpack_require__(237));

	  /**
	   * Calculates the point of intersection of two lines in two or three dimensions
	   * and of a line and a plane in three dimensions. The inputs are in the form of
	   * arrays or 1 dimensional matrices. The line intersection functions return null
	   * if the lines do not meet.
	   *
	   * Note: Fill the plane coefficients as `x + y + z = c` and not as `x + y + z + c = 0`.
	   *
	   * Syntax:
	   *
	   *    math.intersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)
	   *    math.intersect(endPoint1, endPoint2, planeCoefficients)
	   *
	   * Examples:
	   *
	   *    math.intersect([0, 0], [10, 10], [10, 0], [0, 10]);              // Returns [5, 5]
	   *    math.intersect([0, 0, 0], [10, 10, 0], [10, 0, 0], [0, 10, 0]);  // Returns [5, 5, 0]
	   *    math.intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6]);            // Returns [7, -4, 3]
	   *
	   * @param  {Array | Matrix} w   Co-ordinates of first end-point of first line
	   * @param  {Array | Matrix} x   Co-ordinates of second end-point of first line
	   * @param  {Array | Matrix} y   Co-ordinates of first end-point of second line
	   *                              OR Co-efficients of the plane's equation
	   * @param  {Array | Matrix} z   Co-ordinates of second end-point of second line
	   *                              OR null if the calculation is for line and plane
	   * @return {Array}              Returns the point of intersection of lines/lines-planes
	   */
	  var intersect = typed('intersect', {
	    'Array, Array, Array': function ArrayArrayArray(x, y, plane) {
	      if (!_3d(x)) {
	        throw new TypeError('Array with 3 numbers expected for first argument');
	      }
	      if (!_3d(y)) {
	        throw new TypeError('Array with 3 numbers expected for second argument');
	      }
	      if (!_4d(plane)) {
	        throw new TypeError('Array with 4 numbers expected as third argument');
	      }

	      return _intersectLinePlane(x[0], x[1], x[2], y[0], y[1], y[2], plane[0], plane[1], plane[2], plane[3]);
	    },

	    'Array, Array, Array, Array': function ArrayArrayArrayArray(w, x, y, z) {
	      if (w.length === 2) {
	        if (!_2d(w)) {
	          throw new TypeError('Array with 2 numbers expected for first argument');
	        }
	        if (!_2d(x)) {
	          throw new TypeError('Array with 2 numbers expected for second argument');
	        }
	        if (!_2d(y)) {
	          throw new TypeError('Array with 2 numbers expected for third argument');
	        }
	        if (!_2d(z)) {
	          throw new TypeError('Array with 2 numbers expected for fourth argument');
	        }

	        return _intersect2d(w, x, y, z);
	      } else if (w.length === 3) {
	        if (!_3d(w)) {
	          throw new TypeError('Array with 3 numbers expected for first argument');
	        }
	        if (!_3d(x)) {
	          throw new TypeError('Array with 3 numbers expected for second argument');
	        }
	        if (!_3d(y)) {
	          throw new TypeError('Array with 3 numbers expected for third argument');
	        }
	        if (!_3d(z)) {
	          throw new TypeError('Array with 3 numbers expected for fourth argument');
	        }

	        return _intersect3d(w[0], w[1], w[2], x[0], x[1], x[2], y[0], y[1], y[2], z[0], z[1], z[2]);
	      } else {
	        throw new TypeError('Arrays with two or thee dimensional points expected');
	      }
	    },

	    'Matrix, Matrix, Matrix': function MatrixMatrixMatrix(x, y, plane) {
	      return matrix(intersect(x.valueOf(), y.valueOf(), plane.valueOf()));
	    },

	    'Matrix, Matrix, Matrix, Matrix': function MatrixMatrixMatrixMatrix(w, x, y, z) {
	      // TODO: output matrix type should match input matrix type
	      return matrix(intersect(w.valueOf(), x.valueOf(), y.valueOf(), z.valueOf()));
	    }
	  });

	  function _2d(x) {
	    return x.length === 2 && typeof x[0] === 'number' && typeof x[1] === 'number';
	  }

	  function _3d(x) {
	    return x.length === 3 && typeof x[0] === 'number' && typeof x[1] === 'number' && typeof x[2] === 'number';
	  }

	  function _4d(x) {
	    return x.length === 4 && typeof x[0] === 'number' && typeof x[1] === 'number' && typeof x[2] === 'number' && typeof x[3] === 'number';
	  }

	  function _intersect2d(p1a, p1b, p2a, p2b) {
	    var o1 = p1a;
	    var o2 = p2a;
	    var d1 = subtract(o1, p1b);
	    var d2 = subtract(o2, p2b);
	    var det = d1[0] * d2[1] - d2[0] * d1[1];
	    if (abs(det) < config.epsilon) {
	      return null;
	    }
	    var t = (d2[0] * o1[1] - d2[1] * o1[0] - d2[0] * o2[1] + d2[1] * o2[0]) / det;
	    return add(multiply(d1, t), o1);
	  }

	  function _intersect3d(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4) {
	    var d1343 = (x1 - x3) * (x4 - x3) + (y1 - y3) * (y4 - y3) + (z1 - z3) * (z4 - z3);
	    var d4321 = (x4 - x3) * (x2 - x1) + (y4 - y3) * (y2 - y1) + (z4 - z3) * (z2 - z1);
	    var d1321 = (x1 - x3) * (x2 - x1) + (y1 - y3) * (y2 - y1) + (z1 - z3) * (z2 - z1);
	    var d4343 = (x4 - x3) * (x4 - x3) + (y4 - y3) * (y4 - y3) + (z4 - z3) * (z4 - z3);
	    var d2121 = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1) + (z2 - z1) * (z2 - z1);
	    var ta = (d1343 * d4321 - d1321 * d4343) / (d2121 * d4343 - d4321 * d4321);
	    var tb = (d1343 + ta * d4321) / d4343;

	    var pax = x1 + ta * (x2 - x1);
	    var pay = y1 + ta * (y2 - y1);
	    var paz = z1 + ta * (z2 - z1);
	    var pbx = x3 + tb * (x4 - x3);
	    var pby = y3 + tb * (y4 - y3);
	    var pbz = z3 + tb * (z4 - z3);
	    if (pax === pbx && pay === pby && paz === pbz) {
	      return [pax, pay, paz];
	    } else {
	      return null;
	    }
	  }

	  function _intersectLinePlane(x1, y1, z1, x2, y2, z2, x, y, z, c) {
	    var t = (c - x1 * x - y1 * y - z1 * z) / (x2 * x + y2 * y + z2 * z - x1 - y1 - z1);
	    var px = x1 + t * (x2 - x1);
	    var py = y1 + t * (y2 - y1);
	    var pz = z1 + t * (z2 - z1);
	    return [px, py, pz];
	    // TODO: Add cases when line is parallel to the plane:
	    //       (a) no intersection,
	    //       (b) line contained in plane
	  }

	  return intersect;
	}

	exports.name = 'intersect';
	exports.factory = factory;

/***/ },
/* 586 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load, typed) {
	  var matrix = load(__webpack_require__(212));

	  /**
	    * Calculates:
	    *    The eucledian distance between two points in 2 and 3 dimensional spaces.
	    *    Distance between point and a line in 2 and 3 dimensional spaces.
	    *    Pairwise distance between a set of 2D or 3D points
	    * NOTE:
	    *    When substituting coefficients of a line(a, b and c), use ax + by + c = 0 instead of ax + by = c
	    *    For parametric equation of a 3D line, x0, y0, z0, a, b, c are from: (x−x0, y−y0, z−z0) = t(a, b, c)
	    *
	    * Syntax:
	    *    math.distance([x1, y1], [x2, y2])
	    *-   math.distance({pointOneX: 4, pointOneY: 5}, {pointTwoX: 2, pointTwoY: 7})
	    *    math.distance([x1, y1, z1], [x2, y2, z2])
	    *    math.distance({pointOneX: 4, pointOneY: 5, pointOneZ: 8}, {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})
	    *    math.distance([[A], [B], [C]...])
	    *    math.distance([x1, y1], [LinePtX1, LinePtY1], [LinePtX2, LinePtY2])
	    *    math.distance({pointX: 1, pointY: 4}, {lineOnePtX: 6, lineOnePtY: 3}, {lineTwoPtX: 2, lineTwoPtY: 8})
	    *    math.distance([x1, y1, z1], [LinePtX1, LinePtY1, LinePtZ1], [LinePtX2, LinePtY2, LinePtZ2])
	    *    math.distance({pointX: 1, pointY: 4, pointZ: 7}, {lineOnePtX: 6, lineOnePtY: 3, lineOnePtZ: 4}, {lineTwoPtX: 2, lineTwoPtY: 8, lineTwoPtZ: 5})
	    *    math.distance([x1, y1], [xCoeffLine, yCoeffLine, constant])
	    *    math.distance({pointX: 10, pointY: 10}, {xCoeffLine: 8, yCoeffLine: 1, constant: 3})
	    *    math.distance([x1, y1, z1], [x0, y0, z0, a-tCoeff, b-tCoeff, c-tCoeff]) point and parametric equation of 3D line
	    *    math.distance([x, y, z], [x0, y0, z0, a, b, c])
	    *    math.distance({pointX: 2, pointY: 5, pointZ: 9}, {x0: 4, y0: 6, z0: 3, a: 4, b: 2, c: 0})
	    *
	    * Examples:
	    *    math.distance([0,0], [4,4])                     // Returns 5.6569
	    *    math.distance(
	    *     {pointOneX: 0, pointOneY: 0},
	    *     {pointTwoX: 10, pointTwoY: 10})                // Returns 14.142135623730951
	    *    math.distance([1, 0, 1], [4, -2, 2])            // Returns 3.74166
	    *    math.distance(
	    *     {pointOneX: 4, pointOneY: 5, pointOneZ: 8},
	    *     {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})    // Returns 3
	    *    math.distance([[1, 2], [1, 2], [1, 3]])         // Returns [0, 1, 1]
	    *    math.distance([[1,2,4], [1,2,6], [8,1,3]])      // Returns [2, 7.14142842854285, 7.681145747868608]
	    *    math.distance([10, 10], [8, 1, 3])              // Returns 11.535230316796387
	    *    math.distance([10, 10], [2, 3], [-8, 0])        // Returns 8.759953130362847
	    *    math.distance(
	    *     {pointX: 1, pointY: 4},
	    *     {lineOnePtX: 6, lineOnePtY: 3},
	    *     {lineTwoPtX: 2, lineTwoPtY: 8})                // Returns 2.720549372624744
	    *    math.distance([2, 3, 1], [1, 1, 2, 5, 0, 1])    // Returns 2.3204774044612857
	    *    math.distance(
	    *     {pointX: 2, pointY: 3, pointZ: 1},
	    *     {x0: 1, y0: 1, z0: 2, a: 5, b: 0, c: 1}        // Returns 2.3204774044612857
	    *
	    * @param {Array | Matrix | Object} x    Co-ordinates of first point
	    * @param {Array | Matrix | Object} y    Co-ordinates of second point
	    * @return {Number | BigNumber} Returns the distance from two/three points
	  */

	  var distance = typed('distance', {
	    'Array, Array, Array': function ArrayArrayArray(x, y, z) {
	      // Point to Line 2D; (x=Point, y=LinePoint1, z=LinePoint2)
	      if (x.length == 2 && y.length == 2 && z.length == 2) {
	        if (!_2d(x)) {
	          throw new TypeError('Array with 2 numbers expected for first argument');
	        }
	        if (!_2d(y)) {
	          throw new TypeError('Array with 2 numbers expected for second argument');
	        }
	        if (!_2d(z)) {
	          throw new TypeError('Array with 2 numbers expected for third argument');
	        }
	        var m = (z[1] - z[0]) / (y[1] - y[0]);
	        var xCoeff = m * m * y[0];
	        var yCoeff = -1 * (m * y[0]);
	        var constant = x[1];

	        return _distancePointLine2D(x[0], x[1], xCoeff, yCoeff, constant);
	      } else {
	        throw new TypeError('Invalid Arguments: Try again');
	      }
	    },
	    'Object, Object, Object': function ObjectObjectObject(x, y, z) {
	      if (Object.keys(x).length == 2 && Object.keys(y).length == 2 && Object.keys(z).length == 2) {
	        if (!_2d(x)) {
	          throw new TypeError('Values of pointX and pointY should be numbers');
	        }
	        if (!_2d(y)) {
	          throw new TypeError('Values of lineOnePtX and lineOnePtY should be numbers');
	        }
	        if (!_2d(z)) {
	          throw new TypeError('Values of lineTwoPtX and lineTwoPtY should be numbers');
	        }
	        if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('lineOnePtX') && y.hasOwnProperty('lineOnePtY') && z.hasOwnProperty('lineTwoPtX') && z.hasOwnProperty('lineTwoPtY')) {
	          var m = (z.lineTwoPtY - z.lineTwoPtX) / (y.lineOnePtY - y.lineOnePtX);
	          var xCoeff = m * m * y.lineOnePtX;
	          var yCoeff = -1 * (m * y.lineOnePtX);
	          var constant = x.pointX;

	          return _distancePointLine2D(x.pointX, x.pointY, xCoeff, yCoeff, constant);
	        } else {
	          throw new TypeError('Key names do not match');
	        }
	      } else {
	        throw new TypeError('Invalid Arguments: Try again');
	      }
	    },
	    'Array, Array': function ArrayArray(x, y) {
	      // Point to Line 2D; (x=[pointX, pointY], y=[x-coeff, y-coeff, const])
	      if (x.length == 2 && y.length == 3) {
	        if (!_2d(x)) {
	          throw new TypeError('Array with 2 numbers expected for first argument');
	        }
	        if (!_3d(y)) {
	          throw new TypeError('Array with 3 numbers expected for second argument');
	        }

	        return _distancePointLine2D(x[0], x[1], y[0], y[1], y[2]);
	      }
	      // Point to Line 3D
	      else if (x.length == 3 && y.length == 6) {
	          if (!_3d(x)) {
	            throw new TypeError('Array with 3 numbers expected for first argument');
	          }
	          if (!_parametricLine(y)) {
	            throw new TypeError('Array with 6 numbers expected for second argument');
	          }

	          return _distancePointLine3D(x[0], x[1], x[2], y[0], y[1], y[2], y[3], y[4], y[5]);
	        }
	        // Point to Point 2D
	        else if (x.length == 2 && y.length == 2) {
	            if (!_2d(x)) {
	              throw new TypeError('Array with 2 numbers expected for first argument');
	            }
	            if (!_2d(y)) {
	              throw new TypeError('Array with 2 numbers expected for second argument');
	            }

	            return _distance2d(x[0], x[1], y[0], y[1]);
	          }
	          // Point to Point 3D
	          else if (x.length == 3 && y.length == 3) {
	              if (!_3d(x)) {
	                throw new TypeError('Array with 3 numbers expected for first argument');
	              }
	              if (!_3d(y)) {
	                throw new TypeError('Array with 3 numbers expected for second argument');
	              }

	              return _distance3d(x[0], x[1], x[2], y[0], y[1], y[2]);
	            } else {
	              throw new TypeError('Invalid Arguments: Try again');
	            }
	    },
	    'Object, Object': function ObjectObject(x, y) {
	      if (Object.keys(x).length == 2 && Object.keys(y).length == 3) {
	        if (!_2d(x)) {
	          throw new TypeError('Values of pointX and pointY should be numbers');
	        }
	        if (!_3d(y)) {
	          throw new TypeError('Values of xCoeffLine, yCoeffLine and constant should be numbers');
	        }
	        if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('xCoeffLine') && y.hasOwnProperty('yCoeffLine') && y.hasOwnProperty('yCoeffLine')) {

	          return _distancePointLine2D(x.pointX, x.pointY, y.xCoeffLine, y.yCoeffLine, y.constant);
	        } else {
	          throw new TypeError('Key names do not match');
	        }
	      }
	      // Point to Line 3D
	      else if (Object.keys(x).length == 3 && Object.keys(y).length == 6) {
	          if (!_3d(x)) {
	            throw new TypeError('Values of pointX, pointY and pointZ should be numbers');
	          }
	          if (!_parametricLine(y)) {
	            throw new TypeError('Values of x0, y0, z0, a, b and c should be numbers');
	          }
	          if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('x0') && y.hasOwnProperty('y0') && y.hasOwnProperty('z0') && y.hasOwnProperty('a') && y.hasOwnProperty('b') && y.hasOwnProperty('c')) {

	            return _distancePointLine3D(x.pointX, x.pointY, x.pointZ, y.x0, y.y0, y.z0, y.a, y.b, y.c);
	          } else {
	            throw new TypeError('Key names do not match');
	          }
	        }
	        // Point to Point 2D
	        else if (Object.keys(x).length == 2 && Object.keys(y).length == 2) {
	            if (!_2d(x)) {
	              throw new TypeError('Values of pointOneX and pointOneY should be numbers');
	            }
	            if (!_2d(y)) {
	              throw new TypeError('Values of pointTwoX and pointTwoY should be numbers');
	            }
	            if (x.hasOwnProperty('pointOneX') && x.hasOwnProperty('pointOneY') && y.hasOwnProperty('pointTwoX') && y.hasOwnProperty('pointTwoY')) {

	              return _distance2d(x.pointOneX, x.pointOneY, y.pointTwoX, y.pointTwoY);
	            } else {
	              throw new TypeError('Key names do not match');
	            }
	          }
	          // Point to Point 3D
	          else if (Object.keys(x).length == 3 && Object.keys(y).length == 3) {
	              if (!_3d(x)) {
	                throw new TypeError('Values of pointOneX, pointOneY and pointOneZ should be numbers');
	              }
	              if (!_3d(y)) {
	                throw new TypeError('Values of pointTwoX, pointTwoY and pointTwoZ should be numbers');
	              }
	              if (x.hasOwnProperty('pointOneX') && x.hasOwnProperty('pointOneY') && x.hasOwnProperty('pointOneZ') && y.hasOwnProperty('pointTwoX') && y.hasOwnProperty('pointTwoY') && y.hasOwnProperty('pointTwoZ')) {

	                return _distance3d(x.pointOneX, x.pointOneY, x.pointOneZ, y.pointTwoX, y.pointTwoY, y.pointTwoZ);
	              } else {
	                throw new TypeError('Key names do not match');
	              }
	            } else {
	              throw new TypeError('Invalid Arguments: Try again');
	            }
	    },
	    'Array': function Array(arr) {
	      if (!_pairwise(arr)) {
	        throw new TypeError('Incorrect array format entered for pairwise distance calculation');
	      }

	      return _distancePairwise(arr);
	    }
	  });
	  return distance;
	}

	function _2d(a) {
	  // checks if the number of arguments are correct in count and are valid (should be numbers)
	  if (a.constructor !== Array) {
	    a = _objectToArray(a);
	  }
	  return typeof a[0] === 'number' && typeof a[1] === 'number';
	}

	function _3d(a) {
	  // checks if the number of arguments are correct in count and are valid (should be numbers)
	  if (a.constructor !== Array) {
	    a = _objectToArray(a);
	  }
	  return typeof a[0] === 'number' && typeof a[1] === 'number' && typeof a[2] === 'number';
	}

	function _parametricLine(a) {
	  if (a.constructor !== Array) {
	    a = _objectToArray(a);
	  }
	  return typeof a[0] === 'number' && typeof a[1] === 'number' && typeof a[2] === 'number' && typeof a[3] === 'number' && typeof a[4] === 'number' && typeof a[5] === 'number';
	}

	function _objectToArray(o) {
	  var keys = Object.keys(o);
	  var a = [];
	  for (var i = 0; i < keys.length; i++) {
	    a.push(o[keys[i]]);
	  }
	  return a;
	}

	function _pairwise(a) {
	  //checks for valid arguments passed to _distancePairwise(Array)
	  if (a[0].length == 2 && typeof a[0][0] === 'number' && typeof a[0][1] === 'number') {
	    for (var i in a) {
	      if (a[i].length != 2 || typeof a[i][0] !== 'number' || typeof a[i][1] !== 'number') {
	        return false;
	      }
	    }
	  } else if (a[0].length == 3 && typeof a[0][0] === 'number' && typeof a[0][1] === 'number' && typeof a[0][2] === 'number') {
	    for (var i in a) {
	      if (a[i].length != 3 || typeof a[i][0] !== 'number' || typeof a[i][1] !== 'number' || typeof a[i][2] !== 'number') {
	        return false;
	      }
	    }
	  } else {
	    return false;
	  }
	  return true;
	}

	function _distancePointLine2D(x, y, a, b, c) {
	  var num = Math.abs(a * x + b * y + c);
	  var den = Math.pow(a * a + b * b, 0.5);
	  var result = num / den;
	  return result;
	}

	function _distancePointLine3D(x, y, z, x0, y0, z0, a, b, c) {
	  var num = [(y0 - y) * c - (z0 - z) * b, (z0 - z) * a - (x0 - x) * c, (x0 - x) * b - (y0 - y) * a];
	  num = Math.pow(num[0] * num[0] + num[1] * num[1] + num[2] * num[2], 0.5);
	  var den = Math.pow(a * a + b * b + c * c, 0.5);
	  var result = num / den;
	  return result;
	}

	function _distance2d(x1, y1, x2, y2) {
	  var yDiff = y2 - y1;
	  var xDiff = x2 - x1;
	  var radicant = yDiff * yDiff + xDiff * xDiff;
	  var result = Math.pow(radicant, 0.5);
	  return result;
	}

	function _distance3d(x1, y1, z1, x2, y2, z2) {
	  var zDiff = z2 - z1;
	  var yDiff = y2 - y1;
	  var xDiff = x2 - x1;
	  var radicant = zDiff * zDiff + yDiff * yDiff + xDiff * xDiff;
	  var result = Math.pow(radicant, 0.5);
	  return result;
	}

	function _distancePairwise(a) {
	  var result = [];
	  for (var i = 0; i < a.length - 1; i++) {
	    for (var j = i + 1; j < a.length; j++) {
	      if (a[0].length == 2) {
	        result.push(_distance2d(a[i][0], a[i][1], a[j][0], a[j][1]));
	      } else if (a[0].length == 3) {
	        result.push(_distance3d(a[i][0], a[i][1], a[i][2], a[j][0], a[j][1], a[j][2]));
	      }
	    }
	  }
	  return result;
	}

	exports.name = 'distance';
	exports.factory = factory;

/***/ },
/* 587 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

		module.exports = [__webpack_require__(588), __webpack_require__(589), __webpack_require__(591), __webpack_require__(592)];

/***/ },
/* 588 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load, typed) {
	  var latex = __webpack_require__(192);

	  var matrix = load(__webpack_require__(212));
	  var zeros = load(__webpack_require__(549));
	  var not = load(__webpack_require__(589));
	  var isZero = load(__webpack_require__(590));

	  var algorithm02 = load(__webpack_require__(529));
	  var algorithm06 = load(__webpack_require__(540));
	  var algorithm11 = load(__webpack_require__(245));
	  var algorithm13 = load(__webpack_require__(217));
	  var algorithm14 = load(__webpack_require__(218));

	  /**
	   * Logical `and`. Test whether two values are both defined with a nonzero/nonempty value.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.and(x, y)
	   *
	   * Examples:
	   *
	   *    math.and(2, 4);   // returns true
	   *
	   *    a = [2, 0, 0];
	   *    b = [3, 7, 0];
	   *    c = 0;
	   *
	   *    math.and(a, b);   // returns [true, false, false]
	   *    math.and(a, c);   // returns [false, false, false]
	   *
	   * See also:
	   *
	   *    not, or, xor
	   *
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
	   * @return {boolean | Array | Matrix}
	   *            Returns true when both inputs are defined with a nonzero/nonempty value.
	   */
	  var and = typed('and', {

	    'number, number': function numberNumber(x, y) {
	      return !!(x && y);
	    },

	    'Complex, Complex': function ComplexComplex(x, y) {
	      return (x.re !== 0 || x.im !== 0) && (y.re !== 0 || y.im !== 0);
	    },

	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return !x.isZero() && !y.isZero() && !x.isNaN() && !y.isNaN();
	    },

	    'Unit, Unit': function UnitUnit(x, y) {
	      return and(x.value, y.value);
	    },

	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse & sparse
	              c = algorithm06(x, y, and, false);
	              break;
	            default:
	              // sparse & dense
	              c = algorithm02(y, x, and, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense & sparse
	              c = algorithm02(x, y, and, false);
	              break;
	            default:
	              // dense & dense
	              c = algorithm13(x, y, and);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return and(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return and(matrix(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return and(x, matrix(y));
	    },

	    'Matrix, any': function MatrixAny(x, y) {
	      // check scalar
	      if (not(y)) {
	        // return zero matrix
	        return zeros(x.size(), x.storage());
	      }
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm11(x, y, and, false);
	          break;
	        default:
	          c = algorithm14(x, y, and, false);
	          break;
	      }
	      return c;
	    },

	    'any, Matrix': function anyMatrix(x, y) {
	      // check scalar
	      if (not(x)) {
	        // return zero matrix
	        return zeros(x.size(), x.storage());
	      }
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm11(y, x, and, true);
	          break;
	        default:
	          c = algorithm14(y, x, and, true);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return and(matrix(x), y).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return and(x, matrix(y)).valueOf();
	    }
	  });

	  and.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['and'] + '${args[1]}\\right)'
	  };

	  return and;
	}

	exports.name = 'and';
	exports.factory = factory;

/***/ },
/* 589 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  var latex = __webpack_require__(192);

	  /**
	   * Logical `not`. Flips boolean value of a given parameter.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.not(x)
	   *
	   * Examples:
	   *
	   *    math.not(2);      // returns false
	   *    math.not(0);      // returns true
	   *    math.not(true);   // returns false
	   *
	   *    a = [2, -7, 0];
	   *    math.not(a);      // returns [false, false, true]
	   *
	   * See also:
	   *
	   *    and, or, xor
	   *
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
	   * @return {boolean | Array | Matrix}
	   *            Returns true when input is a zero or empty value.
	   */
	  var not = typed('not', {
	    'number': function number(x) {
	      return !x;
	    },

	    'Complex': function Complex(x) {
	      return x.re === 0 && x.im === 0;
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.isZero() || x.isNaN();
	    },

	    'Unit': function Unit(x) {
	      return not(x.value);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, not);
	    }
	  });

	  not.toTex = {
	    1: latex.operators['not'] + '\\left(${args[0]}\\right)'
	  };

	  return not;
	}

	exports.name = 'not';
	exports.factory = factory;

/***/ },
/* 590 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);
	var number = __webpack_require__(166);

	function factory(type, config, load, typed) {
	  /**
	   * Test whether a value is zero.
	   * The function can check for zero for types `number`, `BigNumber`, `Fraction`,
	   * `Complex`, and `Unit`.
	   *
	   * The function is evaluated element-wise in case of Array or Matrix input.
	   *
	   * Syntax:
	   *
	   *     math.isZero(x)
	   *
	   * Examples:
	   *
	   *    math.isZero(0);                     // returns true
	   *    math.isZero(2);                     // returns false
	   *    math.isZero(0.5);                   // returns false
	   *    math.isZero(math.bignumber(0));     // returns true
	   *    math.isZero(math.fraction(0));      // returns true
	   *    math.isZero(math.fraction(1,3));    // returns false
	   *    math.isZero(math.complex('2 - 4i'); // returns false
	   *    math.isZero(math.complex('0i');     // returns true
	   *    math.isZero('0');                   // returns true
	   *    math.isZero('2');                   // returns false
	   *    math.isZero([2, 0, -3]');           // returns [false, true, false]
	   *
	   * See also:
	   *
	   *    isNumeric, isPositive, isNegative, isInteger
	   *
	   * @param {number | BigNumber | Complex | Fraction | Unit | Array | Matrix} x       Value to be tested
	   * @return {boolean}  Returns true when `x` is zero.
	   *                    Throws an error in case of an unknown data type.
	   */
	  var isZero = typed('isZero', {
	    'number': function number(x) {
	      return x === 0;
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.isZero();
	    },

	    'Complex': function Complex(x) {
	      return x.re === 0 && x.im === 0;
	    },

	    'Fraction': function Fraction(x) {
	      return x.d === 1 && x.n === 0;
	    },

	    'Unit': function Unit(x) {
	      return isZero(x.value);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, isZero);
	    }
	  });

	  return isZero;
	}

	exports.name = 'isZero';
	exports.factory = factory;

/***/ },
/* 591 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load, typed) {
	  var latex = __webpack_require__(192);

	  var matrix = load(__webpack_require__(212));

	  var algorithm03 = load(__webpack_require__(221));
	  var algorithm05 = load(__webpack_require__(239));
	  var algorithm12 = load(__webpack_require__(223));
	  var algorithm13 = load(__webpack_require__(217));
	  var algorithm14 = load(__webpack_require__(218));

	  /**
	   * Logical `or`. Test if at least one value is defined with a nonzero/nonempty value.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.or(x, y)
	   *
	   * Examples:
	   *
	   *    math.or(2, 4);   // returns true
	   *
	   *    a = [2, 5, 0];
	   *    b = [0, 22, 0];
	   *    c = 0;
	   *
	   *    math.or(a, b);   // returns [true, true, false]
	   *    math.or(b, c);   // returns [false, true, false]
	   *
	   * See also:
	   *
	   *    and, not, xor
	   *
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
	   * @return {boolean | Array | Matrix}
	   *            Returns true when one of the inputs is defined with a nonzero/nonempty value.
	   */
	  var or = typed('or', {

	    'number, number': function numberNumber(x, y) {
	      return !!(x || y);
	    },

	    'Complex, Complex': function ComplexComplex(x, y) {
	      return x.re !== 0 || x.im !== 0 || y.re !== 0 || y.im !== 0;
	    },

	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return !x.isZero() && !x.isNaN() || !y.isZero() && !y.isNaN();
	    },

	    'Unit, Unit': function UnitUnit(x, y) {
	      return or(x.value, y.value);
	    },

	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm05(x, y, or);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm03(y, x, or, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm03(x, y, or, false);
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, or);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return or(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return or(matrix(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return or(x, matrix(y));
	    },

	    'Matrix, any': function MatrixAny(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm12(x, y, or, false);
	          break;
	        default:
	          c = algorithm14(x, y, or, false);
	          break;
	      }
	      return c;
	    },

	    'any, Matrix': function anyMatrix(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, or, true);
	          break;
	        default:
	          c = algorithm14(y, x, or, true);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, or, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, or, true).valueOf();
	    }
	  });

	  or.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['or'] + '${args[1]}\\right)'
	  };

	  return or;
	}

	exports.name = 'or';
	exports.factory = factory;

/***/ },
/* 592 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load, typed) {
	  var latex = __webpack_require__(192);

	  var matrix = load(__webpack_require__(212));

	  var algorithm03 = load(__webpack_require__(221));
	  var algorithm07 = load(__webpack_require__(222));
	  var algorithm12 = load(__webpack_require__(223));
	  var algorithm13 = load(__webpack_require__(217));
	  var algorithm14 = load(__webpack_require__(218));

	  /**
	   * Logical `xor`. Test whether one and only one value is defined with a nonzero/nonempty value.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.xor(x, y)
	   *
	   * Examples:
	   *
	   *    math.xor(2, 4);   // returns false
	   *
	   *    a = [2, 0, 0];
	   *    b = [2, 7, 0];
	   *    c = 0;
	   *
	   *    math.xor(a, b);   // returns [false, true, false]
	   *    math.xor(a, c);   // returns [true, false, false]
	   *
	   * See also:
	   *
	   *    and, not, or
	   *
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
	   * @return {boolean | Array | Matrix}
	   *            Returns true when one and only one input is defined with a nonzero/nonempty value.
	   */
	  var xor = typed('xor', {

	    'number, number': function numberNumber(x, y) {
	      return !!(!!x ^ !!y);
	    },

	    'Complex, Complex': function ComplexComplex(x, y) {
	      return (x.re !== 0 || x.im !== 0) !== (y.re !== 0 || y.im !== 0);
	    },

	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return (!x.isZero() && !x.isNaN()) !== (!y.isZero() && !y.isNaN());
	    },

	    'Unit, Unit': function UnitUnit(x, y) {
	      return xor(x.value, y.value);
	    },

	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm07(x, y, xor);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm03(y, x, xor, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm03(x, y, xor, false);
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, xor);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return xor(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return xor(matrix(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return xor(x, matrix(y));
	    },

	    'Matrix, any': function MatrixAny(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm12(x, y, xor, false);
	          break;
	        default:
	          c = algorithm14(x, y, xor, false);
	          break;
	      }
	      return c;
	    },

	    'any, Matrix': function anyMatrix(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, xor, true);
	          break;
	        default:
	          c = algorithm14(y, x, xor, true);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, xor, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, xor, true).valueOf();
	    }
	  });

	  xor.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['xor'] + '${args[1]}\\right)'
	  };

	  return xor;
	}

	exports.name = 'xor';
	exports.factory = factory;

/***/ },
/* 593 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

		module.exports = [__webpack_require__(470), __webpack_require__(594), __webpack_require__(488), __webpack_require__(595), __webpack_require__(596), __webpack_require__(243), __webpack_require__(472), __webpack_require__(597), __webpack_require__(474), __webpack_require__(487), __webpack_require__(477), __webpack_require__(598), __webpack_require__(599), __webpack_require__(492), __webpack_require__(601), __webpack_require__(602), __webpack_require__(603), __webpack_require__(604), __webpack_require__(445), __webpack_require__(546), __webpack_require__(504), __webpack_require__(549)];

/***/ },
/* 594 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var size = __webpack_require__(200).size;

	function factory(type, config, load, typed) {
	  var matrix = load(__webpack_require__(212));
	  var subtract = load(__webpack_require__(237));
	  var multiply = load(__webpack_require__(244));

	  /**
	   * Calculate the cross product for two vectors in three dimensional space.
	   * The cross product of `A = [a1, a2, a3]` and `B =[b1, b2, b3]` is defined
	   * as:
	   *
	   *    cross(A, B) = [
	   *      a2 * b3 - a3 * b2,
	   *      a3 * b1 - a1 * b3,
	   *      a1 * b2 - a2 * b1
	   *    ]
	   *
	   * Syntax:
	   *
	   *    math.cross(x, y)
	   *
	   * Examples:
	   *
	   *    math.cross([1, 1, 0],  [0, 1, 1]);  // Returns [1, -1, 1]
	   *    math.cross([3, -3, 1], [4, 9, 2]);  // Returns [-15, -2, 39]
	   *    math.cross([2, 3, 4],  [5, 6, 7]);  // Returns [-3, 6, -3]
	   *
	   * See also:
	   *
	   *    dot, multiply
	   *
	   * @param  {Array | Matrix} x   First vector
	   * @param  {Array | Matrix} y   Second vector
	   * @return {Array | Matrix}     Returns the cross product of `x` and `y`
	   */
	  var cross = typed('cross', {
	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      return matrix(_cross(x.toArray(), y.toArray()));
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      return matrix(_cross(x.toArray(), y));
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      return matrix(_cross(x, y.toArray()));
	    },

	    'Array, Array': _cross
	  });

	  cross.toTex = {
	    2: '\\left(${args[0]}\\right)\\times\\left(${args[1]}\\right)'
	  };

	  return cross;

	  /**
	   * Calculate the cross product for two arrays
	   * @param {Array} x  First vector
	   * @param {Array} y  Second vector
	   * @returns {Array} Returns the cross product of x and y
	   * @private
	   */
	  function _cross(x, y) {
	    var xSize = size(x);
	    var ySize = size(y);

	    if (xSize.length != 1 || ySize.length != 1 || xSize[0] != 3 || ySize[0] != 3) {
	      throw new RangeError('Vectors with length 3 expected ' + '(Size A = [' + xSize.join(', ') + '], B = [' + ySize.join(', ') + '])');
	    }

	    return [subtract(multiply(x[1], y[2]), multiply(x[2], y[1])), subtract(multiply(x[2], y[0]), multiply(x[0], y[2])), subtract(multiply(x[0], y[1]), multiply(x[1], y[0]))];
	  }
	}

	exports.name = 'cross';
	exports.factory = factory;

/***/ },
/* 595 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var array = __webpack_require__(200);
	var clone = __webpack_require__(163).clone;
	var isInteger = __webpack_require__(166).isInteger;

	function factory(type, config, load, typed) {

	  var matrix = load(__webpack_require__(212));

	  /**
	   * Create a diagonal matrix or retrieve the diagonal of a matrix
	   *
	   * When `x` is a vector, a matrix with vector `x` on the diagonal will be returned.
	   * When `x` is a two dimensional matrix, the matrixes `k`th diagonal will be returned as vector.
	   * When k is positive, the values are placed on the super diagonal.
	   * When k is negative, the values are placed on the sub diagonal.
	   *
	   * Syntax:
	   *
	   *     math.diag(X)
	   *     math.diag(X, format)
	   *     math.diag(X, k)
	   *     math.diag(X, k, format)
	   *
	   * Examples:
	   *
	   *     // create a diagonal matrix
	   *     math.diag([1, 2, 3]);      // returns [[1, 0, 0], [0, 2, 0], [0, 0, 3]]
	   *     math.diag([1, 2, 3], 1);   // returns [[0, 1, 0, 0], [0, 0, 2, 0], [0, 0, 0, 3]]
	   *     math.diag([1, 2, 3], -1);  // returns [[0, 0, 0], [1, 0, 0], [0, 2, 0], [0, 0, 3]]
	   *
	   *    // retrieve the diagonal from a matrix
	   *    var a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];
	   *    math.diag(a);   // returns [1, 5, 9]
	   *
	   * See also:
	   *
	   *     ones, zeros, eye
	   *
	   * @param {Matrix | Array} x          A two dimensional matrix or a vector
	   * @param {number | BigNumber} [k=0]  The diagonal where the vector will be filled
	   *                                    in or retrieved.
	   * @param {string} [format='dense']   The matrix storage format.
	   *
	   * @returns {Matrix | Array} Diagonal matrix from input vector, or diagonal from input matrix.
	   */
	  var diag = typed('diag', {
	    // FIXME: simplify this huge amount of signatures as soon as typed-function supports optional arguments

	    'Array': function Array(x) {
	      return _diag(x, 0, array.size(x), null);
	    },

	    'Array, number': function ArrayNumber(x, k) {
	      return _diag(x, k, array.size(x), null);
	    },

	    'Array, BigNumber': function ArrayBigNumber(x, k) {
	      return _diag(x, k.toNumber(), array.size(x), null);
	    },

	    'Array, string': function ArrayString(x, format) {
	      return _diag(x, 0, array.size(x), format);
	    },

	    'Array, number, string': function ArrayNumberString(x, k, format) {
	      return _diag(x, k, array.size(x), format);
	    },

	    'Array, BigNumber, string': function ArrayBigNumberString(x, k, format) {
	      return _diag(x, k.toNumber(), array.size(x), format);
	    },

	    'Matrix': function Matrix(x) {
	      return _diag(x, 0, x.size(), x.storage());
	    },

	    'Matrix, number': function MatrixNumber(x, k) {
	      return _diag(x, k, x.size(), x.storage());
	    },

	    'Matrix, BigNumber': function MatrixBigNumber(x, k) {
	      return _diag(x, k.toNumber(), x.size(), x.storage());
	    },

	    'Matrix, string': function MatrixString(x, format) {
	      return _diag(x, 0, x.size(), format);
	    },

	    'Matrix, number, string': function MatrixNumberString(x, k, format) {
	      return _diag(x, k, x.size(), format);
	    },

	    'Matrix, BigNumber, string': function MatrixBigNumberString(x, k, format) {
	      return _diag(x, k.toNumber(), x.size(), format);
	    }
	  });

	  diag.toTex = undefined; // use default template

	  return diag;

	  /**
	   * Creeate diagonal matrix from a vector or vice versa
	   * @param {Array | Matrix} x
	   * @param {number} k
	   * @param {string} format Storage format for matrix. If null,
	   *                          an Array is returned
	   * @returns {Array | Matrix}
	   * @private
	   */
	  function _diag(x, k, size, format) {
	    if (!isInteger(k)) {
	      throw new TypeError('Second parameter in function diag must be an integer');
	    }

	    var kSuper = k > 0 ? k : 0;
	    var kSub = k < 0 ? -k : 0;

	    // check dimensions
	    switch (size.length) {
	      case 1:
	        return _createDiagonalMatrix(x, k, format, size[0], kSub, kSuper);
	      case 2:
	        return _getDiagonal(x, k, format, size, kSub, kSuper);
	    }
	    throw new RangeError('Matrix for function diag must be 2 dimensional');
	  }

	  function _createDiagonalMatrix(x, k, format, l, kSub, kSuper) {
	    // matrix size
	    var ms = [l + kSub, l + kSuper];
	    // get matrix constructor
	    var F = type.Matrix.storage(format || 'dense');
	    // create diagonal matrix
	    var m = F.diagonal(ms, x, k);
	    // check we need to return a matrix
	    return format !== null ? m : m.valueOf();
	  }

	  function _getDiagonal(x, k, format, s, kSub, kSuper) {
	    // check x is a Matrix
	    if (x && x.isMatrix === true) {
	      // get diagonal matrix
	      var dm = x.diagonal(k);
	      // check we need to return a matrix
	      if (format !== null) {
	        // check we need to change matrix format
	        if (format !== dm.storage()) return matrix(dm, format);
	        return dm;
	      }
	      return dm.valueOf();
	    }
	    // vector size
	    var n = Math.min(s[0] - kSub, s[1] - kSuper);
	    // diagonal values
	    var vector = [];
	    // loop diagonal
	    for (var i = 0; i < n; i++) {
	      vector[i] = x[i + kSub][i + kSuper];
	    }
	    // check we need to return a matrix
	    return format !== null ? matrix(vector) : vector;
	  }
	}

	exports.name = 'diag';
	exports.factory = factory;

/***/ },
/* 596 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var size = __webpack_require__(200).size;

	function factory(type, config, load, typed) {
	  var add = load(__webpack_require__(211));
	  var multiply = load(__webpack_require__(244));

	  /**
	   * Calculate the dot product of two vectors. The dot product of
	   * `A = [a1, a2, a3, ..., an]` and `B = [b1, b2, b3, ..., bn]` is defined as:
	   *
	   *    dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn
	   *
	   * Syntax:
	   *
	   *    math.dot(x, y)
	   *
	   * Examples:
	   *
	   *    math.dot([2, 4, 1], [2, 2, 3]);       // returns number 15
	   *    math.multiply([2, 4, 1], [2, 2, 3]);  // returns number 15
	   *
	   * See also:
	   *
	   *    multiply, cross
	   *
	   * @param  {Array | Matrix} x     First vector
	   * @param  {Array | Matrix} y     Second vector
	   * @return {number}               Returns the dot product of `x` and `y`
	   */
	  var dot = typed('dot', {
	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      return _dot(x.toArray(), y.toArray());
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      return _dot(x.toArray(), y);
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      return _dot(x, y.toArray());
	    },

	    'Array, Array': _dot
	  });

	  dot.toTex = { 2: '\\left(${args[0]}\\cdot${args[1]}\\right)' };

	  return dot;

	  /**
	   * Calculate the dot product for two arrays
	   * @param {Array} x  First vector
	   * @param {Array} y  Second vector
	   * @returns {number} Returns the dot product of x and y
	   * @private
	   */
	  // TODO: double code with math.multiply
	  function _dot(x, y) {
	    var xSize = size(x);
	    var ySize = size(y);
	    var len = xSize[0];

	    if (xSize.length !== 1 || ySize.length !== 1) throw new RangeError('Vector expected'); // TODO: better error message
	    if (xSize[0] != ySize[0]) throw new RangeError('Vectors must have equal length (' + xSize[0] + ' != ' + ySize[0] + ')');
	    if (len == 0) throw new RangeError('Cannot calculate the dot product of empty vectors');

	    var prod = 0;
	    for (var i = 0; i < len; i++) {
	      prod = add(prod, multiply(x[i], y[i]));
	    }

	    return prod;
	  }
	}

	exports.name = 'dot';
	exports.factory = factory;

/***/ },
/* 597 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var clone = __webpack_require__(163).clone;
	var _flatten = __webpack_require__(200).flatten;

	function factory(type, config, load, typed) {
	  var matrix = load(__webpack_require__(212));

	  /**
	   * Flatten a multi dimensional matrix into a single dimensional matrix.
	   *
	   * Syntax:
	   *
	   *    math.flatten(x)
	   *
	   * Examples:
	   *
	   *    math.flatten([[1,2], [3,4]]);   // returns [1, 2, 3, 4]
	   *
	   * See also:
	   *
	   *    concat, resize, size, squeeze
	   *
	   * @param {Matrix | Array} x   Matrix to be flattened
	   * @return {Matrix | Array} Returns the flattened matrix
	   */
	  var flatten = typed('flatten', {
	    'Array': function Array(x) {
	      return _flatten(clone(x));
	    },

	    'Matrix': function Matrix(x) {
	      var flat = _flatten(clone(x.toArray()));
	      // TODO: return the same matrix type as x
	      return matrix(flat);
	    }
	  });

	  flatten.toTex = undefined; // use default template

	  return flatten;
	}

	exports.name = 'flatten';
	exports.factory = factory;

/***/ },
/* 598 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isInteger = __webpack_require__(166).isInteger;
	var resize = __webpack_require__(200).resize;

	function factory(type, config, load, typed) {
	  var matrix = load(__webpack_require__(212));

	  /**
	   * Create a matrix filled with ones. The created matrix can have one or
	   * multiple dimensions.
	   *
	   * Syntax:
	   *
	   *    math.ones(m)
	   *    math.ones(m, format)
	   *    math.ones(m, n)
	   *    math.ones(m, n, format)
	   *    math.ones([m, n])
	   *    math.ones([m, n], format)
	   *    math.ones([m, n, p, ...])
	   *    math.ones([m, n, p, ...], format)
	   *
	   * Examples:
	   *
	   *    math.ones(3);                   // returns [1, 1, 1]
	   *    math.ones(3, 2);                // returns [[1, 1], [1, 1], [1, 1]]
	   *    math.ones(3, 2, 'dense');       // returns Dense Matrix [[1, 1], [1, 1], [1, 1]]
	   *
	   *    var A = [[1, 2, 3], [4, 5, 6]];
	   *    math.ones(math.size(A));       // returns [[1, 1, 1], [1, 1, 1]]
	   *
	   * See also:
	   *
	   *    zeros, eye, size, range
	   *
	   * @param {...number | Array} size    The size of each dimension of the matrix
	   * @param {string} [format]           The Matrix storage format
	   *
	   * @return {Array | Matrix | number}  A matrix filled with ones
	   */
	  var ones = typed('ones', {
	    '': function _() {
	      return config.matrix === 'Array' ? _ones([]) : _ones([], 'default');
	    },

	    // math.ones(m, n, p, ..., format)
	    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this
	    '...number | BigNumber | string': function numberBigNumberString(size) {
	      var last = size[size.length - 1];
	      if (typeof last === 'string') {
	        var format = size.pop();
	        return _ones(size, format);
	      } else if (config.matrix === 'Array') {
	        return _ones(size);
	      } else {
	        return _ones(size, 'default');
	      }
	    },

	    'Array': _ones,

	    'Matrix': function Matrix(size) {
	      var format = size.storage();
	      return _ones(size.valueOf(), format);
	    },

	    'Array | Matrix, string': function ArrayMatrixString(size, format) {
	      return _ones(size.valueOf(), format);
	    }
	  });

	  ones.toTex = undefined; // use default template

	  return ones;

	  /**
	   * Create an Array or Matrix with ones
	   * @param {Array} size
	   * @param {string} [format='default']
	   * @return {Array | Matrix}
	   * @private
	   */
	  function _ones(size, format) {
	    var hasBigNumbers = _normalize(size);
	    var defaultValue = hasBigNumbers ? new type.BigNumber(1) : 1;
	    _validate(size);

	    if (format) {
	      // return a matrix
	      var m = matrix(format);
	      if (size.length > 0) {
	        return m.resize(size, defaultValue);
	      }
	      return m;
	    } else {
	      // return an Array
	      var arr = [];
	      if (size.length > 0) {
	        return resize(arr, size, defaultValue);
	      }
	      return arr;
	    }
	  }

	  // replace BigNumbers with numbers, returns true if size contained BigNumbers
	  function _normalize(size) {
	    var hasBigNumbers = false;
	    size.forEach(function (value, index, arr) {
	      if (value && value.isBigNumber === true) {
	        hasBigNumbers = true;
	        arr[index] = value.toNumber();
	      }
	    });
	    return hasBigNumbers;
	  }

	  // validate arguments
	  function _validate(size) {
	    size.forEach(function (value) {
	      if (typeof value !== 'number' || !isInteger(value) || value < 0) {
	        throw new Error('Parameters in function ones must be positive integers');
	      }
	    });
	  }
	}

	exports.name = 'ones';
	exports.factory = factory;

/***/ },
/* 599 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isInteger = __webpack_require__(166).isInteger;

	function factory(type, config, load, typed) {
	  var asc = load(__webpack_require__(600));
	  function desc(a, b) {
	    return -asc(a, b);
	  }

	  /**
	   * Partition-based selection of an array or 1D matrix.
	   * Will find the kth smallest value, and mutates the input array.
	   * Uses Quickselect.
	   *
	   * Syntax:
	   *
	   *    math.partitionSelect(x, k)
	   *    math.partitionSelect(x, k, compare)
	   *
	   * Examples:
	   *
	   *    math.partitionSelect([5, 10, 1], 2);           // returns 10
	   *    math.partitionSelect(['C', 'B', 'A', 'D'], 1); // returns 'B'
	   *
	   *    function sortByLength (a, b) {
	   *      return a.length - b.length;
	   *    }
	   *    math.partitionSelect(['Langdon', 'Tom', 'Sara'], 2, sortByLength); // returns 'Langdon'
	   *
	   * See also:
	   *
	   *    sort
	   *
	   * @param {Matrix | Array} x    A one dimensional matrix or array to sort
	   * @param {Number} k            The kth smallest value to be retrieved; zero-based index
	   * @param {Function | 'asc' | 'desc'} [compare='asc']
	   *        An optional comparator function. The function is called as
	   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,
	   *        and 0 when a == b.
	   * @return {*} Returns the kth lowest value.
	   */
	  return typed('partitionSelect', {
	    'Array | Matrix, number': function ArrayMatrixNumber(x, k) {
	      return _partitionSelect(x, k, asc);
	    },

	    'Array | Matrix, number, string': function ArrayMatrixNumberString(x, k, compare) {
	      if (compare === 'asc') {
	        return _partitionSelect(x, k, asc);
	      } else if (compare === 'desc') {
	        return _partitionSelect(x, k, desc);
	      } else {
	        throw new Error('Compare string must be "asc" or "desc"');
	      }
	    },

	    'Array | Matrix, number, function': _partitionSelect
	  });

	  function _partitionSelect(x, k, compare) {
	    if (!isInteger(k) || k < 0) {
	      throw new Error('k must be a non-negative integer');
	    }

	    if (x && x.isMatrix) {
	      var size = x.size();
	      if (size.length > 1) {
	        throw new Error('Only one dimensional matrices supported');
	      }
	      return quickSelect(x.valueOf(), k, compare);
	    }

	    if (Array.isArray(x)) {
	      return quickSelect(x, k, compare);
	    }
	  }

	  /**
	   * Quickselect algorithm.
	   * Code adapted from:
	   * http://blog.teamleadnet.com/2012/07/quick-select-algorithm-find-kth-element.html
	   *
	   * @param {Array} arr
	   * @param {Number} k
	   * @param {Function} compare
	   * @private
	   */
	  function quickSelect(arr, k, compare) {
	    if (k >= arr.length) {
	      throw new Error('k out of bounds');
	    }

	    var from = 0;
	    var to = arr.length - 1;

	    // if from == to we reached the kth element
	    while (from < to) {
	      var r = from;
	      var w = to;
	      var pivot = arr[Math.floor(Math.random() * (to - from + 1)) + from];

	      // stop if the reader and writer meets
	      while (r < w) {
	        // arr[r] >= pivot
	        if (compare(arr[r], pivot) >= 0) {
	          // put the large values at the end
	          var tmp = arr[w];
	          arr[w] = arr[r];
	          arr[r] = tmp;
	          --w;
	        } else {
	          // the value is smaller than the pivot, skip
	          ++r;
	        }
	      }

	      // if we stepped up (r++) we need to step one down (arr[r] > pivot)
	      if (compare(arr[r], pivot) > 0) {
	        --r;
	      }

	      // the r pointer is on the end of the first k elements
	      if (k <= r) {
	        to = r;
	      } else {
	        from = r + 1;
	      }
	    }

	    return arr[k];
	  }
	}

	exports.name = 'partitionSelect';
	exports.factory = factory;

/***/ },
/* 600 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var nearlyEqual = __webpack_require__(166).nearlyEqual;
	var bigNearlyEqual = __webpack_require__(209);

	function factory(type, config, load, typed) {

	  var matrix = load(__webpack_require__(212));

	  var algorithm03 = load(__webpack_require__(221));
	  var algorithm05 = load(__webpack_require__(239));
	  var algorithm12 = load(__webpack_require__(223));
	  var algorithm13 = load(__webpack_require__(217));
	  var algorithm14 = load(__webpack_require__(218));

	  /**
	   * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.
	   *
	   * x and y are considered equal when the relative difference between x and y
	   * is smaller than the configured epsilon. The function cannot be used to
	   * compare values smaller than approximately 2.22e-16.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.compare(x, y)
	   *
	   * Examples:
	   *
	   *    math.compare(6, 1);           // returns 1
	   *    math.compare(2, 3);           // returns -1
	   *    math.compare(7, 7);           // returns 0
	   *
	   *    var a = math.unit('5 cm');
	   *    var b = math.unit('40 mm');
	   *    math.compare(a, b);           // returns 1
	   *
	   *    math.compare(2, [1, 2, 3]);   // returns [1, 0, -1]
	   *
	   * See also:
	   *
	   *    equal, unequal, smaller, smallerEq, larger, largerEq
	   *
	   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} x First value to compare
	   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} y Second value to compare
	   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the result of the comparison: 1, 0 or -1.
	   */
	  var compare = typed('compare', {

	    'boolean, boolean': function booleanBoolean(x, y) {
	      return x === y ? 0 : x > y ? 1 : -1;
	    },

	    'number, number': function numberNumber(x, y) {
	      return x === y || nearlyEqual(x, y, config.epsilon) ? 0 : x > y ? 1 : -1;
	    },

	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.eq(y) || bigNearlyEqual(x, y, config.epsilon) ? new type.BigNumber(0) : new type.BigNumber(x.cmp(y));
	    },

	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return new type.Fraction(x.compare(y));
	    },

	    'Complex, Complex': function ComplexComplex() {
	      throw new TypeError('No ordering relation is defined for complex numbers');
	    },

	    'Unit, Unit': function UnitUnit(x, y) {
	      if (!x.equalBase(y)) {
	        throw new Error('Cannot compare units with different base');
	      }
	      return compare(x.value, y.value);
	    },

	    'string, string': function stringString(x, y) {
	      return x === y ? 0 : x > y ? 1 : -1;
	    },

	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm05(x, y, compare);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm03(y, x, compare, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm03(x, y, compare, false);
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, compare);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return compare(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return compare(matrix(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return compare(x, matrix(y));
	    },

	    'Matrix, any': function MatrixAny(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm12(x, y, compare, false);
	          break;
	        default:
	          c = algorithm14(x, y, compare, false);
	          break;
	      }
	      return c;
	    },

	    'any, Matrix': function anyMatrix(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, compare, true);
	          break;
	        default:
	          c = algorithm14(y, x, compare, true);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, compare, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, compare, true).valueOf();
	    }
	  });

	  compare.toTex = undefined; // use default template

	  return compare;
	}

	exports.name = 'compare';
	exports.factory = factory;

/***/ },
/* 601 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var DimensionError = __webpack_require__(202);
	var ArgumentsError = __webpack_require__(171);

	var isInteger = __webpack_require__(166).isInteger;
	var format = __webpack_require__(183).format;
	var clone = __webpack_require__(163).clone;
	var array = __webpack_require__(200);

	function factory(type, config, load, typed) {
	  var matrix = load(__webpack_require__(212));

	  /**
	   * Resize a matrix
	   *
	   * Syntax:
	   *
	   *     math.resize(x, size)
	   *     math.resize(x, size, defaultValue)
	   *
	   * Examples:
	   *
	   *     math.resize([1, 2, 3, 4, 5], [3]); // returns Array  [1, 2, 3]
	   *     math.resize([1, 2, 3], [5], 0);    // returns Array  [1, 2, 3, 0, 0]
	   *     math.resize(2, [2, 3], 0);         // returns Matrix [[2, 0, 0], [0, 0, 0]]
	   *     math.resize("hello", [8], "!");    // returns string 'hello!!!'
	   *
	   * See also:
	   *
	   *     size, squeeze, subset
	   *
	   * @param {Array | Matrix | *} x             Matrix to be resized
	   * @param {Array | Matrix} size              One dimensional array with numbers
	   * @param {number | string} [defaultValue=0] Zero by default, except in
	   *                                           case of a string, in that case
	   *                                           defaultValue = ' '
	   * @return {* | Array | Matrix} A resized clone of matrix `x`
	   */
	  // TODO: rework resize to a typed-function
	  var resize = function resize(x, size, defaultValue) {
	    if (arguments.length != 2 && arguments.length != 3) {
	      throw new ArgumentsError('resize', arguments.length, 2, 3);
	    }

	    if (size && size.isMatrix === true) {
	      size = size.valueOf(); // get Array
	    }

	    if (size.length && size[0] && size[0].isBigNumber === true) {
	      // convert bignumbers to numbers
	      size = size.map(function (value) {
	        return value && value.isBigNumber === true ? value.toNumber() : value;
	      });
	    }

	    // check x is a Matrix
	    if (x && x.isMatrix === true) {
	      // use optimized matrix implementation, return copy
	      return x.resize(size, defaultValue, true);
	    }

	    if (typeof x === 'string') {
	      // resize string
	      return _resizeString(x, size, defaultValue);
	    }

	    // check result should be a matrix
	    var asMatrix = Array.isArray(x) ? false : config.matrix !== 'Array';

	    if (size.length == 0) {
	      // output a scalar
	      while (Array.isArray(x)) {
	        x = x[0];
	      }

	      return clone(x);
	    } else {
	      // output an array/matrix
	      if (!Array.isArray(x)) {
	        x = [x];
	      }
	      x = clone(x);

	      var res = array.resize(x, size, defaultValue);
	      return asMatrix ? matrix(res) : res;
	    }
	  };

	  resize.toTex = undefined; // use default template

	  return resize;

	  /**
	   * Resize a string
	   * @param {string} str
	   * @param {number[]} size
	   * @param {string} [defaultChar=' ']
	   * @private
	   */
	  function _resizeString(str, size, defaultChar) {
	    if (defaultChar !== undefined) {
	      if (typeof defaultChar !== 'string' || defaultChar.length !== 1) {
	        throw new TypeError('Single character expected as defaultValue');
	      }
	    } else {
	      defaultChar = ' ';
	    }

	    if (size.length !== 1) {
	      throw new DimensionError(size.length, 1);
	    }
	    var len = size[0];
	    if (typeof len !== 'number' || !isInteger(len)) {
	      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format(size) + ')');
	    }

	    if (str.length > len) {
	      return str.substring(0, len);
	    } else if (str.length < len) {
	      var res = str;
	      for (var i = 0, ii = len - str.length; i < ii; i++) {
	        res += defaultChar;
	      }
	      return res;
	    } else {
	      return str;
	    }
	  }
	}

	exports.name = 'resize';
	exports.factory = factory;

/***/ },
/* 602 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var array = __webpack_require__(200);

	function factory(type, config, load, typed) {
	  var matrix = load(__webpack_require__(212));

	  /**
	   * Calculate the size of a matrix or scalar.
	   *
	   * Syntax:
	   *
	   *     math.size(x)
	   *
	   * Examples:
	   *
	   *     math.size(2.3);                  // returns []
	   *     math.size('hello world');        // returns [11]
	   *
	   *     var A = [[1, 2, 3], [4, 5, 6]];
	   *     math.size(A);                    // returns [2, 3]
	   *     math.size(math.range(1,6));      // returns [5]
	   *
	   * See also:
	   *
	   *     resize, squeeze, subset
	   *
	   * @param {boolean | number | Complex | Unit | string | Array | Matrix} x  A matrix
	   * @return {Array | Matrix} A vector with size of `x`.
	   */
	  var size = typed('size', {
	    'Matrix': function Matrix(x) {
	      // TODO: return the same matrix type as the input
	      return matrix(x.size());
	    },

	    'Array': array.size,

	    'string': function string(x) {
	      return config.matrix === 'Array' ? [x.length] : matrix([x.length]);
	    },

	    'number | Complex | BigNumber | Unit | boolean | null': function numberComplexBigNumberUnitBooleanNull(x) {
	      // scalar
	      return config.matrix === 'Array' ? [] : matrix([]);
	    }
	  });

	  size.toTex = undefined; // use default template

	  return size;
	}

	exports.name = 'size';
	exports.factory = factory;

/***/ },
/* 603 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var size = __webpack_require__(200).size;

	function factory(type, config, load, typed) {
	  var matrix = load(__webpack_require__(212));
	  var asc = load(__webpack_require__(600));
	  var desc = function desc(a, b) {
	    return -asc(a, b);
	  };

	  /**
	   * Sort the items in a matrix.
	   *
	   * Syntax:
	   *
	   *    math.sort(x)
	   *    math.sort(x, compare)
	   *
	   * Examples:
	   *
	   *    math.sort([5, 10, 1]); // returns [1, 5, 10]
	   *    math.sort(['C', 'B', 'A', 'D']); // returns ['A', 'B', 'C', 'D']
	   *
	   *    function sortByLength (a, b) {
	   *      return a.length - b.length;
	   *    }
	   *    math.sort(['Langdon', 'Tom', 'Sara'], sortByLength); // returns ['Tom', 'Sara', 'Langdon']
	   *
	   * See also:
	   *
	   *    filter, forEach, map
	   *
	   * @param {Matrix | Array} x    A one dimensional matrix or array to sort
	   * @param {Function | 'asc' | 'desc'} [compare='asc']
	   *        An optional _comparator function. The function is called as
	   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,
	   *        and 0 when a == b.
	   * @return {Matrix | Array} Returns the sorted matrix.
	   */
	  var sort = typed('sort', {
	    'Array': function Array(x) {
	      _arrayIsVector(x);
	      return x.sort(asc);
	    },

	    'Matrix': function Matrix(x) {
	      _matrixIsVector(x);
	      return matrix(x.toArray().sort(asc), x.storage());
	    },

	    'Array, function': function ArrayFunction(x, _comparator) {
	      _arrayIsVector(x);
	      return x.sort(_comparator);
	    },

	    'Matrix, function': function MatrixFunction(x, _comparator) {
	      _matrixIsVector(x);
	      return matrix(x.toArray().sort(_comparator), x.storage());
	    },

	    'Array, string': function ArrayString(x, order) {
	      _arrayIsVector(x);
	      return x.sort(_comparator(order));
	    },

	    'Matrix, string': function MatrixString(x, order) {
	      _matrixIsVector(x);
	      return matrix(x.toArray().sort(_comparator(order)), x.storage());
	    }
	  });

	  sort.toTex = undefined; // use default template

	  /**
	   * Get the comparator for given order ('asc' or 'desc')
	   * @param {'asc' | 'desc'} order
	   * @return {Function} Returns a _comparator function
	   */
	  function _comparator(order) {
	    if (order === 'asc') {
	      return asc;
	    } else if (order === 'desc') {
	      return desc;
	    } else {
	      throw new Error('String "asc" or "desc" expected');
	    }
	  }

	  /**
	   * Validate whether an array is one dimensional
	   * Throws an error when this is not the case
	   * @param {Array} array
	   * @private
	   */
	  function _arrayIsVector(array) {
	    if (size(array).length !== 1) {
	      throw new Error('One dimensional array expected');
	    }
	  }

	  /**
	   * Validate whether a matrix is one dimensional
	   * Throws an error when this is not the case
	   * @param {Matrix} matrix
	   * @private
	   */
	  function _matrixIsVector(matrix) {
	    if (matrix.size().length !== 1) {
	      throw new Error('One dimensional matrix expected');
	    }
	  }

	  return sort;
	}

	exports.name = 'sort';
	exports.factory = factory;

/***/ },
/* 604 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var object = __webpack_require__(163);
	var array = __webpack_require__(200);

	function factory(type, config, load, typed) {
	  var matrix = load(__webpack_require__(212));

	  /**
	   * Squeeze a matrix, remove inner and outer singleton dimensions from a matrix.
	   *
	   * Syntax:
	   *
	   *     math.squeeze(x)
	   *
	   * Examples:
	   *
	   *     math.squeeze([3]);           // returns 3
	   *     math.squeeze([[3]]);         // returns 3
	   *
	   *     var A = math.zeros(3, 1);    // returns [[0], [0], [0]] (size 3x1)
	   *     math.squeeze(A);             // returns [0, 0, 0] (size 3)
	   *
	   *     var B = math.zeros(1, 3);    // returns [[0, 0, 0]] (size 1x3)
	   *     math.squeeze(B);             // returns [0, 0, 0] (size 3)
	   *
	   *     // only inner and outer dimensions are removed
	   *     var C = math.zeros(2, 1, 3); // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)
	   *     math.squeeze(C);             // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)
	   *
	   * See also:
	   *
	   *     subset
	   *
	   * @param {Matrix | Array} x      Matrix to be squeezed
	   * @return {Matrix | Array} Squeezed matrix
	   */
	  var squeeze = typed('squeeze', {
	    'Array': function Array(x) {
	      return array.squeeze(object.clone(x));
	    },

	    'Matrix': function Matrix(x) {
	      var res = array.squeeze(x.toArray());
	      // FIXME: return the same type of matrix as the input
	      return Array.isArray(res) ? matrix(res) : res;
	    },

	    'any': function any(x) {
	      // scalar
	      return object.clone(x);
	    }
	  });

	  squeeze.toTex = undefined; // use default template

	  return squeeze;
	}

	exports.name = 'squeeze';
	exports.factory = factory;

/***/ },
/* 605 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = [
	//require('./distribution'), // TODO: rethink math.distribution
	__webpack_require__(575), __webpack_require__(573), __webpack_require__(574), __webpack_require__(606), __webpack_require__(608), __webpack_require__(609), __webpack_require__(610), __webpack_require__(612), __webpack_require__(613)];

/***/ },
/* 606 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load, typed) {
	    var matrix = load(__webpack_require__(212));
	    var divide = load(__webpack_require__(486));
	    var sum = load(__webpack_require__(607));
	    var multiply = load(__webpack_require__(244));
	    var dotDivide = load(__webpack_require__(528));
	    var log = load(__webpack_require__(542));
	    var isNumeric = load(__webpack_require__(249));

	    /**
	     * Calculate the Kullback-Leibler (KL) divergence  between two distributions
	     *
	     * Syntax:
	     *
	     *     math.kldivergence(x, y)
	     *
	     * Examples:
	     *
	     *     math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5]);   //returns 0.24376698773121153
	     *
	     *
	     * @param  {Array | Matrix} q    First vector
	     * @param  {Array | Matrix} p    Second vector
	     * @return {number}              Returns distance between q and p
	     */
	    var kldivergence = typed('kldivergence', {
	        'Array, Array': function ArrayArray(q, p) {
	            return _kldiv(matrix(q), matrix(p));
	        },

	        'Matrix, Array': function MatrixArray(q, p) {
	            return _kldiv(q, matrix(p));
	        },

	        'Array, Matrix': function ArrayMatrix(q, p) {
	            return _kldiv(matrix(q), p);
	        },

	        'Matrix, Matrix': function MatrixMatrix(q, p) {
	            return _kldiv(q, p);
	        }

	    });

	    function _kldiv(q, p) {
	        var plength = p.size().length;
	        var qlength = q.size().length;
	        if (plength > 1) {
	            throw new Error('first object must be one dimensional');
	        }

	        if (qlength > 1) {
	            throw new Error('second object must be one dimensional');
	        }

	        if (plength !== qlength) {
	            throw new Error("Length of two vectors must be equal");
	        }

	        //Before calculation, apply normalization
	        var sumq = sum(q);
	        if (sumq === 0) {
	            throw new Error("Sum of elements in first object must be non zero");
	        }

	        var sump = sum(p);
	        if (sump === 0) {
	            throw new Error("Sum of elements in second object must be non zero");
	        }
	        var qnorm = divide(q, sum(q));
	        var pnorm = divide(p, sum(p));

	        var result = sum(multiply(qnorm, log(dotDivide(qnorm, pnorm))));
	        if (isNumeric(result)) {
	            return result;
	        } else {
	            return Number.NaN;
	        }
	    }

	    return kldivergence;
	}

	exports.name = 'kldivergence';
	exports.factory = factory;

/***/ },
/* 607 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepForEach = __webpack_require__(481);

	function factory(type, config, load, typed) {
	  var add = load(__webpack_require__(213));

	  /**
	   * Compute the sum of a matrix or a list with values.
	   * In case of a (multi dimensional) array or matrix, the sum of all
	   * elements will be calculated.
	   *
	   * Syntax:
	   *
	   *     math.sum(a, b, c, ...)
	   *     math.sum(A)
	   *
	   * Examples:
	   *
	   *     math.sum(2, 1, 4, 3);               // returns 10
	   *     math.sum([2, 1, 4, 3]);             // returns 10
	   *     math.sum([[2, 5], [4, 3], [1, 7]]); // returns 22
	   *
	   * See also:
	   *
	   *    mean, median, min, max, prod, std, var
	   *
	   * @param {... *} args  A single matrix or or multiple scalar values
	   * @return {*} The sum of all values
	   */
	  var sum = typed('sum', {
	    'Array | Matrix': function ArrayMatrix(args) {
	      // sum([a, b, c, d, ...])
	      return _sum(args);
	    },

	    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber() {
	      // sum([a, b, c, d, ...], dim)
	      // TODO: implement sum(A, dim)
	      throw new Error('sum(A, dim) is not yet supported');
	    },

	    '...': function _(args) {
	      // sum(a, b, c, d, ...)
	      return _sum(args);
	    }
	  });

	  sum.toTex = undefined; // use default template

	  return sum;

	  /**
	   * Recursively calculate the sum of an n-dimensional array
	   * @param {Array} array
	   * @return {number} sum
	   * @private
	   */
	  function _sum(array) {
	    var sum = undefined;

	    deepForEach(array, function (value) {
	      sum = sum === undefined ? value : add(sum, value);
	    });

	    if (sum === undefined) {
	      switch (config.number) {
	        case 'number':
	          return 0;
	        case 'BigNumber':
	          return new type.BigNumber(0);
	        case 'Fraction':
	          return new type.Fraction(0);
	        default:
	          return 0;
	      }
	    }

	    return sum;
	  }
	}

	exports.name = 'sum';
	exports.factory = factory;

/***/ },
/* 608 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepForEach = __webpack_require__(481);

	function factory(type, config, load, typed) {
	  var add = load(__webpack_require__(211));
	  var multiply = load(__webpack_require__(244));
	  var divide = load(__webpack_require__(486));
	  var factorial = load(__webpack_require__(573));
	  var isInteger = load(__webpack_require__(576));
	  var isPositive = load(__webpack_require__(538));

	  /**
	   * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.
	   *
	   * multinomial takes one array of integers as an argument.
	   * The following condition must be enforced: every ai <= 0
	   *
	   * Syntax:
	   *
	   *     math.multinomial(a) // a is an array type
	   *
	   * Examples:
	   *
	   *    math.multinomial([1,2,1]); // returns 12
	   *
	   * See also:
	   *
	   *    combinations, factorial
	   *
	   * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset
	   * @return {Number | BigNumber}         Multinomial coefficient.
	   */
	  return typed('multinomial', {
	    'Array | Matrix': function ArrayMatrix(a) {
	      var sum = 0;
	      var denom = 1;

	      deepForEach(a, function (ai) {
	        if (!isInteger(ai) || !isPositive(ai)) {
	          throw new TypeError('Positive integer value expected in function multinomial');
	        }
	        sum = add(sum, ai);
	        denom = multiply(denom, factorial(ai));
	      });

	      return divide(factorial(sum), denom);
	    }
	  });
	}

	exports.name = 'multinomial';
	exports.factory = factory;

/***/ },
/* 609 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isInteger = __webpack_require__(166).isInteger;

	function factory(type, config, load, typed) {
	  var factorial = load(__webpack_require__(573));

	  /**
	   * Compute the number of ways of obtaining an ordered subset of `k` elements
	   * from a set of `n` elements.
	   *
	   * Permutations only takes integer arguments.
	   * The following condition must be enforced: k <= n.
	   *
	   * Syntax:
	   *
	   *     math.permutations(n)
	   *     math.permutations(n, k)
	   *
	   * Examples:
	   *
	   *    math.permutations(5);     // 120
	   *    math.permutations(5, 3);  // 60
	   *
	   * See also:
	   *
	   *    combinations, factorial
	   *
	   * @param {number | BigNumber} n   The number of objects in total
	   * @param {number | BigNumber} [k] The number of objects in the subset
	   * @return {number | BigNumber}    The number of permutations
	   */
	  var permutations = typed('permutations', {
	    'number | BigNumber': factorial,

	    'number, number': function numberNumber(n, k) {
	      var result, i;

	      if (!isInteger(n) || n < 0) {
	        throw new TypeError('Positive integer value expected in function permutations');
	      }
	      if (!isInteger(k) || k < 0) {
	        throw new TypeError('Positive integer value expected in function permutations');
	      }
	      if (k > n) {
	        throw new TypeError('second argument k must be less than or equal to first argument n');
	      }

	      // Permute n objects, k at a time
	      result = 1;
	      for (i = n - k + 1; i <= n; i++) {
	        result = result * i;
	      }

	      return result;
	    },

	    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {
	      var result, i;

	      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {
	        throw new TypeError('Positive integer value expected in function permutations');
	      }
	      if (k.gt(n)) {
	        throw new TypeError('second argument k must be less than or equal to first argument n');
	      }

	      result = new type.BigNumber(1);
	      for (i = n.minus(k).plus(1); i.lte(n); i = i.plus(1)) {
	        result = result.times(i);
	      }

	      return result;
	    }

	    // TODO: implement support for collection in permutations
	  });

	  permutations.toTex = undefined; // use default template

	  return permutations;
	}

	/**
	 * Test whether BigNumber n is a positive integer
	 * @param {BigNumber} n
	 * @returns {boolean} isPositiveInteger
	 */
	function isPositiveInteger(n) {
	  return n.isInteger() && n.gte(0);
	}

	exports.name = 'permutations';
	exports.factory = factory;

/***/ },
/* 610 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load, typed) {
	  var distribution = load(__webpack_require__(611));

	  /**
	   * Random pick a value from a one dimensional array.
	   * Array element is picked using a random function with uniform distribution.
	   *
	   * Syntax:
	   *
	   *     math.pickRandom(array)
	   *
	   * Examples:
	   *
	   *     math.pickRandom([3, 6, 12, 2]);       // returns one of the values in the array
	   *
	   * See also:
	   *
	   *     random, randomInt
	   *
	   * @param {Array} array     A one dimensional array
	   * @return {number} One of the elements of the provided input array
	   */
	  // TODO: rework pickRandom to a typed-function
	  var pickRandom = distribution('uniform').pickRandom;

	  pickRandom.toTex = undefined; // use default template

	  return pickRandom;
	}

	exports.name = 'pickRandom';
	exports.factory = factory;

/***/ },
/* 611 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var ArgumentsError = __webpack_require__(171);
	var isCollection = __webpack_require__(479);

	// TODO: rethink math.distribution
	// TODO: rework to a typed function
	function factory(type, config, load, typed) {
	  var matrix = load(__webpack_require__(212));
	  var array = __webpack_require__(200);

	  /**
	   * Create a distribution object with a set of random functions for given
	   * random distribution.
	   *
	   * Syntax:
	   *
	   *     math.distribution(name)
	   *
	   * Examples:
	   *
	   *     var normalDist = math.distribution('normal'); // create a normal distribution
	   *     normalDist.random(0, 10);                     // get a random value between 0 and 10
	   *
	   * See also:
	   *
	   *     random, randomInt, pickRandom
	   *
	   * @param {string} name   Name of a distribution. Choose from 'uniform', 'normal'.
	   * @return {Object}       Returns a distribution object containing functions:
	   *                        `random([size] [, min] [, max])`,
	   *                        `randomInt([min] [, max])`,
	   *                        `pickRandom(array)`
	   */
	  function distribution(name) {
	    if (!distributions.hasOwnProperty(name)) throw new Error('Unknown distribution ' + name);

	    var args = Array.prototype.slice.call(arguments, 1),
	        distribution = distributions[name].apply(this, args);

	    return function (distribution) {

	      // This is the public API for all distributions
	      var randFunctions = {

	        random: function random(arg1, arg2, arg3) {
	          var size, min, max;
	          if (arguments.length > 3) {
	            throw new ArgumentsError('random', arguments.length, 0, 3);

	            // `random(max)` or `random(size)`
	          } else if (arguments.length === 1) {
	            if (isCollection(arg1)) {
	              size = arg1;
	            } else {
	              max = arg1;
	            }
	            // `random(min, max)` or `random(size, max)`
	          } else if (arguments.length === 2) {
	            if (isCollection(arg1)) {
	              size = arg1;
	              max = arg2;
	            } else {
	              min = arg1;
	              max = arg2;
	            }
	            // `random(size, min, max)`
	          } else {
	            size = arg1;
	            min = arg2;
	            max = arg3;
	          }

	          // TODO: validate type of min, max, and size

	          if (max === undefined) max = 1;
	          if (min === undefined) min = 0;
	          if (size !== undefined) {
	            var res = _randomDataForMatrix(size.valueOf(), min, max, _random);
	            return size && size.isMatrix === true ? matrix(res) : res;
	          } else return _random(min, max);
	        },

	        randomInt: function randomInt(arg1, arg2, arg3) {
	          var size, min, max;
	          if (arguments.length > 3 || arguments.length < 1) throw new ArgumentsError('randomInt', arguments.length, 1, 3);

	          // `random(max)` or `random(size)`
	          else if (arguments.length === 1) {
	              if (isCollection(arg1)) {
	                size = arg1;
	              } else {
	                max = arg1;
	              }
	              // `randomInt(min, max)` or `randomInt(size, max)`

	            } else if (arguments.length === 2) {
	                if (isCollection(arg1)) {
	                  size = arg1;
	                  max = arg2;
	                } else {
	                  min = arg1;
	                  max = arg2;
	                }
	                // `randomInt(size, min, max)`
	              } else {
	                size = arg1;
	                min = arg2;
	                max = arg3;
	              }

	          // TODO: validate type of min, max, and size

	          if (min === undefined) min = 0;
	          if (size !== undefined) {
	            var res = _randomDataForMatrix(size.valueOf(), min, max, _randomInt);
	            return size && size.isMatrix === true ? matrix(res) : res;
	          } else return _randomInt(min, max);
	        },

	        pickRandom: function pickRandom(possibles) {
	          if (arguments.length !== 1) {
	            throw new ArgumentsError('pickRandom', arguments.length, 1);
	          }
	          if (possibles && possibles.isMatrix === true) {
	            possibles = possibles.valueOf(); // get Array
	          } else if (!Array.isArray(possibles)) {
	            throw new TypeError('Unsupported type of value in function pickRandom');
	          }

	          if (array.size(possibles).length > 1) {
	            throw new Error('Only one dimensional vectors supported');
	          }

	          // TODO: add support for multi dimensional matrices
	          return possibles[Math.floor(Math.random() * possibles.length)];
	        }

	      };

	      var _random = function _random(min, max) {
	        return min + distribution() * (max - min);
	      };

	      var _randomInt = function _randomInt(min, max) {
	        return Math.floor(min + distribution() * (max - min));
	      };

	      // This is a function for generating a random matrix recursively.
	      var _randomDataForMatrix = function _randomDataForMatrix(size, min, max, randFunc) {
	        var data = [],
	            length,
	            i;
	        size = size.slice(0);

	        if (size.length > 1) {
	          for (i = 0, length = size.shift(); i < length; i++) {
	            data.push(_randomDataForMatrix(size, min, max, randFunc));
	          }
	        } else {
	          for (i = 0, length = size.shift(); i < length; i++) {
	            data.push(randFunc(min, max));
	          }
	        }

	        return data;
	      };

	      return randFunctions;
	    }(distribution);
	  }

	  // Each distribution is a function that takes no argument and when called returns
	  // a number between 0 and 1.
	  var distributions = {

	    uniform: function uniform() {
	      return Math.random;
	    },

	    // Implementation of normal distribution using Box-Muller transform
	    // ref : http://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform
	    // We take : mean = 0.5, standard deviation = 1/6
	    // so that 99.7% values are in [0, 1].
	    normal: function normal() {
	      return function () {
	        var u1,
	            u2,
	            picked = -1;
	        // We reject values outside of the interval [0, 1]
	        // TODO: check if it is ok to do that?
	        while (picked < 0 || picked > 1) {
	          u1 = Math.random();
	          u2 = Math.random();
	          picked = 1 / 6 * Math.pow(-2 * Math.log(u1), 0.5) * Math.cos(2 * Math.PI * u2) + 0.5;
	        }
	        return picked;
	      };
	    }
	  };

	  distribution.toTex = undefined; // use default template

	  return distribution;
	}

	exports.name = 'distribution';
	exports.factory = factory;

/***/ },
/* 612 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load, typed) {
	  var distribution = load(__webpack_require__(611));

	  /**
	   * Return a random number larger or equal to `min` and smaller than `max`
	   * using a uniform distribution.
	   *
	   * Syntax:
	   *
	   *     math.random()                // generate a random number between 0 and 1
	   *     math.random(max)             // generate a random number between 0 and max
	   *     math.random(min, max)        // generate a random number between min and max
	   *     math.random(size)            // generate a matrix with random numbers between 0 and 1
	   *     math.random(size, max)       // generate a matrix with random numbers between 0 and max
	   *     math.random(size, min, max)  // generate a matrix with random numbers between min and max
	   *
	   * Examples:
	   *
	   *     math.random();       // returns a random number between 0 and 1
	   *     math.random(100);    // returns a random number between 0 and 100
	   *     math.random(30, 40); // returns a random number between 30 and 40
	   *     math.random([2, 3]); // returns a 2x3 matrix with random numbers between 0 and 1
	   *
	   * See also:
	   *
	   *     randomInt, pickRandom
	   *
	   * @param {Array | Matrix} [size] If provided, an array or matrix with given
	   *                                size and filled with random values is returned
	   * @param {number} [min]  Minimum boundary for the random value, included
	   * @param {number} [max]  Maximum boundary for the random value, excluded
	   * @return {number | Array | Matrix} A random number
	   */
	  // TODO: rework random to a typed-function
	  var random = distribution('uniform').random;

	  random.toTex = undefined; // use default template

	  return random;
	}

	exports.name = 'random';
	exports.factory = factory;

/***/ },
/* 613 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load, typed) {
	  var distribution = load(__webpack_require__(611));

	  /**
	   * Return a random integer number larger or equal to `min` and smaller than `max`
	   * using a uniform distribution.
	   *
	   * Syntax:
	   *
	   *     math.randomInt(max)             // generate a random integer between 0 and max
	   *     math.randomInt(min, max)        // generate a random integer between min and max
	   *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1
	   *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max
	   *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max
	   *
	   * Examples:
	   *
	   *     math.randomInt(100);    // returns a random integer between 0 and 100
	   *     math.randomInt(30, 40); // returns a random integer between 30 and 40
	   *     math.randomInt([2, 3]); // returns a 2x3 matrix with random integers between 0 and 1
	   *
	   * See also:
	   *
	   *     random, pickRandom
	   *
	   * @param {Array | Matrix} [size] If provided, an array or matrix with given
	   *                                size and filled with random values is returned
	   * @param {number} [min]  Minimum boundary for the random value, included
	   * @param {number} [max]  Maximum boundary for the random value, excluded
	   * @return {number | Array | Matrix} A random integer value
	   */
	  // TODO: rework randomInt to a typed-function
	  var randomInt = distribution('uniform').randomInt;

	  randomInt.toTex = undefined; // use default template

	  return randomInt;
	}

	exports.name = 'randomInt';
	exports.factory = factory;

/***/ },
/* 614 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

		module.exports = [__webpack_require__(600), __webpack_require__(615), __webpack_require__(248), __webpack_require__(224), __webpack_require__(511), __webpack_require__(220), __webpack_require__(616), __webpack_require__(617)];

/***/ },
/* 615 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load, typed) {
	  var equal = load(__webpack_require__(248));

	  /**
	   * Test element wise whether two matrices are equal.
	   * The function accepts both matrices and scalar values.
	   *
	   * Syntax:
	   *
	   *    math.deepEqual(x, y)
	   *
	   * Examples:
	   *
	   *    math.deepEqual(2, 4);   // returns false
	   *
	   *    a = [2, 5, 1];
	   *    b = [2, 7, 1];
	   *
	   *    math.deepEqual(a, b);   // returns false
	   *    math.equal(a, b);       // returns [true, false, true]
	   *
	   * See also:
	   *
	   *    equal, unequal
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First matrix to compare
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second matrix to compare
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
	   *            Returns true when the input matrices have the same size and each of their elements is equal.
	   */
	  var deepEqual = typed('deepEqual', {
	    'any, any': function anyAny(x, y) {
	      return _deepEqual(x.valueOf(), y.valueOf());
	    }
	  });

	  deepEqual.toTex = undefined; // use default template

	  return deepEqual;

	  /**
	   * Test whether two arrays have the same size and all elements are equal
	   * @param {Array | *} x
	   * @param {Array | *} y
	   * @return {boolean} Returns true if both arrays are deep equal
	   */
	  function _deepEqual(x, y) {
	    if (Array.isArray(x)) {
	      if (Array.isArray(y)) {
	        var len = x.length;
	        if (len !== y.length) {
	          return false;
	        }

	        for (var i = 0; i < len; i++) {
	          if (!_deepEqual(x[i], y[i])) {
	            return false;
	          }
	        }

	        return true;
	      } else {
	        return false;
	      }
	    } else {
	      if (Array.isArray(y)) {
	        return false;
	      } else {
	        return equal(x, y);
	      }
	    }
	  }
	}

	exports.name = 'deepEqual';
	exports.factory = factory;

/***/ },
/* 616 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var nearlyEqual = __webpack_require__(166).nearlyEqual;
	var bigNearlyEqual = __webpack_require__(209);

	function factory(type, config, load, typed) {

	  var matrix = load(__webpack_require__(212));

	  var algorithm03 = load(__webpack_require__(221));
	  var algorithm07 = load(__webpack_require__(222));
	  var algorithm12 = load(__webpack_require__(223));
	  var algorithm13 = load(__webpack_require__(217));
	  var algorithm14 = load(__webpack_require__(218));

	  var latex = __webpack_require__(192);

	  /**
	   * Test whether value x is smaller or equal to y.
	   *
	   * The function returns true when x is smaller than y or the relative
	   * difference between x and y is smaller than the configured epsilon. The
	   * function cannot be used to compare values smaller than approximately 2.22e-16.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.smallerEq(x, y)
	   *
	   * Examples:
	   *
	   *    math.smaller(1 + 2, 3);        // returns false
	   *    math.smallerEq(1 + 2, 3);      // returns true
	   *
	   * See also:
	   *
	   *    equal, unequal, smaller, larger, largerEq, compare
	   *
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
	   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false
	   */
	  var smallerEq = typed('smallerEq', {

	    'boolean, boolean': function booleanBoolean(x, y) {
	      return x <= y;
	    },

	    'number, number': function numberNumber(x, y) {
	      return x <= y || nearlyEqual(x, y, config.epsilon);
	    },

	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.lte(y) || bigNearlyEqual(x, y, config.epsilon);
	    },

	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.compare(y) !== 1;
	    },

	    'Complex, Complex': function ComplexComplex() {
	      throw new TypeError('No ordering relation is defined for complex numbers');
	    },

	    'Unit, Unit': function UnitUnit(x, y) {
	      if (!x.equalBase(y)) {
	        throw new Error('Cannot compare units with different base');
	      }
	      return smallerEq(x.value, y.value);
	    },

	    'string, string': function stringString(x, y) {
	      return x <= y;
	    },

	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm07(x, y, smallerEq);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm03(y, x, smallerEq, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm03(x, y, smallerEq, false);
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, smallerEq);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return smallerEq(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return smallerEq(matrix(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return smallerEq(x, matrix(y));
	    },

	    'Matrix, any': function MatrixAny(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm12(x, y, smallerEq, false);
	          break;
	        default:
	          c = algorithm14(x, y, smallerEq, false);
	          break;
	      }
	      return c;
	    },

	    'any, Matrix': function anyMatrix(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, smallerEq, true);
	          break;
	        default:
	          c = algorithm14(y, x, smallerEq, true);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, smallerEq, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, smallerEq, true).valueOf();
	    }
	  });

	  smallerEq.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['smallerEq'] + '${args[1]}\\right)'
	  };

	  return smallerEq;
	}

	exports.name = 'smallerEq';
	exports.factory = factory;

/***/ },
/* 617 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var nearlyEqual = __webpack_require__(166).nearlyEqual;
	var bigNearlyEqual = __webpack_require__(209);

	function factory(type, config, load, typed) {

	  var matrix = load(__webpack_require__(212));

	  var algorithm03 = load(__webpack_require__(221));
	  var algorithm07 = load(__webpack_require__(222));
	  var algorithm12 = load(__webpack_require__(223));
	  var algorithm13 = load(__webpack_require__(217));
	  var algorithm14 = load(__webpack_require__(218));

	  var latex = __webpack_require__(192);

	  /**
	   * Test whether two values are unequal.
	   *
	   * The function tests whether the relative difference between x and y is
	   * larger than the configured epsilon. The function cannot be used to compare
	   * values smaller than approximately 2.22e-16.
	   *
	   * For matrices, the function is evaluated element wise.
	   * In case of complex numbers, x.re must unequal y.re, or x.im must unequal y.im.
	   *
	   * Values `null` and `undefined` are compared strictly, thus `null` is unequal
	   * with everything except `null`, and `undefined` is unequal with everying
	   * except. `undefined`.
	   *
	   * Syntax:
	   *
	   *    math.unequal(x, y)
	   *
	   * Examples:
	   *
	   *    math.unequal(2 + 2, 3);       // returns true
	   *    math.unequal(2 + 2, 4);       // returns false
	   *
	   *    var a = math.unit('50 cm');
	   *    var b = math.unit('5 m');
	   *    math.unequal(a, b);           // returns false
	   *
	   *    var c = [2, 5, 1];
	   *    var d = [2, 7, 1];
	   *
	   *    math.unequal(c, d);           // returns [false, true, false]
	   *    math.deepEqual(c, d);         // returns false
	   *
	   *    math.unequal(0, null);        // returns true
	   * See also:
	   *
	   *    equal, deepEqual, smaller, smallerEq, larger, largerEq, compare
	   *
	   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} x First value to compare
	   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} y Second value to compare
	   * @return {boolean | Array | Matrix} Returns true when the compared values are unequal, else returns false
	   */
	  var unequal = typed('unequal', {

	    'any, any': function anyAny(x, y) {
	      // strict equality for null and undefined?
	      if (x === null) {
	        return y !== null;
	      }
	      if (y === null) {
	        return x !== null;
	      }
	      if (x === undefined) {
	        return y !== undefined;
	      }
	      if (y === undefined) {
	        return x !== undefined;
	      }

	      return _unequal(x, y);
	    },

	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm07(x, y, _unequal);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm03(y, x, _unequal, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm03(x, y, _unequal, false);
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, _unequal);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return unequal(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return unequal(matrix(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return unequal(x, matrix(y));
	    },

	    'Matrix, any': function MatrixAny(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm12(x, y, _unequal, false);
	          break;
	        default:
	          c = algorithm14(x, y, _unequal, false);
	          break;
	      }
	      return c;
	    },

	    'any, Matrix': function anyMatrix(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, _unequal, true);
	          break;
	        default:
	          c = algorithm14(y, x, _unequal, true);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, _unequal, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, _unequal, true).valueOf();
	    }
	  });

	  var _unequal = typed('_unequal', {

	    'boolean, boolean': function booleanBoolean(x, y) {
	      return x !== y;
	    },

	    'number, number': function numberNumber(x, y) {
	      return !nearlyEqual(x, y, config.epsilon);
	    },

	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return !bigNearlyEqual(x, y, config.epsilon);
	    },

	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return !x.equals(y);
	    },

	    'Complex, Complex': function ComplexComplex(x, y) {
	      return !x.equals(y);
	    },

	    'Unit, Unit': function UnitUnit(x, y) {
	      if (!x.equalBase(y)) {
	        throw new Error('Cannot compare units with different base');
	      }
	      return unequal(x.value, y.value);
	    },

	    'string, string': function stringString(x, y) {
	      return x !== y;
	    }
	  });

	  unequal.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['unequal'] + '${args[1]}\\right)'
	  };

	  return unequal;
	}

	exports.name = 'unequal';
	exports.factory = factory;

/***/ },
/* 618 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

		module.exports = [__webpack_require__(480), __webpack_require__(485), __webpack_require__(619), __webpack_require__(490), __webpack_require__(620), __webpack_require__(621), __webpack_require__(622), __webpack_require__(623), __webpack_require__(607), __webpack_require__(624)];

/***/ },
/* 619 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var flatten = __webpack_require__(200).flatten;
	var reduce = __webpack_require__(482);
	var containsCollections = __webpack_require__(483);

	function factory(type, config, load, typed) {
	  var add = load(__webpack_require__(213));
	  var divide = load(__webpack_require__(241));
	  var compare = load(__webpack_require__(600));
	  var partitionSelect = load(__webpack_require__(599));

	  /**
	   * Compute the median of a matrix or a list with values. The values are
	   * sorted and the middle value is returned. In case of an even number of
	   * values, the average of the two middle values is returned.
	   * Supported types of values are: Number, BigNumber, Unit
	   *
	   * In case of a (multi dimensional) array or matrix, the median of all
	   * elements will be calculated.
	   *
	   * Syntax:
	   *
	   *     math.median(a, b, c, ...)
	   *     math.median(A)
	   *
	   * Examples:
	   *
	   *     math.median(5, 2, 7);        // returns 5
	   *     math.median([3, -1, 5, 7]);  // returns 4
	   *
	   * See also:
	   *
	   *     mean, min, max, sum, prod, std, var
	   *
	   * @param {... *} args  A single matrix or or multiple scalar values
	   * @return {*} The median
	   */
	  var median = typed('median', {
	    // median([a, b, c, d, ...])
	    'Array | Matrix': _median,

	    // median([a, b, c, d, ...], dim)
	    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
	      // TODO: implement median(A, dim)
	      throw new Error('median(A, dim) is not yet supported');
	      //return reduce(arguments[0], arguments[1], ...);
	    },

	    // median(a, b, c, d, ...)
	    '...': function _(args) {
	      if (containsCollections(args)) {
	        throw new TypeError('Scalar values expected in function median');
	      }

	      return _median(args);
	    }
	  });

	  /**
	   * Recursively calculate the median of an n-dimensional array
	   * @param {Array} array
	   * @return {Number} median
	   * @private
	   */
	  function _median(array) {
	    array = flatten(array.valueOf());

	    var num = array.length;
	    if (num == 0) {
	      throw new Error('Cannot calculate median of an empty array');
	    }

	    if (num % 2 == 0) {
	      // even: return the average of the two middle values
	      var mid = num / 2 - 1;
	      var right = partitionSelect(array, mid + 1);

	      // array now partitioned at mid + 1, take max of left part
	      var left = array[mid];
	      for (var i = 0; i < mid; ++i) {
	        if (compare(array[i], left) > 0) {
	          left = array[i];
	        }
	      }

	      return middle2(left, right);
	    } else {
	      // odd: return the middle value
	      var m = partitionSelect(array, (num - 1) / 2);

	      return middle(m);
	    }
	  }

	  // helper function to type check the middle value of the array
	  var middle = typed({
	    'number | BigNumber | Unit': function numberBigNumberUnit(value) {
	      return value;
	    }
	  });

	  // helper function to type check the two middle value of the array
	  var middle2 = typed({
	    'number | BigNumber | Unit, number | BigNumber | Unit': function numberBigNumberUnitNumberBigNumberUnit(left, right) {
	      return divide(add(left, right), 2);
	    }
	  });

	  median.toTex = undefined; // use default template

	  return median;
	}

	exports.name = 'median';
	exports.factory = factory;

/***/ },
/* 620 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var flatten = __webpack_require__(200).flatten;

	function factory(type, config, load, typed) {

	  /**
	  * Computes the mode of a set of numbers or a list with values(numbers or characters).
	  * If there are more than one modes, it returns a list of those values.
	  *
	  * Syntax:
	  *
	  *     math.mode(a, b, c, ...)
	  *     math.mode(A)
	  *
	  * Examples:
	  *
	  *     math.mode(2, 1, 4, 3, 1);                            // returns [1]
	  *     math.mode([1, 2.7, 3.2, 4, 2.7]);                    // returns [2.7]
	  *     math.mode(1, 4, 6, 1, 6)                             // returns [1, 6]
	  *     math.mode('a','a','b','c')                           // returns ["a"]
	  *     math.mode(1, 1.5, 'abc')                             // returns [1, 1.5, "abc"]
	  *
	  * See also:
	  *
	  *     median,
	  *     mean
	  *
	  * @param {... *} args  A single matrix
	  * @return {*} The mode of all values
	  */

	  var mode = typed('mode', {
	    'Array | Matrix': _mode,

	    '...': function _(args) {
	      return _mode(args);
	    }
	  });

	  return mode;

	  /**
	   * Calculates the mode in an 1-dimensional array
	   * @param {Array} values
	   * @return {number} mode
	   * @private
	   */
	  function _mode(values) {
	    values = flatten(values.valueOf());
	    var num = values.length;
	    if (num == 0) {
	      throw new Error('Cannot calculate mode of an empty array');
	    }

	    var count = {},
	        mode = [],
	        max = 0;
	    for (var i in values) {
	      if (!(values[i] in count)) {
	        count[values[i]] = 0;
	      }
	      count[values[i]]++;
	      if (count[values[i]] == max) {
	        mode.push(values[i]);
	      } else if (count[values[i]] > max) {
	        max = count[values[i]];
	        mode = [values[i]];
	      }
	    }
	    return mode;
	  };
	}

	exports.name = 'mode';
	exports.factory = factory;

/***/ },
/* 621 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepForEach = __webpack_require__(481);

	function factory(type, config, load, typed) {
	  var multiply = load(__webpack_require__(240));

	  /**
	   * Compute the product of a matrix or a list with values.
	   * In case of a (multi dimensional) array or matrix, the sum of all
	   * elements will be calculated.
	   *
	   * Syntax:
	   *
	   *     math.prod(a, b, c, ...)
	   *     math.prod(A)
	   *
	   * Examples:
	   *
	   *     math.multiply(2, 3);           // returns 6
	   *     math.prod(2, 3);               // returns 6
	   *     math.prod(2, 3, 4);            // returns 24
	   *     math.prod([2, 3, 4]);          // returns 24
	   *     math.prod([[2, 5], [4, 3]]);   // returns 120
	   *
	   * See also:
	   *
	   *    mean, median, min, max, sum, std, var
	   *
	   * @param {... *} args  A single matrix or or multiple scalar values
	   * @return {*} The product of all values
	   */
	  var prod = typed('prod', {
	    // prod([a, b, c, d, ...])
	    'Array | Matrix': _prod,

	    // prod([a, b, c, d, ...], dim)
	    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
	      // TODO: implement prod(A, dim)
	      throw new Error('prod(A, dim) is not yet supported');
	      //return reduce(arguments[0], arguments[1], math.prod);
	    },

	    // prod(a, b, c, d, ...)
	    '...': function _(args) {
	      return _prod(args);
	    }
	  });

	  prod.toTex = undefined; // use default template

	  return prod;

	  /**
	   * Recursively calculate the product of an n-dimensional array
	   * @param {Array} array
	   * @return {number} prod
	   * @private
	   */
	  function _prod(array) {
	    var prod = undefined;

	    deepForEach(array, function (value) {
	      prod = prod === undefined ? value : multiply(prod, value);
	    });

	    if (prod === undefined) {
	      throw new Error('Cannot calculate prod of an empty array');
	    }

	    return prod;
	  }
	}

	exports.name = 'prod';
	exports.factory = factory;

/***/ },
/* 622 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isInteger = __webpack_require__(166).isInteger;
	var isNumber = __webpack_require__(166).isNumber;
	var flatten = __webpack_require__(200).flatten;
	var isCollection = __webpack_require__(479);

	function factory(type, config, load, typed) {
	  var add = load(__webpack_require__(211));
	  var multiply = load(__webpack_require__(244));
	  var partitionSelect = load(__webpack_require__(599));
	  var compare = load(__webpack_require__(600));

	  /**
	   * Compute the prob order quantile of a matrix or a list with values.
	   * The sequence is sorted and the middle value is returned.
	   * Supported types of sequence values are: Number, BigNumber, Unit
	   * Supported types of probability are: Number, BigNumber
	   *
	   * In case of a (multi dimensional) array or matrix, the prob order quantile
	   * of all elements will be calculated.
	   *
	   * Syntax:
	   *
	   *     math.quantileSeq(A, prob[, sorted])
	   *     math.quantileSeq(A, [prob1, prob2, ...][, sorted])
	   *     math.quantileSeq(A, N[, sorted])
	   *
	   * Examples:
	   *
	   *     math.quantileSeq([3, -1, 5, 7], 0.5);         // returns 4
	   *     math.quantileSeq([3, -1, 5, 7], [1/3, 2/3]);  // returns [3, 5]
	   *     math.quantileSeq([3, -1, 5, 7], 2);           // returns [3, 5]
	   *     math.quantileSeq([-1, 3, 5, 7], 0.5, true);   // returns 4
	   *
	   * See also:
	   *
	   *     median, mean, min, max, sum, prod, std, var
	   *
	   * @param {Array, Matrix} data                A single matrix or Array
	   * @param {Number, BigNumber, Array} probOrN  prob is the order of the quantile, while N is
	   *                                            the amount of evenly distributed steps of
	   *                                            probabilities; only one of these options can
	   *                                            be provided
	   * @param {Boolean} sorted=false              is data sorted in ascending order
	   * @return {Number, BigNumber, Unit, Array}   Quantile(s)
	   */
	  function quantileSeq(data, probOrN, sorted) {
	    var probArr, dataArr, one;

	    if (arguments.length < 2 || arguments.length > 3) {
	      throw new SyntaxError('Function quantileSeq requires two or three parameters');
	    }

	    if (isCollection(data)) {
	      sorted = sorted || false;
	      if (typeof sorted === 'boolean') {
	        dataArr = data.valueOf();
	        if (isNumber(probOrN)) {
	          if (probOrN < 0) {
	            throw new Error('N/prob must be non-negative');
	          }

	          if (probOrN <= 1) {
	            // quantileSeq([a, b, c, d, ...], prob[,sorted])
	            return _quantileSeq(dataArr, probOrN, sorted);
	          }

	          if (probOrN > 1) {
	            // quantileSeq([a, b, c, d, ...], N[,sorted])
	            if (!isInteger(probOrN)) {
	              throw new Error('N must be a positive integer');
	            }

	            var nPlusOne = probOrN + 1;
	            probArr = new Array(probOrN);
	            for (var i = 0; i < probOrN;) {
	              probArr[i] = _quantileSeq(dataArr, ++i / nPlusOne, sorted);
	            }
	            return probArr;
	          }
	        }

	        if (probOrN && probOrN.isBigNumber) {
	          if (probOrN.isNegative()) {
	            throw new Error('N/prob must be non-negative');
	          }

	          one = new probOrN.constructor(1);

	          if (probOrN.lte(one)) {
	            // quantileSeq([a, b, c, d, ...], prob[,sorted])
	            return _quantileSeq(dataArr, probOrN, sorted);
	          }

	          if (probOrN.gt(one)) {
	            // quantileSeq([a, b, c, d, ...], N[,sorted])
	            if (!probOrN.isInteger()) {
	              throw new Error('N must be a positive integer');
	            }

	            // largest possible Array length is 2^32-1;
	            // 2^32 < 10^15, thus safe conversion guaranteed
	            var intN = probOrN.toNumber();
	            if (intN > 4294967295) {
	              throw new Error('N must be less than or equal to 2^32-1, as that is the maximum length of an Array');
	            }

	            var nPlusOne = new type.BigNumber(intN + 1);
	            probArr = new Array(intN);
	            for (var i = 0; i < intN;) {
	              probArr[i] = _quantileSeq(dataArr, new type.BigNumber(++i).div(nPlusOne), sorted);
	            }
	            return probArr;
	          }
	        }

	        if (Array.isArray(probOrN)) {
	          // quantileSeq([a, b, c, d, ...], [prob1, prob2, ...][,sorted])
	          probArr = new Array(probOrN.length);
	          for (var i = 0; i < probArr.length; ++i) {
	            var currProb = probOrN[i];
	            if (isNumber(currProb)) {
	              if (currProb < 0 || currProb > 1) {
	                throw new Error('Probability must be between 0 and 1, inclusive');
	              }
	            } else if (currProb && currProb.isBigNumber) {
	              one = new currProb.constructor(1);
	              if (currProb.isNegative() || currProb.gt(one)) {
	                throw new Error('Probability must be between 0 and 1, inclusive');
	              }
	            } else {
	              throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
	            }

	            probArr[i] = _quantileSeq(dataArr, currProb, sorted);
	          }
	          return probArr;
	        }

	        throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
	      }

	      throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
	    }

	    throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
	  }

	  /**
	   * Calculate the prob order quantile of an n-dimensional array.
	   * 
	   * @param {Array} array
	   * @param {Number, BigNumber} prob
	   * @param {Boolean} sorted
	   * @return {Number, BigNumber, Unit} prob order quantile
	   * @private
	   */
	  function _quantileSeq(array, prob, sorted) {
	    var flat = flatten(array);
	    var len = flat.length;
	    if (len === 0) {
	      throw new Error('Cannot calculate quantile of an empty sequence');
	    }

	    if (isNumber(prob)) {
	      var index = prob * (len - 1);
	      var fracPart = index % 1;
	      if (fracPart === 0) {
	        var value = sorted ? flat[index] : partitionSelect(flat, index);

	        validate(value);

	        return value;
	      }

	      var integerPart = Math.floor(index);

	      var left, right;
	      if (sorted) {
	        left = flat[integerPart];
	        right = flat[integerPart + 1];
	      } else {
	        right = partitionSelect(flat, integerPart + 1);

	        // max of partition is kth largest
	        left = flat[integerPart];
	        for (var i = 0; i < integerPart; ++i) {
	          if (compare(flat[i], left) > 0) {
	            left = flat[i];
	          }
	        }
	      }

	      validate(left);
	      validate(right);

	      // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]
	      return add(multiply(left, 1 - fracPart), multiply(right, fracPart));
	    }

	    // If prob is a BigNumber
	    var index = prob.times(len - 1);
	    if (index.isInteger()) {
	      index = index.toNumber();
	      var value = sorted ? flat[index] : partitionSelect(flat, index);

	      validate(value);

	      return value;
	    }

	    var integerPart = index.floor();
	    var fracPart = index.minus(integerPart);
	    var integerPartNumber = integerPart.toNumber();

	    var left, right;
	    if (sorted) {
	      left = flat[integerPartNumber];
	      right = flat[integerPartNumber + 1];
	    } else {
	      right = partitionSelect(flat, integerPartNumber + 1);

	      // max of partition is kth largest
	      left = flat[integerPartNumber];
	      for (var i = 0; i < integerPartNumber; ++i) {
	        if (compare(flat[i], left) > 0) {
	          left = flat[i];
	        }
	      }
	    }

	    validate(left);
	    validate(right);

	    // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]
	    var one = new fracPart.constructor(1);
	    return add(multiply(left, one.minus(fracPart)), multiply(right, fracPart));
	  }

	  /**
	   * Check if array value types are valid, throw error otherwise.
	   * @param {number | BigNumber | Unit} x
	   * @param {number | BigNumber | Unit} x
	   * @private
	   */
	  var validate = typed({
	    'number | BigNumber | Unit': function numberBigNumberUnit(x) {
	      return x;
	    }
	  });

	  return quantileSeq;
	}

	exports.name = 'quantileSeq';
	exports.factory = factory;

/***/ },
/* 623 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load, typed) {
	  var sqrt = load(__webpack_require__(537));
	  var variance = load(__webpack_require__(624));

	  /**
	   * Compute the standard deviation of a matrix or a  list with values.
	   * The standard deviations is defined as the square root of the variance:
	   * `std(A) = sqrt(var(A))`.
	   * In case of a (multi dimensional) array or matrix, the standard deviation
	   * over all elements will be calculated.
	   *
	   * Optionally, the type of normalization can be specified as second
	   * parameter. The parameter `normalization` can be one of the following values:
	   *
	   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)
	   * - 'uncorrected'        The sum of squared errors is divided by n
	   * - 'biased'             The sum of squared errors is divided by (n + 1)
	   *
	   * Syntax:
	   *
	   *     math.std(a, b, c, ...)
	   *     math.std(A)
	   *     math.std(A, normalization)
	   *
	   * Examples:
	   *
	   *     math.std(2, 4, 6);                     // returns 2
	   *     math.std([2, 4, 6, 8]);                // returns 2.581988897471611
	   *     math.std([2, 4, 6, 8], 'uncorrected'); // returns 2.23606797749979
	   *     math.std([2, 4, 6, 8], 'biased');      // returns 2
	   *
	   *     math.std([[1, 2, 3], [4, 5, 6]]);      // returns 1.8708286933869707
	   *
	   * See also:
	   *
	   *    mean, median, max, min, prod, sum, var
	   *
	   * @param {Array | Matrix} array
	   *                        A single matrix or or multiple scalar values
	   * @param {string} [normalization='unbiased']
	   *                        Determines how to normalize the variance.
	   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.
	   * @return {*} The standard deviation
	   */
	  var std = typed('std', {
	    // std([a, b, c, d, ...])
	    'Array | Matrix': _std,

	    // std([a, b, c, d, ...], normalization)
	    'Array | Matrix, string': _std,

	    // std(a, b, c, d, ...)
	    '...': function _(args) {
	      return _std(args);
	    }
	  });

	  std.toTex = undefined; // use default template

	  return std;

	  function _std(array, normalization) {
	    if (array.length == 0) {
	      throw new SyntaxError('Function std requires one or more parameters (0 provided)');
	    }

	    return sqrt(variance.apply(null, arguments));
	  }
	}

	exports.name = 'std';
	exports.factory = factory;

/***/ },
/* 624 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var DEFAULT_NORMALIZATION = 'unbiased';

	var deepForEach = __webpack_require__(481);

	function factory(type, config, load, typed) {
	  var add = load(__webpack_require__(213));
	  var subtract = load(__webpack_require__(237));
	  var multiply = load(__webpack_require__(240));
	  var divide = load(__webpack_require__(241));

	  /**
	   * Compute the variance of a matrix or a  list with values.
	   * In case of a (multi dimensional) array or matrix, the variance over all
	   * elements will be calculated.
	   *
	   * Optionally, the type of normalization can be specified as second
	   * parameter. The parameter `normalization` can be one of the following values:
	   *
	   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)
	   * - 'uncorrected'        The sum of squared errors is divided by n
	   * - 'biased'             The sum of squared errors is divided by (n + 1)
	   *
	   * Note that older browser may not like the variable name `var`. In that
	   * case, the function can be called as `math['var'](...)` instead of
	   * `math.var(...)`.
	   *
	   * Syntax:
	   *
	   *     math.var(a, b, c, ...)
	   *     math.var(A)
	   *     math.var(A, normalization)
	   *
	   * Examples:
	   *
	   *     math.var(2, 4, 6);                     // returns 4
	   *     math.var([2, 4, 6, 8]);                // returns 6.666666666666667
	   *     math.var([2, 4, 6, 8], 'uncorrected'); // returns 5
	   *     math.var([2, 4, 6, 8], 'biased');      // returns 4
	   *
	   *     math.var([[1, 2, 3], [4, 5, 6]]);      // returns 3.5
	   *
	   * See also:
	   *
	   *    mean, median, max, min, prod, std, sum
	   *
	   * @param {Array | Matrix} array
	   *                        A single matrix or or multiple scalar values
	   * @param {string} [normalization='unbiased']
	   *                        Determines how to normalize the variance.
	   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.
	   * @return {*} The variance
	   */
	  var variance = typed('variance', {
	    // var([a, b, c, d, ...])
	    'Array | Matrix': function ArrayMatrix(array) {
	      return _var(array, DEFAULT_NORMALIZATION);
	    },

	    // var([a, b, c, d, ...], normalization)
	    'Array | Matrix, string': _var,

	    // var(a, b, c, d, ...)
	    '...': function _(args) {
	      return _var(args, DEFAULT_NORMALIZATION);
	    }
	  });

	  variance.toTex = '\\mathrm{Var}\\left(${args}\\right)';

	  return variance;

	  /**
	   * Recursively calculate the variance of an n-dimensional array
	   * @param {Array} array
	   * @param {string} normalization
	   *                        Determines how to normalize the variance:
	   *                        - 'unbiased'    The sum of squared errors is divided by (n - 1)
	   *                        - 'uncorrected' The sum of squared errors is divided by n
	   *                        - 'biased'      The sum of squared errors is divided by (n + 1)
	   * @return {number | BigNumber} variance
	   * @private
	   */
	  function _var(array, normalization) {
	    var sum = 0;
	    var num = 0;

	    if (array.length == 0) {
	      throw new SyntaxError('Function var requires one or more parameters (0 provided)');
	    }

	    // calculate the mean and number of elements
	    deepForEach(array, function (value) {
	      sum = add(sum, value);
	      num++;
	    });
	    if (num === 0) throw new Error('Cannot calculate var of an empty array');

	    var mean = divide(sum, num);

	    // calculate the variance
	    sum = 0;
	    deepForEach(array, function (value) {
	      var diff = subtract(value, mean);
	      sum = add(sum, multiply(diff, diff));
	    });

	    switch (normalization) {
	      case 'uncorrected':
	        return divide(sum, num);

	      case 'biased':
	        return divide(sum, num + 1);

	      case 'unbiased':
	        var zero = sum && sum.isBigNumber === true ? new type.BigNumber(0) : 0;
	        return num == 1 ? zero : divide(sum, num - 1);

	      default:
	        throw new Error('Unknown normalization "' + normalization + '". ' + 'Choose "unbiased" (default), "uncorrected", or "biased".');
	    }
	  }
	}

	exports.name = 'var';
	exports.factory = factory;

/***/ },
/* 625 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

		module.exports = [__webpack_require__(250), __webpack_require__(626)];

/***/ },
/* 626 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isString = __webpack_require__(183).isString;
	var format = __webpack_require__(183).format;

	function factory(type, config, load, typed) {
	  /**
	   * Interpolate values into a string template.
	   *
	   * Syntax:
	   *
	   *     math.print(template, values)
	   *     math.print(template, values, precision)
	   *     math.print(template, values, options)
	   *
	   * Example usage:
	   *
	   *     // the following outputs: 'Lucy is 5 years old'
	   *     math.print('Lucy is $age years old', {age: 5});
	   *
	   *     // the following outputs: 'The value of pi is 3.141592654'
	   *     math.print('The value of pi is $pi', {pi: math.pi}, 10);
	   *
	   *     // the following outputs: 'hello Mary! The date is 2013-03-23'
	   *     math.print('Hello $user.name! The date is $date', {
	   *       user: {
	   *         name: 'Mary',
	   *       },
	   *       date: new Date(2013, 2, 23).toISOString().substring(0, 10)
	   *     });
	   *
	   * See also:
	   *
	   *     format
	   *
	   * @param {string} template     A string containing variable placeholders.
	   * @param {Object} values       An object containing variables which will
	   *                              be filled in in the template.
	   * @param {number | Object} [options]  Formatting options,
	   *                              or the number of digits to format numbers.
	   *                              See function math.format for a description
	   *                              of all options.
	   * @return {string} Interpolated string
	   */
	  var print = typed('print', {
	    'string, Object': _print,
	    'string, Object, number': _print
	  });

	  print.toTex = undefined; // use default template

	  return print;
	}

	/**
	 * Interpolate values into a string template.
	 * @param {string} template
	 * @param {Object} values
	 * @param {number | Object} [options]
	 * @returns {string} Interpolated string
	 * @private
	 */
	function _print(template, values, options) {
	  return template.replace(/\$([\w\.]+)/g, function (original, key) {
	    var keys = key.split('.');
	    var value = values[keys.shift()];
	    while (keys.length && value !== undefined) {
	      var k = keys.shift();
	      value = k ? value[k] : value + '.';
	    }

	    if (value !== undefined) {
	      if (!isString(value)) {
	        return format(value, options);
	      } else {
	        return value;
	      }
	    }

	    return original;
	  });
	}

	exports.name = 'print';
	exports.factory = factory;

/***/ },
/* 627 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

		module.exports = [__webpack_require__(628), __webpack_require__(629), __webpack_require__(630), __webpack_require__(631), __webpack_require__(632), __webpack_require__(633), __webpack_require__(634), __webpack_require__(635), __webpack_require__(636), __webpack_require__(637), __webpack_require__(638), __webpack_require__(639), __webpack_require__(640), __webpack_require__(641), __webpack_require__(642), __webpack_require__(643), __webpack_require__(644), __webpack_require__(645), __webpack_require__(646), __webpack_require__(647), __webpack_require__(648), __webpack_require__(649), __webpack_require__(650), __webpack_require__(651), __webpack_require__(652)];

/***/ },
/* 628 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {

	  /**
	   * Calculate the inverse cosine of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.acos(x)
	   *
	   * Examples:
	   *
	   *    math.acos(0.5);           // returns number 1.0471975511965979
	   *    math.acos(math.cos(1.5)); // returns number 1.5
	   *
	   *    math.acos(2);             // returns Complex 0 + 1.3169578969248166 i
	   *
	   * See also:
	   *
	   *    cos, atan, asin
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x  Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} The arc cosine of x
	   */
	  var acos = typed('acos', {
	    'number': function number(x) {
	      if (x >= -1 && x <= 1 || config.predictable) {
	        return Math.acos(x);
	      } else {
	        return new type.Complex(x, 0).acos();
	      }
	    },

	    'Complex': function Complex(x) {
	      return x.acos();
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.acos();
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, acos);
	    }
	  });

	  acos.toTex = { 1: '\\cos^{-1}\\left(${args[0]}\\right)' };

	  return acos;
	}

	exports.name = 'acos';
	exports.factory = factory;

/***/ },
/* 629 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {

	  /**
	   * Calculate the hyperbolic arccos of a value,
	   * defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.acosh(x)
	   *
	   * Examples:
	   *
	   *    math.acosh(1.5);       // returns 0.9624236501192069
	   *
	   * See also:
	   *
	   *    cosh, asinh, atanh
	   *
	   * @param {number | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic arccosine of x
	   */
	  var acosh = typed('acosh', {
	    'number': function number(x) {
	      if (x >= 1 || config.predictable) {
	        return _acosh(x);
	      }
	      if (x <= -1) {
	        return new type.Complex(Math.log(Math.sqrt(x * x - 1) - x), Math.PI);
	      }
	      return new type.Complex(x, 0).acosh();
	    },

	    'Complex': function Complex(x) {
	      return x.acosh();
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.acosh();
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, acosh);
	    }
	  });

	  acosh.toTex = { 1: '\\cosh^{-1}\\left(${args[0]}\\right)' };

	  return acosh;
	}

	/**
	 * Calculate the hyperbolic arccos of a number
	 * @param {number} x
	 * @return {number}
	 * @private
	 */
	var _acosh = Math.acosh || function (x) {
	  return Math.log(Math.sqrt(x * x - 1) + x);
	};

	exports.name = 'acosh';
	exports.factory = factory;

/***/ },
/* 630 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {

	  /**
	   * Calculate the inverse cotangent of a value, defined as `acot(x) = atan(1/x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.acot(x)
	   *
	   * Examples:
	   *
	   *    math.acot(0.5);           // returns number 0.4636476090008061
	   *    math.acot(math.cot(1.5)); // returns number 1.5
	   *
	   *    math.acot(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i
	   *
	   * See also:
	   *
	   *    cot, atan
	   *
	   * @param {number | Complex | Array | Matrix} x   Function input
	   * @return {number | Complex | Array | Matrix} The arc cotangent of x
	   */
	  var acot = typed('acot', {
	    'number': function number(x) {
	      return Math.atan(1 / x);
	    },

	    'Complex': function Complex(x) {
	      return x.acot();
	    },

	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(1).div(x).atan();
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, acot);
	    }
	  });

	  acot.toTex = { 1: '\\cot^{-1}\\left(${args[0]}\\right)' };

	  return acot;
	}

	exports.name = 'acot';
	exports.factory = factory;

/***/ },
/* 631 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {

	  /**
	   * Calculate the hyperbolic arccotangent of a value,
	   * defined as `acoth(x) = atanh(1/x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.acoth(x)
	   *
	   * Examples:
	   *
	   *    math.acoth(0.5);       // returns 0.8047189562170503
	   *
	   * See also:
	   *
	   *    acsch, asech
	   *
	   * @param {number | Complex | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic arccotangent of x
	   */
	  var acoth = typed('acoth', {
	    'number': function number(x) {
	      if (x >= 1 || x <= -1 || config.predictable) {
	        return isFinite(x) ? (Math.log((x + 1) / x) + Math.log(x / (x - 1))) / 2 : 0;
	      }
	      return new type.Complex(x, 0).acoth();
	    },

	    'Complex': function Complex(x) {
	      return x.acoth();
	    },

	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(1).div(x).atanh();
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, acoth);
	    }
	  });

	  acoth.toTex = { 1: '\\coth^{-1}\\left(${args[0]}\\right)' };

	  return acoth;
	}

	exports.name = 'acoth';
	exports.factory = factory;

/***/ },
/* 632 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {

	  /**
	   * Calculate the inverse cosecant of a value, defined as `acsc(x) = asin(1/x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.acsc(x)
	   *
	   * Examples:
	   *
	   *    math.acsc(0.5);           // returns number 0.5235987755982989
	   *    math.acsc(math.csc(1.5)); // returns number ~1.5
	   *
	   *    math.acsc(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i
	   *
	   * See also:
	   *
	   *    csc, asin, asec
	   *
	   * @param {number | Complex | Array | Matrix} x   Function input
	   * @return {number | Complex | Array | Matrix} The arc cosecant of x
	   */
	  var acsc = typed('acsc', {
	    'number': function number(x) {
	      if (x <= -1 || x >= 1 || config.predictable) {
	        return Math.asin(1 / x);
	      }
	      return new type.Complex(x, 0).acsc();
	    },

	    'Complex': function Complex(x) {
	      return x.acsc();
	    },

	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(1).div(x).asin();
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, acsc);
	    }
	  });

	  acsc.toTex = { 1: '\\csc^{-1}\\left(${args[0]}\\right)' };

	  return acsc;
	}

	exports.name = 'acsc';
	exports.factory = factory;

/***/ },
/* 633 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {

	  /**
	   * Calculate the hyperbolic arccosecant of a value,
	   * defined as `acsch(x) = asinh(1/x) = ln(1/x + sqrt(1/x^2 + 1))`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.acsch(x)
	   *
	   * Examples:
	   *
	   *    math.acsch(0.5);       // returns 1.4436354751788103
	   *
	   * See also:
	   *
	   *    asech, acoth
	   *
	   * @param {number | Complex | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic arccosecant of x
	   */
	  var acsch = typed('acsch', {
	    'number': function number(x) {
	      x = 1 / x;
	      return Math.log(x + Math.sqrt(x * x + 1));
	    },

	    'Complex': function Complex(x) {
	      return x.acsch();
	    },

	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(1).div(x).asinh();
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, acsch);
	    }
	  });

	  acsch.toTex = { 1: '\\mathrm{csch}^{-1}\\left(${args[0]}\\right)' };

	  return acsch;
	}

	exports.name = 'acsch';
	exports.factory = factory;

/***/ },
/* 634 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {

	  /**
	   * Calculate the inverse secant of a value. Defined as `asec(x) = acos(1/x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.asec(x)
	   *
	   * Examples:
	   *
	   *    math.asec(0.5);           // returns 1.0471975511965979
	   *    math.asec(math.sec(1.5)); // returns 1.5
	   *
	   *    math.asec(2);             // returns 0 + 1.3169578969248166 i
	   *
	   * See also:
	   *
	   *    acos, acot, acsc
	   *
	   * @param {number | Complex | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} The arc secant of x
	   */
	  var asec = typed('asec', {
	    'number': function number(x) {
	      if (x <= -1 || x >= 1 || config.predictable) {
	        return Math.acos(1 / x);
	      }
	      return new type.Complex(x, 0).asec();
	    },

	    'Complex': function Complex(x) {
	      return x.asec();
	    },

	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(1).div(x).acos();
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, asec);
	    }
	  });

	  asec.toTex = { 1: '\\sec^{-1}\\left(${args[0]}\\right)' };

	  return asec;
	}

	exports.name = 'asec';
	exports.factory = factory;

/***/ },
/* 635 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  var acosh = typed.find(load(__webpack_require__(629)), ['Complex']);

	  /**
	   * Calculate the hyperbolic arcsecant of a value,
	   * defined as `asech(x) = acosh(1/x) = ln(sqrt(1/x^2 - 1) + 1/x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.asech(x)
	   *
	   * Examples:
	   *
	   *    math.asech(0.5);       // returns 1.3169578969248166
	   *
	   * See also:
	   *
	   *    acsch, acoth
	   *
	   * @param {number | Complex | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic arcsecant of x
	   */
	  var asech = typed('asech', {
	    'number': function number(x) {
	      if (x <= 1 && x >= -1 || config.predictable) {
	        x = 1 / x;

	        var ret = Math.sqrt(x * x - 1);
	        if (x > 0 || config.predictable) {
	          return Math.log(ret + x);
	        }

	        return new type.Complex(Math.log(ret - x), Math.PI);
	      }

	      return new type.Complex(x, 0).asech();
	    },

	    'Complex': function Complex(x) {
	      return x.asech();
	    },

	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(1).div(x).acosh();
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, asech);
	    }
	  });

	  asech.toTex = { 1: '\\mathrm{sech}^{-1}\\left(${args[0]}\\right)' };

	  return asech;
	}

	exports.name = 'asech';
	exports.factory = factory;

/***/ },
/* 636 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {

	  /**
	   * Calculate the inverse sine of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.asin(x)
	   *
	   * Examples:
	   *
	   *    math.asin(0.5);           // returns number 0.5235987755982989
	   *    math.asin(math.sin(1.5)); // returns number ~1.5
	   *
	   *    math.asin(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i
	   *
	   * See also:
	   *
	   *    sin, atan, acos
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} The arc sine of x
	   */
	  var asin = typed('asin', {
	    'number': function number(x) {
	      if (x >= -1 && x <= 1 || config.predictable) {
	        return Math.asin(x);
	      } else {
	        return new type.Complex(x, 0).asin();
	      }
	    },

	    'Complex': function Complex(x) {
	      return x.asin();
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.asin();
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since asin(0) = 0
	      return deepMap(x, asin, true);
	    }
	  });

	  asin.toTex = { 1: '\\sin^{-1}\\left(${args[0]}\\right)' };

	  return asin;
	}

	exports.name = 'asin';
	exports.factory = factory;

/***/ },
/* 637 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {

	  /**
	   * Calculate the hyperbolic arcsine of a value,
	   * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.asinh(x)
	   *
	   * Examples:
	   *
	   *    math.asinh(0.5);       // returns 0.48121182505960347
	   *
	   * See also:
	   *
	   *    acosh, atanh
	   *
	   * @param {number | Complex | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic arcsine of x
	   */
	  var asinh = typed('asinh', {
	    'number': Math.asinh || function (x) {
	      return Math.log(Math.sqrt(x * x + 1) + x);
	    },

	    'Complex': function Complex(x) {
	      return x.asinh();
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.asinh();
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since asinh(0) = 0
	      return deepMap(x, asinh, true);
	    }
	  });

	  asinh.toTex = { 1: '\\sinh^{-1}\\left(${args[0]}\\right)' };

	  return asinh;
	}

	exports.name = 'asinh';
	exports.factory = factory;

/***/ },
/* 638 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {

	  /**
	   * Calculate the inverse tangent of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.atan(x)
	   *
	   * Examples:
	   *
	   *    math.atan(0.5);           // returns number 0.4636476090008061
	   *    math.atan(math.tan(1.5)); // returns number 1.5
	   *
	   *    math.atan(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i
	   *
	   * See also:
	   *
	   *    tan, asin, acos
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} The arc tangent of x
	   */
	  var atan = typed('atan', {
	    'number': function number(x) {
	      return Math.atan(x);
	    },

	    'Complex': function Complex(x) {
	      return x.atan();
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.atan();
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since atan(0) = 0
	      return deepMap(x, atan, true);
	    }
	  });

	  atan.toTex = { 1: '\\tan^{-1}\\left(${args[0]}\\right)' };

	  return atan;
	}

	exports.name = 'atan';
	exports.factory = factory;

/***/ },
/* 639 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load, typed) {

	  var matrix = load(__webpack_require__(212));

	  var algorithm02 = load(__webpack_require__(529));
	  var algorithm03 = load(__webpack_require__(221));
	  var algorithm09 = load(__webpack_require__(531));
	  var algorithm11 = load(__webpack_require__(245));
	  var algorithm12 = load(__webpack_require__(223));
	  var algorithm13 = load(__webpack_require__(217));
	  var algorithm14 = load(__webpack_require__(218));

	  /**
	   * Calculate the inverse tangent function with two arguments, y/x.
	   * By providing two arguments, the right quadrant of the computed angle can be
	   * determined.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.atan2(y, x)
	   *
	   * Examples:
	   *
	   *    math.atan2(2, 2) / math.pi;       // returns number 0.25
	   *
	   *    var angle = math.unit(60, 'deg'); // returns Unit 60 deg
	   *    var x = math.cos(angle);
	   *    var y = math.sin(angle);
	   *
	   *    math.atan(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i
	   *
	   * See also:
	   *
	   *    tan, atan, sin, cos
	   *
	   * @param {number | Array | Matrix} y  Second dimension
	   * @param {number | Array | Matrix} x  First dimension
	   * @return {number | Array | Matrix} Four-quadrant inverse tangent
	   */
	  var atan2 = typed('atan2', {

	    'number, number': Math.atan2,

	    // Complex numbers doesn't seem to have a reasonable implementation of
	    // atan2(). Even Matlab removed the support, after they only calculated
	    // the atan only on base of the real part of the numbers and ignored the imaginary.

	    'BigNumber, BigNumber': function BigNumberBigNumber(y, x) {
	      return type.BigNumber.atan2(y, x);
	    },

	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse .* sparse
	              c = algorithm09(x, y, atan2, false);
	              break;
	            default:
	              // sparse .* dense
	              c = algorithm02(y, x, atan2, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense .* sparse
	              c = algorithm03(x, y, atan2, false);
	              break;
	            default:
	              // dense .* dense
	              c = algorithm13(x, y, atan2);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return atan2(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return atan2(matrix(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return atan2(x, matrix(y));
	    },

	    'Matrix, number | BigNumber': function MatrixNumberBigNumber(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm11(x, y, atan2, false);
	          break;
	        default:
	          c = algorithm14(x, y, atan2, false);
	          break;
	      }
	      return c;
	    },

	    'number | BigNumber, Matrix': function numberBigNumberMatrix(x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, atan2, true);
	          break;
	        default:
	          c = algorithm14(y, x, atan2, true);
	          break;
	      }
	      return c;
	    },

	    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, atan2, false).valueOf();
	    },

	    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, atan2, true).valueOf();
	    }
	  });

	  atan2.toTex = { 2: '\\mathrm{atan2}\\left(${args}\\right)' };

	  return atan2;
	}

	exports.name = 'atan2';
	exports.factory = factory;

/***/ },
/* 640 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic arctangent of a value,
	   * defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.atanh(x)
	   *
	   * Examples:
	   *
	   *    math.atanh(0.5);       // returns 0.5493061443340549
	   *
	   * See also:
	   *
	   *    acosh, asinh
	   *
	   * @param {number | Complex | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic arctangent of x
	   */
	  var atanh = typed('atanh', {
	    'number': function number(x) {
	      if (x <= 1 && x >= -1 || config.predictable) {
	        return _atanh(x);
	      }
	      return new type.Complex(x, 0).atanh();
	    },

	    'Complex': function Complex(x) {
	      return x.atanh();
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.atanh();
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since atanh(0) = 0
	      return deepMap(x, atanh, true);
	    }
	  });

	  atanh.toTex = { 1: '\\tanh^{-1}\\left(${args[0]}\\right)' };

	  return atanh;
	}

	/**
	 * Calculate the hyperbolic arctangent of a number
	 * @param {number} x
	 * @return {number}
	 * @private
	 */
	var _atanh = Math.atanh || function (x) {
	  return Math.log((1 + x) / (1 - x)) / 2;
	};

	exports.name = 'atanh';
	exports.factory = factory;

/***/ },
/* 641 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {

	  /**
	   * Calculate the cosine of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.cos(x)
	   *
	   * Examples:
	   *
	   *    math.cos(2);                      // returns number -0.4161468365471422
	   *    math.cos(math.pi / 4);            // returns number  0.7071067811865475
	   *    math.cos(math.unit(180, 'deg'));  // returns number -1
	   *    math.cos(math.unit(60, 'deg'));   // returns number  0.5
	   *
	   *    var angle = 0.2;
	   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2); // returns number ~1
	   *
	   * See also:
	   *
	   *    cos, tan
	   *
	   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} Cosine of x
	   */
	  var cos = typed('cos', {
	    'number': Math.cos,

	    'Complex': function Complex(x) {
	      return x.cos();
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.cos();
	    },

	    'Unit': function Unit(x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError('Unit in function cos is no angle');
	      }
	      return cos(x.value);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, cos);
	    }
	  });

	  cos.toTex = { 1: '\\cos\\left(${args[0]}\\right)' };

	  return cos;
	}

	exports.name = 'cos';
	exports.factory = factory;

/***/ },
/* 642 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic cosine of a value,
	   * defined as `cosh(x) = 1/2 * (exp(x) + exp(-x))`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.cosh(x)
	   *
	   * Examples:
	   *
	   *    math.cosh(0.5);       // returns number 1.1276259652063807
	   *
	   * See also:
	   *
	   *    sinh, tanh
	   *
	   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic cosine of x
	   */
	  var cosh = typed('cosh', {
	    'number': _cosh,

	    'Complex': function Complex(x) {
	      return x.cosh();
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.cosh();
	    },

	    'Unit': function Unit(x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError('Unit in function cosh is no angle');
	      }
	      return cosh(x.value);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, cosh);
	    }
	  });

	  cosh.toTex = { 1: '\\cosh\\left(${args[0]}\\right)' };

	  return cosh;
	}

	/**
	 * Calculate the hyperbolic cosine of a number
	 * @param {number} x
	 * @returns {number}
	 * @private
	 */
	var _cosh = Math.cosh || function (x) {
	  return (Math.exp(x) + Math.exp(-x)) / 2;
	};

	exports.name = 'cosh';
	exports.factory = factory;

/***/ },
/* 643 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  /**
	   * Calculate the cotangent of a value. Defined as `cot(x) = 1 / tan(x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.cot(x)
	   *
	   * Examples:
	   *
	   *    math.cot(2);      // returns number -0.45765755436028577
	   *    1 / math.tan(2);  // returns number -0.45765755436028577
	   *
	   * See also:
	   *
	   *    tan, sec, csc
	   *
	   * @param {number | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Cotangent of x
	   */
	  var cot = typed('cot', {
	    'number': function number(x) {
	      return 1 / Math.tan(x);
	    },

	    'Complex': function Complex(x) {
	      return x.cot();
	    },

	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(1).div(x.tan());
	    },

	    'Unit': function Unit(x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError('Unit in function cot is no angle');
	      }
	      return cot(x.value);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, cot);
	    }
	  });

	  cot.toTex = { 1: '\\cot\\left(${args[0]}\\right)' };

	  return cot;
	}

	exports.name = 'cot';
	exports.factory = factory;

/***/ },
/* 644 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic cotangent of a value,
	   * defined as `coth(x) = 1 / tanh(x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.coth(x)
	   *
	   * Examples:
	   *
	   *    // coth(x) = 1 / tanh(x)
	   *    math.coth(2);         // returns 1.0373147207275482
	   *    1 / math.tanh(2);     // returns 1.0373147207275482
	   *
	   * See also:
	   *
	   *    sinh, tanh, cosh
	   *
	   * @param {number | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic cotangent of x
	   */
	  var coth = typed('coth', {
	    'number': _coth,

	    'Complex': function Complex(x) {
	      return x.coth();
	    },

	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(1).div(x.tanh());
	    },

	    'Unit': function Unit(x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError('Unit in function coth is no angle');
	      }
	      return coth(x.value);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, coth);
	    }
	  });

	  coth.toTex = { 1: '\\coth\\left(${args[0]}\\right)' };

	  return coth;
	}

	/**
	 * Calculate the hyperbolic cosine of a number
	 * @param {number} x
	 * @returns {number}
	 * @private
	 */
	function _coth(x) {
	  var e = Math.exp(2 * x);
	  return (e + 1) / (e - 1);
	}

	exports.name = 'coth';
	exports.factory = factory;

/***/ },
/* 645 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  /**
	   * Calculate the cosecant of a value, defined as `csc(x) = 1/sin(x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.csc(x)
	   *
	   * Examples:
	   *
	   *    math.csc(2);      // returns number 1.099750170294617
	   *    1 / math.sin(2);  // returns number 1.099750170294617
	   *
	   * See also:
	   *
	   *    sin, sec, cot
	   *
	   * @param {number | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Cosecant of x
	   */
	  var csc = typed('csc', {
	    'number': function number(x) {
	      return 1 / Math.sin(x);
	    },

	    'Complex': function Complex(x) {
	      return x.csc();
	    },

	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(1).div(x.sin());
	    },

	    'Unit': function Unit(x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError('Unit in function csc is no angle');
	      }
	      return csc(x.value);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, csc);
	    }
	  });

	  csc.toTex = { 1: '\\csc\\left(${args[0]}\\right)' };

	  return csc;
	}

	exports.name = 'csc';
	exports.factory = factory;

/***/ },
/* 646 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);
	var sign = __webpack_require__(166).sign;

	function factory(type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic cosecant of a value,
	   * defined as `csch(x) = 1 / sinh(x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.csch(x)
	   *
	   * Examples:
	   *
	   *    // csch(x) = 1/ sinh(x)
	   *    math.csch(0.5);       // returns 1.9190347513349437
	   *    1 / math.sinh(0.5);   // returns 1.9190347513349437
	   *
	   * See also:
	   *
	   *    sinh, sech, coth
	   *
	   * @param {number | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic cosecant of x
	   */
	  var csch = typed('csch', {
	    'number': _csch,

	    'Complex': function Complex(x) {
	      return x.csch();
	    },

	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(1).div(x.sinh());
	    },

	    'Unit': function Unit(x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError('Unit in function csch is no angle');
	      }
	      return csch(x.value);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, csch);
	    }
	  });

	  csch.toTex = { 1: '\\mathrm{csch}\\left(${args[0]}\\right)' };

	  return csch;
	}

	/**
	 * Calculate the hyperbolic cosecant of a number
	 * @param {number} x
	 * @returns {number}
	 * @private
	 */
	function _csch(x) {
	  // consider values close to zero (+/-)
	  if (x == 0) {
	    return Number.POSITIVE_INFINITY;
	  } else {
	    return Math.abs(2 / (Math.exp(x) - Math.exp(-x))) * sign(x);
	  }
	}

	exports.name = 'csch';
	exports.factory = factory;

/***/ },
/* 647 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  /**
	   * Calculate the secant of a value, defined as `sec(x) = 1/cos(x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.sec(x)
	   *
	   * Examples:
	   *
	   *    math.sec(2);      // returns number -2.4029979617223822
	   *    1 / math.cos(2);  // returns number -2.4029979617223822
	   *
	   * See also:
	   *
	   *    cos, csc, cot
	   *
	   * @param {number | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Secant of x
	   */
	  var sec = typed('sec', {
	    'number': function number(x) {
	      return 1 / Math.cos(x);
	    },

	    'Complex': function Complex(x) {
	      return x.sec();
	    },

	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(1).div(x.cos());
	    },

	    'Unit': function Unit(x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError('Unit in function sec is no angle');
	      }
	      return sec(x.value);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, sec);
	    }
	  });

	  sec.toTex = { 1: '\\sec\\left(${args[0]}\\right)' };

	  return sec;
	}

	exports.name = 'sec';
	exports.factory = factory;

/***/ },
/* 648 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic secant of a value,
	   * defined as `sech(x) = 1 / cosh(x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.sech(x)
	   *
	   * Examples:
	   *
	   *    // sech(x) = 1/ cosh(x)
	   *    math.sech(0.5);       // returns 0.886818883970074
	   *    1 / math.cosh(0.5);   // returns 0.886818883970074
	   *
	   * See also:
	   *
	   *    cosh, csch, coth
	   *
	   * @param {number | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic secant of x
	   */
	  var sech = typed('sech', {
	    'number': _sech,

	    'Complex': function Complex(x) {
	      return x.sech();
	    },

	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(1).div(x.cosh());
	    },

	    'Unit': function Unit(x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError('Unit in function sech is no angle');
	      }
	      return sech(x.value);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, sech);
	    }
	  });

	  sech.toTex = { 1: '\\mathrm{sech}\\left(${args[0]}\\right)' };

	  return sech;
	}

	/**
	 * Calculate the hyperbolic secant of a number
	 * @param {number} x
	 * @returns {number}
	 * @private
	 */
	function _sech(x) {
	  return 2 / (Math.exp(x) + Math.exp(-x));
	}

	exports.name = 'sech';
	exports.factory = factory;

/***/ },
/* 649 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {

	  /**
	   * Calculate the sine of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.sin(x)
	   *
	   * Examples:
	   *
	   *    math.sin(2);                      // returns number 0.9092974268256813
	   *    math.sin(math.pi / 4);            // returns number 0.7071067811865475
	   *    math.sin(math.unit(90, 'deg'));   // returns number 1
	   *    math.sin(math.unit(30, 'deg'));   // returns number 0.5
	   *
	   *    var angle = 0.2;
	   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2); // returns number ~1
	   *
	   * See also:
	   *
	   *    cos, tan
	   *
	   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} Sine of x
	   */
	  var sin = typed('sin', {
	    'number': Math.sin,

	    'Complex': function Complex(x) {
	      return x.sin();
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.sin();
	    },

	    'Unit': function Unit(x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError('Unit in function sin is no angle');
	      }
	      return sin(x.value);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since sin(0) = 0
	      return deepMap(x, sin, true);
	    }
	  });

	  sin.toTex = { 1: '\\sin\\left(${args[0]}\\right)' };

	  return sin;
	}

	exports.name = 'sin';
	exports.factory = factory;

/***/ },
/* 650 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic sine of a value,
	   * defined as `sinh(x) = 1/2 * (exp(x) - exp(-x))`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.sinh(x)
	   *
	   * Examples:
	   *
	   *    math.sinh(0.5);       // returns number 0.5210953054937474
	   *
	   * See also:
	   *
	   *    cosh, tanh
	   *
	   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic sine of x
	   */
	  var sinh = typed('sinh', {
	    'number': _sinh,

	    'Complex': function Complex(x) {
	      return x.sinh();
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.sinh();
	    },

	    'Unit': function Unit(x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError('Unit in function sinh is no angle');
	      }
	      return sinh(x.value);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since sinh(0) = 0
	      return deepMap(x, sinh, true);
	    }
	  });

	  sinh.toTex = { 1: '\\sinh\\left(${args[0]}\\right)' };

	  return sinh;
	}

	/**
	 * Calculate the hyperbolic sine of a number
	 * @param {number} x
	 * @returns {number}
	 * @private
	 */
	var _sinh = Math.sinh || function (x) {
	  return (Math.exp(x) - Math.exp(-x)) / 2;
	};

	exports.name = 'sinh';
	exports.factory = factory;

/***/ },
/* 651 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  /**
	   * Calculate the tangent of a value. `tan(x)` is equal to `sin(x) / cos(x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.tan(x)
	   *
	   * Examples:
	   *
	   *    math.tan(0.5);                    // returns number 0.5463024898437905
	   *    math.sin(0.5) / math.cos(0.5);    // returns number 0.5463024898437905
	   *    math.tan(math.pi / 4);            // returns number 1
	   *    math.tan(math.unit(45, 'deg'));   // returns number 1
	   *
	   * See also:
	   *
	   *    atan, sin, cos
	   *
	   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} Tangent of x
	   */
	  var tan = typed('tan', {
	    'number': Math.tan,

	    'Complex': function Complex(x) {
	      return x.tan();
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.tan();
	    },

	    'Unit': function Unit(x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError('Unit in function tan is no angle');
	      }
	      return tan(x.value);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since tan(0) = 0
	      return deepMap(x, tan, true);
	    }
	  });

	  tan.toTex = { 1: '\\tan\\left(${args[0]}\\right)' };

	  return tan;
	}

	exports.name = 'tan';
	exports.factory = factory;

/***/ },
/* 652 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic tangent of a value,
	   * defined as `tanh(x) = (exp(2 * x) - 1) / (exp(2 * x) + 1)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.tanh(x)
	   *
	   * Examples:
	   *
	   *    // tanh(x) = sinh(x) / cosh(x) = 1 / coth(x)
	   *    math.tanh(0.5);                   // returns 0.46211715726000974
	   *    math.sinh(0.5) / math.cosh(0.5);  // returns 0.46211715726000974
	   *    1 / math.coth(0.5);               // returns 0.46211715726000974
	   *
	   * See also:
	   *
	   *    sinh, cosh, coth
	   *
	   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic tangent of x
	   */
	  var tanh = typed('tanh', {
	    'number': _tanh,

	    'Complex': function Complex(x) {
	      return x.tanh();
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.tanh();
	    },

	    'Unit': function Unit(x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError('Unit in function tanh is no angle');
	      }
	      return tanh(x.value);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since tanh(0) = 0
	      return deepMap(x, tanh, true);
	    }
	  });

	  tanh.toTex = { 1: '\\tanh\\left(${args[0]}\\right)' };

	  return tanh;
	}

	/**
	 * Calculate the hyperbolic tangent of a number
	 * @param {number} x
	 * @returns {number}
	 * @private
	 */
	var _tanh = Math.tanh || function (x) {
	  var e = Math.exp(2 * x);
	  return (e - 1) / (e + 1);
	};

	exports.name = 'tanh';
	exports.factory = factory;

/***/ },
/* 653 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

		module.exports = [__webpack_require__(654)];

/***/ },
/* 654 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory(type, config, load, typed) {
	  var latex = __webpack_require__(192);

	  var matrix = load(__webpack_require__(212));

	  var algorithm13 = load(__webpack_require__(217));
	  var algorithm14 = load(__webpack_require__(218));

	  /**
	   * Change the unit of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.to(x, unit)
	   *
	   * Examples:
	   *
	   *    math.to(math.unit('2 inch'), 'cm');                   // returns Unit 5.08 cm
	   *    math.to(math.unit('2 inch'), math.unit(null, 'cm'));  // returns Unit 5.08 cm
	   *    math.to(math.unit(16, 'bytes'), 'bits');              // returns Unit 128 bits
	   *
	   * See also:
	   *
	   *    unit
	   *
	   * @param {Unit | Array | Matrix} x     The unit to be converted.
	   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like "cm"
	   *                                      or a unit without value.
	   * @return {Unit | Array | Matrix} value with changed, fixed unit.
	   */
	  var to = typed('to', {

	    'Unit, Unit | string': function UnitUnitString(x, unit) {
	      return x.to(unit);
	    },

	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      // SparseMatrix does not support Units
	      return algorithm13(x, y, to);
	    },

	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return to(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return to(matrix(x), y);
	    },

	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return to(x, matrix(y));
	    },

	    'Matrix, any': function MatrixAny(x, y) {
	      // SparseMatrix does not support Units
	      return algorithm14(x, y, to, false);
	    },

	    'any, Matrix': function anyMatrix(x, y) {
	      // SparseMatrix does not support Units
	      return algorithm14(y, x, to, true);
	    },

	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, to, false).valueOf();
	    },

	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, to, true).valueOf();
	    }
	  });

	  to.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['to'] + '${args[1]}\\right)'
	  };

	  return to;
	}

	exports.name = 'to';
	exports.factory = factory;

/***/ },
/* 655 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

		module.exports = [__webpack_require__(656), __webpack_require__(576), __webpack_require__(525), __webpack_require__(249), __webpack_require__(538), __webpack_require__(657), __webpack_require__(590), __webpack_require__(658), __webpack_require__(251)];

/***/ },
/* 656 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var object = __webpack_require__(163);

	function factory(type, config, load, typed) {
	  /**
	   * Clone an object.
	   *
	   * Syntax:
	   *
	   *     math.clone(x)
	   *
	   * Examples:
	   *
	   *    math.clone(3.5);                   // returns number 3.5
	   *    math.clone(math.complex('2-4i'); // returns Complex 2 - 4i
	   *    math.clone(math.unit(45, 'deg'));  // returns Unit 45 deg
	   *    math.clone([[1, 2], [3, 4]]);      // returns Array [[1, 2], [3, 4]]
	   *    math.clone("hello world");         // returns string "hello world"
	   *
	   * @param {*} x   Object to be cloned
	   * @return {*} A clone of object x
	   */
	  var clone = typed('clone', {
	    'any': object.clone
	  });

	  clone.toTex = undefined; // use default template

	  return clone;
	}

	exports.name = 'clone';
	exports.factory = factory;

/***/ },
/* 657 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);

	function factory(type, config, load, typed) {
	  /**
	   * Test whether a value is prime: has no divisors other than itself and one.
	   * The function supports type `number`, `bignumber`.
	   *
	   * The function is evaluated element-wise in case of Array or Matrix input.
	   *
	   * Syntax:
	   *
	   *     math.isPrime(x)
	   *
	   * Examples:
	   *
	   *    math.isPrime(3);                     // returns true
	   *    math.isPrime(-2);                    // returns false
	   *    math.isPrime(0);                     // returns false
	   *    math.isPrime(-0);                    // returns false
	   *    math.isPrime(0.5);                   // returns false
	   *    math.isPrime('2');                   // returns true
	   *    math.isPrime([2, 17, 100]');           // returns [true, true, false]
	   *
	   * See also:
	   *
	   *    isNumeric, isZero, isNegative, isInteger
	   *
	   * @param {number | BigNumber | Array | Matrix} x  Value to be tested
	   * @return {boolean}  Returns true when `x` is larger than zero.
	   *                    Throws an error in case of an unknown data type.
	   */
	  var isPrime = typed('isPrime', {
	    'number': function number(x) {
	      if (x < 2) {
	        return false;
	      }
	      if (x == 2) {
	        return true;
	      }
	      if (x % 2 == 0) {
	        return false;
	      }
	      for (var i = 3; i * i <= x; i += 2) {
	        if (x % i == 0) {
	          return false;
	        }
	      }
	      return true;
	    },

	    'BigNumber': function BigNumber(x) {
	      if (x.lt(2)) {
	        return false;
	      }
	      if (x.equals(2)) {
	        return true;
	      }
	      if (x.mod(2).isZero()) {
	        return false;
	      }
	      for (var i = type.BigNumber(3); i.times(i).lte(x); i = i.plus(1)) {
	        if (x.mod(i).isZero()) {
	          return false;
	        }
	      }
	      return true;
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, isPrime);
	    }
	  });

	  return isPrime;
	}

	exports.name = 'isPrime';
	exports.factory = factory;

/***/ },
/* 658 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(179);
	var number = __webpack_require__(166);

	function factory(type, config, load, typed) {
	  /**
	   * Test whether a value is NaN (not a number).
	   * The function supports types `number`, `BigNumber`, `Fraction`, `Unit` and `Complex`.
	   *
	   * The function is evaluated element-wise in case of Array or Matrix input.
	   *
	   * Syntax:
	   *
	   *     math.isNaN(x)
	   *
	   * Examples:
	   *
	   *    math.isNaN(3);                     // returns false
	   *    math.isNaN(NaN);                   // returns true
	   *    math.isNaN(0);                     // returns false
	   *    math.isNaN(math.bignumber(NaN));   // returns true
	   *    math.isNaN(math.bignumber(0));     // returns false
	   *    math.isNaN(math.fraction(-2, 5));  // returns false
	   *    math.isNaN('-2');                  // returns false
	   *    math.isNaN([2, 0, -3, NaN]');      // returns [false, false, false, true]
	   *
	   * See also:
	   *
	   *    isNumeric, isNegative, isPositive, isZero, isInteger
	   *
	   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
	   * @return {boolean}  Returns true when `x` is NaN.
	   *                    Throws an error in case of an unknown data type.
	   */
	  var isNaN = typed('isNaN', {
	    'number': function number(x) {
	      return Number.isNaN(x);
	    },

	    'BigNumber': function BigNumber(x) {
	      return x.isNaN();
	    },

	    'Fraction': function Fraction(x) {
	      return false;
	    },

	    'Complex': function Complex(x) {
	      return Number.isNaN(x.re) && Number.isNaN(x.im);
	    },

	    'Unit': function Unit(x) {
	      return Number.isNaN(x.value);
	    },

	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, Number.isNaN);
	    }
	  });

	  return isNaN;
	}

	exports.name = 'isNaN';
	exports.factory = factory;

/***/ },
/* 659 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

		module.exports = [__webpack_require__(660)];

/***/ },
/* 660 */
/***/ function(module, exports) {

	'use strict';

	function factory(type, config, load, typed) {
	  /**
	   * Instantiate mathjs data types from their JSON representation
	   * @param {string} key
	   * @param {*} value
	   * @returns {*} Returns the revived object
	   */
	  return function reviver(key, value) {
	    var constructor = type[value && value.mathjs];
	    if (constructor && typeof constructor.fromJSON === 'function') {
	      return constructor.fromJSON(value);
	    }

	    return value;
	  };
	}

	exports.name = 'reviver';
	exports.path = 'json';
	exports.factory = factory;

/***/ },
/* 661 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var ArgumentsError = __webpack_require__(171);
	var DimensionError = __webpack_require__(202);
	var IndexError = __webpack_require__(203);

	module.exports = [{
	  name: 'ArgumentsError', path: 'error',
	  factory: function factory() {
	    return ArgumentsError;
	  }
	}, {
	  name: 'DimensionError',
	  path: 'error',
	  factory: function factory() {
	    return DimensionError;
	  }
	}, {
	  name: 'IndexError',
	  path: 'error',
	  factory: function factory() {
	    return IndexError;
	  }
	}];

		// TODO: implement an InvalidValueError?

/***/ },
/* 662 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	/*
	    D3.js Slider
	    Inspired by jQuery UI Slider
	    Copyright (c) 2013, Bjorn Sandvik - http://blog.thematicmapping.org
	    BSD license: http://opensource.org/licenses/BSD-3-Clause
	*/
	(function (root, factory) {
	  if (true) {
	    // AMD. Register as an anonymous module.
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(159)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {
	    if (process.browser) {
	      // Browserify. Import css too using cssify.
	      require('./d3.slider.css');
	    }
	    // Node. Does not work with strict CommonJS, but
	    // only CommonJS-like environments that support module.exports,
	    // like Node.
	    module.exports = factory(require('d3'));
	  } else {
	    // Browser globals (root is window)
	    root.d3.slider = factory(root.d3);
	  }
	})(undefined, function (d3) {
	  return function module() {
	    "use strict";

	    // Public variables width default settings

	    var min = 0,
	        max = 100,
	        step = 0.01,
	        animate = false,
	        orientation = "horizontal",
	        axis = false,
	        margin = 50,
	        value,
	        active = 1,
	        snap = false,
	        scale;

	    // Private variables
	    var axisScale,
	        dispatch = d3.dispatch("slide", "slideend"),
	        formatPercent = d3.format(".2%"),
	        tickFormat = d3.format(".0"),
	        handle1,
	        handle2 = null,
	        divRange,
	        sliderLength;

	    function slider(selection) {
	      selection.each(function () {

	        // Create scale if not defined by user
	        if (!scale) {
	          scale = d3.scale.linear().domain([min, max]);
	        }

	        // Start value
	        value = value || scale.domain()[0];

	        // DIV container
	        var div = d3.select(this).classed("d3-slider d3-slider-" + orientation, true);

	        var drag = d3.behavior.drag();
	        drag.on('dragend', function () {
	          dispatch.slideend(d3.event, value);
	        });

	        // Slider handle
	        //if range slider, create two
	        // var divRange;

	        if (toType(value) == "array" && value.length == 2) {
	          handle1 = div.append("a").classed("d3-slider-handle", true).attr("xlink:href", "#").attr('id', "handle-one").on("click", stopPropagation).call(drag);
	          handle2 = div.append("a").classed("d3-slider-handle", true).attr('id', "handle-two").attr("xlink:href", "#").on("click", stopPropagation).call(drag);
	        } else {
	          handle1 = div.append("a").classed("d3-slider-handle", true).attr("xlink:href", "#").attr('id', "handle-one").on("click", stopPropagation).call(drag);
	        }

	        // Horizontal slider
	        if (orientation === "horizontal") {

	          div.on("click", onClickHorizontal);

	          if (toType(value) == "array" && value.length == 2) {
	            divRange = d3.select(this).append('div').classed("d3-slider-range", true);

	            handle1.style("left", formatPercent(scale(value[0])));
	            divRange.style("left", formatPercent(scale(value[0])));
	            drag.on("drag", onDragHorizontal);

	            var width = 100 - parseFloat(formatPercent(scale(value[1])));
	            handle2.style("left", formatPercent(scale(value[1])));
	            divRange.style("right", width + "%");
	            drag.on("drag", onDragHorizontal);
	          } else {
	            handle1.style("left", formatPercent(scale(value)));
	            drag.on("drag", onDragHorizontal);
	          }

	          sliderLength = parseInt(div.style("width"), 10);
	        } else {
	          // Vertical

	          div.on("click", onClickVertical);
	          drag.on("drag", onDragVertical);
	          if (toType(value) == "array" && value.length == 2) {
	            divRange = d3.select(this).append('div').classed("d3-slider-range-vertical", true);

	            handle1.style("bottom", formatPercent(scale(value[0])));
	            divRange.style("bottom", formatPercent(scale(value[0])));
	            drag.on("drag", onDragVertical);

	            var top = 100 - parseFloat(formatPercent(scale(value[1])));
	            handle2.style("bottom", formatPercent(scale(value[1])));
	            divRange.style("top", top + "%");
	            drag.on("drag", onDragVertical);
	          } else {
	            handle1.style("bottom", formatPercent(scale(value)));
	            drag.on("drag", onDragVertical);
	          }

	          sliderLength = parseInt(div.style("height"), 10);
	        }

	        if (axis) {
	          createAxis(div);
	        }

	        function createAxis(dom) {

	          // Create axis if not defined by user
	          if (typeof axis === "boolean") {

	            axis = d3.svg.axis().ticks(Math.round(sliderLength / 100)).tickFormat(tickFormat).orient(orientation === "horizontal" ? "bottom" : "right");
	          }

	          // Copy slider scale to move from percentages to pixels
	          axisScale = scale.ticks ? scale.copy().range([0, sliderLength]) : scale.copy().rangePoints([0, sliderLength], 0.5);
	          axis.scale(axisScale);

	          // Create SVG axis container
	          var svg = dom.append("svg").classed("d3-slider-axis d3-slider-axis-" + axis.orient(), true).on("click", stopPropagation);

	          var g = svg.append("g");

	          // Horizontal axis
	          if (orientation === "horizontal") {

	            svg.style("margin-left", -margin + "px");

	            svg.attr({
	              width: sliderLength + margin * 2,
	              height: margin
	            });

	            if (axis.orient() === "top") {
	              svg.style("top", -margin + "px");
	              g.attr("transform", "translate(" + margin + "," + margin + ")");
	            } else {
	              // bottom
	              g.attr("transform", "translate(" + margin + ",0)");
	            }
	          } else {
	            // Vertical

	            svg.style("top", -margin + "px");

	            svg.attr({
	              width: margin,
	              height: sliderLength + margin * 2
	            });

	            if (axis.orient() === "left") {
	              svg.style("left", -margin + "px");
	              g.attr("transform", "translate(" + margin + "," + margin + ")");
	            } else {
	              // right
	              g.attr("transform", "translate(" + 0 + "," + margin + ")");
	            }
	          }

	          g.call(axis);
	        }

	        function onClickHorizontal() {
	          if (toType(value) != "array") {
	            var pos = Math.max(0, Math.min(sliderLength, d3.event.offsetX || d3.event.layerX));
	            moveHandle(scale.invert ? stepValue(scale.invert(pos / sliderLength)) : nearestTick(pos / sliderLength));
	          }
	        }

	        function onClickVertical() {
	          if (toType(value) != "array") {
	            var pos = sliderLength - Math.max(0, Math.min(sliderLength, d3.event.offsetY || d3.event.layerY));
	            moveHandle(scale.invert ? stepValue(scale.invert(pos / sliderLength)) : nearestTick(pos / sliderLength));
	          }
	        }

	        function onDragHorizontal() {
	          if (d3.event.sourceEvent.target.id === "handle-one") {
	            active = 1;
	          } else if (d3.event.sourceEvent.target.id == "handle-two") {
	            active = 2;
	          }
	          var pos = Math.max(0, Math.min(sliderLength, d3.event.x));
	          moveHandle(scale.invert ? stepValue(scale.invert(pos / sliderLength)) : nearestTick(pos / sliderLength));
	        }

	        function onDragVertical() {
	          if (d3.event.sourceEvent.target.id === "handle-one") {
	            active = 1;
	          } else if (d3.event.sourceEvent.target.id == "handle-two") {
	            active = 2;
	          }
	          var pos = sliderLength - Math.max(0, Math.min(sliderLength, d3.event.y));
	          moveHandle(scale.invert ? stepValue(scale.invert(pos / sliderLength)) : nearestTick(pos / sliderLength));
	        }

	        function stopPropagation() {
	          d3.event.stopPropagation();
	        }
	      });
	    }

	    // Move slider handle on click/drag
	    function moveHandle(newValue) {
	      var currentValue = toType(value) == "array" && value.length == 2 ? value[active - 1] : value,
	          oldPos = formatPercent(scale(stepValue(currentValue))),
	          newPos = formatPercent(scale(stepValue(newValue))),
	          position = orientation === "horizontal" ? "left" : "bottom";
	      if (oldPos !== newPos) {

	        if (toType(value) == "array" && value.length == 2) {
	          value[active - 1] = newValue;
	          if (d3.event) {
	            dispatch.slide(d3.event, value);
	          };
	        } else {
	          if (d3.event) {
	            dispatch.slide(d3.event.sourceEvent || d3.event, value = newValue);
	          };
	        }

	        if (value[0] >= value[1]) return;
	        if (active === 1) {
	          if (toType(value) == "array" && value.length == 2) {
	            position === "left" ? divRange.style("left", newPos) : divRange.style("bottom", newPos);
	          }

	          if (animate) {
	            handle1.transition().styleTween(position, function () {
	              return d3.interpolate(oldPos, newPos);
	            }).duration(typeof animate === "number" ? animate : 250);
	          } else {
	            handle1.style(position, newPos);
	          }
	        } else {

	          var width = 100 - parseFloat(newPos);
	          var top = 100 - parseFloat(newPos);

	          position === "left" ? divRange.style("right", width + "%") : divRange.style("top", top + "%");

	          if (animate) {
	            handle2.transition().styleTween(position, function () {
	              return d3.interpolate(oldPos, newPos);
	            }).duration(typeof animate === "number" ? animate : 250);
	          } else {
	            handle2.style(position, newPos);
	          }
	        }
	      }
	    }

	    // Calculate nearest step value
	    function stepValue(val) {

	      if (val === scale.domain()[0] || val === scale.domain()[1]) {
	        return val;
	      }

	      var alignValue = val;
	      if (snap) {
	        alignValue = nearestTick(scale(val));
	      } else {
	        var valModStep = (val - scale.domain()[0]) % step;
	        alignValue = val - valModStep;

	        if (Math.abs(valModStep) * 2 >= step) {
	          alignValue += valModStep > 0 ? step : -step;
	        }
	      };

	      return alignValue;
	    }

	    // Find the nearest tick
	    function nearestTick(pos) {
	      var ticks = scale.ticks ? scale.ticks() : scale.domain();
	      var dist = ticks.map(function (d) {
	        return pos - scale(d);
	      });
	      var i = -1,
	          index = 0,
	          r = scale.ticks ? scale.range()[1] : scale.rangeExtent()[1];
	      do {
	        i++;
	        if (Math.abs(dist[i]) < r) {
	          r = Math.abs(dist[i]);
	          index = i;
	        };
	      } while (dist[i] > 0 && i < dist.length - 1);

	      return ticks[index];
	    };

	    // Return the type of an object
	    function toType(v) {
	      return {}.toString.call(v).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
	    };

	    // Getter/setter functions
	    slider.min = function (_) {
	      if (!arguments.length) return min;
	      min = _;
	      return slider;
	    };

	    slider.max = function (_) {
	      if (!arguments.length) return max;
	      max = _;
	      return slider;
	    };

	    slider.step = function (_) {
	      if (!arguments.length) return step;
	      step = _;
	      return slider;
	    };

	    slider.animate = function (_) {
	      if (!arguments.length) return animate;
	      animate = _;
	      return slider;
	    };

	    slider.orientation = function (_) {
	      if (!arguments.length) return orientation;
	      orientation = _;
	      return slider;
	    };

	    slider.axis = function (_) {
	      if (!arguments.length) return axis;
	      axis = _;
	      return slider;
	    };

	    slider.margin = function (_) {
	      if (!arguments.length) return margin;
	      margin = _;
	      return slider;
	    };

	    slider.value = function (_) {
	      if (!arguments.length) return value;
	      if (value) {
	        moveHandle(stepValue(_));
	      };
	      value = _;
	      return slider;
	    };

	    slider.snap = function (_) {
	      if (!arguments.length) return snap;
	      snap = _;
	      return slider;
	    };

	    slider.scale = function (_) {
	      if (!arguments.length) return scale;
	      scale = _;
	      return slider;
	    };

	    d3.rebind(slider, dispatch, "on");

	    return slider;
	  };
	});

/***/ },
/* 663 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	/**
	 * Simple, lightweight, usable local autocomplete library for modern browsers
	 * Because there weren’t enough autocomplete scripts in the world? Because I’m completely insane and have NIH syndrome? Probably both. :P
	 * @author Lea Verou http://leaverou.github.io/awesomplete
	 * MIT license
	 */

	(function () {

		var _ = function _(input, o) {
			var me = this;

			// Setup

			this.input = $(input);
			this.input.setAttribute("autocomplete", "off");
			this.input.setAttribute("aria-autocomplete", "list");

			o = o || {};

			configure(this, {
				minChars: 2,
				maxItems: 10,
				autoFirst: false,
				data: _.DATA,
				filter: _.FILTER_CONTAINS,
				sort: _.SORT_BYLENGTH,
				item: _.ITEM,
				replace: _.REPLACE
			}, o);

			this.index = -1;

			// Create necessary elements

			this.container = $.create("div", {
				className: "awesomplete",
				around: input
			});

			this.ul = $.create("ul", {
				hidden: "hidden",
				inside: this.container
			});

			this.status = $.create("span", {
				className: "visually-hidden",
				role: "status",
				"aria-live": "assertive",
				"aria-relevant": "additions",
				inside: this.container
			});

			// Bind events

			$.bind(this.input, {
				"input": this.evaluate.bind(this),
				"blur": this.close.bind(this, { reason: "blur" }),
				"keydown": function keydown(evt) {
					var c = evt.keyCode;

					// If the dropdown `ul` is in view, then act on keydown for the following keys:
					// Enter / Esc / Up / Down
					if (me.opened) {
						if (c === 13 && me.selected) {
							// Enter
							evt.preventDefault();
							me.select();
						} else if (c === 27) {
							// Esc
							me.close({ reason: "esc" });
						} else if (c === 38 || c === 40) {
							// Down/Up arrow
							evt.preventDefault();
							me[c === 38 ? "previous" : "next"]();
						}
					}
				}
			});

			$.bind(this.input.form, { "submit": this.close.bind(this, { reason: "submit" }) });

			$.bind(this.ul, { "mousedown": function mousedown(evt) {
					var li = evt.target;

					if (li !== this) {

						while (li && !/li/i.test(li.nodeName)) {
							li = li.parentNode;
						}

						if (li && evt.button === 0) {
							// Only select on left click
							evt.preventDefault();
							me.select(li, evt.target);
						}
					}
				} });

			if (this.input.hasAttribute("list")) {
				this.list = "#" + this.input.getAttribute("list");
				this.input.removeAttribute("list");
			} else {
				this.list = this.input.getAttribute("data-list") || o.list || [];
			}

			_.all.push(this);
		};

		_.prototype = {
			set list(list) {
				if (Array.isArray(list)) {
					this._list = list;
				} else if (typeof list === "string" && list.indexOf(",") > -1) {
					this._list = list.split(/\s*,\s*/);
				} else {
					// Element or CSS selector
					list = $(list);

					if (list && list.children) {
						var items = [];
						slice.apply(list.children).forEach(function (el) {
							if (!el.disabled) {
								var text = el.textContent.trim();
								var value = el.value || text;
								var label = el.label || text;
								if (value !== "") {
									items.push({ label: label, value: value });
								}
							}
						});
						this._list = items;
					}
				}

				if (document.activeElement === this.input) {
					this.evaluate();
				}
			},

			get selected() {
				return this.index > -1;
			},

			get opened() {
				return !this.ul.hasAttribute("hidden");
			},

			close: function close(o) {
				if (!this.opened) {
					return;
				}

				this.ul.setAttribute("hidden", "");
				this.index = -1;

				$.fire(this.input, "awesomplete-close", o || {});
			},

			open: function open() {
				this.ul.removeAttribute("hidden");

				if (this.autoFirst && this.index === -1) {
					this.goto(0);
				}

				$.fire(this.input, "awesomplete-open");
			},

			next: function next() {
				var count = this.ul.children.length;

				this.goto(this.index < count - 1 ? this.index + 1 : -1);
			},

			previous: function previous() {
				var count = this.ul.children.length;

				this.goto(this.selected ? this.index - 1 : count - 1);
			},

			// Should not be used, highlights specific item without any checks!
			goto: function goto(i) {
				var lis = this.ul.children;

				if (this.selected) {
					lis[this.index].setAttribute("aria-selected", "false");
				}

				this.index = i;

				if (i > -1 && lis.length > 0) {
					lis[i].setAttribute("aria-selected", "true");
					this.status.textContent = lis[i].textContent;

					$.fire(this.input, "awesomplete-highlight", {
						text: this.suggestions[this.index]
					});
				}
			},

			select: function select(selected, origin) {
				if (selected) {
					this.index = $.siblingIndex(selected);
				} else {
					selected = this.ul.children[this.index];
				}

				if (selected) {
					var suggestion = this.suggestions[this.index];

					var allowed = $.fire(this.input, "awesomplete-select", {
						text: suggestion,
						origin: origin || selected
					});

					if (allowed) {
						this.replace(suggestion);
						this.close({ reason: "select" });
						$.fire(this.input, "awesomplete-selectcomplete", {
							text: suggestion
						});
					}
				}
			},

			evaluate: function evaluate() {
				var me = this;
				var value = this.input.value;

				if (value.length >= this.minChars && this._list.length > 0) {
					this.index = -1;
					// Populate list with options that match
					this.ul.innerHTML = "";

					this.suggestions = this._list.map(function (item) {
						return new Suggestion(me.data(item, value));
					}).filter(function (item) {
						return me.filter(item, value);
					}).sort(this.sort).slice(0, this.maxItems);

					this.suggestions.forEach(function (text) {
						me.ul.appendChild(me.item(text, value));
					});

					if (this.ul.children.length === 0) {
						this.close({ reason: "nomatches" });
					} else {
						this.open();
					}
				} else {
					this.close({ reason: "nomatches" });
				}
			}
		};

		// Static methods/properties

		_.all = [];

		_.FILTER_CONTAINS = function (text, input) {
			return RegExp($.regExpEscape(input.trim()), "i").test(text);
		};

		_.FILTER_STARTSWITH = function (text, input) {
			return RegExp("^" + $.regExpEscape(input.trim()), "i").test(text);
		};

		_.SORT_BYLENGTH = function (a, b) {
			if (a.length !== b.length) {
				return a.length - b.length;
			}

			return a < b ? -1 : 1;
		};

		_.ITEM = function (text, input) {
			var html = input === '' ? text : text.replace(RegExp($.regExpEscape(input.trim()), "gi"), "<mark>$&</mark>");
			return $.create("li", {
				innerHTML: html,
				"aria-selected": "false"
			});
		};

		_.REPLACE = function (text) {
			this.input.value = text.value;
		};

		_.DATA = function (item /*, input*/) {
			return item;
		};

		// Private functions

		function Suggestion(data) {
			var o = Array.isArray(data) ? { label: data[0], value: data[1] } : (typeof data === "undefined" ? "undefined" : _typeof(data)) === "object" && "label" in data && "value" in data ? data : { label: data, value: data };

			this.label = o.label || o.value;
			this.value = o.value;
		}
		Object.defineProperty(Suggestion.prototype = Object.create(String.prototype), "length", {
			get: function get() {
				return this.label.length;
			}
		});
		Suggestion.prototype.toString = Suggestion.prototype.valueOf = function () {
			return "" + this.label;
		};

		function configure(instance, properties, o) {
			for (var i in properties) {
				var initial = properties[i],
				    attrValue = instance.input.getAttribute("data-" + i.toLowerCase());

				if (typeof initial === "number") {
					instance[i] = parseInt(attrValue);
				} else if (initial === false) {
					// Boolean options must be false by default anyway
					instance[i] = attrValue !== null;
				} else if (initial instanceof Function) {
					instance[i] = null;
				} else {
					instance[i] = attrValue;
				}

				if (!instance[i] && instance[i] !== 0) {
					instance[i] = i in o ? o[i] : initial;
				}
			}
		}

		// Helpers

		var slice = Array.prototype.slice;

		function $(expr, con) {
			return typeof expr === "string" ? (con || document).querySelector(expr) : expr || null;
		}

		function $$(expr, con) {
			return slice.call((con || document).querySelectorAll(expr));
		}

		$.create = function (tag, o) {
			var element = document.createElement(tag);

			for (var i in o) {
				var val = o[i];

				if (i === "inside") {
					$(val).appendChild(element);
				} else if (i === "around") {
					var ref = $(val);
					ref.parentNode.insertBefore(element, ref);
					element.appendChild(ref);
				} else if (i in element) {
					element[i] = val;
				} else {
					element.setAttribute(i, val);
				}
			}

			return element;
		};

		$.bind = function (element, o) {
			if (element) {
				for (var event in o) {
					var callback = o[event];

					event.split(/\s+/).forEach(function (event) {
						element.addEventListener(event, callback);
					});
				}
			}
		};

		$.fire = function (target, type, properties) {
			var evt = document.createEvent("HTMLEvents");

			evt.initEvent(type, true, true);

			for (var j in properties) {
				evt[j] = properties[j];
			}

			return target.dispatchEvent(evt);
		};

		$.regExpEscape = function (s) {
			return s.replace(/[-\\^$*+?.()|[\]{}]/g, "\\$&");
		};

		$.siblingIndex = function (el) {
			/* eslint-disable no-cond-assign */
			for (var i = 0; el = el.previousElementSibling; i++) {}
			return i;
		};

		// Initialization

		function init() {
			$$("input.awesomplete").forEach(function (input) {
				new _(input);
			});
		}

		// Are we in a browser? Check for Document constructor
		if (typeof Document !== "undefined") {
			// DOM already loaded?
			if (document.readyState !== "loading") {
				init();
			} else {
				// Wait for it
				document.addEventListener("DOMContentLoaded", init);
			}
		}

		_.$ = $;
		_.$$ = $$;

		// Make sure to export Awesomplete on self when in a browser
		if (typeof self !== "undefined") {
			self.Awesomplete = _;
		}

		// Expose Awesomplete as a CJS module
		if (( false ? "undefined" : _typeof(module)) === "object" && module.exports) {
			module.exports = _;
		}

		return _;
		})();
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(189)(module)))

/***/ },
/* 664 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(665);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(667)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./d3.slider.css", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./d3.slider.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 665 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(666)();
	// imports


	// module
	exports.push([module.id, ".d3-slider {\n    position: relative;\n    font-family: Verdana,Arial,sans-serif;\n    font-size: 1.1em;\n    border: 1px solid #aaaaaa;\n    z-index: 2;\n}\n\n.d3-slider-horizontal {\n    height: .8em;\n}  \n\n.d3-slider-range {\n  background:#2980b9;\n  left:0px;\n  right:0px;\n  height: 0.8em;\n  position: absolute;\n}\n\n.d3-slider-range-vertical {\n  background:#2980b9;\n  left:0px;\n  right:0px;\n  position: absolute;\n  top:0;\n}\n\n.d3-slider-vertical {\n    width: .8em;\n    height: 100px;\n}      \n\n.d3-slider-handle {\n    position: absolute;\n    width: 1.2em;\n    height: 1.2em;\n    border: 1px solid #d3d3d3;\n    border-radius: 4px;\n    background: #eee;\n    background: linear-gradient(to bottom, #eee 0%, #ddd 100%);\n    z-index: 3;\n}\n\n.d3-slider-handle:hover {\n    border: 1px solid #999999;\n}\n\n.d3-slider-horizontal .d3-slider-handle {\n    top: -.3em;\n    margin-left: -.6em;\n}\n\n.d3-slider-axis {\n    position: relative;\n    z-index: 1;    \n}\n\n.d3-slider-axis-bottom {\n    top: .8em;\n}\n\n.d3-slider-axis-right {\n    left: .8em;\n}\n\n.d3-slider-axis path {\n    stroke-width: 0;\n    fill: none;\n}\n\n.d3-slider-axis line {\n    fill: none;\n    stroke: #aaa;\n    shape-rendering: crispEdges;\n}\n\n.d3-slider-axis text {\n    font-size: 11px;\n}\n\n.d3-slider-vertical .d3-slider-handle {\n    left: -.25em;\n    margin-left: 0;\n    margin-bottom: -.6em;      \n}", ""]);

	// exports


/***/ },
/* 666 */
/***/ function(module, exports) {

	"use strict";

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function () {
		var list = [];

		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for (var i = 0; i < this.length; i++) {
				var item = this[i];
				if (item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};

		// import a list of modules into the list
		list.i = function (modules, mediaQuery) {
			if (typeof modules === "string") modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for (var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if (typeof id === "number") alreadyImportedModules[id] = true;
			}
			for (i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if (typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if (mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if (mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};

/***/ },
/* 667 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];

	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}

		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();

		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";

		var styles = listToStyles(list);
		addStylesToDom(styles, options);

		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}

	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}

	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}

	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}

	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}

	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}

	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}

	function addStyle(obj, options) {
		var styleElement, update, remove;

		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}

		update(obj);

		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}

	var replaceText = (function () {
		var textStore = [];

		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();

	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;

		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}

	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;

		if(media) {
			styleElement.setAttribute("media", media)
		}

		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}

	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;

		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}

		var blob = new Blob([css], { type: "text/css" });

		var oldSrc = linkElement.href;

		linkElement.href = URL.createObjectURL(blob);

		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },
/* 668 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(669);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(667)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../css-loader/index.js!./awesomplete.css", function() {
				var newContent = require("!!./../css-loader/index.js!./awesomplete.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 669 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(666)();
	// imports


	// module
	exports.push([module.id, "[hidden] { display: none; }\n\n.visually-hidden {\n\tposition: absolute;\n\tclip: rect(0, 0, 0, 0);\n}\n\ndiv.awesomplete {\n\tdisplay: inline-block;\n\tposition: relative;\n}\n\ndiv.awesomplete > input {\n\tdisplay: block;\n}\n\ndiv.awesomplete > ul {\n\tposition: absolute;\n\tleft: 0;\n\tz-index: 1;\n\tmin-width: 100%;\n\tbox-sizing: border-box;\n\tlist-style: none;\n\tpadding: 0;\n\tborder-radius: .3em;\n\tmargin: .2em 0 0;\n\tbackground: hsla(0,0%,100%,.9);\n\tbackground: linear-gradient(to bottom right, white, hsla(0,0%,100%,.8));\n\tborder: 1px solid rgba(0,0,0,.3);\n\tbox-shadow: .05em .2em .6em rgba(0,0,0,.2);\n\ttext-shadow: none;\n}\n\ndiv.awesomplete > ul[hidden],\ndiv.awesomplete > ul:empty {\n\tdisplay: none;\n}\n\n@supports (transform: scale(0)) {\n\tdiv.awesomplete > ul {\n\t\ttransition: .3s cubic-bezier(.4,.2,.5,1.4);\n\t\ttransform-origin: 1.43em -.43em;\n\t}\n\t\n\tdiv.awesomplete > ul[hidden],\n\tdiv.awesomplete > ul:empty {\n\t\topacity: 0;\n\t\ttransform: scale(0);\n\t\tdisplay: block;\n\t\ttransition-timing-function: ease;\n\t}\n}\n\n\t/* Pointer */\n\tdiv.awesomplete > ul:before {\n\t\tcontent: \"\";\n\t\tposition: absolute;\n\t\ttop: -.43em;\n\t\tleft: 1em;\n\t\twidth: 0; height: 0;\n\t\tpadding: .4em;\n\t\tbackground: white;\n\t\tborder: inherit;\n\t\tborder-right: 0;\n\t\tborder-bottom: 0;\n\t\t-webkit-transform: rotate(45deg);\n\t\ttransform: rotate(45deg);\n\t}\n\n\tdiv.awesomplete > ul > li {\n\t\tposition: relative;\n\t\tpadding: .2em .5em;\n\t\tcursor: pointer;\n\t}\n\t\n\tdiv.awesomplete > ul > li:hover {\n\t\tbackground: hsl(200, 40%, 80%);\n\t\tcolor: black;\n\t}\n\t\n\tdiv.awesomplete > ul > li[aria-selected=\"true\"] {\n\t\tbackground: hsl(205, 40%, 40%);\n\t\tcolor: white;\n\t}\n\t\n\t\tdiv.awesomplete mark {\n\t\t\tbackground: hsl(65, 100%, 50%);\n\t\t}\n\t\t\n\t\tdiv.awesomplete li:hover mark {\n\t\t\tbackground: hsl(68, 100%, 41%);\n\t\t}\n\t\t\n\t\tdiv.awesomplete li[aria-selected=\"true\"] mark {\n\t\t\tbackground: hsl(86, 100%, 21%);\n\t\t\tcolor: inherit;\n\t\t}", ""]);

	// exports


/***/ },
/* 670 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(671);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(667)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../node_modules/css-loader/index.js!./bootstrap.css", function() {
				var newContent = require("!!./../node_modules/css-loader/index.js!./bootstrap.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 671 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(666)();
	// imports


	// module
	exports.push([module.id, "/*!\n * Bootstrap v3.3.6 (http://getbootstrap.com)\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n */\n/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */\nhtml {\n  font-family: sans-serif;\n  -webkit-text-size-adjust: 100%;\n      -ms-text-size-adjust: 100%;\n}\nbody {\n  margin: 0;\n}\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmain,\nmenu,\nnav,\nsection,\nsummary {\n  display: block;\n}\naudio,\ncanvas,\nprogress,\nvideo {\n  display: inline-block;\n  vertical-align: baseline;\n}\naudio:not([controls]) {\n  display: none;\n  height: 0;\n}\n[hidden],\ntemplate {\n  display: none;\n}\na {\n  background-color: transparent;\n}\na:active,\na:hover {\n  outline: 0;\n}\nabbr[title] {\n  border-bottom: 1px dotted;\n}\nb,\nstrong {\n  font-weight: bold;\n}\ndfn {\n  font-style: italic;\n}\nh1 {\n  margin: .67em 0;\n  font-size: 2em;\n}\nmark {\n  color: #000;\n  background: #ff0;\n}\nsmall {\n  font-size: 80%;\n}\nsub,\nsup {\n  position: relative;\n  font-size: 75%;\n  line-height: 0;\n  vertical-align: baseline;\n}\nsup {\n  top: -.5em;\n}\nsub {\n  bottom: -.25em;\n}\nimg {\n  border: 0;\n}\nsvg:not(:root) {\n  overflow: hidden;\n}\nfigure {\n  margin: 1em 40px;\n}\nhr {\n  height: 0;\n  -webkit-box-sizing: content-box;\n     -moz-box-sizing: content-box;\n          box-sizing: content-box;\n}\npre {\n  overflow: auto;\n}\ncode,\nkbd,\npre,\nsamp {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  margin: 0;\n  font: inherit;\n  color: inherit;\n}\nbutton {\n  overflow: visible;\n}\nbutton,\nselect {\n  text-transform: none;\n}\nbutton,\nhtml input[type=\"button\"],\ninput[type=\"reset\"],\ninput[type=\"submit\"] {\n  -webkit-appearance: button;\n  cursor: pointer;\n}\nbutton[disabled],\nhtml input[disabled] {\n  cursor: default;\n}\nbutton::-moz-focus-inner,\ninput::-moz-focus-inner {\n  padding: 0;\n  border: 0;\n}\ninput {\n  line-height: normal;\n}\ninput[type=\"checkbox\"],\ninput[type=\"radio\"] {\n  -webkit-box-sizing: border-box;\n     -moz-box-sizing: border-box;\n          box-sizing: border-box;\n  padding: 0;\n}\ninput[type=\"number\"]::-webkit-inner-spin-button,\ninput[type=\"number\"]::-webkit-outer-spin-button {\n  height: auto;\n}\ninput[type=\"search\"] {\n  -webkit-box-sizing: content-box;\n     -moz-box-sizing: content-box;\n          box-sizing: content-box;\n  -webkit-appearance: textfield;\n}\ninput[type=\"search\"]::-webkit-search-cancel-button,\ninput[type=\"search\"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\nfieldset {\n  padding: .35em .625em .75em;\n  margin: 0 2px;\n  border: 1px solid #c0c0c0;\n}\nlegend {\n  padding: 0;\n  border: 0;\n}\ntextarea {\n  overflow: auto;\n}\noptgroup {\n  font-weight: bold;\n}\ntable {\n  border-spacing: 0;\n  border-collapse: collapse;\n}\ntd,\nth {\n  padding: 0;\n}\n/*! Source: https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css */\n@media print {\n  *,\n  *:before,\n  *:after {\n    color: #000 !important;\n    text-shadow: none !important;\n    background: transparent !important;\n    -webkit-box-shadow: none !important;\n            box-shadow: none !important;\n  }\n  a,\n  a:visited {\n    text-decoration: underline;\n  }\n  a[href]:after {\n    content: \" (\" attr(href) \")\";\n  }\n  abbr[title]:after {\n    content: \" (\" attr(title) \")\";\n  }\n  a[href^=\"#\"]:after,\n  a[href^=\"javascript:\"]:after {\n    content: \"\";\n  }\n  pre,\n  blockquote {\n    border: 1px solid #999;\n\n    page-break-inside: avoid;\n  }\n  thead {\n    display: table-header-group;\n  }\n  tr,\n  img {\n    page-break-inside: avoid;\n  }\n  img {\n    max-width: 100% !important;\n  }\n  p,\n  h2,\n  h3 {\n    orphans: 3;\n    widows: 3;\n  }\n  h2,\n  h3 {\n    page-break-after: avoid;\n  }\n  .navbar {\n    display: none;\n  }\n  .btn > .caret,\n  .dropup > .btn > .caret {\n    border-top-color: #000 !important;\n  }\n  .label {\n    border: 1px solid #000;\n  }\n  .table {\n    border-collapse: collapse !important;\n  }\n  .table td,\n  .table th {\n    background-color: #fff !important;\n  }\n  .table-bordered th,\n  .table-bordered td {\n    border: 1px solid #ddd !important;\n  }\n}\n/*@font-face {\n  font-family: 'Glyphicons Halflings';\n\n  src: url('../fonts/glyphicons-halflings-regular.eot');\n  src: url('../fonts/glyphicons-halflings-regular.eot?#iefix') format('embedded-opentype'), url('../fonts/glyphicons-halflings-regular.woff2') format('woff2'), url('../fonts/glyphicons-halflings-regular.woff') format('woff'), url('../fonts/glyphicons-halflings-regular.ttf') format('truetype'), url('../fonts/glyphicons-halflings-regular.svg#glyphicons_halflingsregular') format('svg');\n}*/\n.glyphicon {\n  position: relative;\n  top: 1px;\n  display: inline-block;\n  font-family: 'Glyphicons Halflings';\n  font-style: normal;\n  font-weight: normal;\n  line-height: 1;\n\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n.glyphicon-asterisk:before {\n  content: \"*\";\n}\n.glyphicon-plus:before {\n  content: \"+\";\n}\n.glyphicon-euro:before,\n.glyphicon-eur:before {\n  content: \"\\20AC\";\n}\n.glyphicon-minus:before {\n  content: \"\\2212\";\n}\n.glyphicon-cloud:before {\n  content: \"\\2601\";\n}\n.glyphicon-envelope:before {\n  content: \"\\2709\";\n}\n.glyphicon-pencil:before {\n  content: \"\\270F\";\n}\n.glyphicon-glass:before {\n  content: \"\\E001\";\n}\n.glyphicon-music:before {\n  content: \"\\E002\";\n}\n.glyphicon-search:before {\n  content: \"\\E003\";\n}\n.glyphicon-heart:before {\n  content: \"\\E005\";\n}\n.glyphicon-star:before {\n  content: \"\\E006\";\n}\n.glyphicon-star-empty:before {\n  content: \"\\E007\";\n}\n.glyphicon-user:before {\n  content: \"\\E008\";\n}\n.glyphicon-film:before {\n  content: \"\\E009\";\n}\n.glyphicon-th-large:before {\n  content: \"\\E010\";\n}\n.glyphicon-th:before {\n  content: \"\\E011\";\n}\n.glyphicon-th-list:before {\n  content: \"\\E012\";\n}\n.glyphicon-ok:before {\n  content: \"\\E013\";\n}\n.glyphicon-remove:before {\n  content: \"\\E014\";\n}\n.glyphicon-zoom-in:before {\n  content: \"\\E015\";\n}\n.glyphicon-zoom-out:before {\n  content: \"\\E016\";\n}\n.glyphicon-off:before {\n  content: \"\\E017\";\n}\n.glyphicon-signal:before {\n  content: \"\\E018\";\n}\n.glyphicon-cog:before {\n  content: \"\\E019\";\n}\n.glyphicon-trash:before {\n  content: \"\\E020\";\n}\n.glyphicon-home:before {\n  content: \"\\E021\";\n}\n.glyphicon-file:before {\n  content: \"\\E022\";\n}\n.glyphicon-time:before {\n  content: \"\\E023\";\n}\n.glyphicon-road:before {\n  content: \"\\E024\";\n}\n.glyphicon-download-alt:before {\n  content: \"\\E025\";\n}\n.glyphicon-download:before {\n  content: \"\\E026\";\n}\n.glyphicon-upload:before {\n  content: \"\\E027\";\n}\n.glyphicon-inbox:before {\n  content: \"\\E028\";\n}\n.glyphicon-play-circle:before {\n  content: \"\\E029\";\n}\n.glyphicon-repeat:before {\n  content: \"\\E030\";\n}\n.glyphicon-refresh:before {\n  content: \"\\E031\";\n}\n.glyphicon-list-alt:before {\n  content: \"\\E032\";\n}\n.glyphicon-lock:before {\n  content: \"\\E033\";\n}\n.glyphicon-flag:before {\n  content: \"\\E034\";\n}\n.glyphicon-headphones:before {\n  content: \"\\E035\";\n}\n.glyphicon-volume-off:before {\n  content: \"\\E036\";\n}\n.glyphicon-volume-down:before {\n  content: \"\\E037\";\n}\n.glyphicon-volume-up:before {\n  content: \"\\E038\";\n}\n.glyphicon-qrcode:before {\n  content: \"\\E039\";\n}\n.glyphicon-barcode:before {\n  content: \"\\E040\";\n}\n.glyphicon-tag:before {\n  content: \"\\E041\";\n}\n.glyphicon-tags:before {\n  content: \"\\E042\";\n}\n.glyphicon-book:before {\n  content: \"\\E043\";\n}\n.glyphicon-bookmark:before {\n  content: \"\\E044\";\n}\n.glyphicon-print:before {\n  content: \"\\E045\";\n}\n.glyphicon-camera:before {\n  content: \"\\E046\";\n}\n.glyphicon-font:before {\n  content: \"\\E047\";\n}\n.glyphicon-bold:before {\n  content: \"\\E048\";\n}\n.glyphicon-italic:before {\n  content: \"\\E049\";\n}\n.glyphicon-text-height:before {\n  content: \"\\E050\";\n}\n.glyphicon-text-width:before {\n  content: \"\\E051\";\n}\n.glyphicon-align-left:before {\n  content: \"\\E052\";\n}\n.glyphicon-align-center:before {\n  content: \"\\E053\";\n}\n.glyphicon-align-right:before {\n  content: \"\\E054\";\n}\n.glyphicon-align-justify:before {\n  content: \"\\E055\";\n}\n.glyphicon-list:before {\n  content: \"\\E056\";\n}\n.glyphicon-indent-left:before {\n  content: \"\\E057\";\n}\n.glyphicon-indent-right:before {\n  content: \"\\E058\";\n}\n.glyphicon-facetime-video:before {\n  content: \"\\E059\";\n}\n.glyphicon-picture:before {\n  content: \"\\E060\";\n}\n.glyphicon-map-marker:before {\n  content: \"\\E062\";\n}\n.glyphicon-adjust:before {\n  content: \"\\E063\";\n}\n.glyphicon-tint:before {\n  content: \"\\E064\";\n}\n.glyphicon-edit:before {\n  content: \"\\E065\";\n}\n.glyphicon-share:before {\n  content: \"\\E066\";\n}\n.glyphicon-check:before {\n  content: \"\\E067\";\n}\n.glyphicon-move:before {\n  content: \"\\E068\";\n}\n.glyphicon-step-backward:before {\n  content: \"\\E069\";\n}\n.glyphicon-fast-backward:before {\n  content: \"\\E070\";\n}\n.glyphicon-backward:before {\n  content: \"\\E071\";\n}\n.glyphicon-play:before {\n  content: \"\\E072\";\n}\n.glyphicon-pause:before {\n  content: \"\\E073\";\n}\n.glyphicon-stop:before {\n  content: \"\\E074\";\n}\n.glyphicon-forward:before {\n  content: \"\\E075\";\n}\n.glyphicon-fast-forward:before {\n  content: \"\\E076\";\n}\n.glyphicon-step-forward:before {\n  content: \"\\E077\";\n}\n.glyphicon-eject:before {\n  content: \"\\E078\";\n}\n.glyphicon-chevron-left:before {\n  content: \"\\E079\";\n}\n.glyphicon-chevron-right:before {\n  content: \"\\E080\";\n}\n.glyphicon-plus-sign:before {\n  content: \"\\E081\";\n}\n.glyphicon-minus-sign:before {\n  content: \"\\E082\";\n}\n.glyphicon-remove-sign:before {\n  content: \"\\E083\";\n}\n.glyphicon-ok-sign:before {\n  content: \"\\E084\";\n}\n.glyphicon-question-sign:before {\n  content: \"\\E085\";\n}\n.glyphicon-info-sign:before {\n  content: \"\\E086\";\n}\n.glyphicon-screenshot:before {\n  content: \"\\E087\";\n}\n.glyphicon-remove-circle:before {\n  content: \"\\E088\";\n}\n.glyphicon-ok-circle:before {\n  content: \"\\E089\";\n}\n.glyphicon-ban-circle:before {\n  content: \"\\E090\";\n}\n.glyphicon-arrow-left:before {\n  content: \"\\E091\";\n}\n.glyphicon-arrow-right:before {\n  content: \"\\E092\";\n}\n.glyphicon-arrow-up:before {\n  content: \"\\E093\";\n}\n.glyphicon-arrow-down:before {\n  content: \"\\E094\";\n}\n.glyphicon-share-alt:before {\n  content: \"\\E095\";\n}\n.glyphicon-resize-full:before {\n  content: \"\\E096\";\n}\n.glyphicon-resize-small:before {\n  content: \"\\E097\";\n}\n.glyphicon-exclamation-sign:before {\n  content: \"\\E101\";\n}\n.glyphicon-gift:before {\n  content: \"\\E102\";\n}\n.glyphicon-leaf:before {\n  content: \"\\E103\";\n}\n.glyphicon-fire:before {\n  content: \"\\E104\";\n}\n.glyphicon-eye-open:before {\n  content: \"\\E105\";\n}\n.glyphicon-eye-close:before {\n  content: \"\\E106\";\n}\n.glyphicon-warning-sign:before {\n  content: \"\\E107\";\n}\n.glyphicon-plane:before {\n  content: \"\\E108\";\n}\n.glyphicon-calendar:before {\n  content: \"\\E109\";\n}\n.glyphicon-random:before {\n  content: \"\\E110\";\n}\n.glyphicon-comment:before {\n  content: \"\\E111\";\n}\n.glyphicon-magnet:before {\n  content: \"\\E112\";\n}\n.glyphicon-chevron-up:before {\n  content: \"\\E113\";\n}\n.glyphicon-chevron-down:before {\n  content: \"\\E114\";\n}\n.glyphicon-retweet:before {\n  content: \"\\E115\";\n}\n.glyphicon-shopping-cart:before {\n  content: \"\\E116\";\n}\n.glyphicon-folder-close:before {\n  content: \"\\E117\";\n}\n.glyphicon-folder-open:before {\n  content: \"\\E118\";\n}\n.glyphicon-resize-vertical:before {\n  content: \"\\E119\";\n}\n.glyphicon-resize-horizontal:before {\n  content: \"\\E120\";\n}\n.glyphicon-hdd:before {\n  content: \"\\E121\";\n}\n.glyphicon-bullhorn:before {\n  content: \"\\E122\";\n}\n.glyphicon-bell:before {\n  content: \"\\E123\";\n}\n.glyphicon-certificate:before {\n  content: \"\\E124\";\n}\n.glyphicon-thumbs-up:before {\n  content: \"\\E125\";\n}\n.glyphicon-thumbs-down:before {\n  content: \"\\E126\";\n}\n.glyphicon-hand-right:before {\n  content: \"\\E127\";\n}\n.glyphicon-hand-left:before {\n  content: \"\\E128\";\n}\n.glyphicon-hand-up:before {\n  content: \"\\E129\";\n}\n.glyphicon-hand-down:before {\n  content: \"\\E130\";\n}\n.glyphicon-circle-arrow-right:before {\n  content: \"\\E131\";\n}\n.glyphicon-circle-arrow-left:before {\n  content: \"\\E132\";\n}\n.glyphicon-circle-arrow-up:before {\n  content: \"\\E133\";\n}\n.glyphicon-circle-arrow-down:before {\n  content: \"\\E134\";\n}\n.glyphicon-globe:before {\n  content: \"\\E135\";\n}\n.glyphicon-wrench:before {\n  content: \"\\E136\";\n}\n.glyphicon-tasks:before {\n  content: \"\\E137\";\n}\n.glyphicon-filter:before {\n  content: \"\\E138\";\n}\n.glyphicon-briefcase:before {\n  content: \"\\E139\";\n}\n.glyphicon-fullscreen:before {\n  content: \"\\E140\";\n}\n.glyphicon-dashboard:before {\n  content: \"\\E141\";\n}\n.glyphicon-paperclip:before {\n  content: \"\\E142\";\n}\n.glyphicon-heart-empty:before {\n  content: \"\\E143\";\n}\n.glyphicon-link:before {\n  content: \"\\E144\";\n}\n.glyphicon-phone:before {\n  content: \"\\E145\";\n}\n.glyphicon-pushpin:before {\n  content: \"\\E146\";\n}\n.glyphicon-usd:before {\n  content: \"\\E148\";\n}\n.glyphicon-gbp:before {\n  content: \"\\E149\";\n}\n.glyphicon-sort:before {\n  content: \"\\E150\";\n}\n.glyphicon-sort-by-alphabet:before {\n  content: \"\\E151\";\n}\n.glyphicon-sort-by-alphabet-alt:before {\n  content: \"\\E152\";\n}\n.glyphicon-sort-by-order:before {\n  content: \"\\E153\";\n}\n.glyphicon-sort-by-order-alt:before {\n  content: \"\\E154\";\n}\n.glyphicon-sort-by-attributes:before {\n  content: \"\\E155\";\n}\n.glyphicon-sort-by-attributes-alt:before {\n  content: \"\\E156\";\n}\n.glyphicon-unchecked:before {\n  content: \"\\E157\";\n}\n.glyphicon-expand:before {\n  content: \"\\E158\";\n}\n.glyphicon-collapse-down:before {\n  content: \"\\E159\";\n}\n.glyphicon-collapse-up:before {\n  content: \"\\E160\";\n}\n.glyphicon-log-in:before {\n  content: \"\\E161\";\n}\n.glyphicon-flash:before {\n  content: \"\\E162\";\n}\n.glyphicon-log-out:before {\n  content: \"\\E163\";\n}\n.glyphicon-new-window:before {\n  content: \"\\E164\";\n}\n.glyphicon-record:before {\n  content: \"\\E165\";\n}\n.glyphicon-save:before {\n  content: \"\\E166\";\n}\n.glyphicon-open:before {\n  content: \"\\E167\";\n}\n.glyphicon-saved:before {\n  content: \"\\E168\";\n}\n.glyphicon-import:before {\n  content: \"\\E169\";\n}\n.glyphicon-export:before {\n  content: \"\\E170\";\n}\n.glyphicon-send:before {\n  content: \"\\E171\";\n}\n.glyphicon-floppy-disk:before {\n  content: \"\\E172\";\n}\n.glyphicon-floppy-saved:before {\n  content: \"\\E173\";\n}\n.glyphicon-floppy-remove:before {\n  content: \"\\E174\";\n}\n.glyphicon-floppy-save:before {\n  content: \"\\E175\";\n}\n.glyphicon-floppy-open:before {\n  content: \"\\E176\";\n}\n.glyphicon-credit-card:before {\n  content: \"\\E177\";\n}\n.glyphicon-transfer:before {\n  content: \"\\E178\";\n}\n.glyphicon-cutlery:before {\n  content: \"\\E179\";\n}\n.glyphicon-header:before {\n  content: \"\\E180\";\n}\n.glyphicon-compressed:before {\n  content: \"\\E181\";\n}\n.glyphicon-earphone:before {\n  content: \"\\E182\";\n}\n.glyphicon-phone-alt:before {\n  content: \"\\E183\";\n}\n.glyphicon-tower:before {\n  content: \"\\E184\";\n}\n.glyphicon-stats:before {\n  content: \"\\E185\";\n}\n.glyphicon-sd-video:before {\n  content: \"\\E186\";\n}\n.glyphicon-hd-video:before {\n  content: \"\\E187\";\n}\n.glyphicon-subtitles:before {\n  content: \"\\E188\";\n}\n.glyphicon-sound-stereo:before {\n  content: \"\\E189\";\n}\n.glyphicon-sound-dolby:before {\n  content: \"\\E190\";\n}\n.glyphicon-sound-5-1:before {\n  content: \"\\E191\";\n}\n.glyphicon-sound-6-1:before {\n  content: \"\\E192\";\n}\n.glyphicon-sound-7-1:before {\n  content: \"\\E193\";\n}\n.glyphicon-copyright-mark:before {\n  content: \"\\E194\";\n}\n.glyphicon-registration-mark:before {\n  content: \"\\E195\";\n}\n.glyphicon-cloud-download:before {\n  content: \"\\E197\";\n}\n.glyphicon-cloud-upload:before {\n  content: \"\\E198\";\n}\n.glyphicon-tree-conifer:before {\n  content: \"\\E199\";\n}\n.glyphicon-tree-deciduous:before {\n  content: \"\\E200\";\n}\n.glyphicon-cd:before {\n  content: \"\\E201\";\n}\n.glyphicon-save-file:before {\n  content: \"\\E202\";\n}\n.glyphicon-open-file:before {\n  content: \"\\E203\";\n}\n.glyphicon-level-up:before {\n  content: \"\\E204\";\n}\n.glyphicon-copy:before {\n  content: \"\\E205\";\n}\n.glyphicon-paste:before {\n  content: \"\\E206\";\n}\n.glyphicon-alert:before {\n  content: \"\\E209\";\n}\n.glyphicon-equalizer:before {\n  content: \"\\E210\";\n}\n.glyphicon-king:before {\n  content: \"\\E211\";\n}\n.glyphicon-queen:before {\n  content: \"\\E212\";\n}\n.glyphicon-pawn:before {\n  content: \"\\E213\";\n}\n.glyphicon-bishop:before {\n  content: \"\\E214\";\n}\n.glyphicon-knight:before {\n  content: \"\\E215\";\n}\n.glyphicon-baby-formula:before {\n  content: \"\\E216\";\n}\n.glyphicon-tent:before {\n  content: \"\\26FA\";\n}\n.glyphicon-blackboard:before {\n  content: \"\\E218\";\n}\n.glyphicon-bed:before {\n  content: \"\\E219\";\n}\n.glyphicon-apple:before {\n  content: \"\\F8FF\";\n}\n.glyphicon-erase:before {\n  content: \"\\E221\";\n}\n.glyphicon-hourglass:before {\n  content: \"\\231B\";\n}\n.glyphicon-lamp:before {\n  content: \"\\E223\";\n}\n.glyphicon-duplicate:before {\n  content: \"\\E224\";\n}\n.glyphicon-piggy-bank:before {\n  content: \"\\E225\";\n}\n.glyphicon-scissors:before {\n  content: \"\\E226\";\n}\n.glyphicon-bitcoin:before {\n  content: \"\\E227\";\n}\n.glyphicon-btc:before {\n  content: \"\\E227\";\n}\n.glyphicon-xbt:before {\n  content: \"\\E227\";\n}\n.glyphicon-yen:before {\n  content: \"\\A5\";\n}\n.glyphicon-jpy:before {\n  content: \"\\A5\";\n}\n.glyphicon-ruble:before {\n  content: \"\\20BD\";\n}\n.glyphicon-rub:before {\n  content: \"\\20BD\";\n}\n.glyphicon-scale:before {\n  content: \"\\E230\";\n}\n.glyphicon-ice-lolly:before {\n  content: \"\\E231\";\n}\n.glyphicon-ice-lolly-tasted:before {\n  content: \"\\E232\";\n}\n.glyphicon-education:before {\n  content: \"\\E233\";\n}\n.glyphicon-option-horizontal:before {\n  content: \"\\E234\";\n}\n.glyphicon-option-vertical:before {\n  content: \"\\E235\";\n}\n.glyphicon-menu-hamburger:before {\n  content: \"\\E236\";\n}\n.glyphicon-modal-window:before {\n  content: \"\\E237\";\n}\n.glyphicon-oil:before {\n  content: \"\\E238\";\n}\n.glyphicon-grain:before {\n  content: \"\\E239\";\n}\n.glyphicon-sunglasses:before {\n  content: \"\\E240\";\n}\n.glyphicon-text-size:before {\n  content: \"\\E241\";\n}\n.glyphicon-text-color:before {\n  content: \"\\E242\";\n}\n.glyphicon-text-background:before {\n  content: \"\\E243\";\n}\n.glyphicon-object-align-top:before {\n  content: \"\\E244\";\n}\n.glyphicon-object-align-bottom:before {\n  content: \"\\E245\";\n}\n.glyphicon-object-align-horizontal:before {\n  content: \"\\E246\";\n}\n.glyphicon-object-align-left:before {\n  content: \"\\E247\";\n}\n.glyphicon-object-align-vertical:before {\n  content: \"\\E248\";\n}\n.glyphicon-object-align-right:before {\n  content: \"\\E249\";\n}\n.glyphicon-triangle-right:before {\n  content: \"\\E250\";\n}\n.glyphicon-triangle-left:before {\n  content: \"\\E251\";\n}\n.glyphicon-triangle-bottom:before {\n  content: \"\\E252\";\n}\n.glyphicon-triangle-top:before {\n  content: \"\\E253\";\n}\n.glyphicon-console:before {\n  content: \"\\E254\";\n}\n.glyphicon-superscript:before {\n  content: \"\\E255\";\n}\n.glyphicon-subscript:before {\n  content: \"\\E256\";\n}\n.glyphicon-menu-left:before {\n  content: \"\\E257\";\n}\n.glyphicon-menu-right:before {\n  content: \"\\E258\";\n}\n.glyphicon-menu-down:before {\n  content: \"\\E259\";\n}\n.glyphicon-menu-up:before {\n  content: \"\\E260\";\n}\n* {\n  -webkit-box-sizing: border-box;\n     -moz-box-sizing: border-box;\n          box-sizing: border-box;\n}\n*:before,\n*:after {\n  -webkit-box-sizing: border-box;\n     -moz-box-sizing: border-box;\n          box-sizing: border-box;\n}\nhtml {\n  font-size: 10px;\n\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\nbody {\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 1.42857143;\n  color: #333;\n  background-color: #fff;\n}\ninput,\nbutton,\nselect,\ntextarea {\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\na {\n  color: #337ab7;\n  text-decoration: none;\n}\na:hover,\na:focus {\n  color: #23527c;\n  text-decoration: underline;\n}\na:focus {\n  outline: thin dotted;\n  outline: 5px auto -webkit-focus-ring-color;\n  outline-offset: -2px;\n}\nfigure {\n  margin: 0;\n}\nimg {\n  vertical-align: middle;\n}\n.img-responsive,\n.thumbnail > img,\n.thumbnail a > img,\n.carousel-inner > .item > img,\n.carousel-inner > .item > a > img {\n  display: block;\n  max-width: 100%;\n  height: auto;\n}\n.img-rounded {\n  border-radius: 6px;\n}\n.img-thumbnail {\n  display: inline-block;\n  max-width: 100%;\n  height: auto;\n  padding: 4px;\n  line-height: 1.42857143;\n  background-color: #fff;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  -webkit-transition: all .2s ease-in-out;\n       -o-transition: all .2s ease-in-out;\n          transition: all .2s ease-in-out;\n}\n.img-circle {\n  border-radius: 50%;\n}\nhr {\n  margin-top: 20px;\n  margin-bottom: 20px;\n  border: 0;\n  border-top: 1px solid #eee;\n}\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  border: 0;\n}\n.sr-only-focusable:active,\n.sr-only-focusable:focus {\n  position: static;\n  width: auto;\n  height: auto;\n  margin: 0;\n  overflow: visible;\n  clip: auto;\n}\n[role=\"button\"] {\n  cursor: pointer;\n}\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\n.h1,\n.h2,\n.h3,\n.h4,\n.h5,\n.h6 {\n  font-family: inherit;\n  font-weight: 500;\n  line-height: 1.1;\n  color: inherit;\n}\nh1 small,\nh2 small,\nh3 small,\nh4 small,\nh5 small,\nh6 small,\n.h1 small,\n.h2 small,\n.h3 small,\n.h4 small,\n.h5 small,\n.h6 small,\nh1 .small,\nh2 .small,\nh3 .small,\nh4 .small,\nh5 .small,\nh6 .small,\n.h1 .small,\n.h2 .small,\n.h3 .small,\n.h4 .small,\n.h5 .small,\n.h6 .small {\n  font-weight: normal;\n  line-height: 1;\n  color: #777;\n}\nh1,\n.h1,\nh2,\n.h2,\nh3,\n.h3 {\n  margin-top: 20px;\n  margin-bottom: 10px;\n}\nh1 small,\n.h1 small,\nh2 small,\n.h2 small,\nh3 small,\n.h3 small,\nh1 .small,\n.h1 .small,\nh2 .small,\n.h2 .small,\nh3 .small,\n.h3 .small {\n  font-size: 65%;\n}\nh4,\n.h4,\nh5,\n.h5,\nh6,\n.h6 {\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\nh4 small,\n.h4 small,\nh5 small,\n.h5 small,\nh6 small,\n.h6 small,\nh4 .small,\n.h4 .small,\nh5 .small,\n.h5 .small,\nh6 .small,\n.h6 .small {\n  font-size: 75%;\n}\nh1,\n.h1 {\n  font-size: 36px;\n}\nh2,\n.h2 {\n  font-size: 30px;\n}\nh3,\n.h3 {\n  font-size: 24px;\n}\nh4,\n.h4 {\n  font-size: 18px;\n}\nh5,\n.h5 {\n  font-size: 14px;\n}\nh6,\n.h6 {\n  font-size: 12px;\n}\np {\n  margin: 0 0 10px;\n}\n.lead {\n  margin-bottom: 20px;\n  font-size: 16px;\n  font-weight: 300;\n  line-height: 1.4;\n}\n@media (min-width: 768px) {\n  .lead {\n    font-size: 21px;\n  }\n}\nsmall,\n.small {\n  font-size: 85%;\n}\nmark,\n.mark {\n  padding: .2em;\n  background-color: #fcf8e3;\n}\n.text-left {\n  text-align: left;\n}\n.text-right {\n  text-align: right;\n}\n.text-center {\n  text-align: center;\n}\n.text-justify {\n  text-align: justify;\n}\n.text-nowrap {\n  white-space: nowrap;\n}\n.text-lowercase {\n  text-transform: lowercase;\n}\n.text-uppercase {\n  text-transform: uppercase;\n}\n.text-capitalize {\n  text-transform: capitalize;\n}\n.text-muted {\n  color: #777;\n}\n.text-primary {\n  color: #337ab7;\n}\na.text-primary:hover,\na.text-primary:focus {\n  color: #286090;\n}\n.text-success {\n  color: #3c763d;\n}\na.text-success:hover,\na.text-success:focus {\n  color: #2b542c;\n}\n.text-info {\n  color: #31708f;\n}\na.text-info:hover,\na.text-info:focus {\n  color: #245269;\n}\n.text-warning {\n  color: #8a6d3b;\n}\na.text-warning:hover,\na.text-warning:focus {\n  color: #66512c;\n}\n.text-danger {\n  color: #a94442;\n}\na.text-danger:hover,\na.text-danger:focus {\n  color: #843534;\n}\n.bg-primary {\n  color: #fff;\n  background-color: #337ab7;\n}\na.bg-primary:hover,\na.bg-primary:focus {\n  background-color: #286090;\n}\n.bg-success {\n  background-color: #dff0d8;\n}\na.bg-success:hover,\na.bg-success:focus {\n  background-color: #c1e2b3;\n}\n.bg-info {\n  background-color: #d9edf7;\n}\na.bg-info:hover,\na.bg-info:focus {\n  background-color: #afd9ee;\n}\n.bg-warning {\n  background-color: #fcf8e3;\n}\na.bg-warning:hover,\na.bg-warning:focus {\n  background-color: #f7ecb5;\n}\n.bg-danger {\n  background-color: #f2dede;\n}\na.bg-danger:hover,\na.bg-danger:focus {\n  background-color: #e4b9b9;\n}\n.page-header {\n  padding-bottom: 9px;\n  margin: 40px 0 20px;\n  border-bottom: 1px solid #eee;\n}\nul,\nol {\n  margin-top: 0;\n  margin-bottom: 10px;\n}\nul ul,\nol ul,\nul ol,\nol ol {\n  margin-bottom: 0;\n}\n.list-unstyled {\n  padding-left: 0;\n  list-style: none;\n}\n.list-inline {\n  padding-left: 0;\n  margin-left: -5px;\n  list-style: none;\n}\n.list-inline > li {\n  display: inline-block;\n  padding-right: 5px;\n  padding-left: 5px;\n}\ndl {\n  margin-top: 0;\n  margin-bottom: 20px;\n}\ndt,\ndd {\n  line-height: 1.42857143;\n}\ndt {\n  font-weight: bold;\n}\ndd {\n  margin-left: 0;\n}\n@media (min-width: 768px) {\n  .dl-horizontal dt {\n    float: left;\n    width: 160px;\n    overflow: hidden;\n    clear: left;\n    text-align: right;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n  .dl-horizontal dd {\n    margin-left: 180px;\n  }\n}\nabbr[title],\nabbr[data-original-title] {\n  cursor: help;\n  border-bottom: 1px dotted #777;\n}\n.initialism {\n  font-size: 90%;\n  text-transform: uppercase;\n}\nblockquote {\n  padding: 10px 20px;\n  margin: 0 0 20px;\n  font-size: 17.5px;\n  border-left: 5px solid #eee;\n}\nblockquote p:last-child,\nblockquote ul:last-child,\nblockquote ol:last-child {\n  margin-bottom: 0;\n}\nblockquote footer,\nblockquote small,\nblockquote .small {\n  display: block;\n  font-size: 80%;\n  line-height: 1.42857143;\n  color: #777;\n}\nblockquote footer:before,\nblockquote small:before,\nblockquote .small:before {\n  content: '\\2014   \\A0';\n}\n.blockquote-reverse,\nblockquote.pull-right {\n  padding-right: 15px;\n  padding-left: 0;\n  text-align: right;\n  border-right: 5px solid #eee;\n  border-left: 0;\n}\n.blockquote-reverse footer:before,\nblockquote.pull-right footer:before,\n.blockquote-reverse small:before,\nblockquote.pull-right small:before,\n.blockquote-reverse .small:before,\nblockquote.pull-right .small:before {\n  content: '';\n}\n.blockquote-reverse footer:after,\nblockquote.pull-right footer:after,\n.blockquote-reverse small:after,\nblockquote.pull-right small:after,\n.blockquote-reverse .small:after,\nblockquote.pull-right .small:after {\n  content: '\\A0   \\2014';\n}\naddress {\n  margin-bottom: 20px;\n  font-style: normal;\n  line-height: 1.42857143;\n}\ncode,\nkbd,\npre,\nsamp {\n  font-family: Menlo, Monaco, Consolas, \"Courier New\", monospace;\n}\ncode {\n  padding: 2px 4px;\n  font-size: 90%;\n  color: #c7254e;\n  background-color: #f9f2f4;\n  border-radius: 4px;\n}\nkbd {\n  padding: 2px 4px;\n  font-size: 90%;\n  color: #fff;\n  background-color: #333;\n  border-radius: 3px;\n  -webkit-box-shadow: inset 0 -1px 0 rgba(0, 0, 0, .25);\n          box-shadow: inset 0 -1px 0 rgba(0, 0, 0, .25);\n}\nkbd kbd {\n  padding: 0;\n  font-size: 100%;\n  font-weight: bold;\n  -webkit-box-shadow: none;\n          box-shadow: none;\n}\npre {\n  display: block;\n  padding: 9.5px;\n  margin: 0 0 10px;\n  font-size: 13px;\n  line-height: 1.42857143;\n  color: #333;\n  word-break: break-all;\n  word-wrap: break-word;\n  background-color: #f5f5f5;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\npre code {\n  padding: 0;\n  font-size: inherit;\n  color: inherit;\n  white-space: pre-wrap;\n  background-color: transparent;\n  border-radius: 0;\n}\n.pre-scrollable {\n  max-height: 340px;\n  overflow-y: scroll;\n}\n.container {\n  padding-right: 15px;\n  padding-left: 15px;\n  margin-right: auto;\n  margin-left: auto;\n}\n@media (min-width: 768px) {\n  .container {\n    width: 750px;\n  }\n}\n@media (min-width: 992px) {\n  .container {\n    width: 970px;\n  }\n}\n@media (min-width: 1200px) {\n  .container {\n    width: 1170px;\n  }\n}\n.container-fluid {\n  padding-right: 15px;\n  padding-left: 15px;\n  margin-right: auto;\n  margin-left: auto;\n}\n.row {\n  margin-right: -15px;\n  margin-left: -15px;\n}\n.col-xs-1, .col-sm-1, .col-md-1, .col-lg-1, .col-xs-2, .col-sm-2, .col-md-2, .col-lg-2, .col-xs-3, .col-sm-3, .col-md-3, .col-lg-3, .col-xs-4, .col-sm-4, .col-md-4, .col-lg-4, .col-xs-5, .col-sm-5, .col-md-5, .col-lg-5, .col-xs-6, .col-sm-6, .col-md-6, .col-lg-6, .col-xs-7, .col-sm-7, .col-md-7, .col-lg-7, .col-xs-8, .col-sm-8, .col-md-8, .col-lg-8, .col-xs-9, .col-sm-9, .col-md-9, .col-lg-9, .col-xs-10, .col-sm-10, .col-md-10, .col-lg-10, .col-xs-11, .col-sm-11, .col-md-11, .col-lg-11, .col-xs-12, .col-sm-12, .col-md-12, .col-lg-12 {\n  position: relative;\n  min-height: 1px;\n  padding-right: 15px;\n  padding-left: 15px;\n}\n.col-xs-1, .col-xs-2, .col-xs-3, .col-xs-4, .col-xs-5, .col-xs-6, .col-xs-7, .col-xs-8, .col-xs-9, .col-xs-10, .col-xs-11, .col-xs-12 {\n  float: left;\n}\n.col-xs-12 {\n  width: 100%;\n}\n.col-xs-11 {\n  width: 91.66666667%;\n}\n.col-xs-10 {\n  width: 83.33333333%;\n}\n.col-xs-9 {\n  width: 75%;\n}\n.col-xs-8 {\n  width: 66.66666667%;\n}\n.col-xs-7 {\n  width: 58.33333333%;\n}\n.col-xs-6 {\n  width: 50%;\n}\n.col-xs-5 {\n  width: 41.66666667%;\n}\n.col-xs-4 {\n  width: 33.33333333%;\n}\n.col-xs-3 {\n  width: 25%;\n}\n.col-xs-2 {\n  width: 16.66666667%;\n}\n.col-xs-1 {\n  width: 8.33333333%;\n}\n.col-xs-pull-12 {\n  right: 100%;\n}\n.col-xs-pull-11 {\n  right: 91.66666667%;\n}\n.col-xs-pull-10 {\n  right: 83.33333333%;\n}\n.col-xs-pull-9 {\n  right: 75%;\n}\n.col-xs-pull-8 {\n  right: 66.66666667%;\n}\n.col-xs-pull-7 {\n  right: 58.33333333%;\n}\n.col-xs-pull-6 {\n  right: 50%;\n}\n.col-xs-pull-5 {\n  right: 41.66666667%;\n}\n.col-xs-pull-4 {\n  right: 33.33333333%;\n}\n.col-xs-pull-3 {\n  right: 25%;\n}\n.col-xs-pull-2 {\n  right: 16.66666667%;\n}\n.col-xs-pull-1 {\n  right: 8.33333333%;\n}\n.col-xs-pull-0 {\n  right: auto;\n}\n.col-xs-push-12 {\n  left: 100%;\n}\n.col-xs-push-11 {\n  left: 91.66666667%;\n}\n.col-xs-push-10 {\n  left: 83.33333333%;\n}\n.col-xs-push-9 {\n  left: 75%;\n}\n.col-xs-push-8 {\n  left: 66.66666667%;\n}\n.col-xs-push-7 {\n  left: 58.33333333%;\n}\n.col-xs-push-6 {\n  left: 50%;\n}\n.col-xs-push-5 {\n  left: 41.66666667%;\n}\n.col-xs-push-4 {\n  left: 33.33333333%;\n}\n.col-xs-push-3 {\n  left: 25%;\n}\n.col-xs-push-2 {\n  left: 16.66666667%;\n}\n.col-xs-push-1 {\n  left: 8.33333333%;\n}\n.col-xs-push-0 {\n  left: auto;\n}\n.col-xs-offset-12 {\n  margin-left: 100%;\n}\n.col-xs-offset-11 {\n  margin-left: 91.66666667%;\n}\n.col-xs-offset-10 {\n  margin-left: 83.33333333%;\n}\n.col-xs-offset-9 {\n  margin-left: 75%;\n}\n.col-xs-offset-8 {\n  margin-left: 66.66666667%;\n}\n.col-xs-offset-7 {\n  margin-left: 58.33333333%;\n}\n.col-xs-offset-6 {\n  margin-left: 50%;\n}\n.col-xs-offset-5 {\n  margin-left: 41.66666667%;\n}\n.col-xs-offset-4 {\n  margin-left: 33.33333333%;\n}\n.col-xs-offset-3 {\n  margin-left: 25%;\n}\n.col-xs-offset-2 {\n  margin-left: 16.66666667%;\n}\n.col-xs-offset-1 {\n  margin-left: 8.33333333%;\n}\n.col-xs-offset-0 {\n  margin-left: 0;\n}\n@media (min-width: 768px) {\n  .col-sm-1, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-sm-10, .col-sm-11, .col-sm-12 {\n    float: left;\n  }\n  .col-sm-12 {\n    width: 100%;\n  }\n  .col-sm-11 {\n    width: 91.66666667%;\n  }\n  .col-sm-10 {\n    width: 83.33333333%;\n  }\n  .col-sm-9 {\n    width: 75%;\n  }\n  .col-sm-8 {\n    width: 66.66666667%;\n  }\n  .col-sm-7 {\n    width: 58.33333333%;\n  }\n  .col-sm-6 {\n    width: 50%;\n  }\n  .col-sm-5 {\n    width: 41.66666667%;\n  }\n  .col-sm-4 {\n    width: 33.33333333%;\n  }\n  .col-sm-3 {\n    width: 25%;\n  }\n  .col-sm-2 {\n    width: 16.66666667%;\n  }\n  .col-sm-1 {\n    width: 8.33333333%;\n  }\n  .col-sm-pull-12 {\n    right: 100%;\n  }\n  .col-sm-pull-11 {\n    right: 91.66666667%;\n  }\n  .col-sm-pull-10 {\n    right: 83.33333333%;\n  }\n  .col-sm-pull-9 {\n    right: 75%;\n  }\n  .col-sm-pull-8 {\n    right: 66.66666667%;\n  }\n  .col-sm-pull-7 {\n    right: 58.33333333%;\n  }\n  .col-sm-pull-6 {\n    right: 50%;\n  }\n  .col-sm-pull-5 {\n    right: 41.66666667%;\n  }\n  .col-sm-pull-4 {\n    right: 33.33333333%;\n  }\n  .col-sm-pull-3 {\n    right: 25%;\n  }\n  .col-sm-pull-2 {\n    right: 16.66666667%;\n  }\n  .col-sm-pull-1 {\n    right: 8.33333333%;\n  }\n  .col-sm-pull-0 {\n    right: auto;\n  }\n  .col-sm-push-12 {\n    left: 100%;\n  }\n  .col-sm-push-11 {\n    left: 91.66666667%;\n  }\n  .col-sm-push-10 {\n    left: 83.33333333%;\n  }\n  .col-sm-push-9 {\n    left: 75%;\n  }\n  .col-sm-push-8 {\n    left: 66.66666667%;\n  }\n  .col-sm-push-7 {\n    left: 58.33333333%;\n  }\n  .col-sm-push-6 {\n    left: 50%;\n  }\n  .col-sm-push-5 {\n    left: 41.66666667%;\n  }\n  .col-sm-push-4 {\n    left: 33.33333333%;\n  }\n  .col-sm-push-3 {\n    left: 25%;\n  }\n  .col-sm-push-2 {\n    left: 16.66666667%;\n  }\n  .col-sm-push-1 {\n    left: 8.33333333%;\n  }\n  .col-sm-push-0 {\n    left: auto;\n  }\n  .col-sm-offset-12 {\n    margin-left: 100%;\n  }\n  .col-sm-offset-11 {\n    margin-left: 91.66666667%;\n  }\n  .col-sm-offset-10 {\n    margin-left: 83.33333333%;\n  }\n  .col-sm-offset-9 {\n    margin-left: 75%;\n  }\n  .col-sm-offset-8 {\n    margin-left: 66.66666667%;\n  }\n  .col-sm-offset-7 {\n    margin-left: 58.33333333%;\n  }\n  .col-sm-offset-6 {\n    margin-left: 50%;\n  }\n  .col-sm-offset-5 {\n    margin-left: 41.66666667%;\n  }\n  .col-sm-offset-4 {\n    margin-left: 33.33333333%;\n  }\n  .col-sm-offset-3 {\n    margin-left: 25%;\n  }\n  .col-sm-offset-2 {\n    margin-left: 16.66666667%;\n  }\n  .col-sm-offset-1 {\n    margin-left: 8.33333333%;\n  }\n  .col-sm-offset-0 {\n    margin-left: 0;\n  }\n}\n@media (min-width: 992px) {\n  .col-md-1, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-md-10, .col-md-11, .col-md-12 {\n    float: left;\n  }\n  .col-md-12 {\n    width: 100%;\n  }\n  .col-md-11 {\n    width: 91.66666667%;\n  }\n  .col-md-10 {\n    width: 83.33333333%;\n  }\n  .col-md-9 {\n    width: 75%;\n  }\n  .col-md-8 {\n    width: 66.66666667%;\n  }\n  .col-md-7 {\n    width: 58.33333333%;\n  }\n  .col-md-6 {\n    width: 50%;\n  }\n  .col-md-5 {\n    width: 41.66666667%;\n  }\n  .col-md-4 {\n    width: 33.33333333%;\n  }\n  .col-md-3 {\n    width: 25%;\n  }\n  .col-md-2 {\n    width: 16.66666667%;\n  }\n  .col-md-1 {\n    width: 8.33333333%;\n  }\n  .col-md-pull-12 {\n    right: 100%;\n  }\n  .col-md-pull-11 {\n    right: 91.66666667%;\n  }\n  .col-md-pull-10 {\n    right: 83.33333333%;\n  }\n  .col-md-pull-9 {\n    right: 75%;\n  }\n  .col-md-pull-8 {\n    right: 66.66666667%;\n  }\n  .col-md-pull-7 {\n    right: 58.33333333%;\n  }\n  .col-md-pull-6 {\n    right: 50%;\n  }\n  .col-md-pull-5 {\n    right: 41.66666667%;\n  }\n  .col-md-pull-4 {\n    right: 33.33333333%;\n  }\n  .col-md-pull-3 {\n    right: 25%;\n  }\n  .col-md-pull-2 {\n    right: 16.66666667%;\n  }\n  .col-md-pull-1 {\n    right: 8.33333333%;\n  }\n  .col-md-pull-0 {\n    right: auto;\n  }\n  .col-md-push-12 {\n    left: 100%;\n  }\n  .col-md-push-11 {\n    left: 91.66666667%;\n  }\n  .col-md-push-10 {\n    left: 83.33333333%;\n  }\n  .col-md-push-9 {\n    left: 75%;\n  }\n  .col-md-push-8 {\n    left: 66.66666667%;\n  }\n  .col-md-push-7 {\n    left: 58.33333333%;\n  }\n  .col-md-push-6 {\n    left: 50%;\n  }\n  .col-md-push-5 {\n    left: 41.66666667%;\n  }\n  .col-md-push-4 {\n    left: 33.33333333%;\n  }\n  .col-md-push-3 {\n    left: 25%;\n  }\n  .col-md-push-2 {\n    left: 16.66666667%;\n  }\n  .col-md-push-1 {\n    left: 8.33333333%;\n  }\n  .col-md-push-0 {\n    left: auto;\n  }\n  .col-md-offset-12 {\n    margin-left: 100%;\n  }\n  .col-md-offset-11 {\n    margin-left: 91.66666667%;\n  }\n  .col-md-offset-10 {\n    margin-left: 83.33333333%;\n  }\n  .col-md-offset-9 {\n    margin-left: 75%;\n  }\n  .col-md-offset-8 {\n    margin-left: 66.66666667%;\n  }\n  .col-md-offset-7 {\n    margin-left: 58.33333333%;\n  }\n  .col-md-offset-6 {\n    margin-left: 50%;\n  }\n  .col-md-offset-5 {\n    margin-left: 41.66666667%;\n  }\n  .col-md-offset-4 {\n    margin-left: 33.33333333%;\n  }\n  .col-md-offset-3 {\n    margin-left: 25%;\n  }\n  .col-md-offset-2 {\n    margin-left: 16.66666667%;\n  }\n  .col-md-offset-1 {\n    margin-left: 8.33333333%;\n  }\n  .col-md-offset-0 {\n    margin-left: 0;\n  }\n}\n@media (min-width: 1200px) {\n  .col-lg-1, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-lg-10, .col-lg-11, .col-lg-12 {\n    float: left;\n  }\n  .col-lg-12 {\n    width: 100%;\n  }\n  .col-lg-11 {\n    width: 91.66666667%;\n  }\n  .col-lg-10 {\n    width: 83.33333333%;\n  }\n  .col-lg-9 {\n    width: 75%;\n  }\n  .col-lg-8 {\n    width: 66.66666667%;\n  }\n  .col-lg-7 {\n    width: 58.33333333%;\n  }\n  .col-lg-6 {\n    width: 50%;\n  }\n  .col-lg-5 {\n    width: 41.66666667%;\n  }\n  .col-lg-4 {\n    width: 33.33333333%;\n  }\n  .col-lg-3 {\n    width: 25%;\n  }\n  .col-lg-2 {\n    width: 16.66666667%;\n  }\n  .col-lg-1 {\n    width: 8.33333333%;\n  }\n  .col-lg-pull-12 {\n    right: 100%;\n  }\n  .col-lg-pull-11 {\n    right: 91.66666667%;\n  }\n  .col-lg-pull-10 {\n    right: 83.33333333%;\n  }\n  .col-lg-pull-9 {\n    right: 75%;\n  }\n  .col-lg-pull-8 {\n    right: 66.66666667%;\n  }\n  .col-lg-pull-7 {\n    right: 58.33333333%;\n  }\n  .col-lg-pull-6 {\n    right: 50%;\n  }\n  .col-lg-pull-5 {\n    right: 41.66666667%;\n  }\n  .col-lg-pull-4 {\n    right: 33.33333333%;\n  }\n  .col-lg-pull-3 {\n    right: 25%;\n  }\n  .col-lg-pull-2 {\n    right: 16.66666667%;\n  }\n  .col-lg-pull-1 {\n    right: 8.33333333%;\n  }\n  .col-lg-pull-0 {\n    right: auto;\n  }\n  .col-lg-push-12 {\n    left: 100%;\n  }\n  .col-lg-push-11 {\n    left: 91.66666667%;\n  }\n  .col-lg-push-10 {\n    left: 83.33333333%;\n  }\n  .col-lg-push-9 {\n    left: 75%;\n  }\n  .col-lg-push-8 {\n    left: 66.66666667%;\n  }\n  .col-lg-push-7 {\n    left: 58.33333333%;\n  }\n  .col-lg-push-6 {\n    left: 50%;\n  }\n  .col-lg-push-5 {\n    left: 41.66666667%;\n  }\n  .col-lg-push-4 {\n    left: 33.33333333%;\n  }\n  .col-lg-push-3 {\n    left: 25%;\n  }\n  .col-lg-push-2 {\n    left: 16.66666667%;\n  }\n  .col-lg-push-1 {\n    left: 8.33333333%;\n  }\n  .col-lg-push-0 {\n    left: auto;\n  }\n  .col-lg-offset-12 {\n    margin-left: 100%;\n  }\n  .col-lg-offset-11 {\n    margin-left: 91.66666667%;\n  }\n  .col-lg-offset-10 {\n    margin-left: 83.33333333%;\n  }\n  .col-lg-offset-9 {\n    margin-left: 75%;\n  }\n  .col-lg-offset-8 {\n    margin-left: 66.66666667%;\n  }\n  .col-lg-offset-7 {\n    margin-left: 58.33333333%;\n  }\n  .col-lg-offset-6 {\n    margin-left: 50%;\n  }\n  .col-lg-offset-5 {\n    margin-left: 41.66666667%;\n  }\n  .col-lg-offset-4 {\n    margin-left: 33.33333333%;\n  }\n  .col-lg-offset-3 {\n    margin-left: 25%;\n  }\n  .col-lg-offset-2 {\n    margin-left: 16.66666667%;\n  }\n  .col-lg-offset-1 {\n    margin-left: 8.33333333%;\n  }\n  .col-lg-offset-0 {\n    margin-left: 0;\n  }\n}\ntable {\n  background-color: transparent;\n}\ncaption {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  color: #777;\n  text-align: left;\n}\nth {\n  text-align: left;\n}\n.table {\n  width: 100%;\n  max-width: 100%;\n  margin-bottom: 20px;\n}\n.table > thead > tr > th,\n.table > tbody > tr > th,\n.table > tfoot > tr > th,\n.table > thead > tr > td,\n.table > tbody > tr > td,\n.table > tfoot > tr > td {\n  padding: 8px;\n  line-height: 1.42857143;\n  vertical-align: top;\n  border-top: 1px solid #ddd;\n}\n.table > thead > tr > th {\n  vertical-align: bottom;\n  border-bottom: 2px solid #ddd;\n}\n.table > caption + thead > tr:first-child > th,\n.table > colgroup + thead > tr:first-child > th,\n.table > thead:first-child > tr:first-child > th,\n.table > caption + thead > tr:first-child > td,\n.table > colgroup + thead > tr:first-child > td,\n.table > thead:first-child > tr:first-child > td {\n  border-top: 0;\n}\n.table > tbody + tbody {\n  border-top: 2px solid #ddd;\n}\n.table .table {\n  background-color: #fff;\n}\n.table-condensed > thead > tr > th,\n.table-condensed > tbody > tr > th,\n.table-condensed > tfoot > tr > th,\n.table-condensed > thead > tr > td,\n.table-condensed > tbody > tr > td,\n.table-condensed > tfoot > tr > td {\n  padding: 5px;\n}\n.table-bordered {\n  border: 1px solid #ddd;\n}\n.table-bordered > thead > tr > th,\n.table-bordered > tbody > tr > th,\n.table-bordered > tfoot > tr > th,\n.table-bordered > thead > tr > td,\n.table-bordered > tbody > tr > td,\n.table-bordered > tfoot > tr > td {\n  border: 1px solid #ddd;\n}\n.table-bordered > thead > tr > th,\n.table-bordered > thead > tr > td {\n  border-bottom-width: 2px;\n}\n.table-striped > tbody > tr:nth-of-type(odd) {\n  background-color: #f9f9f9;\n}\n.table-hover > tbody > tr:hover {\n  background-color: #f5f5f5;\n}\ntable col[class*=\"col-\"] {\n  position: static;\n  display: table-column;\n  float: none;\n}\ntable td[class*=\"col-\"],\ntable th[class*=\"col-\"] {\n  position: static;\n  display: table-cell;\n  float: none;\n}\n.table > thead > tr > td.active,\n.table > tbody > tr > td.active,\n.table > tfoot > tr > td.active,\n.table > thead > tr > th.active,\n.table > tbody > tr > th.active,\n.table > tfoot > tr > th.active,\n.table > thead > tr.active > td,\n.table > tbody > tr.active > td,\n.table > tfoot > tr.active > td,\n.table > thead > tr.active > th,\n.table > tbody > tr.active > th,\n.table > tfoot > tr.active > th {\n  background-color: #f5f5f5;\n}\n.table-hover > tbody > tr > td.active:hover,\n.table-hover > tbody > tr > th.active:hover,\n.table-hover > tbody > tr.active:hover > td,\n.table-hover > tbody > tr:hover > .active,\n.table-hover > tbody > tr.active:hover > th {\n  background-color: #e8e8e8;\n}\n.table > thead > tr > td.success,\n.table > tbody > tr > td.success,\n.table > tfoot > tr > td.success,\n.table > thead > tr > th.success,\n.table > tbody > tr > th.success,\n.table > tfoot > tr > th.success,\n.table > thead > tr.success > td,\n.table > tbody > tr.success > td,\n.table > tfoot > tr.success > td,\n.table > thead > tr.success > th,\n.table > tbody > tr.success > th,\n.table > tfoot > tr.success > th {\n  background-color: #dff0d8;\n}\n.table-hover > tbody > tr > td.success:hover,\n.table-hover > tbody > tr > th.success:hover,\n.table-hover > tbody > tr.success:hover > td,\n.table-hover > tbody > tr:hover > .success,\n.table-hover > tbody > tr.success:hover > th {\n  background-color: #d0e9c6;\n}\n.table > thead > tr > td.info,\n.table > tbody > tr > td.info,\n.table > tfoot > tr > td.info,\n.table > thead > tr > th.info,\n.table > tbody > tr > th.info,\n.table > tfoot > tr > th.info,\n.table > thead > tr.info > td,\n.table > tbody > tr.info > td,\n.table > tfoot > tr.info > td,\n.table > thead > tr.info > th,\n.table > tbody > tr.info > th,\n.table > tfoot > tr.info > th {\n  background-color: #d9edf7;\n}\n.table-hover > tbody > tr > td.info:hover,\n.table-hover > tbody > tr > th.info:hover,\n.table-hover > tbody > tr.info:hover > td,\n.table-hover > tbody > tr:hover > .info,\n.table-hover > tbody > tr.info:hover > th {\n  background-color: #c4e3f3;\n}\n.table > thead > tr > td.warning,\n.table > tbody > tr > td.warning,\n.table > tfoot > tr > td.warning,\n.table > thead > tr > th.warning,\n.table > tbody > tr > th.warning,\n.table > tfoot > tr > th.warning,\n.table > thead > tr.warning > td,\n.table > tbody > tr.warning > td,\n.table > tfoot > tr.warning > td,\n.table > thead > tr.warning > th,\n.table > tbody > tr.warning > th,\n.table > tfoot > tr.warning > th {\n  background-color: #fcf8e3;\n}\n.table-hover > tbody > tr > td.warning:hover,\n.table-hover > tbody > tr > th.warning:hover,\n.table-hover > tbody > tr.warning:hover > td,\n.table-hover > tbody > tr:hover > .warning,\n.table-hover > tbody > tr.warning:hover > th {\n  background-color: #faf2cc;\n}\n.table > thead > tr > td.danger,\n.table > tbody > tr > td.danger,\n.table > tfoot > tr > td.danger,\n.table > thead > tr > th.danger,\n.table > tbody > tr > th.danger,\n.table > tfoot > tr > th.danger,\n.table > thead > tr.danger > td,\n.table > tbody > tr.danger > td,\n.table > tfoot > tr.danger > td,\n.table > thead > tr.danger > th,\n.table > tbody > tr.danger > th,\n.table > tfoot > tr.danger > th {\n  background-color: #f2dede;\n}\n.table-hover > tbody > tr > td.danger:hover,\n.table-hover > tbody > tr > th.danger:hover,\n.table-hover > tbody > tr.danger:hover > td,\n.table-hover > tbody > tr:hover > .danger,\n.table-hover > tbody > tr.danger:hover > th {\n  background-color: #ebcccc;\n}\n.table-responsive {\n  min-height: .01%;\n  overflow-x: auto;\n}\n@media screen and (max-width: 767px) {\n  .table-responsive {\n    width: 100%;\n    margin-bottom: 15px;\n    overflow-y: hidden;\n    -ms-overflow-style: -ms-autohiding-scrollbar;\n    border: 1px solid #ddd;\n  }\n  .table-responsive > .table {\n    margin-bottom: 0;\n  }\n  .table-responsive > .table > thead > tr > th,\n  .table-responsive > .table > tbody > tr > th,\n  .table-responsive > .table > tfoot > tr > th,\n  .table-responsive > .table > thead > tr > td,\n  .table-responsive > .table > tbody > tr > td,\n  .table-responsive > .table > tfoot > tr > td {\n    white-space: nowrap;\n  }\n  .table-responsive > .table-bordered {\n    border: 0;\n  }\n  .table-responsive > .table-bordered > thead > tr > th:first-child,\n  .table-responsive > .table-bordered > tbody > tr > th:first-child,\n  .table-responsive > .table-bordered > tfoot > tr > th:first-child,\n  .table-responsive > .table-bordered > thead > tr > td:first-child,\n  .table-responsive > .table-bordered > tbody > tr > td:first-child,\n  .table-responsive > .table-bordered > tfoot > tr > td:first-child {\n    border-left: 0;\n  }\n  .table-responsive > .table-bordered > thead > tr > th:last-child,\n  .table-responsive > .table-bordered > tbody > tr > th:last-child,\n  .table-responsive > .table-bordered > tfoot > tr > th:last-child,\n  .table-responsive > .table-bordered > thead > tr > td:last-child,\n  .table-responsive > .table-bordered > tbody > tr > td:last-child,\n  .table-responsive > .table-bordered > tfoot > tr > td:last-child {\n    border-right: 0;\n  }\n  .table-responsive > .table-bordered > tbody > tr:last-child > th,\n  .table-responsive > .table-bordered > tfoot > tr:last-child > th,\n  .table-responsive > .table-bordered > tbody > tr:last-child > td,\n  .table-responsive > .table-bordered > tfoot > tr:last-child > td {\n    border-bottom: 0;\n  }\n}\nfieldset {\n  min-width: 0;\n  padding: 0;\n  margin: 0;\n  border: 0;\n}\nlegend {\n  display: block;\n  width: 100%;\n  padding: 0;\n  margin-bottom: 20px;\n  font-size: 21px;\n  line-height: inherit;\n  color: #333;\n  border: 0;\n  border-bottom: 1px solid #e5e5e5;\n}\nlabel {\n  display: inline-block;\n  max-width: 100%;\n  margin-bottom: 5px;\n  font-weight: bold;\n}\ninput[type=\"search\"] {\n  -webkit-box-sizing: border-box;\n     -moz-box-sizing: border-box;\n          box-sizing: border-box;\n}\ninput[type=\"radio\"],\ninput[type=\"checkbox\"] {\n  margin: 4px 0 0;\n  margin-top: 1px \\9;\n  line-height: normal;\n}\ninput[type=\"file\"] {\n  display: block;\n}\ninput[type=\"range\"] {\n  display: block;\n  width: 100%;\n}\nselect[multiple],\nselect[size] {\n  height: auto;\n}\ninput[type=\"file\"]:focus,\ninput[type=\"radio\"]:focus,\ninput[type=\"checkbox\"]:focus {\n  outline: thin dotted;\n  outline: 5px auto -webkit-focus-ring-color;\n  outline-offset: -2px;\n}\noutput {\n  display: block;\n  padding-top: 7px;\n  font-size: 14px;\n  line-height: 1.42857143;\n  color: #555;\n}\n.form-control {\n  display: block;\n  width: 100%;\n  height: 34px;\n  padding: 6px 12px;\n  font-size: 14px;\n  line-height: 1.42857143;\n  color: #555;\n  background-color: #fff;\n  background-image: none;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);\n          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);\n  -webkit-transition: border-color ease-in-out .15s, -webkit-box-shadow ease-in-out .15s;\n       -o-transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;\n          transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;\n}\n.form-control:focus {\n  border-color: #66afe9;\n  outline: 0;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px rgba(102, 175, 233, .6);\n          box-shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px rgba(102, 175, 233, .6);\n}\n.form-control::-moz-placeholder {\n  color: #999;\n  opacity: 1;\n}\n.form-control:-ms-input-placeholder {\n  color: #999;\n}\n.form-control::-webkit-input-placeholder {\n  color: #999;\n}\n.form-control::-ms-expand {\n  background-color: transparent;\n  border: 0;\n}\n.form-control[disabled],\n.form-control[readonly],\nfieldset[disabled] .form-control {\n  background-color: #eee;\n  opacity: 1;\n}\n.form-control[disabled],\nfieldset[disabled] .form-control {\n  cursor: not-allowed;\n}\ntextarea.form-control {\n  height: auto;\n}\ninput[type=\"search\"] {\n  -webkit-appearance: none;\n}\n@media screen and (-webkit-min-device-pixel-ratio: 0) {\n  input[type=\"date\"].form-control,\n  input[type=\"time\"].form-control,\n  input[type=\"datetime-local\"].form-control,\n  input[type=\"month\"].form-control {\n    line-height: 34px;\n  }\n  input[type=\"date\"].input-sm,\n  input[type=\"time\"].input-sm,\n  input[type=\"datetime-local\"].input-sm,\n  input[type=\"month\"].input-sm,\n  .input-group-sm input[type=\"date\"],\n  .input-group-sm input[type=\"time\"],\n  .input-group-sm input[type=\"datetime-local\"],\n  .input-group-sm input[type=\"month\"] {\n    line-height: 30px;\n  }\n  input[type=\"date\"].input-lg,\n  input[type=\"time\"].input-lg,\n  input[type=\"datetime-local\"].input-lg,\n  input[type=\"month\"].input-lg,\n  .input-group-lg input[type=\"date\"],\n  .input-group-lg input[type=\"time\"],\n  .input-group-lg input[type=\"datetime-local\"],\n  .input-group-lg input[type=\"month\"] {\n    line-height: 46px;\n  }\n}\n.form-group {\n  margin-bottom: 15px;\n}\n.radio,\n.checkbox {\n  position: relative;\n  display: block;\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n.radio label,\n.checkbox label {\n  min-height: 20px;\n  padding-left: 20px;\n  margin-bottom: 0;\n  font-weight: normal;\n  cursor: pointer;\n}\n.radio input[type=\"radio\"],\n.radio-inline input[type=\"radio\"],\n.checkbox input[type=\"checkbox\"],\n.checkbox-inline input[type=\"checkbox\"] {\n  position: absolute;\n  margin-top: 4px \\9;\n  margin-left: -20px;\n}\n.radio + .radio,\n.checkbox + .checkbox {\n  margin-top: -5px;\n}\n.radio-inline,\n.checkbox-inline {\n  position: relative;\n  display: inline-block;\n  padding-left: 20px;\n  margin-bottom: 0;\n  font-weight: normal;\n  vertical-align: middle;\n  cursor: pointer;\n}\n.radio-inline + .radio-inline,\n.checkbox-inline + .checkbox-inline {\n  margin-top: 0;\n  margin-left: 10px;\n}\ninput[type=\"radio\"][disabled],\ninput[type=\"checkbox\"][disabled],\ninput[type=\"radio\"].disabled,\ninput[type=\"checkbox\"].disabled,\nfieldset[disabled] input[type=\"radio\"],\nfieldset[disabled] input[type=\"checkbox\"] {\n  cursor: not-allowed;\n}\n.radio-inline.disabled,\n.checkbox-inline.disabled,\nfieldset[disabled] .radio-inline,\nfieldset[disabled] .checkbox-inline {\n  cursor: not-allowed;\n}\n.radio.disabled label,\n.checkbox.disabled label,\nfieldset[disabled] .radio label,\nfieldset[disabled] .checkbox label {\n  cursor: not-allowed;\n}\n.form-control-static {\n  min-height: 34px;\n  padding-top: 7px;\n  padding-bottom: 7px;\n  margin-bottom: 0;\n}\n.form-control-static.input-lg,\n.form-control-static.input-sm {\n  padding-right: 0;\n  padding-left: 0;\n}\n.input-sm {\n  height: 30px;\n  padding: 5px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\nselect.input-sm {\n  height: 30px;\n  line-height: 30px;\n}\ntextarea.input-sm,\nselect[multiple].input-sm {\n  height: auto;\n}\n.form-group-sm .form-control {\n  height: 30px;\n  padding: 5px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\n.form-group-sm select.form-control {\n  height: 30px;\n  line-height: 30px;\n}\n.form-group-sm textarea.form-control,\n.form-group-sm select[multiple].form-control {\n  height: auto;\n}\n.form-group-sm .form-control-static {\n  height: 30px;\n  min-height: 32px;\n  padding: 6px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n}\n.input-lg {\n  height: 46px;\n  padding: 10px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n  border-radius: 6px;\n}\nselect.input-lg {\n  height: 46px;\n  line-height: 46px;\n}\ntextarea.input-lg,\nselect[multiple].input-lg {\n  height: auto;\n}\n.form-group-lg .form-control {\n  height: 46px;\n  padding: 10px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n  border-radius: 6px;\n}\n.form-group-lg select.form-control {\n  height: 46px;\n  line-height: 46px;\n}\n.form-group-lg textarea.form-control,\n.form-group-lg select[multiple].form-control {\n  height: auto;\n}\n.form-group-lg .form-control-static {\n  height: 46px;\n  min-height: 38px;\n  padding: 11px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n}\n.has-feedback {\n  position: relative;\n}\n.has-feedback .form-control {\n  padding-right: 42.5px;\n}\n.form-control-feedback {\n  position: absolute;\n  top: 0;\n  right: 0;\n  z-index: 2;\n  display: block;\n  width: 34px;\n  height: 34px;\n  line-height: 34px;\n  text-align: center;\n  pointer-events: none;\n}\n.input-lg + .form-control-feedback,\n.input-group-lg + .form-control-feedback,\n.form-group-lg .form-control + .form-control-feedback {\n  width: 46px;\n  height: 46px;\n  line-height: 46px;\n}\n.input-sm + .form-control-feedback,\n.input-group-sm + .form-control-feedback,\n.form-group-sm .form-control + .form-control-feedback {\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n}\n.has-success .help-block,\n.has-success .control-label,\n.has-success .radio,\n.has-success .checkbox,\n.has-success .radio-inline,\n.has-success .checkbox-inline,\n.has-success.radio label,\n.has-success.checkbox label,\n.has-success.radio-inline label,\n.has-success.checkbox-inline label {\n  color: #3c763d;\n}\n.has-success .form-control {\n  border-color: #3c763d;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);\n          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);\n}\n.has-success .form-control:focus {\n  border-color: #2b542c;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #67b168;\n          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #67b168;\n}\n.has-success .input-group-addon {\n  color: #3c763d;\n  background-color: #dff0d8;\n  border-color: #3c763d;\n}\n.has-success .form-control-feedback {\n  color: #3c763d;\n}\n.has-warning .help-block,\n.has-warning .control-label,\n.has-warning .radio,\n.has-warning .checkbox,\n.has-warning .radio-inline,\n.has-warning .checkbox-inline,\n.has-warning.radio label,\n.has-warning.checkbox label,\n.has-warning.radio-inline label,\n.has-warning.checkbox-inline label {\n  color: #8a6d3b;\n}\n.has-warning .form-control {\n  border-color: #8a6d3b;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);\n          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);\n}\n.has-warning .form-control:focus {\n  border-color: #66512c;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #c0a16b;\n          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #c0a16b;\n}\n.has-warning .input-group-addon {\n  color: #8a6d3b;\n  background-color: #fcf8e3;\n  border-color: #8a6d3b;\n}\n.has-warning .form-control-feedback {\n  color: #8a6d3b;\n}\n.has-error .help-block,\n.has-error .control-label,\n.has-error .radio,\n.has-error .checkbox,\n.has-error .radio-inline,\n.has-error .checkbox-inline,\n.has-error.radio label,\n.has-error.checkbox label,\n.has-error.radio-inline label,\n.has-error.checkbox-inline label {\n  color: #a94442;\n}\n.has-error .form-control {\n  border-color: #a94442;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);\n          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);\n}\n.has-error .form-control:focus {\n  border-color: #843534;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #ce8483;\n          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #ce8483;\n}\n.has-error .input-group-addon {\n  color: #a94442;\n  background-color: #f2dede;\n  border-color: #a94442;\n}\n.has-error .form-control-feedback {\n  color: #a94442;\n}\n.has-feedback label ~ .form-control-feedback {\n  top: 25px;\n}\n.has-feedback label.sr-only ~ .form-control-feedback {\n  top: 0;\n}\n.help-block {\n  display: block;\n  margin-top: 5px;\n  margin-bottom: 10px;\n  color: #737373;\n}\n@media (min-width: 768px) {\n  .form-inline .form-group {\n    display: inline-block;\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .form-inline .form-control {\n    display: inline-block;\n    width: auto;\n    vertical-align: middle;\n  }\n  .form-inline .form-control-static {\n    display: inline-block;\n  }\n  .form-inline .input-group {\n    display: inline-table;\n    vertical-align: middle;\n  }\n  .form-inline .input-group .input-group-addon,\n  .form-inline .input-group .input-group-btn,\n  .form-inline .input-group .form-control {\n    width: auto;\n  }\n  .form-inline .input-group > .form-control {\n    width: 100%;\n  }\n  .form-inline .control-label {\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .form-inline .radio,\n  .form-inline .checkbox {\n    display: inline-block;\n    margin-top: 0;\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .form-inline .radio label,\n  .form-inline .checkbox label {\n    padding-left: 0;\n  }\n  .form-inline .radio input[type=\"radio\"],\n  .form-inline .checkbox input[type=\"checkbox\"] {\n    position: relative;\n    margin-left: 0;\n  }\n  .form-inline .has-feedback .form-control-feedback {\n    top: 0;\n  }\n}\n.form-horizontal .radio,\n.form-horizontal .checkbox,\n.form-horizontal .radio-inline,\n.form-horizontal .checkbox-inline {\n  padding-top: 7px;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n.form-horizontal .radio,\n.form-horizontal .checkbox {\n  min-height: 27px;\n}\n.form-horizontal .form-group {\n  margin-right: -15px;\n  margin-left: -15px;\n}\n@media (min-width: 768px) {\n  .form-horizontal .control-label {\n    padding-top: 7px;\n    margin-bottom: 0;\n    text-align: right;\n  }\n}\n.form-horizontal .has-feedback .form-control-feedback {\n  right: 15px;\n}\n@media (min-width: 768px) {\n  .form-horizontal .form-group-lg .control-label {\n    padding-top: 11px;\n    font-size: 18px;\n  }\n}\n@media (min-width: 768px) {\n  .form-horizontal .form-group-sm .control-label {\n    padding-top: 6px;\n    font-size: 12px;\n  }\n}\n.btn {\n  display: inline-block;\n  padding: 6px 12px;\n  margin-bottom: 0;\n  font-size: 14px;\n  font-weight: normal;\n  line-height: 1.42857143;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: middle;\n  -ms-touch-action: manipulation;\n      touch-action: manipulation;\n  cursor: pointer;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  background-image: none;\n  border: 1px solid transparent;\n  border-radius: 4px;\n}\n.btn:focus,\n.btn:active:focus,\n.btn.active:focus,\n.btn.focus,\n.btn:active.focus,\n.btn.active.focus {\n  outline: thin dotted;\n  outline: 5px auto -webkit-focus-ring-color;\n  outline-offset: -2px;\n}\n.btn:hover,\n.btn:focus,\n.btn.focus {\n  color: #333;\n  text-decoration: none;\n}\n.btn:active,\n.btn.active {\n  background-image: none;\n  outline: 0;\n  -webkit-box-shadow: inset 0 3px 5px rgba(0, 0, 0, .125);\n          box-shadow: inset 0 3px 5px rgba(0, 0, 0, .125);\n}\n.btn.disabled,\n.btn[disabled],\nfieldset[disabled] .btn {\n  cursor: not-allowed;\n  filter: alpha(opacity=65);\n  -webkit-box-shadow: none;\n          box-shadow: none;\n  opacity: .65;\n}\na.btn.disabled,\nfieldset[disabled] a.btn {\n  pointer-events: none;\n}\n.btn-default {\n  color: #333;\n  background-color: #fff;\n  border-color: #ccc;\n}\n.btn-default:focus,\n.btn-default.focus {\n  color: #333;\n  background-color: #e6e6e6;\n  border-color: #8c8c8c;\n}\n.btn-default:hover {\n  color: #333;\n  background-color: #e6e6e6;\n  border-color: #adadad;\n}\n.btn-default:active,\n.btn-default.active,\n.open > .dropdown-toggle.btn-default {\n  color: #333;\n  background-color: #e6e6e6;\n  border-color: #adadad;\n}\n.btn-default:active:hover,\n.btn-default.active:hover,\n.open > .dropdown-toggle.btn-default:hover,\n.btn-default:active:focus,\n.btn-default.active:focus,\n.open > .dropdown-toggle.btn-default:focus,\n.btn-default:active.focus,\n.btn-default.active.focus,\n.open > .dropdown-toggle.btn-default.focus {\n  color: #333;\n  background-color: #d4d4d4;\n  border-color: #8c8c8c;\n}\n.btn-default:active,\n.btn-default.active,\n.open > .dropdown-toggle.btn-default {\n  background-image: none;\n}\n.btn-default.disabled:hover,\n.btn-default[disabled]:hover,\nfieldset[disabled] .btn-default:hover,\n.btn-default.disabled:focus,\n.btn-default[disabled]:focus,\nfieldset[disabled] .btn-default:focus,\n.btn-default.disabled.focus,\n.btn-default[disabled].focus,\nfieldset[disabled] .btn-default.focus {\n  background-color: #fff;\n  border-color: #ccc;\n}\n.btn-default .badge {\n  color: #fff;\n  background-color: #333;\n}\n.btn-primary {\n  color: #fff;\n  background-color: #337ab7;\n  border-color: #2e6da4;\n}\n.btn-primary:focus,\n.btn-primary.focus {\n  color: #fff;\n  background-color: #286090;\n  border-color: #122b40;\n}\n.btn-primary:hover {\n  color: #fff;\n  background-color: #286090;\n  border-color: #204d74;\n}\n.btn-primary:active,\n.btn-primary.active,\n.open > .dropdown-toggle.btn-primary {\n  color: #fff;\n  background-color: #286090;\n  border-color: #204d74;\n}\n.btn-primary:active:hover,\n.btn-primary.active:hover,\n.open > .dropdown-toggle.btn-primary:hover,\n.btn-primary:active:focus,\n.btn-primary.active:focus,\n.open > .dropdown-toggle.btn-primary:focus,\n.btn-primary:active.focus,\n.btn-primary.active.focus,\n.open > .dropdown-toggle.btn-primary.focus {\n  color: #fff;\n  background-color: #204d74;\n  border-color: #122b40;\n}\n.btn-primary:active,\n.btn-primary.active,\n.open > .dropdown-toggle.btn-primary {\n  background-image: none;\n}\n.btn-primary.disabled:hover,\n.btn-primary[disabled]:hover,\nfieldset[disabled] .btn-primary:hover,\n.btn-primary.disabled:focus,\n.btn-primary[disabled]:focus,\nfieldset[disabled] .btn-primary:focus,\n.btn-primary.disabled.focus,\n.btn-primary[disabled].focus,\nfieldset[disabled] .btn-primary.focus {\n  background-color: #337ab7;\n  border-color: #2e6da4;\n}\n.btn-primary .badge {\n  color: #337ab7;\n  background-color: #fff;\n}\n.btn-success {\n  color: #fff;\n  background-color: #5cb85c;\n  border-color: #4cae4c;\n}\n.btn-success:focus,\n.btn-success.focus {\n  color: #fff;\n  background-color: #449d44;\n  border-color: #255625;\n}\n.btn-success:hover {\n  color: #fff;\n  background-color: #449d44;\n  border-color: #398439;\n}\n.btn-success:active,\n.btn-success.active,\n.open > .dropdown-toggle.btn-success {\n  color: #fff;\n  background-color: #449d44;\n  border-color: #398439;\n}\n.btn-success:active:hover,\n.btn-success.active:hover,\n.open > .dropdown-toggle.btn-success:hover,\n.btn-success:active:focus,\n.btn-success.active:focus,\n.open > .dropdown-toggle.btn-success:focus,\n.btn-success:active.focus,\n.btn-success.active.focus,\n.open > .dropdown-toggle.btn-success.focus {\n  color: #fff;\n  background-color: #398439;\n  border-color: #255625;\n}\n.btn-success:active,\n.btn-success.active,\n.open > .dropdown-toggle.btn-success {\n  background-image: none;\n}\n.btn-success.disabled:hover,\n.btn-success[disabled]:hover,\nfieldset[disabled] .btn-success:hover,\n.btn-success.disabled:focus,\n.btn-success[disabled]:focus,\nfieldset[disabled] .btn-success:focus,\n.btn-success.disabled.focus,\n.btn-success[disabled].focus,\nfieldset[disabled] .btn-success.focus {\n  background-color: #5cb85c;\n  border-color: #4cae4c;\n}\n.btn-success .badge {\n  color: #5cb85c;\n  background-color: #fff;\n}\n.btn-info {\n  color: #fff;\n  background-color: #5bc0de;\n  border-color: #46b8da;\n}\n.btn-info:focus,\n.btn-info.focus {\n  color: #fff;\n  background-color: #31b0d5;\n  border-color: #1b6d85;\n}\n.btn-info:hover {\n  color: #fff;\n  background-color: #31b0d5;\n  border-color: #269abc;\n}\n.btn-info:active,\n.btn-info.active,\n.open > .dropdown-toggle.btn-info {\n  color: #fff;\n  background-color: #31b0d5;\n  border-color: #269abc;\n}\n.btn-info:active:hover,\n.btn-info.active:hover,\n.open > .dropdown-toggle.btn-info:hover,\n.btn-info:active:focus,\n.btn-info.active:focus,\n.open > .dropdown-toggle.btn-info:focus,\n.btn-info:active.focus,\n.btn-info.active.focus,\n.open > .dropdown-toggle.btn-info.focus {\n  color: #fff;\n  background-color: #269abc;\n  border-color: #1b6d85;\n}\n.btn-info:active,\n.btn-info.active,\n.open > .dropdown-toggle.btn-info {\n  background-image: none;\n}\n.btn-info.disabled:hover,\n.btn-info[disabled]:hover,\nfieldset[disabled] .btn-info:hover,\n.btn-info.disabled:focus,\n.btn-info[disabled]:focus,\nfieldset[disabled] .btn-info:focus,\n.btn-info.disabled.focus,\n.btn-info[disabled].focus,\nfieldset[disabled] .btn-info.focus {\n  background-color: #5bc0de;\n  border-color: #46b8da;\n}\n.btn-info .badge {\n  color: #5bc0de;\n  background-color: #fff;\n}\n.btn-warning {\n  color: #fff;\n  background-color: #f0ad4e;\n  border-color: #eea236;\n}\n.btn-warning:focus,\n.btn-warning.focus {\n  color: #fff;\n  background-color: #ec971f;\n  border-color: #985f0d;\n}\n.btn-warning:hover {\n  color: #fff;\n  background-color: #ec971f;\n  border-color: #d58512;\n}\n.btn-warning:active,\n.btn-warning.active,\n.open > .dropdown-toggle.btn-warning {\n  color: #fff;\n  background-color: #ec971f;\n  border-color: #d58512;\n}\n.btn-warning:active:hover,\n.btn-warning.active:hover,\n.open > .dropdown-toggle.btn-warning:hover,\n.btn-warning:active:focus,\n.btn-warning.active:focus,\n.open > .dropdown-toggle.btn-warning:focus,\n.btn-warning:active.focus,\n.btn-warning.active.focus,\n.open > .dropdown-toggle.btn-warning.focus {\n  color: #fff;\n  background-color: #d58512;\n  border-color: #985f0d;\n}\n.btn-warning:active,\n.btn-warning.active,\n.open > .dropdown-toggle.btn-warning {\n  background-image: none;\n}\n.btn-warning.disabled:hover,\n.btn-warning[disabled]:hover,\nfieldset[disabled] .btn-warning:hover,\n.btn-warning.disabled:focus,\n.btn-warning[disabled]:focus,\nfieldset[disabled] .btn-warning:focus,\n.btn-warning.disabled.focus,\n.btn-warning[disabled].focus,\nfieldset[disabled] .btn-warning.focus {\n  background-color: #f0ad4e;\n  border-color: #eea236;\n}\n.btn-warning .badge {\n  color: #f0ad4e;\n  background-color: #fff;\n}\n.btn-danger {\n  color: #fff;\n  background-color: #d9534f;\n  border-color: #d43f3a;\n}\n.btn-danger:focus,\n.btn-danger.focus {\n  color: #fff;\n  background-color: #c9302c;\n  border-color: #761c19;\n}\n.btn-danger:hover {\n  color: #fff;\n  background-color: #c9302c;\n  border-color: #ac2925;\n}\n.btn-danger:active,\n.btn-danger.active,\n.open > .dropdown-toggle.btn-danger {\n  color: #fff;\n  background-color: #c9302c;\n  border-color: #ac2925;\n}\n.btn-danger:active:hover,\n.btn-danger.active:hover,\n.open > .dropdown-toggle.btn-danger:hover,\n.btn-danger:active:focus,\n.btn-danger.active:focus,\n.open > .dropdown-toggle.btn-danger:focus,\n.btn-danger:active.focus,\n.btn-danger.active.focus,\n.open > .dropdown-toggle.btn-danger.focus {\n  color: #fff;\n  background-color: #ac2925;\n  border-color: #761c19;\n}\n.btn-danger:active,\n.btn-danger.active,\n.open > .dropdown-toggle.btn-danger {\n  background-image: none;\n}\n.btn-danger.disabled:hover,\n.btn-danger[disabled]:hover,\nfieldset[disabled] .btn-danger:hover,\n.btn-danger.disabled:focus,\n.btn-danger[disabled]:focus,\nfieldset[disabled] .btn-danger:focus,\n.btn-danger.disabled.focus,\n.btn-danger[disabled].focus,\nfieldset[disabled] .btn-danger.focus {\n  background-color: #d9534f;\n  border-color: #d43f3a;\n}\n.btn-danger .badge {\n  color: #d9534f;\n  background-color: #fff;\n}\n.btn-link {\n  font-weight: normal;\n  color: #337ab7;\n  border-radius: 0;\n}\n.btn-link,\n.btn-link:active,\n.btn-link.active,\n.btn-link[disabled],\nfieldset[disabled] .btn-link {\n  background-color: transparent;\n  -webkit-box-shadow: none;\n          box-shadow: none;\n}\n.btn-link,\n.btn-link:hover,\n.btn-link:focus,\n.btn-link:active {\n  border-color: transparent;\n}\n.btn-link:hover,\n.btn-link:focus {\n  color: #23527c;\n  text-decoration: underline;\n  background-color: transparent;\n}\n.btn-link[disabled]:hover,\nfieldset[disabled] .btn-link:hover,\n.btn-link[disabled]:focus,\nfieldset[disabled] .btn-link:focus {\n  color: #777;\n  text-decoration: none;\n}\n.btn-lg,\n.btn-group-lg > .btn {\n  padding: 10px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n  border-radius: 6px;\n}\n.btn-sm,\n.btn-group-sm > .btn {\n  padding: 5px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\n.btn-xs,\n.btn-group-xs > .btn {\n  padding: 1px 5px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\n.btn-block {\n  display: block;\n  width: 100%;\n}\n.btn-block + .btn-block {\n  margin-top: 5px;\n}\ninput[type=\"submit\"].btn-block,\ninput[type=\"reset\"].btn-block,\ninput[type=\"button\"].btn-block {\n  width: 100%;\n}\n.fade {\n  opacity: 0;\n  -webkit-transition: opacity .15s linear;\n       -o-transition: opacity .15s linear;\n          transition: opacity .15s linear;\n}\n.fade.in {\n  opacity: 1;\n}\n.collapse {\n  display: none;\n}\n.collapse.in {\n  display: block;\n}\ntr.collapse.in {\n  display: table-row;\n}\ntbody.collapse.in {\n  display: table-row-group;\n}\n.collapsing {\n  position: relative;\n  height: 0;\n  overflow: hidden;\n  -webkit-transition-timing-function: ease;\n       -o-transition-timing-function: ease;\n          transition-timing-function: ease;\n  -webkit-transition-duration: .35s;\n       -o-transition-duration: .35s;\n          transition-duration: .35s;\n  -webkit-transition-property: height, visibility;\n       -o-transition-property: height, visibility;\n          transition-property: height, visibility;\n}\n.caret {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  margin-left: 2px;\n  vertical-align: middle;\n  border-top: 4px dashed;\n  border-top: 4px solid \\9;\n  border-right: 4px solid transparent;\n  border-left: 4px solid transparent;\n}\n.dropup,\n.dropdown {\n  position: relative;\n}\n.dropdown-toggle:focus {\n  outline: 0;\n}\n.dropdown-menu {\n  position: absolute;\n  top: 100%;\n  left: 0;\n  z-index: 1000;\n  display: none;\n  float: left;\n  min-width: 160px;\n  padding: 5px 0;\n  margin: 2px 0 0;\n  font-size: 14px;\n  text-align: left;\n  list-style: none;\n  background-color: #fff;\n  -webkit-background-clip: padding-box;\n          background-clip: padding-box;\n  border: 1px solid #ccc;\n  border: 1px solid rgba(0, 0, 0, .15);\n  border-radius: 4px;\n  -webkit-box-shadow: 0 6px 12px rgba(0, 0, 0, .175);\n          box-shadow: 0 6px 12px rgba(0, 0, 0, .175);\n}\n.dropdown-menu.pull-right {\n  right: 0;\n  left: auto;\n}\n.dropdown-menu .divider {\n  height: 1px;\n  margin: 9px 0;\n  overflow: hidden;\n  background-color: #e5e5e5;\n}\n.dropdown-menu > li > a {\n  display: block;\n  padding: 3px 20px;\n  clear: both;\n  font-weight: normal;\n  line-height: 1.42857143;\n  color: #333;\n  white-space: nowrap;\n}\n.dropdown-menu > li > a:hover,\n.dropdown-menu > li > a:focus {\n  color: #262626;\n  text-decoration: none;\n  background-color: #f5f5f5;\n}\n.dropdown-menu > .active > a,\n.dropdown-menu > .active > a:hover,\n.dropdown-menu > .active > a:focus {\n  color: #fff;\n  text-decoration: none;\n  background-color: #337ab7;\n  outline: 0;\n}\n.dropdown-menu > .disabled > a,\n.dropdown-menu > .disabled > a:hover,\n.dropdown-menu > .disabled > a:focus {\n  color: #777;\n}\n.dropdown-menu > .disabled > a:hover,\n.dropdown-menu > .disabled > a:focus {\n  text-decoration: none;\n  cursor: not-allowed;\n  background-color: transparent;\n  background-image: none;\n  filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);\n}\n.open > .dropdown-menu {\n  display: block;\n}\n.open > a {\n  outline: 0;\n}\n.dropdown-menu-right {\n  right: 0;\n  left: auto;\n}\n.dropdown-menu-left {\n  right: auto;\n  left: 0;\n}\n.dropdown-header {\n  display: block;\n  padding: 3px 20px;\n  font-size: 12px;\n  line-height: 1.42857143;\n  color: #777;\n  white-space: nowrap;\n}\n.dropdown-backdrop {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 990;\n}\n.pull-right > .dropdown-menu {\n  right: 0;\n  left: auto;\n}\n.dropup .caret,\n.navbar-fixed-bottom .dropdown .caret {\n  content: \"\";\n  border-top: 0;\n  border-bottom: 4px dashed;\n  border-bottom: 4px solid \\9;\n}\n.dropup .dropdown-menu,\n.navbar-fixed-bottom .dropdown .dropdown-menu {\n  top: auto;\n  bottom: 100%;\n  margin-bottom: 2px;\n}\n@media (min-width: 768px) {\n  .navbar-right .dropdown-menu {\n    right: 0;\n    left: auto;\n  }\n  .navbar-right .dropdown-menu-left {\n    right: auto;\n    left: 0;\n  }\n}\n.btn-group,\n.btn-group-vertical {\n  position: relative;\n  display: inline-block;\n  vertical-align: middle;\n}\n.btn-group > .btn,\n.btn-group-vertical > .btn {\n  position: relative;\n  float: left;\n}\n.btn-group > .btn:hover,\n.btn-group-vertical > .btn:hover,\n.btn-group > .btn:focus,\n.btn-group-vertical > .btn:focus,\n.btn-group > .btn:active,\n.btn-group-vertical > .btn:active,\n.btn-group > .btn.active,\n.btn-group-vertical > .btn.active {\n  z-index: 2;\n}\n.btn-group .btn + .btn,\n.btn-group .btn + .btn-group,\n.btn-group .btn-group + .btn,\n.btn-group .btn-group + .btn-group {\n  margin-left: -1px;\n}\n.btn-toolbar {\n  margin-left: -5px;\n}\n.btn-toolbar .btn,\n.btn-toolbar .btn-group,\n.btn-toolbar .input-group {\n  float: left;\n}\n.btn-toolbar > .btn,\n.btn-toolbar > .btn-group,\n.btn-toolbar > .input-group {\n  margin-left: 5px;\n}\n.btn-group > .btn:not(:first-child):not(:last-child):not(.dropdown-toggle) {\n  border-radius: 0;\n}\n.btn-group > .btn:first-child {\n  margin-left: 0;\n}\n.btn-group > .btn:first-child:not(:last-child):not(.dropdown-toggle) {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n}\n.btn-group > .btn:last-child:not(:first-child),\n.btn-group > .dropdown-toggle:not(:first-child) {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.btn-group > .btn-group {\n  float: left;\n}\n.btn-group > .btn-group:not(:first-child):not(:last-child) > .btn {\n  border-radius: 0;\n}\n.btn-group > .btn-group:first-child:not(:last-child) > .btn:last-child,\n.btn-group > .btn-group:first-child:not(:last-child) > .dropdown-toggle {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n}\n.btn-group > .btn-group:last-child:not(:first-child) > .btn:first-child {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.btn-group .dropdown-toggle:active,\n.btn-group.open .dropdown-toggle {\n  outline: 0;\n}\n.btn-group > .btn + .dropdown-toggle {\n  padding-right: 8px;\n  padding-left: 8px;\n}\n.btn-group > .btn-lg + .dropdown-toggle {\n  padding-right: 12px;\n  padding-left: 12px;\n}\n.btn-group.open .dropdown-toggle {\n  -webkit-box-shadow: inset 0 3px 5px rgba(0, 0, 0, .125);\n          box-shadow: inset 0 3px 5px rgba(0, 0, 0, .125);\n}\n.btn-group.open .dropdown-toggle.btn-link {\n  -webkit-box-shadow: none;\n          box-shadow: none;\n}\n.btn .caret {\n  margin-left: 0;\n}\n.btn-lg .caret {\n  border-width: 5px 5px 0;\n  border-bottom-width: 0;\n}\n.dropup .btn-lg .caret {\n  border-width: 0 5px 5px;\n}\n.btn-group-vertical > .btn,\n.btn-group-vertical > .btn-group,\n.btn-group-vertical > .btn-group > .btn {\n  display: block;\n  float: none;\n  width: 100%;\n  max-width: 100%;\n}\n.btn-group-vertical > .btn-group > .btn {\n  float: none;\n}\n.btn-group-vertical > .btn + .btn,\n.btn-group-vertical > .btn + .btn-group,\n.btn-group-vertical > .btn-group + .btn,\n.btn-group-vertical > .btn-group + .btn-group {\n  margin-top: -1px;\n  margin-left: 0;\n}\n.btn-group-vertical > .btn:not(:first-child):not(:last-child) {\n  border-radius: 0;\n}\n.btn-group-vertical > .btn:first-child:not(:last-child) {\n  border-top-left-radius: 4px;\n  border-top-right-radius: 4px;\n  border-bottom-right-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.btn-group-vertical > .btn:last-child:not(:first-child) {\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 4px;\n  border-bottom-left-radius: 4px;\n}\n.btn-group-vertical > .btn-group:not(:first-child):not(:last-child) > .btn {\n  border-radius: 0;\n}\n.btn-group-vertical > .btn-group:first-child:not(:last-child) > .btn:last-child,\n.btn-group-vertical > .btn-group:first-child:not(:last-child) > .dropdown-toggle {\n  border-bottom-right-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.btn-group-vertical > .btn-group:last-child:not(:first-child) > .btn:first-child {\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n}\n.btn-group-justified {\n  display: table;\n  width: 100%;\n  table-layout: fixed;\n  border-collapse: separate;\n}\n.btn-group-justified > .btn,\n.btn-group-justified > .btn-group {\n  display: table-cell;\n  float: none;\n  width: 1%;\n}\n.btn-group-justified > .btn-group .btn {\n  width: 100%;\n}\n.btn-group-justified > .btn-group .dropdown-menu {\n  left: auto;\n}\n[data-toggle=\"buttons\"] > .btn input[type=\"radio\"],\n[data-toggle=\"buttons\"] > .btn-group > .btn input[type=\"radio\"],\n[data-toggle=\"buttons\"] > .btn input[type=\"checkbox\"],\n[data-toggle=\"buttons\"] > .btn-group > .btn input[type=\"checkbox\"] {\n  position: absolute;\n  clip: rect(0, 0, 0, 0);\n  pointer-events: none;\n}\n.input-group {\n  position: relative;\n  display: table;\n  border-collapse: separate;\n}\n.input-group[class*=\"col-\"] {\n  float: none;\n  padding-right: 0;\n  padding-left: 0;\n}\n.input-group .form-control {\n  position: relative;\n  z-index: 2;\n  float: left;\n  width: 100%;\n  margin-bottom: 0;\n}\n.input-group .form-control:focus {\n  z-index: 3;\n}\n.input-group-lg > .form-control,\n.input-group-lg > .input-group-addon,\n.input-group-lg > .input-group-btn > .btn {\n  height: 46px;\n  padding: 10px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n  border-radius: 6px;\n}\nselect.input-group-lg > .form-control,\nselect.input-group-lg > .input-group-addon,\nselect.input-group-lg > .input-group-btn > .btn {\n  height: 46px;\n  line-height: 46px;\n}\ntextarea.input-group-lg > .form-control,\ntextarea.input-group-lg > .input-group-addon,\ntextarea.input-group-lg > .input-group-btn > .btn,\nselect[multiple].input-group-lg > .form-control,\nselect[multiple].input-group-lg > .input-group-addon,\nselect[multiple].input-group-lg > .input-group-btn > .btn {\n  height: auto;\n}\n.input-group-sm > .form-control,\n.input-group-sm > .input-group-addon,\n.input-group-sm > .input-group-btn > .btn {\n  height: 30px;\n  padding: 5px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\nselect.input-group-sm > .form-control,\nselect.input-group-sm > .input-group-addon,\nselect.input-group-sm > .input-group-btn > .btn {\n  height: 30px;\n  line-height: 30px;\n}\ntextarea.input-group-sm > .form-control,\ntextarea.input-group-sm > .input-group-addon,\ntextarea.input-group-sm > .input-group-btn > .btn,\nselect[multiple].input-group-sm > .form-control,\nselect[multiple].input-group-sm > .input-group-addon,\nselect[multiple].input-group-sm > .input-group-btn > .btn {\n  height: auto;\n}\n.input-group-addon,\n.input-group-btn,\n.input-group .form-control {\n  display: table-cell;\n}\n.input-group-addon:not(:first-child):not(:last-child),\n.input-group-btn:not(:first-child):not(:last-child),\n.input-group .form-control:not(:first-child):not(:last-child) {\n  border-radius: 0;\n}\n.input-group-addon,\n.input-group-btn {\n  width: 1%;\n  white-space: nowrap;\n  vertical-align: middle;\n}\n.input-group-addon {\n  padding: 6px 12px;\n  font-size: 14px;\n  font-weight: normal;\n  line-height: 1;\n  color: #555;\n  text-align: center;\n  background-color: #eee;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n.input-group-addon.input-sm {\n  padding: 5px 10px;\n  font-size: 12px;\n  border-radius: 3px;\n}\n.input-group-addon.input-lg {\n  padding: 10px 16px;\n  font-size: 18px;\n  border-radius: 6px;\n}\n.input-group-addon input[type=\"radio\"],\n.input-group-addon input[type=\"checkbox\"] {\n  margin-top: 0;\n}\n.input-group .form-control:first-child,\n.input-group-addon:first-child,\n.input-group-btn:first-child > .btn,\n.input-group-btn:first-child > .btn-group > .btn,\n.input-group-btn:first-child > .dropdown-toggle,\n.input-group-btn:last-child > .btn:not(:last-child):not(.dropdown-toggle),\n.input-group-btn:last-child > .btn-group:not(:last-child) > .btn {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n}\n.input-group-addon:first-child {\n  border-right: 0;\n}\n.input-group .form-control:last-child,\n.input-group-addon:last-child,\n.input-group-btn:last-child > .btn,\n.input-group-btn:last-child > .btn-group > .btn,\n.input-group-btn:last-child > .dropdown-toggle,\n.input-group-btn:first-child > .btn:not(:first-child),\n.input-group-btn:first-child > .btn-group:not(:first-child) > .btn {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.input-group-addon:last-child {\n  border-left: 0;\n}\n.input-group-btn {\n  position: relative;\n  font-size: 0;\n  white-space: nowrap;\n}\n.input-group-btn > .btn {\n  position: relative;\n}\n.input-group-btn > .btn + .btn {\n  margin-left: -1px;\n}\n.input-group-btn > .btn:hover,\n.input-group-btn > .btn:focus,\n.input-group-btn > .btn:active {\n  z-index: 2;\n}\n.input-group-btn:first-child > .btn,\n.input-group-btn:first-child > .btn-group {\n  margin-right: -1px;\n}\n.input-group-btn:last-child > .btn,\n.input-group-btn:last-child > .btn-group {\n  z-index: 2;\n  margin-left: -1px;\n}\n.nav {\n  padding-left: 0;\n  margin-bottom: 0;\n  list-style: none;\n}\n.nav > li {\n  position: relative;\n  display: block;\n}\n.nav > li > a {\n  position: relative;\n  display: block;\n  padding: 10px 15px;\n}\n.nav > li > a:hover,\n.nav > li > a:focus {\n  text-decoration: none;\n  background-color: #eee;\n}\n.nav > li.disabled > a {\n  color: #777;\n}\n.nav > li.disabled > a:hover,\n.nav > li.disabled > a:focus {\n  color: #777;\n  text-decoration: none;\n  cursor: not-allowed;\n  background-color: transparent;\n}\n.nav .open > a,\n.nav .open > a:hover,\n.nav .open > a:focus {\n  background-color: #eee;\n  border-color: #337ab7;\n}\n.nav .nav-divider {\n  height: 1px;\n  margin: 9px 0;\n  overflow: hidden;\n  background-color: #e5e5e5;\n}\n.nav > li > a > img {\n  max-width: none;\n}\n.nav-tabs {\n  border-bottom: 1px solid #ddd;\n}\n.nav-tabs > li {\n  float: left;\n  margin-bottom: -1px;\n}\n.nav-tabs > li > a {\n  margin-right: 2px;\n  line-height: 1.42857143;\n  border: 1px solid transparent;\n  border-radius: 4px 4px 0 0;\n}\n.nav-tabs > li > a:hover {\n  border-color: #eee #eee #ddd;\n}\n.nav-tabs > li.active > a,\n.nav-tabs > li.active > a:hover,\n.nav-tabs > li.active > a:focus {\n  color: #555;\n  cursor: default;\n  background-color: #fff;\n  border: 1px solid #ddd;\n  border-bottom-color: transparent;\n}\n.nav-tabs.nav-justified {\n  width: 100%;\n  border-bottom: 0;\n}\n.nav-tabs.nav-justified > li {\n  float: none;\n}\n.nav-tabs.nav-justified > li > a {\n  margin-bottom: 5px;\n  text-align: center;\n}\n.nav-tabs.nav-justified > .dropdown .dropdown-menu {\n  top: auto;\n  left: auto;\n}\n@media (min-width: 768px) {\n  .nav-tabs.nav-justified > li {\n    display: table-cell;\n    width: 1%;\n  }\n  .nav-tabs.nav-justified > li > a {\n    margin-bottom: 0;\n  }\n}\n.nav-tabs.nav-justified > li > a {\n  margin-right: 0;\n  border-radius: 4px;\n}\n.nav-tabs.nav-justified > .active > a,\n.nav-tabs.nav-justified > .active > a:hover,\n.nav-tabs.nav-justified > .active > a:focus {\n  border: 1px solid #ddd;\n}\n@media (min-width: 768px) {\n  .nav-tabs.nav-justified > li > a {\n    border-bottom: 1px solid #ddd;\n    border-radius: 4px 4px 0 0;\n  }\n  .nav-tabs.nav-justified > .active > a,\n  .nav-tabs.nav-justified > .active > a:hover,\n  .nav-tabs.nav-justified > .active > a:focus {\n    border-bottom-color: #fff;\n  }\n}\n.nav-pills > li {\n  float: left;\n}\n.nav-pills > li > a {\n  border-radius: 4px;\n}\n.nav-pills > li + li {\n  margin-left: 2px;\n}\n.nav-pills > li.active > a,\n.nav-pills > li.active > a:hover,\n.nav-pills > li.active > a:focus {\n  color: #fff;\n  background-color: #337ab7;\n}\n.nav-stacked > li {\n  float: none;\n}\n.nav-stacked > li + li {\n  margin-top: 2px;\n  margin-left: 0;\n}\n.nav-justified {\n  width: 100%;\n}\n.nav-justified > li {\n  float: none;\n}\n.nav-justified > li > a {\n  margin-bottom: 5px;\n  text-align: center;\n}\n.nav-justified > .dropdown .dropdown-menu {\n  top: auto;\n  left: auto;\n}\n@media (min-width: 768px) {\n  .nav-justified > li {\n    display: table-cell;\n    width: 1%;\n  }\n  .nav-justified > li > a {\n    margin-bottom: 0;\n  }\n}\n.nav-tabs-justified {\n  border-bottom: 0;\n}\n.nav-tabs-justified > li > a {\n  margin-right: 0;\n  border-radius: 4px;\n}\n.nav-tabs-justified > .active > a,\n.nav-tabs-justified > .active > a:hover,\n.nav-tabs-justified > .active > a:focus {\n  border: 1px solid #ddd;\n}\n@media (min-width: 768px) {\n  .nav-tabs-justified > li > a {\n    border-bottom: 1px solid #ddd;\n    border-radius: 4px 4px 0 0;\n  }\n  .nav-tabs-justified > .active > a,\n  .nav-tabs-justified > .active > a:hover,\n  .nav-tabs-justified > .active > a:focus {\n    border-bottom-color: #fff;\n  }\n}\n.tab-content > .tab-pane {\n  display: none;\n}\n.tab-content > .active {\n  display: block;\n}\n.nav-tabs .dropdown-menu {\n  margin-top: -1px;\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n}\n.navbar {\n  position: relative;\n  min-height: 50px;\n  margin-bottom: 20px;\n  border: 1px solid transparent;\n}\n@media (min-width: 768px) {\n  .navbar {\n    border-radius: 4px;\n  }\n}\n@media (min-width: 768px) {\n  .navbar-header {\n    float: left;\n  }\n}\n.navbar-collapse {\n  padding-right: 15px;\n  padding-left: 15px;\n  overflow-x: visible;\n  -webkit-overflow-scrolling: touch;\n  border-top: 1px solid transparent;\n  -webkit-box-shadow: inset 0 1px 0 rgba(255, 255, 255, .1);\n          box-shadow: inset 0 1px 0 rgba(255, 255, 255, .1);\n}\n.navbar-collapse.in {\n  overflow-y: auto;\n}\n@media (min-width: 768px) {\n  .navbar-collapse {\n    width: auto;\n    border-top: 0;\n    -webkit-box-shadow: none;\n            box-shadow: none;\n  }\n  .navbar-collapse.collapse {\n    display: block !important;\n    height: auto !important;\n    padding-bottom: 0;\n    overflow: visible !important;\n  }\n  .navbar-collapse.in {\n    overflow-y: visible;\n  }\n  .navbar-fixed-top .navbar-collapse,\n  .navbar-static-top .navbar-collapse,\n  .navbar-fixed-bottom .navbar-collapse {\n    padding-right: 0;\n    padding-left: 0;\n  }\n}\n.navbar-fixed-top .navbar-collapse,\n.navbar-fixed-bottom .navbar-collapse {\n  max-height: 340px;\n}\n@media (max-device-width: 480px) and (orientation: landscape) {\n  .navbar-fixed-top .navbar-collapse,\n  .navbar-fixed-bottom .navbar-collapse {\n    max-height: 200px;\n  }\n}\n.container > .navbar-header,\n.container-fluid > .navbar-header,\n.container > .navbar-collapse,\n.container-fluid > .navbar-collapse {\n  margin-right: -15px;\n  margin-left: -15px;\n}\n@media (min-width: 768px) {\n  .container > .navbar-header,\n  .container-fluid > .navbar-header,\n  .container > .navbar-collapse,\n  .container-fluid > .navbar-collapse {\n    margin-right: 0;\n    margin-left: 0;\n  }\n}\n.navbar-static-top {\n  z-index: 1000;\n  border-width: 0 0 1px;\n}\n@media (min-width: 768px) {\n  .navbar-static-top {\n    border-radius: 0;\n  }\n}\n.navbar-fixed-top,\n.navbar-fixed-bottom {\n  position: fixed;\n  right: 0;\n  left: 0;\n  z-index: 1030;\n}\n@media (min-width: 768px) {\n  .navbar-fixed-top,\n  .navbar-fixed-bottom {\n    border-radius: 0;\n  }\n}\n.navbar-fixed-top {\n  top: 0;\n  border-width: 0 0 1px;\n}\n.navbar-fixed-bottom {\n  bottom: 0;\n  margin-bottom: 0;\n  border-width: 1px 0 0;\n}\n.navbar-brand {\n  float: left;\n  height: 50px;\n  padding: 15px 15px;\n  font-size: 18px;\n  line-height: 20px;\n}\n.navbar-brand:hover,\n.navbar-brand:focus {\n  text-decoration: none;\n}\n.navbar-brand > img {\n  display: block;\n}\n@media (min-width: 768px) {\n  .navbar > .container .navbar-brand,\n  .navbar > .container-fluid .navbar-brand {\n    margin-left: -15px;\n  }\n}\n.navbar-toggle {\n  position: relative;\n  float: right;\n  padding: 9px 10px;\n  margin-top: 8px;\n  margin-right: 15px;\n  margin-bottom: 8px;\n  background-color: transparent;\n  background-image: none;\n  border: 1px solid transparent;\n  border-radius: 4px;\n}\n.navbar-toggle:focus {\n  outline: 0;\n}\n.navbar-toggle .icon-bar {\n  display: block;\n  width: 22px;\n  height: 2px;\n  border-radius: 1px;\n}\n.navbar-toggle .icon-bar + .icon-bar {\n  margin-top: 4px;\n}\n@media (min-width: 768px) {\n  .navbar-toggle {\n    display: none;\n  }\n}\n.navbar-nav {\n  margin: 7.5px -15px;\n}\n.navbar-nav > li > a {\n  padding-top: 10px;\n  padding-bottom: 10px;\n  line-height: 20px;\n}\n@media (max-width: 767px) {\n  .navbar-nav .open .dropdown-menu {\n    position: static;\n    float: none;\n    width: auto;\n    margin-top: 0;\n    background-color: transparent;\n    border: 0;\n    -webkit-box-shadow: none;\n            box-shadow: none;\n  }\n  .navbar-nav .open .dropdown-menu > li > a,\n  .navbar-nav .open .dropdown-menu .dropdown-header {\n    padding: 5px 15px 5px 25px;\n  }\n  .navbar-nav .open .dropdown-menu > li > a {\n    line-height: 20px;\n  }\n  .navbar-nav .open .dropdown-menu > li > a:hover,\n  .navbar-nav .open .dropdown-menu > li > a:focus {\n    background-image: none;\n  }\n}\n@media (min-width: 768px) {\n  .navbar-nav {\n    float: left;\n    margin: 0;\n  }\n  .navbar-nav > li {\n    float: left;\n  }\n  .navbar-nav > li > a {\n    padding-top: 15px;\n    padding-bottom: 15px;\n  }\n}\n.navbar-form {\n  padding: 10px 15px;\n  margin-top: 8px;\n  margin-right: -15px;\n  margin-bottom: 8px;\n  margin-left: -15px;\n  border-top: 1px solid transparent;\n  border-bottom: 1px solid transparent;\n  -webkit-box-shadow: inset 0 1px 0 rgba(255, 255, 255, .1), 0 1px 0 rgba(255, 255, 255, .1);\n          box-shadow: inset 0 1px 0 rgba(255, 255, 255, .1), 0 1px 0 rgba(255, 255, 255, .1);\n}\n@media (min-width: 768px) {\n  .navbar-form .form-group {\n    display: inline-block;\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .navbar-form .form-control {\n    display: inline-block;\n    width: auto;\n    vertical-align: middle;\n  }\n  .navbar-form .form-control-static {\n    display: inline-block;\n  }\n  .navbar-form .input-group {\n    display: inline-table;\n    vertical-align: middle;\n  }\n  .navbar-form .input-group .input-group-addon,\n  .navbar-form .input-group .input-group-btn,\n  .navbar-form .input-group .form-control {\n    width: auto;\n  }\n  .navbar-form .input-group > .form-control {\n    width: 100%;\n  }\n  .navbar-form .control-label {\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .navbar-form .radio,\n  .navbar-form .checkbox {\n    display: inline-block;\n    margin-top: 0;\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .navbar-form .radio label,\n  .navbar-form .checkbox label {\n    padding-left: 0;\n  }\n  .navbar-form .radio input[type=\"radio\"],\n  .navbar-form .checkbox input[type=\"checkbox\"] {\n    position: relative;\n    margin-left: 0;\n  }\n  .navbar-form .has-feedback .form-control-feedback {\n    top: 0;\n  }\n}\n@media (max-width: 767px) {\n  .navbar-form .form-group {\n    margin-bottom: 5px;\n  }\n  .navbar-form .form-group:last-child {\n    margin-bottom: 0;\n  }\n}\n@media (min-width: 768px) {\n  .navbar-form {\n    width: auto;\n    padding-top: 0;\n    padding-bottom: 0;\n    margin-right: 0;\n    margin-left: 0;\n    border: 0;\n    -webkit-box-shadow: none;\n            box-shadow: none;\n  }\n}\n.navbar-nav > li > .dropdown-menu {\n  margin-top: 0;\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n}\n.navbar-fixed-bottom .navbar-nav > li > .dropdown-menu {\n  margin-bottom: 0;\n  border-top-left-radius: 4px;\n  border-top-right-radius: 4px;\n  border-bottom-right-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.navbar-btn {\n  margin-top: 8px;\n  margin-bottom: 8px;\n}\n.navbar-btn.btn-sm {\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n.navbar-btn.btn-xs {\n  margin-top: 14px;\n  margin-bottom: 14px;\n}\n.navbar-text {\n  margin-top: 15px;\n  margin-bottom: 15px;\n}\n@media (min-width: 768px) {\n  .navbar-text {\n    float: left;\n    margin-right: 15px;\n    margin-left: 15px;\n  }\n}\n@media (min-width: 768px) {\n  .navbar-left {\n    float: left !important;\n  }\n  .navbar-right {\n    float: right !important;\n    margin-right: -15px;\n  }\n  .navbar-right ~ .navbar-right {\n    margin-right: 0;\n  }\n}\n.navbar-default {\n  background-color: #f8f8f8;\n  border-color: #e7e7e7;\n}\n.navbar-default .navbar-brand {\n  color: #777;\n}\n.navbar-default .navbar-brand:hover,\n.navbar-default .navbar-brand:focus {\n  color: #5e5e5e;\n  background-color: transparent;\n}\n.navbar-default .navbar-text {\n  color: #777;\n}\n.navbar-default .navbar-nav > li > a {\n  color: #777;\n}\n.navbar-default .navbar-nav > li > a:hover,\n.navbar-default .navbar-nav > li > a:focus {\n  color: #333;\n  background-color: transparent;\n}\n.navbar-default .navbar-nav > .active > a,\n.navbar-default .navbar-nav > .active > a:hover,\n.navbar-default .navbar-nav > .active > a:focus {\n  color: #555;\n  background-color: #e7e7e7;\n}\n.navbar-default .navbar-nav > .disabled > a,\n.navbar-default .navbar-nav > .disabled > a:hover,\n.navbar-default .navbar-nav > .disabled > a:focus {\n  color: #ccc;\n  background-color: transparent;\n}\n.navbar-default .navbar-toggle {\n  border-color: #ddd;\n}\n.navbar-default .navbar-toggle:hover,\n.navbar-default .navbar-toggle:focus {\n  background-color: #ddd;\n}\n.navbar-default .navbar-toggle .icon-bar {\n  background-color: #888;\n}\n.navbar-default .navbar-collapse,\n.navbar-default .navbar-form {\n  border-color: #e7e7e7;\n}\n.navbar-default .navbar-nav > .open > a,\n.navbar-default .navbar-nav > .open > a:hover,\n.navbar-default .navbar-nav > .open > a:focus {\n  color: #555;\n  background-color: #e7e7e7;\n}\n@media (max-width: 767px) {\n  .navbar-default .navbar-nav .open .dropdown-menu > li > a {\n    color: #777;\n  }\n  .navbar-default .navbar-nav .open .dropdown-menu > li > a:hover,\n  .navbar-default .navbar-nav .open .dropdown-menu > li > a:focus {\n    color: #333;\n    background-color: transparent;\n  }\n  .navbar-default .navbar-nav .open .dropdown-menu > .active > a,\n  .navbar-default .navbar-nav .open .dropdown-menu > .active > a:hover,\n  .navbar-default .navbar-nav .open .dropdown-menu > .active > a:focus {\n    color: #555;\n    background-color: #e7e7e7;\n  }\n  .navbar-default .navbar-nav .open .dropdown-menu > .disabled > a,\n  .navbar-default .navbar-nav .open .dropdown-menu > .disabled > a:hover,\n  .navbar-default .navbar-nav .open .dropdown-menu > .disabled > a:focus {\n    color: #ccc;\n    background-color: transparent;\n  }\n}\n.navbar-default .navbar-link {\n  color: #777;\n}\n.navbar-default .navbar-link:hover {\n  color: #333;\n}\n.navbar-default .btn-link {\n  color: #777;\n}\n.navbar-default .btn-link:hover,\n.navbar-default .btn-link:focus {\n  color: #333;\n}\n.navbar-default .btn-link[disabled]:hover,\nfieldset[disabled] .navbar-default .btn-link:hover,\n.navbar-default .btn-link[disabled]:focus,\nfieldset[disabled] .navbar-default .btn-link:focus {\n  color: #ccc;\n}\n.navbar-inverse {\n  background-color: #222;\n  border-color: #080808;\n}\n.navbar-inverse .navbar-brand {\n  color: #9d9d9d;\n}\n.navbar-inverse .navbar-brand:hover,\n.navbar-inverse .navbar-brand:focus {\n  color: #fff;\n  background-color: transparent;\n}\n.navbar-inverse .navbar-text {\n  color: #9d9d9d;\n}\n.navbar-inverse .navbar-nav > li > a {\n  color: #9d9d9d;\n}\n.navbar-inverse .navbar-nav > li > a:hover,\n.navbar-inverse .navbar-nav > li > a:focus {\n  color: #fff;\n  background-color: transparent;\n}\n.navbar-inverse .navbar-nav > .active > a,\n.navbar-inverse .navbar-nav > .active > a:hover,\n.navbar-inverse .navbar-nav > .active > a:focus {\n  color: #fff;\n  background-color: #080808;\n}\n.navbar-inverse .navbar-nav > .disabled > a,\n.navbar-inverse .navbar-nav > .disabled > a:hover,\n.navbar-inverse .navbar-nav > .disabled > a:focus {\n  color: #444;\n  background-color: transparent;\n}\n.navbar-inverse .navbar-toggle {\n  border-color: #333;\n}\n.navbar-inverse .navbar-toggle:hover,\n.navbar-inverse .navbar-toggle:focus {\n  background-color: #333;\n}\n.navbar-inverse .navbar-toggle .icon-bar {\n  background-color: #fff;\n}\n.navbar-inverse .navbar-collapse,\n.navbar-inverse .navbar-form {\n  border-color: #101010;\n}\n.navbar-inverse .navbar-nav > .open > a,\n.navbar-inverse .navbar-nav > .open > a:hover,\n.navbar-inverse .navbar-nav > .open > a:focus {\n  color: #fff;\n  background-color: #080808;\n}\n@media (max-width: 767px) {\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .dropdown-header {\n    border-color: #080808;\n  }\n  .navbar-inverse .navbar-nav .open .dropdown-menu .divider {\n    background-color: #080808;\n  }\n  .navbar-inverse .navbar-nav .open .dropdown-menu > li > a {\n    color: #9d9d9d;\n  }\n  .navbar-inverse .navbar-nav .open .dropdown-menu > li > a:hover,\n  .navbar-inverse .navbar-nav .open .dropdown-menu > li > a:focus {\n    color: #fff;\n    background-color: transparent;\n  }\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .active > a,\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .active > a:hover,\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .active > a:focus {\n    color: #fff;\n    background-color: #080808;\n  }\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .disabled > a,\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .disabled > a:hover,\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .disabled > a:focus {\n    color: #444;\n    background-color: transparent;\n  }\n}\n.navbar-inverse .navbar-link {\n  color: #9d9d9d;\n}\n.navbar-inverse .navbar-link:hover {\n  color: #fff;\n}\n.navbar-inverse .btn-link {\n  color: #9d9d9d;\n}\n.navbar-inverse .btn-link:hover,\n.navbar-inverse .btn-link:focus {\n  color: #fff;\n}\n.navbar-inverse .btn-link[disabled]:hover,\nfieldset[disabled] .navbar-inverse .btn-link:hover,\n.navbar-inverse .btn-link[disabled]:focus,\nfieldset[disabled] .navbar-inverse .btn-link:focus {\n  color: #444;\n}\n.breadcrumb {\n  padding: 8px 15px;\n  margin-bottom: 20px;\n  list-style: none;\n  background-color: #f5f5f5;\n  border-radius: 4px;\n}\n.breadcrumb > li {\n  display: inline-block;\n}\n.breadcrumb > li + li:before {\n  padding: 0 5px;\n  color: #ccc;\n  content: \"/\\A0\";\n}\n.breadcrumb > .active {\n  color: #777;\n}\n.pagination {\n  display: inline-block;\n  padding-left: 0;\n  margin: 20px 0;\n  border-radius: 4px;\n}\n.pagination > li {\n  display: inline;\n}\n.pagination > li > a,\n.pagination > li > span {\n  position: relative;\n  float: left;\n  padding: 6px 12px;\n  margin-left: -1px;\n  line-height: 1.42857143;\n  color: #337ab7;\n  text-decoration: none;\n  background-color: #fff;\n  border: 1px solid #ddd;\n}\n.pagination > li:first-child > a,\n.pagination > li:first-child > span {\n  margin-left: 0;\n  border-top-left-radius: 4px;\n  border-bottom-left-radius: 4px;\n}\n.pagination > li:last-child > a,\n.pagination > li:last-child > span {\n  border-top-right-radius: 4px;\n  border-bottom-right-radius: 4px;\n}\n.pagination > li > a:hover,\n.pagination > li > span:hover,\n.pagination > li > a:focus,\n.pagination > li > span:focus {\n  z-index: 2;\n  color: #23527c;\n  background-color: #eee;\n  border-color: #ddd;\n}\n.pagination > .active > a,\n.pagination > .active > span,\n.pagination > .active > a:hover,\n.pagination > .active > span:hover,\n.pagination > .active > a:focus,\n.pagination > .active > span:focus {\n  z-index: 3;\n  color: #fff;\n  cursor: default;\n  background-color: #337ab7;\n  border-color: #337ab7;\n}\n.pagination > .disabled > span,\n.pagination > .disabled > span:hover,\n.pagination > .disabled > span:focus,\n.pagination > .disabled > a,\n.pagination > .disabled > a:hover,\n.pagination > .disabled > a:focus {\n  color: #777;\n  cursor: not-allowed;\n  background-color: #fff;\n  border-color: #ddd;\n}\n.pagination-lg > li > a,\n.pagination-lg > li > span {\n  padding: 10px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n}\n.pagination-lg > li:first-child > a,\n.pagination-lg > li:first-child > span {\n  border-top-left-radius: 6px;\n  border-bottom-left-radius: 6px;\n}\n.pagination-lg > li:last-child > a,\n.pagination-lg > li:last-child > span {\n  border-top-right-radius: 6px;\n  border-bottom-right-radius: 6px;\n}\n.pagination-sm > li > a,\n.pagination-sm > li > span {\n  padding: 5px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n}\n.pagination-sm > li:first-child > a,\n.pagination-sm > li:first-child > span {\n  border-top-left-radius: 3px;\n  border-bottom-left-radius: 3px;\n}\n.pagination-sm > li:last-child > a,\n.pagination-sm > li:last-child > span {\n  border-top-right-radius: 3px;\n  border-bottom-right-radius: 3px;\n}\n.pager {\n  padding-left: 0;\n  margin: 20px 0;\n  text-align: center;\n  list-style: none;\n}\n.pager li {\n  display: inline;\n}\n.pager li > a,\n.pager li > span {\n  display: inline-block;\n  padding: 5px 14px;\n  background-color: #fff;\n  border: 1px solid #ddd;\n  border-radius: 15px;\n}\n.pager li > a:hover,\n.pager li > a:focus {\n  text-decoration: none;\n  background-color: #eee;\n}\n.pager .next > a,\n.pager .next > span {\n  float: right;\n}\n.pager .previous > a,\n.pager .previous > span {\n  float: left;\n}\n.pager .disabled > a,\n.pager .disabled > a:hover,\n.pager .disabled > a:focus,\n.pager .disabled > span {\n  color: #777;\n  cursor: not-allowed;\n  background-color: #fff;\n}\n.label {\n  display: inline;\n  padding: .2em .6em .3em;\n  font-size: 75%;\n  font-weight: bold;\n  line-height: 1;\n  color: #fff;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: baseline;\n  border-radius: .25em;\n}\na.label:hover,\na.label:focus {\n  color: #fff;\n  text-decoration: none;\n  cursor: pointer;\n}\n.label:empty {\n  display: none;\n}\n.btn .label {\n  position: relative;\n  top: -1px;\n}\n.label-default {\n  background-color: #777;\n}\n.label-default[href]:hover,\n.label-default[href]:focus {\n  background-color: #5e5e5e;\n}\n.label-primary {\n  background-color: #337ab7;\n}\n.label-primary[href]:hover,\n.label-primary[href]:focus {\n  background-color: #286090;\n}\n.label-success {\n  background-color: #5cb85c;\n}\n.label-success[href]:hover,\n.label-success[href]:focus {\n  background-color: #449d44;\n}\n.label-info {\n  background-color: #5bc0de;\n}\n.label-info[href]:hover,\n.label-info[href]:focus {\n  background-color: #31b0d5;\n}\n.label-warning {\n  background-color: #f0ad4e;\n}\n.label-warning[href]:hover,\n.label-warning[href]:focus {\n  background-color: #ec971f;\n}\n.label-danger {\n  background-color: #d9534f;\n}\n.label-danger[href]:hover,\n.label-danger[href]:focus {\n  background-color: #c9302c;\n}\n.badge {\n  display: inline-block;\n  min-width: 10px;\n  padding: 3px 7px;\n  font-size: 12px;\n  font-weight: bold;\n  line-height: 1;\n  color: #fff;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: middle;\n  background-color: #777;\n  border-radius: 10px;\n}\n.badge:empty {\n  display: none;\n}\n.btn .badge {\n  position: relative;\n  top: -1px;\n}\n.btn-xs .badge,\n.btn-group-xs > .btn .badge {\n  top: 0;\n  padding: 1px 5px;\n}\na.badge:hover,\na.badge:focus {\n  color: #fff;\n  text-decoration: none;\n  cursor: pointer;\n}\n.list-group-item.active > .badge,\n.nav-pills > .active > a > .badge {\n  color: #337ab7;\n  background-color: #fff;\n}\n.list-group-item > .badge {\n  float: right;\n}\n.list-group-item > .badge + .badge {\n  margin-right: 5px;\n}\n.nav-pills > li > a > .badge {\n  margin-left: 3px;\n}\n.jumbotron {\n  padding-top: 30px;\n  padding-bottom: 30px;\n  margin-bottom: 30px;\n  color: inherit;\n  background-color: #eee;\n}\n.jumbotron h1,\n.jumbotron .h1 {\n  color: inherit;\n}\n.jumbotron p {\n  margin-bottom: 15px;\n  font-size: 21px;\n  font-weight: 200;\n}\n.jumbotron > hr {\n  border-top-color: #d5d5d5;\n}\n.container .jumbotron,\n.container-fluid .jumbotron {\n  padding-right: 15px;\n  padding-left: 15px;\n  border-radius: 6px;\n}\n.jumbotron .container {\n  max-width: 100%;\n}\n@media screen and (min-width: 768px) {\n  .jumbotron {\n    padding-top: 48px;\n    padding-bottom: 48px;\n  }\n  .container .jumbotron,\n  .container-fluid .jumbotron {\n    padding-right: 60px;\n    padding-left: 60px;\n  }\n  .jumbotron h1,\n  .jumbotron .h1 {\n    font-size: 63px;\n  }\n}\n.thumbnail {\n  display: block;\n  padding: 4px;\n  margin-bottom: 20px;\n  line-height: 1.42857143;\n  background-color: #fff;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  -webkit-transition: border .2s ease-in-out;\n       -o-transition: border .2s ease-in-out;\n          transition: border .2s ease-in-out;\n}\n.thumbnail > img,\n.thumbnail a > img {\n  margin-right: auto;\n  margin-left: auto;\n}\na.thumbnail:hover,\na.thumbnail:focus,\na.thumbnail.active {\n  border-color: #337ab7;\n}\n.thumbnail .caption {\n  padding: 9px;\n  color: #333;\n}\n.alert {\n  padding: 15px;\n  margin-bottom: 20px;\n  border: 1px solid transparent;\n  border-radius: 4px;\n}\n.alert h4 {\n  margin-top: 0;\n  color: inherit;\n}\n.alert .alert-link {\n  font-weight: bold;\n}\n.alert > p,\n.alert > ul {\n  margin-bottom: 0;\n}\n.alert > p + p {\n  margin-top: 5px;\n}\n.alert-dismissable,\n.alert-dismissible {\n  padding-right: 35px;\n}\n.alert-dismissable .close,\n.alert-dismissible .close {\n  position: relative;\n  top: -2px;\n  right: -21px;\n  color: inherit;\n}\n.alert-success {\n  color: #3c763d;\n  background-color: #dff0d8;\n  border-color: #d6e9c6;\n}\n.alert-success hr {\n  border-top-color: #c9e2b3;\n}\n.alert-success .alert-link {\n  color: #2b542c;\n}\n.alert-info {\n  color: #31708f;\n  background-color: #d9edf7;\n  border-color: #bce8f1;\n}\n.alert-info hr {\n  border-top-color: #a6e1ec;\n}\n.alert-info .alert-link {\n  color: #245269;\n}\n.alert-warning {\n  color: #8a6d3b;\n  background-color: #fcf8e3;\n  border-color: #faebcc;\n}\n.alert-warning hr {\n  border-top-color: #f7e1b5;\n}\n.alert-warning .alert-link {\n  color: #66512c;\n}\n.alert-danger {\n  color: #a94442;\n  background-color: #f2dede;\n  border-color: #ebccd1;\n}\n.alert-danger hr {\n  border-top-color: #e4b9c0;\n}\n.alert-danger .alert-link {\n  color: #843534;\n}\n@-webkit-keyframes progress-bar-stripes {\n  from {\n    background-position: 40px 0;\n  }\n  to {\n    background-position: 0 0;\n  }\n}\n@-o-keyframes progress-bar-stripes {\n  from {\n    background-position: 40px 0;\n  }\n  to {\n    background-position: 0 0;\n  }\n}\n@keyframes progress-bar-stripes {\n  from {\n    background-position: 40px 0;\n  }\n  to {\n    background-position: 0 0;\n  }\n}\n.progress {\n  height: 20px;\n  margin-bottom: 20px;\n  overflow: hidden;\n  background-color: #f5f5f5;\n  border-radius: 4px;\n  -webkit-box-shadow: inset 0 1px 2px rgba(0, 0, 0, .1);\n          box-shadow: inset 0 1px 2px rgba(0, 0, 0, .1);\n}\n.progress-bar {\n  float: left;\n  width: 0;\n  height: 100%;\n  font-size: 12px;\n  line-height: 20px;\n  color: #fff;\n  text-align: center;\n  background-color: #337ab7;\n  -webkit-box-shadow: inset 0 -1px 0 rgba(0, 0, 0, .15);\n          box-shadow: inset 0 -1px 0 rgba(0, 0, 0, .15);\n  -webkit-transition: width .6s ease;\n       -o-transition: width .6s ease;\n          transition: width .6s ease;\n}\n.progress-striped .progress-bar,\n.progress-bar-striped {\n  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n  background-image:      -o-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n  background-image:         linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n  -webkit-background-size: 40px 40px;\n          background-size: 40px 40px;\n}\n.progress.active .progress-bar,\n.progress-bar.active {\n  -webkit-animation: progress-bar-stripes 2s linear infinite;\n       -o-animation: progress-bar-stripes 2s linear infinite;\n          animation: progress-bar-stripes 2s linear infinite;\n}\n.progress-bar-success {\n  background-color: #5cb85c;\n}\n.progress-striped .progress-bar-success {\n  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n  background-image:      -o-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n  background-image:         linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n}\n.progress-bar-info {\n  background-color: #5bc0de;\n}\n.progress-striped .progress-bar-info {\n  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n  background-image:      -o-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n  background-image:         linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n}\n.progress-bar-warning {\n  background-color: #f0ad4e;\n}\n.progress-striped .progress-bar-warning {\n  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n  background-image:      -o-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n  background-image:         linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n}\n.progress-bar-danger {\n  background-color: #d9534f;\n}\n.progress-striped .progress-bar-danger {\n  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n  background-image:      -o-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n  background-image:         linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n}\n.media {\n  margin-top: 15px;\n}\n.media:first-child {\n  margin-top: 0;\n}\n.media,\n.media-body {\n  overflow: hidden;\n  zoom: 1;\n}\n.media-body {\n  width: 10000px;\n}\n.media-object {\n  display: block;\n}\n.media-object.img-thumbnail {\n  max-width: none;\n}\n.media-right,\n.media > .pull-right {\n  padding-left: 10px;\n}\n.media-left,\n.media > .pull-left {\n  padding-right: 10px;\n}\n.media-left,\n.media-right,\n.media-body {\n  display: table-cell;\n  vertical-align: top;\n}\n.media-middle {\n  vertical-align: middle;\n}\n.media-bottom {\n  vertical-align: bottom;\n}\n.media-heading {\n  margin-top: 0;\n  margin-bottom: 5px;\n}\n.media-list {\n  padding-left: 0;\n  list-style: none;\n}\n.list-group {\n  padding-left: 0;\n  margin-bottom: 20px;\n}\n.list-group-item {\n  position: relative;\n  display: block;\n  padding: 10px 15px;\n  margin-bottom: -1px;\n  background-color: #fff;\n  border: 1px solid #ddd;\n}\n.list-group-item:first-child {\n  border-top-left-radius: 4px;\n  border-top-right-radius: 4px;\n}\n.list-group-item:last-child {\n  margin-bottom: 0;\n  border-bottom-right-radius: 4px;\n  border-bottom-left-radius: 4px;\n}\na.list-group-item,\nbutton.list-group-item {\n  color: #555;\n}\na.list-group-item .list-group-item-heading,\nbutton.list-group-item .list-group-item-heading {\n  color: #333;\n}\na.list-group-item:hover,\nbutton.list-group-item:hover,\na.list-group-item:focus,\nbutton.list-group-item:focus {\n  color: #555;\n  text-decoration: none;\n  background-color: #f5f5f5;\n}\nbutton.list-group-item {\n  width: 100%;\n  text-align: left;\n}\n.list-group-item.disabled,\n.list-group-item.disabled:hover,\n.list-group-item.disabled:focus {\n  color: #777;\n  cursor: not-allowed;\n  background-color: #eee;\n}\n.list-group-item.disabled .list-group-item-heading,\n.list-group-item.disabled:hover .list-group-item-heading,\n.list-group-item.disabled:focus .list-group-item-heading {\n  color: inherit;\n}\n.list-group-item.disabled .list-group-item-text,\n.list-group-item.disabled:hover .list-group-item-text,\n.list-group-item.disabled:focus .list-group-item-text {\n  color: #777;\n}\n.list-group-item.active,\n.list-group-item.active:hover,\n.list-group-item.active:focus {\n  z-index: 2;\n  color: #fff;\n  background-color: #337ab7;\n  border-color: #337ab7;\n}\n.list-group-item.active .list-group-item-heading,\n.list-group-item.active:hover .list-group-item-heading,\n.list-group-item.active:focus .list-group-item-heading,\n.list-group-item.active .list-group-item-heading > small,\n.list-group-item.active:hover .list-group-item-heading > small,\n.list-group-item.active:focus .list-group-item-heading > small,\n.list-group-item.active .list-group-item-heading > .small,\n.list-group-item.active:hover .list-group-item-heading > .small,\n.list-group-item.active:focus .list-group-item-heading > .small {\n  color: inherit;\n}\n.list-group-item.active .list-group-item-text,\n.list-group-item.active:hover .list-group-item-text,\n.list-group-item.active:focus .list-group-item-text {\n  color: #c7ddef;\n}\n.list-group-item-success {\n  color: #3c763d;\n  background-color: #dff0d8;\n}\na.list-group-item-success,\nbutton.list-group-item-success {\n  color: #3c763d;\n}\na.list-group-item-success .list-group-item-heading,\nbutton.list-group-item-success .list-group-item-heading {\n  color: inherit;\n}\na.list-group-item-success:hover,\nbutton.list-group-item-success:hover,\na.list-group-item-success:focus,\nbutton.list-group-item-success:focus {\n  color: #3c763d;\n  background-color: #d0e9c6;\n}\na.list-group-item-success.active,\nbutton.list-group-item-success.active,\na.list-group-item-success.active:hover,\nbutton.list-group-item-success.active:hover,\na.list-group-item-success.active:focus,\nbutton.list-group-item-success.active:focus {\n  color: #fff;\n  background-color: #3c763d;\n  border-color: #3c763d;\n}\n.list-group-item-info {\n  color: #31708f;\n  background-color: #d9edf7;\n}\na.list-group-item-info,\nbutton.list-group-item-info {\n  color: #31708f;\n}\na.list-group-item-info .list-group-item-heading,\nbutton.list-group-item-info .list-group-item-heading {\n  color: inherit;\n}\na.list-group-item-info:hover,\nbutton.list-group-item-info:hover,\na.list-group-item-info:focus,\nbutton.list-group-item-info:focus {\n  color: #31708f;\n  background-color: #c4e3f3;\n}\na.list-group-item-info.active,\nbutton.list-group-item-info.active,\na.list-group-item-info.active:hover,\nbutton.list-group-item-info.active:hover,\na.list-group-item-info.active:focus,\nbutton.list-group-item-info.active:focus {\n  color: #fff;\n  background-color: #31708f;\n  border-color: #31708f;\n}\n.list-group-item-warning {\n  color: #8a6d3b;\n  background-color: #fcf8e3;\n}\na.list-group-item-warning,\nbutton.list-group-item-warning {\n  color: #8a6d3b;\n}\na.list-group-item-warning .list-group-item-heading,\nbutton.list-group-item-warning .list-group-item-heading {\n  color: inherit;\n}\na.list-group-item-warning:hover,\nbutton.list-group-item-warning:hover,\na.list-group-item-warning:focus,\nbutton.list-group-item-warning:focus {\n  color: #8a6d3b;\n  background-color: #faf2cc;\n}\na.list-group-item-warning.active,\nbutton.list-group-item-warning.active,\na.list-group-item-warning.active:hover,\nbutton.list-group-item-warning.active:hover,\na.list-group-item-warning.active:focus,\nbutton.list-group-item-warning.active:focus {\n  color: #fff;\n  background-color: #8a6d3b;\n  border-color: #8a6d3b;\n}\n.list-group-item-danger {\n  color: #a94442;\n  background-color: #f2dede;\n}\na.list-group-item-danger,\nbutton.list-group-item-danger {\n  color: #a94442;\n}\na.list-group-item-danger .list-group-item-heading,\nbutton.list-group-item-danger .list-group-item-heading {\n  color: inherit;\n}\na.list-group-item-danger:hover,\nbutton.list-group-item-danger:hover,\na.list-group-item-danger:focus,\nbutton.list-group-item-danger:focus {\n  color: #a94442;\n  background-color: #ebcccc;\n}\na.list-group-item-danger.active,\nbutton.list-group-item-danger.active,\na.list-group-item-danger.active:hover,\nbutton.list-group-item-danger.active:hover,\na.list-group-item-danger.active:focus,\nbutton.list-group-item-danger.active:focus {\n  color: #fff;\n  background-color: #a94442;\n  border-color: #a94442;\n}\n.list-group-item-heading {\n  margin-top: 0;\n  margin-bottom: 5px;\n}\n.list-group-item-text {\n  margin-bottom: 0;\n  line-height: 1.3;\n}\n.panel {\n  margin-bottom: 20px;\n  background-color: #fff;\n  border: 1px solid transparent;\n  border-radius: 4px;\n  -webkit-box-shadow: 0 1px 1px rgba(0, 0, 0, .05);\n          box-shadow: 0 1px 1px rgba(0, 0, 0, .05);\n}\n.panel-body {\n  padding: 15px;\n}\n.panel-heading {\n  padding: 10px 15px;\n  border-bottom: 1px solid transparent;\n  border-top-left-radius: 3px;\n  border-top-right-radius: 3px;\n}\n.panel-heading > .dropdown .dropdown-toggle {\n  color: inherit;\n}\n.panel-title {\n  margin-top: 0;\n  margin-bottom: 0;\n  font-size: 16px;\n  color: inherit;\n}\n.panel-title > a,\n.panel-title > small,\n.panel-title > .small,\n.panel-title > small > a,\n.panel-title > .small > a {\n  color: inherit;\n}\n.panel-footer {\n  padding: 10px 15px;\n  background-color: #f5f5f5;\n  border-top: 1px solid #ddd;\n  border-bottom-right-radius: 3px;\n  border-bottom-left-radius: 3px;\n}\n.panel > .list-group,\n.panel > .panel-collapse > .list-group {\n  margin-bottom: 0;\n}\n.panel > .list-group .list-group-item,\n.panel > .panel-collapse > .list-group .list-group-item {\n  border-width: 1px 0;\n  border-radius: 0;\n}\n.panel > .list-group:first-child .list-group-item:first-child,\n.panel > .panel-collapse > .list-group:first-child .list-group-item:first-child {\n  border-top: 0;\n  border-top-left-radius: 3px;\n  border-top-right-radius: 3px;\n}\n.panel > .list-group:last-child .list-group-item:last-child,\n.panel > .panel-collapse > .list-group:last-child .list-group-item:last-child {\n  border-bottom: 0;\n  border-bottom-right-radius: 3px;\n  border-bottom-left-radius: 3px;\n}\n.panel > .panel-heading + .panel-collapse > .list-group .list-group-item:first-child {\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n}\n.panel-heading + .list-group .list-group-item:first-child {\n  border-top-width: 0;\n}\n.list-group + .panel-footer {\n  border-top-width: 0;\n}\n.panel > .table,\n.panel > .table-responsive > .table,\n.panel > .panel-collapse > .table {\n  margin-bottom: 0;\n}\n.panel > .table caption,\n.panel > .table-responsive > .table caption,\n.panel > .panel-collapse > .table caption {\n  padding-right: 15px;\n  padding-left: 15px;\n}\n.panel > .table:first-child,\n.panel > .table-responsive:first-child > .table:first-child {\n  border-top-left-radius: 3px;\n  border-top-right-radius: 3px;\n}\n.panel > .table:first-child > thead:first-child > tr:first-child,\n.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child,\n.panel > .table:first-child > tbody:first-child > tr:first-child,\n.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child {\n  border-top-left-radius: 3px;\n  border-top-right-radius: 3px;\n}\n.panel > .table:first-child > thead:first-child > tr:first-child td:first-child,\n.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child td:first-child,\n.panel > .table:first-child > tbody:first-child > tr:first-child td:first-child,\n.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child td:first-child,\n.panel > .table:first-child > thead:first-child > tr:first-child th:first-child,\n.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child th:first-child,\n.panel > .table:first-child > tbody:first-child > tr:first-child th:first-child,\n.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child th:first-child {\n  border-top-left-radius: 3px;\n}\n.panel > .table:first-child > thead:first-child > tr:first-child td:last-child,\n.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child td:last-child,\n.panel > .table:first-child > tbody:first-child > tr:first-child td:last-child,\n.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child td:last-child,\n.panel > .table:first-child > thead:first-child > tr:first-child th:last-child,\n.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child th:last-child,\n.panel > .table:first-child > tbody:first-child > tr:first-child th:last-child,\n.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child th:last-child {\n  border-top-right-radius: 3px;\n}\n.panel > .table:last-child,\n.panel > .table-responsive:last-child > .table:last-child {\n  border-bottom-right-radius: 3px;\n  border-bottom-left-radius: 3px;\n}\n.panel > .table:last-child > tbody:last-child > tr:last-child,\n.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child,\n.panel > .table:last-child > tfoot:last-child > tr:last-child,\n.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child {\n  border-bottom-right-radius: 3px;\n  border-bottom-left-radius: 3px;\n}\n.panel > .table:last-child > tbody:last-child > tr:last-child td:first-child,\n.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child td:first-child,\n.panel > .table:last-child > tfoot:last-child > tr:last-child td:first-child,\n.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child td:first-child,\n.panel > .table:last-child > tbody:last-child > tr:last-child th:first-child,\n.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child th:first-child,\n.panel > .table:last-child > tfoot:last-child > tr:last-child th:first-child,\n.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child th:first-child {\n  border-bottom-left-radius: 3px;\n}\n.panel > .table:last-child > tbody:last-child > tr:last-child td:last-child,\n.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child td:last-child,\n.panel > .table:last-child > tfoot:last-child > tr:last-child td:last-child,\n.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child td:last-child,\n.panel > .table:last-child > tbody:last-child > tr:last-child th:last-child,\n.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child th:last-child,\n.panel > .table:last-child > tfoot:last-child > tr:last-child th:last-child,\n.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child th:last-child {\n  border-bottom-right-radius: 3px;\n}\n.panel > .panel-body + .table,\n.panel > .panel-body + .table-responsive,\n.panel > .table + .panel-body,\n.panel > .table-responsive + .panel-body {\n  border-top: 1px solid #ddd;\n}\n.panel > .table > tbody:first-child > tr:first-child th,\n.panel > .table > tbody:first-child > tr:first-child td {\n  border-top: 0;\n}\n.panel > .table-bordered,\n.panel > .table-responsive > .table-bordered {\n  border: 0;\n}\n.panel > .table-bordered > thead > tr > th:first-child,\n.panel > .table-responsive > .table-bordered > thead > tr > th:first-child,\n.panel > .table-bordered > tbody > tr > th:first-child,\n.panel > .table-responsive > .table-bordered > tbody > tr > th:first-child,\n.panel > .table-bordered > tfoot > tr > th:first-child,\n.panel > .table-responsive > .table-bordered > tfoot > tr > th:first-child,\n.panel > .table-bordered > thead > tr > td:first-child,\n.panel > .table-responsive > .table-bordered > thead > tr > td:first-child,\n.panel > .table-bordered > tbody > tr > td:first-child,\n.panel > .table-responsive > .table-bordered > tbody > tr > td:first-child,\n.panel > .table-bordered > tfoot > tr > td:first-child,\n.panel > .table-responsive > .table-bordered > tfoot > tr > td:first-child {\n  border-left: 0;\n}\n.panel > .table-bordered > thead > tr > th:last-child,\n.panel > .table-responsive > .table-bordered > thead > tr > th:last-child,\n.panel > .table-bordered > tbody > tr > th:last-child,\n.panel > .table-responsive > .table-bordered > tbody > tr > th:last-child,\n.panel > .table-bordered > tfoot > tr > th:last-child,\n.panel > .table-responsive > .table-bordered > tfoot > tr > th:last-child,\n.panel > .table-bordered > thead > tr > td:last-child,\n.panel > .table-responsive > .table-bordered > thead > tr > td:last-child,\n.panel > .table-bordered > tbody > tr > td:last-child,\n.panel > .table-responsive > .table-bordered > tbody > tr > td:last-child,\n.panel > .table-bordered > tfoot > tr > td:last-child,\n.panel > .table-responsive > .table-bordered > tfoot > tr > td:last-child {\n  border-right: 0;\n}\n.panel > .table-bordered > thead > tr:first-child > td,\n.panel > .table-responsive > .table-bordered > thead > tr:first-child > td,\n.panel > .table-bordered > tbody > tr:first-child > td,\n.panel > .table-responsive > .table-bordered > tbody > tr:first-child > td,\n.panel > .table-bordered > thead > tr:first-child > th,\n.panel > .table-responsive > .table-bordered > thead > tr:first-child > th,\n.panel > .table-bordered > tbody > tr:first-child > th,\n.panel > .table-responsive > .table-bordered > tbody > tr:first-child > th {\n  border-bottom: 0;\n}\n.panel > .table-bordered > tbody > tr:last-child > td,\n.panel > .table-responsive > .table-bordered > tbody > tr:last-child > td,\n.panel > .table-bordered > tfoot > tr:last-child > td,\n.panel > .table-responsive > .table-bordered > tfoot > tr:last-child > td,\n.panel > .table-bordered > tbody > tr:last-child > th,\n.panel > .table-responsive > .table-bordered > tbody > tr:last-child > th,\n.panel > .table-bordered > tfoot > tr:last-child > th,\n.panel > .table-responsive > .table-bordered > tfoot > tr:last-child > th {\n  border-bottom: 0;\n}\n.panel > .table-responsive {\n  margin-bottom: 0;\n  border: 0;\n}\n.panel-group {\n  margin-bottom: 20px;\n}\n.panel-group .panel {\n  margin-bottom: 0;\n  border-radius: 4px;\n}\n.panel-group .panel + .panel {\n  margin-top: 5px;\n}\n.panel-group .panel-heading {\n  border-bottom: 0;\n}\n.panel-group .panel-heading + .panel-collapse > .panel-body,\n.panel-group .panel-heading + .panel-collapse > .list-group {\n  border-top: 1px solid #ddd;\n}\n.panel-group .panel-footer {\n  border-top: 0;\n}\n.panel-group .panel-footer + .panel-collapse .panel-body {\n  border-bottom: 1px solid #ddd;\n}\n.panel-default {\n  border-color: #ddd;\n}\n.panel-default > .panel-heading {\n  color: #333;\n  background-color: #f5f5f5;\n  border-color: #ddd;\n}\n.panel-default > .panel-heading + .panel-collapse > .panel-body {\n  border-top-color: #ddd;\n}\n.panel-default > .panel-heading .badge {\n  color: #f5f5f5;\n  background-color: #333;\n}\n.panel-default > .panel-footer + .panel-collapse > .panel-body {\n  border-bottom-color: #ddd;\n}\n.panel-primary {\n  border-color: #337ab7;\n}\n.panel-primary > .panel-heading {\n  color: #fff;\n  background-color: #337ab7;\n  border-color: #337ab7;\n}\n.panel-primary > .panel-heading + .panel-collapse > .panel-body {\n  border-top-color: #337ab7;\n}\n.panel-primary > .panel-heading .badge {\n  color: #337ab7;\n  background-color: #fff;\n}\n.panel-primary > .panel-footer + .panel-collapse > .panel-body {\n  border-bottom-color: #337ab7;\n}\n.panel-success {\n  border-color: #d6e9c6;\n}\n.panel-success > .panel-heading {\n  color: #3c763d;\n  background-color: #dff0d8;\n  border-color: #d6e9c6;\n}\n.panel-success > .panel-heading + .panel-collapse > .panel-body {\n  border-top-color: #d6e9c6;\n}\n.panel-success > .panel-heading .badge {\n  color: #dff0d8;\n  background-color: #3c763d;\n}\n.panel-success > .panel-footer + .panel-collapse > .panel-body {\n  border-bottom-color: #d6e9c6;\n}\n.panel-info {\n  border-color: #bce8f1;\n}\n.panel-info > .panel-heading {\n  color: #31708f;\n  background-color: #d9edf7;\n  border-color: #bce8f1;\n}\n.panel-info > .panel-heading + .panel-collapse > .panel-body {\n  border-top-color: #bce8f1;\n}\n.panel-info > .panel-heading .badge {\n  color: #d9edf7;\n  background-color: #31708f;\n}\n.panel-info > .panel-footer + .panel-collapse > .panel-body {\n  border-bottom-color: #bce8f1;\n}\n.panel-warning {\n  border-color: #faebcc;\n}\n.panel-warning > .panel-heading {\n  color: #8a6d3b;\n  background-color: #fcf8e3;\n  border-color: #faebcc;\n}\n.panel-warning > .panel-heading + .panel-collapse > .panel-body {\n  border-top-color: #faebcc;\n}\n.panel-warning > .panel-heading .badge {\n  color: #fcf8e3;\n  background-color: #8a6d3b;\n}\n.panel-warning > .panel-footer + .panel-collapse > .panel-body {\n  border-bottom-color: #faebcc;\n}\n.panel-danger {\n  border-color: #ebccd1;\n}\n.panel-danger > .panel-heading {\n  color: #a94442;\n  background-color: #f2dede;\n  border-color: #ebccd1;\n}\n.panel-danger > .panel-heading + .panel-collapse > .panel-body {\n  border-top-color: #ebccd1;\n}\n.panel-danger > .panel-heading .badge {\n  color: #f2dede;\n  background-color: #a94442;\n}\n.panel-danger > .panel-footer + .panel-collapse > .panel-body {\n  border-bottom-color: #ebccd1;\n}\n.embed-responsive {\n  position: relative;\n  display: block;\n  height: 0;\n  padding: 0;\n  overflow: hidden;\n}\n.embed-responsive .embed-responsive-item,\n.embed-responsive iframe,\n.embed-responsive embed,\n.embed-responsive object,\n.embed-responsive video {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  border: 0;\n}\n.embed-responsive-16by9 {\n  padding-bottom: 56.25%;\n}\n.embed-responsive-4by3 {\n  padding-bottom: 75%;\n}\n.well {\n  min-height: 20px;\n  padding: 19px;\n  margin-bottom: 20px;\n  background-color: #f5f5f5;\n  border: 1px solid #e3e3e3;\n  border-radius: 4px;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .05);\n          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .05);\n}\n.well blockquote {\n  border-color: #ddd;\n  border-color: rgba(0, 0, 0, .15);\n}\n.well-lg {\n  padding: 24px;\n  border-radius: 6px;\n}\n.well-sm {\n  padding: 9px;\n  border-radius: 3px;\n}\n.close {\n  float: right;\n  font-size: 21px;\n  font-weight: bold;\n  line-height: 1;\n  color: #000;\n  text-shadow: 0 1px 0 #fff;\n  filter: alpha(opacity=20);\n  opacity: .2;\n}\n.close:hover,\n.close:focus {\n  color: #000;\n  text-decoration: none;\n  cursor: pointer;\n  filter: alpha(opacity=50);\n  opacity: .5;\n}\nbutton.close {\n  -webkit-appearance: none;\n  padding: 0;\n  cursor: pointer;\n  background: transparent;\n  border: 0;\n}\n.modal-open {\n  overflow: hidden;\n}\n.modal {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 1050;\n  display: none;\n  overflow: hidden;\n  -webkit-overflow-scrolling: touch;\n  outline: 0;\n}\n.modal.fade .modal-dialog {\n  -webkit-transition: -webkit-transform .3s ease-out;\n       -o-transition:      -o-transform .3s ease-out;\n          transition:         transform .3s ease-out;\n  -webkit-transform: translate(0, -25%);\n      -ms-transform: translate(0, -25%);\n       -o-transform: translate(0, -25%);\n          transform: translate(0, -25%);\n}\n.modal.in .modal-dialog {\n  -webkit-transform: translate(0, 0);\n      -ms-transform: translate(0, 0);\n       -o-transform: translate(0, 0);\n          transform: translate(0, 0);\n}\n.modal-open .modal {\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n.modal-dialog {\n  position: relative;\n  width: auto;\n  margin: 10px;\n}\n.modal-content {\n  position: relative;\n  background-color: #fff;\n  -webkit-background-clip: padding-box;\n          background-clip: padding-box;\n  border: 1px solid #999;\n  border: 1px solid rgba(0, 0, 0, .2);\n  border-radius: 6px;\n  outline: 0;\n  -webkit-box-shadow: 0 3px 9px rgba(0, 0, 0, .5);\n          box-shadow: 0 3px 9px rgba(0, 0, 0, .5);\n}\n.modal-backdrop {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 1040;\n  background-color: #000;\n}\n.modal-backdrop.fade {\n  filter: alpha(opacity=0);\n  opacity: 0;\n}\n.modal-backdrop.in {\n  filter: alpha(opacity=50);\n  opacity: .5;\n}\n.modal-header {\n  padding: 15px;\n  border-bottom: 1px solid #e5e5e5;\n}\n.modal-header .close {\n  margin-top: -2px;\n}\n.modal-title {\n  margin: 0;\n  line-height: 1.42857143;\n}\n.modal-body {\n  position: relative;\n  padding: 15px;\n}\n.modal-footer {\n  padding: 15px;\n  text-align: right;\n  border-top: 1px solid #e5e5e5;\n}\n.modal-footer .btn + .btn {\n  margin-bottom: 0;\n  margin-left: 5px;\n}\n.modal-footer .btn-group .btn + .btn {\n  margin-left: -1px;\n}\n.modal-footer .btn-block + .btn-block {\n  margin-left: 0;\n}\n.modal-scrollbar-measure {\n  position: absolute;\n  top: -9999px;\n  width: 50px;\n  height: 50px;\n  overflow: scroll;\n}\n@media (min-width: 768px) {\n  .modal-dialog {\n    width: 600px;\n    margin: 30px auto;\n  }\n  .modal-content {\n    -webkit-box-shadow: 0 5px 15px rgba(0, 0, 0, .5);\n            box-shadow: 0 5px 15px rgba(0, 0, 0, .5);\n  }\n  .modal-sm {\n    width: 300px;\n  }\n}\n@media (min-width: 992px) {\n  .modal-lg {\n    width: 900px;\n  }\n}\n.tooltip {\n  position: absolute;\n  z-index: 1070;\n  display: block;\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  font-size: 12px;\n  font-style: normal;\n  font-weight: normal;\n  line-height: 1.42857143;\n  text-align: left;\n  text-align: start;\n  text-decoration: none;\n  text-shadow: none;\n  text-transform: none;\n  letter-spacing: normal;\n  word-break: normal;\n  word-spacing: normal;\n  word-wrap: normal;\n  white-space: normal;\n  filter: alpha(opacity=0);\n  opacity: 0;\n\n  line-break: auto;\n}\n.tooltip.in {\n  filter: alpha(opacity=90);\n  opacity: .9;\n}\n.tooltip.top {\n  padding: 5px 0;\n  margin-top: -3px;\n}\n.tooltip.right {\n  padding: 0 5px;\n  margin-left: 3px;\n}\n.tooltip.bottom {\n  padding: 5px 0;\n  margin-top: 3px;\n}\n.tooltip.left {\n  padding: 0 5px;\n  margin-left: -3px;\n}\n.tooltip-inner {\n  max-width: 200px;\n  padding: 3px 8px;\n  color: #fff;\n  text-align: center;\n  background-color: #000;\n  border-radius: 4px;\n}\n.tooltip-arrow {\n  position: absolute;\n  width: 0;\n  height: 0;\n  border-color: transparent;\n  border-style: solid;\n}\n.tooltip.top .tooltip-arrow {\n  bottom: 0;\n  left: 50%;\n  margin-left: -5px;\n  border-width: 5px 5px 0;\n  border-top-color: #000;\n}\n.tooltip.top-left .tooltip-arrow {\n  right: 5px;\n  bottom: 0;\n  margin-bottom: -5px;\n  border-width: 5px 5px 0;\n  border-top-color: #000;\n}\n.tooltip.top-right .tooltip-arrow {\n  bottom: 0;\n  left: 5px;\n  margin-bottom: -5px;\n  border-width: 5px 5px 0;\n  border-top-color: #000;\n}\n.tooltip.right .tooltip-arrow {\n  top: 50%;\n  left: 0;\n  margin-top: -5px;\n  border-width: 5px 5px 5px 0;\n  border-right-color: #000;\n}\n.tooltip.left .tooltip-arrow {\n  top: 50%;\n  right: 0;\n  margin-top: -5px;\n  border-width: 5px 0 5px 5px;\n  border-left-color: #000;\n}\n.tooltip.bottom .tooltip-arrow {\n  top: 0;\n  left: 50%;\n  margin-left: -5px;\n  border-width: 0 5px 5px;\n  border-bottom-color: #000;\n}\n.tooltip.bottom-left .tooltip-arrow {\n  top: 0;\n  right: 5px;\n  margin-top: -5px;\n  border-width: 0 5px 5px;\n  border-bottom-color: #000;\n}\n.tooltip.bottom-right .tooltip-arrow {\n  top: 0;\n  left: 5px;\n  margin-top: -5px;\n  border-width: 0 5px 5px;\n  border-bottom-color: #000;\n}\n.popover {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 1060;\n  display: none;\n  max-width: 276px;\n  padding: 1px;\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: normal;\n  line-height: 1.42857143;\n  text-align: left;\n  text-align: start;\n  text-decoration: none;\n  text-shadow: none;\n  text-transform: none;\n  letter-spacing: normal;\n  word-break: normal;\n  word-spacing: normal;\n  word-wrap: normal;\n  white-space: normal;\n  background-color: #fff;\n  -webkit-background-clip: padding-box;\n          background-clip: padding-box;\n  border: 1px solid #ccc;\n  border: 1px solid rgba(0, 0, 0, .2);\n  border-radius: 6px;\n  -webkit-box-shadow: 0 5px 10px rgba(0, 0, 0, .2);\n          box-shadow: 0 5px 10px rgba(0, 0, 0, .2);\n\n  line-break: auto;\n}\n.popover.top {\n  margin-top: -10px;\n}\n.popover.right {\n  margin-left: 10px;\n}\n.popover.bottom {\n  margin-top: 10px;\n}\n.popover.left {\n  margin-left: -10px;\n}\n.popover-title {\n  padding: 8px 14px;\n  margin: 0;\n  font-size: 14px;\n  background-color: #f7f7f7;\n  border-bottom: 1px solid #ebebeb;\n  border-radius: 5px 5px 0 0;\n}\n.popover-content {\n  padding: 9px 14px;\n}\n.popover > .arrow,\n.popover > .arrow:after {\n  position: absolute;\n  display: block;\n  width: 0;\n  height: 0;\n  border-color: transparent;\n  border-style: solid;\n}\n.popover > .arrow {\n  border-width: 11px;\n}\n.popover > .arrow:after {\n  content: \"\";\n  border-width: 10px;\n}\n.popover.top > .arrow {\n  bottom: -11px;\n  left: 50%;\n  margin-left: -11px;\n  border-top-color: #999;\n  border-top-color: rgba(0, 0, 0, .25);\n  border-bottom-width: 0;\n}\n.popover.top > .arrow:after {\n  bottom: 1px;\n  margin-left: -10px;\n  content: \" \";\n  border-top-color: #fff;\n  border-bottom-width: 0;\n}\n.popover.right > .arrow {\n  top: 50%;\n  left: -11px;\n  margin-top: -11px;\n  border-right-color: #999;\n  border-right-color: rgba(0, 0, 0, .25);\n  border-left-width: 0;\n}\n.popover.right > .arrow:after {\n  bottom: -10px;\n  left: 1px;\n  content: \" \";\n  border-right-color: #fff;\n  border-left-width: 0;\n}\n.popover.bottom > .arrow {\n  top: -11px;\n  left: 50%;\n  margin-left: -11px;\n  border-top-width: 0;\n  border-bottom-color: #999;\n  border-bottom-color: rgba(0, 0, 0, .25);\n}\n.popover.bottom > .arrow:after {\n  top: 1px;\n  margin-left: -10px;\n  content: \" \";\n  border-top-width: 0;\n  border-bottom-color: #fff;\n}\n.popover.left > .arrow {\n  top: 50%;\n  right: -11px;\n  margin-top: -11px;\n  border-right-width: 0;\n  border-left-color: #999;\n  border-left-color: rgba(0, 0, 0, .25);\n}\n.popover.left > .arrow:after {\n  right: 1px;\n  bottom: -10px;\n  content: \" \";\n  border-right-width: 0;\n  border-left-color: #fff;\n}\n.carousel {\n  position: relative;\n}\n.carousel-inner {\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n}\n.carousel-inner > .item {\n  position: relative;\n  display: none;\n  -webkit-transition: .6s ease-in-out left;\n       -o-transition: .6s ease-in-out left;\n          transition: .6s ease-in-out left;\n}\n.carousel-inner > .item > img,\n.carousel-inner > .item > a > img {\n  line-height: 1;\n}\n@media all and (transform-3d), (-webkit-transform-3d) {\n  .carousel-inner > .item {\n    -webkit-transition: -webkit-transform .6s ease-in-out;\n         -o-transition:      -o-transform .6s ease-in-out;\n            transition:         transform .6s ease-in-out;\n\n    -webkit-backface-visibility: hidden;\n            backface-visibility: hidden;\n    -webkit-perspective: 1000px;\n            perspective: 1000px;\n  }\n  .carousel-inner > .item.next,\n  .carousel-inner > .item.active.right {\n    left: 0;\n    -webkit-transform: translate3d(100%, 0, 0);\n            transform: translate3d(100%, 0, 0);\n  }\n  .carousel-inner > .item.prev,\n  .carousel-inner > .item.active.left {\n    left: 0;\n    -webkit-transform: translate3d(-100%, 0, 0);\n            transform: translate3d(-100%, 0, 0);\n  }\n  .carousel-inner > .item.next.left,\n  .carousel-inner > .item.prev.right,\n  .carousel-inner > .item.active {\n    left: 0;\n    -webkit-transform: translate3d(0, 0, 0);\n            transform: translate3d(0, 0, 0);\n  }\n}\n.carousel-inner > .active,\n.carousel-inner > .next,\n.carousel-inner > .prev {\n  display: block;\n}\n.carousel-inner > .active {\n  left: 0;\n}\n.carousel-inner > .next,\n.carousel-inner > .prev {\n  position: absolute;\n  top: 0;\n  width: 100%;\n}\n.carousel-inner > .next {\n  left: 100%;\n}\n.carousel-inner > .prev {\n  left: -100%;\n}\n.carousel-inner > .next.left,\n.carousel-inner > .prev.right {\n  left: 0;\n}\n.carousel-inner > .active.left {\n  left: -100%;\n}\n.carousel-inner > .active.right {\n  left: 100%;\n}\n.carousel-control {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  width: 15%;\n  font-size: 20px;\n  color: #fff;\n  text-align: center;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, .6);\n  background-color: rgba(0, 0, 0, 0);\n  filter: alpha(opacity=50);\n  opacity: .5;\n}\n.carousel-control.left {\n  background-image: -webkit-linear-gradient(left, rgba(0, 0, 0, .5) 0%, rgba(0, 0, 0, .0001) 100%);\n  background-image:      -o-linear-gradient(left, rgba(0, 0, 0, .5) 0%, rgba(0, 0, 0, .0001) 100%);\n  background-image: -webkit-gradient(linear, left top, right top, from(rgba(0, 0, 0, .5)), to(rgba(0, 0, 0, .0001)));\n  background-image:         linear-gradient(to right, rgba(0, 0, 0, .5) 0%, rgba(0, 0, 0, .0001) 100%);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#80000000', endColorstr='#00000000', GradientType=1);\n  background-repeat: repeat-x;\n}\n.carousel-control.right {\n  right: 0;\n  left: auto;\n  background-image: -webkit-linear-gradient(left, rgba(0, 0, 0, .0001) 0%, rgba(0, 0, 0, .5) 100%);\n  background-image:      -o-linear-gradient(left, rgba(0, 0, 0, .0001) 0%, rgba(0, 0, 0, .5) 100%);\n  background-image: -webkit-gradient(linear, left top, right top, from(rgba(0, 0, 0, .0001)), to(rgba(0, 0, 0, .5)));\n  background-image:         linear-gradient(to right, rgba(0, 0, 0, .0001) 0%, rgba(0, 0, 0, .5) 100%);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#00000000', endColorstr='#80000000', GradientType=1);\n  background-repeat: repeat-x;\n}\n.carousel-control:hover,\n.carousel-control:focus {\n  color: #fff;\n  text-decoration: none;\n  filter: alpha(opacity=90);\n  outline: 0;\n  opacity: .9;\n}\n.carousel-control .icon-prev,\n.carousel-control .icon-next,\n.carousel-control .glyphicon-chevron-left,\n.carousel-control .glyphicon-chevron-right {\n  position: absolute;\n  top: 50%;\n  z-index: 5;\n  display: inline-block;\n  margin-top: -10px;\n}\n.carousel-control .icon-prev,\n.carousel-control .glyphicon-chevron-left {\n  left: 50%;\n  margin-left: -10px;\n}\n.carousel-control .icon-next,\n.carousel-control .glyphicon-chevron-right {\n  right: 50%;\n  margin-right: -10px;\n}\n.carousel-control .icon-prev,\n.carousel-control .icon-next {\n  width: 20px;\n  height: 20px;\n  font-family: serif;\n  line-height: 1;\n}\n.carousel-control .icon-prev:before {\n  content: '\\2039';\n}\n.carousel-control .icon-next:before {\n  content: '\\203A';\n}\n.carousel-indicators {\n  position: absolute;\n  bottom: 10px;\n  left: 50%;\n  z-index: 15;\n  width: 60%;\n  padding-left: 0;\n  margin-left: -30%;\n  text-align: center;\n  list-style: none;\n}\n.carousel-indicators li {\n  display: inline-block;\n  width: 10px;\n  height: 10px;\n  margin: 1px;\n  text-indent: -999px;\n  cursor: pointer;\n  background-color: #000 \\9;\n  background-color: rgba(0, 0, 0, 0);\n  border: 1px solid #fff;\n  border-radius: 10px;\n}\n.carousel-indicators .active {\n  width: 12px;\n  height: 12px;\n  margin: 0;\n  background-color: #fff;\n}\n.carousel-caption {\n  position: absolute;\n  right: 15%;\n  bottom: 20px;\n  left: 15%;\n  z-index: 10;\n  padding-top: 20px;\n  padding-bottom: 20px;\n  color: #fff;\n  text-align: center;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, .6);\n}\n.carousel-caption .btn {\n  text-shadow: none;\n}\n@media screen and (min-width: 768px) {\n  .carousel-control .glyphicon-chevron-left,\n  .carousel-control .glyphicon-chevron-right,\n  .carousel-control .icon-prev,\n  .carousel-control .icon-next {\n    width: 30px;\n    height: 30px;\n    margin-top: -10px;\n    font-size: 30px;\n  }\n  .carousel-control .glyphicon-chevron-left,\n  .carousel-control .icon-prev {\n    margin-left: -10px;\n  }\n  .carousel-control .glyphicon-chevron-right,\n  .carousel-control .icon-next {\n    margin-right: -10px;\n  }\n  .carousel-caption {\n    right: 20%;\n    left: 20%;\n    padding-bottom: 30px;\n  }\n  .carousel-indicators {\n    bottom: 20px;\n  }\n}\n.clearfix:before,\n.clearfix:after,\n.dl-horizontal dd:before,\n.dl-horizontal dd:after,\n.container:before,\n.container:after,\n.container-fluid:before,\n.container-fluid:after,\n.row:before,\n.row:after,\n.form-horizontal .form-group:before,\n.form-horizontal .form-group:after,\n.btn-toolbar:before,\n.btn-toolbar:after,\n.btn-group-vertical > .btn-group:before,\n.btn-group-vertical > .btn-group:after,\n.nav:before,\n.nav:after,\n.navbar:before,\n.navbar:after,\n.navbar-header:before,\n.navbar-header:after,\n.navbar-collapse:before,\n.navbar-collapse:after,\n.pager:before,\n.pager:after,\n.panel-body:before,\n.panel-body:after,\n.modal-header:before,\n.modal-header:after,\n.modal-footer:before,\n.modal-footer:after {\n  display: table;\n  content: \" \";\n}\n.clearfix:after,\n.dl-horizontal dd:after,\n.container:after,\n.container-fluid:after,\n.row:after,\n.form-horizontal .form-group:after,\n.btn-toolbar:after,\n.btn-group-vertical > .btn-group:after,\n.nav:after,\n.navbar:after,\n.navbar-header:after,\n.navbar-collapse:after,\n.pager:after,\n.panel-body:after,\n.modal-header:after,\n.modal-footer:after {\n  clear: both;\n}\n.center-block {\n  display: block;\n  margin-right: auto;\n  margin-left: auto;\n}\n.pull-right {\n  float: right !important;\n}\n.pull-left {\n  float: left !important;\n}\n.hide {\n  display: none !important;\n}\n.show {\n  display: block !important;\n}\n.invisible {\n  visibility: hidden;\n}\n.text-hide {\n  font: 0/0 a;\n  color: transparent;\n  text-shadow: none;\n  background-color: transparent;\n  border: 0;\n}\n.hidden {\n  display: none !important;\n}\n.affix {\n  position: fixed;\n}\n@-ms-viewport {\n  width: device-width;\n}\n.visible-xs,\n.visible-sm,\n.visible-md,\n.visible-lg {\n  display: none !important;\n}\n.visible-xs-block,\n.visible-xs-inline,\n.visible-xs-inline-block,\n.visible-sm-block,\n.visible-sm-inline,\n.visible-sm-inline-block,\n.visible-md-block,\n.visible-md-inline,\n.visible-md-inline-block,\n.visible-lg-block,\n.visible-lg-inline,\n.visible-lg-inline-block {\n  display: none !important;\n}\n@media (max-width: 767px) {\n  .visible-xs {\n    display: block !important;\n  }\n  table.visible-xs {\n    display: table !important;\n  }\n  tr.visible-xs {\n    display: table-row !important;\n  }\n  th.visible-xs,\n  td.visible-xs {\n    display: table-cell !important;\n  }\n}\n@media (max-width: 767px) {\n  .visible-xs-block {\n    display: block !important;\n  }\n}\n@media (max-width: 767px) {\n  .visible-xs-inline {\n    display: inline !important;\n  }\n}\n@media (max-width: 767px) {\n  .visible-xs-inline-block {\n    display: inline-block !important;\n  }\n}\n@media (min-width: 768px) and (max-width: 991px) {\n  .visible-sm {\n    display: block !important;\n  }\n  table.visible-sm {\n    display: table !important;\n  }\n  tr.visible-sm {\n    display: table-row !important;\n  }\n  th.visible-sm,\n  td.visible-sm {\n    display: table-cell !important;\n  }\n}\n@media (min-width: 768px) and (max-width: 991px) {\n  .visible-sm-block {\n    display: block !important;\n  }\n}\n@media (min-width: 768px) and (max-width: 991px) {\n  .visible-sm-inline {\n    display: inline !important;\n  }\n}\n@media (min-width: 768px) and (max-width: 991px) {\n  .visible-sm-inline-block {\n    display: inline-block !important;\n  }\n}\n@media (min-width: 992px) and (max-width: 1199px) {\n  .visible-md {\n    display: block !important;\n  }\n  table.visible-md {\n    display: table !important;\n  }\n  tr.visible-md {\n    display: table-row !important;\n  }\n  th.visible-md,\n  td.visible-md {\n    display: table-cell !important;\n  }\n}\n@media (min-width: 992px) and (max-width: 1199px) {\n  .visible-md-block {\n    display: block !important;\n  }\n}\n@media (min-width: 992px) and (max-width: 1199px) {\n  .visible-md-inline {\n    display: inline !important;\n  }\n}\n@media (min-width: 992px) and (max-width: 1199px) {\n  .visible-md-inline-block {\n    display: inline-block !important;\n  }\n}\n@media (min-width: 1200px) {\n  .visible-lg {\n    display: block !important;\n  }\n  table.visible-lg {\n    display: table !important;\n  }\n  tr.visible-lg {\n    display: table-row !important;\n  }\n  th.visible-lg,\n  td.visible-lg {\n    display: table-cell !important;\n  }\n}\n@media (min-width: 1200px) {\n  .visible-lg-block {\n    display: block !important;\n  }\n}\n@media (min-width: 1200px) {\n  .visible-lg-inline {\n    display: inline !important;\n  }\n}\n@media (min-width: 1200px) {\n  .visible-lg-inline-block {\n    display: inline-block !important;\n  }\n}\n@media (max-width: 767px) {\n  .hidden-xs {\n    display: none !important;\n  }\n}\n@media (min-width: 768px) and (max-width: 991px) {\n  .hidden-sm {\n    display: none !important;\n  }\n}\n@media (min-width: 992px) and (max-width: 1199px) {\n  .hidden-md {\n    display: none !important;\n  }\n}\n@media (min-width: 1200px) {\n  .hidden-lg {\n    display: none !important;\n  }\n}\n.visible-print {\n  display: none !important;\n}\n@media print {\n  .visible-print {\n    display: block !important;\n  }\n  table.visible-print {\n    display: table !important;\n  }\n  tr.visible-print {\n    display: table-row !important;\n  }\n  th.visible-print,\n  td.visible-print {\n    display: table-cell !important;\n  }\n}\n.visible-print-block {\n  display: none !important;\n}\n@media print {\n  .visible-print-block {\n    display: block !important;\n  }\n}\n.visible-print-inline {\n  display: none !important;\n}\n@media print {\n  .visible-print-inline {\n    display: inline !important;\n  }\n}\n.visible-print-inline-block {\n  display: none !important;\n}\n@media print {\n  .visible-print-inline-block {\n    display: inline-block !important;\n  }\n}\n@media print {\n  .hidden-print {\n    display: none !important;\n  }\n}\n/*# sourceMappingURL=bootstrap.css.map */\n", ""]);

	// exports


/***/ },
/* 672 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(673);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(667)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../node_modules/css-loader/index.js!./custom.css", function() {
				var newContent = require("!!./../node_modules/css-loader/index.js!./custom.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 673 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(666)();
	// imports


	// module
	exports.push([module.id, "/* stylize header */\n/*h1 {\n  font-size: 45px;\n  font-weight: 300;\n  margin-top: 10px;\n  margin-bottom: 20px;\n}*/\n\n\n\n/* default svg size for fixed svg option*/\n#svg_div{\n  width:1000px;\n  height:600px;\n}\n\n.viz_medium_text{\n  width:99%;\n  margin-left: 5px;\n  margin-top: 3px;\n  margin-bottom: 3px;\n  color:#333;\n  text-align: justify;\n  font-size: 14px;\n  font-weight: 300;\n  padding-left: 0px;\n}\n\n.viz_large_text{\n  width:99%;\n  margin: 0 auto;\n  margin-top: 6px;\n  margin-bottom: 3px;\n  color:#333;\n  text-align: justify;\n  font-size: 16px;\n  font-weight: 300;\n  padding-left: 0px;\n}\n\n/* need to move d3-tip into stypes */\n.d3-tip {\n  line-height: 1;\n  font-weight: bold;\n  padding: 12px;\n  background: rgba(0, 0, 0, 0.8);\n  color: #fff;\n  border-radius: 2px;\n  max-width: 500px;\n}\n\n/* Style northward tooltips differently */\n.d3-tip.n:after {\n  margin: -1px 0 0 0;\n  top: 100%;\n  left: 0;\n}\n\n.noselect {\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n    -khtml-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n}\n\n\n.icon_buttons{\n  color: #337ab7;\n}\n\n/*.share_url{\n  width: 570px;\n}*/\n\n.sidebar_text{\n  font-weight: 300;\n}\n\n.btn{\n  padding-top:2px;\n  padding-bottom:2px;\n}", ""]);

	// exports


/***/ },
/* 674 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var ini_sidebar = __webpack_require__(139);
	var set_up_filters = __webpack_require__(675);
	var set_up_dendro_sliders = __webpack_require__(682);
	var set_up_search = __webpack_require__(683);
	var set_up_reorder = __webpack_require__(684);
	var set_sidebar_ini_view = __webpack_require__(685);
	var make_icons = __webpack_require__(686);
	var make_modals = __webpack_require__(689);
	var set_up_opacity_slider = __webpack_require__(691);

	/* Represents sidebar with controls.
	 */
	module.exports = function sidebar(cgm) {

	  var params = cgm.params;

	  var sidebar = d3.select(params.root + ' .sidebar_wrapper');

	  // console.log('is_expand ',params.viz.is_expand)

	  if (params.viz.is_expand) {
	    sidebar.style('display', 'none');
	  }

	  sidebar.append('div').classed('title_section', true);

	  if (params.sidebar.title != null) {
	    sidebar.select('.title_section').append('h4')
	    // .style('margin-left', params.sidebar.title_margin_left+'px')
	    .style('margin-left', '20px').style('margin-top', '5px').style('margin-bottom', '0px').text(params.sidebar.title);
	  }

	  sidebar.append('div').classed('about_section', true);

	  if (params.sidebar.about != null) {

	    var about_section_width = params.sidebar.text.width - 5;
	    sidebar.select('.about_section').append('h5').classed('sidebar_text', true).style('margin-left', '7px').style('margin-top', '5px').style('margin-bottom', '2px').style('width', about_section_width + 'px').style('text-align', 'justify').text(params.sidebar.about);
	  }

	  sidebar.append('div').classed('icons_section', true).style('text-align', 'center');

	  if (params.sidebar.icons) {
	    make_modals(params);
	    make_icons(params, sidebar);
	  }

	  set_up_reorder(params, sidebar);

	  set_up_search(sidebar, params);

	  set_up_opacity_slider(sidebar);

	  if (params.viz.show_dendrogram) {
	    set_up_dendro_sliders(sidebar, params);
	  }

	  var possible_filter_names = _.keys(params.viz.possible_filters);

	  if (possible_filter_names.indexOf('enr_score_type') > -1) {
	    possible_filter_names.sort(function (a, b) {
	      return a.toLowerCase().localeCompare(b.toLowerCase());
	    });
	  }

	  cgm.slider_functions = {};

	  _.each(possible_filter_names, function (inst_filter) {
	    set_up_filters(cgm, inst_filter);
	  });

	  ini_sidebar(cgm);

	  // when initializing the visualization using a view
	  if (params.ini_view !== null) {

	    set_sidebar_ini_view(params);

	    params.ini_view = null;
	  }
		};

/***/ },
/* 675 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var make_slider_filter = __webpack_require__(676);
	var make_button_filter = __webpack_require__(681);

	module.exports = function set_up_filters(cgm, filter_type) {

	  var params = cgm.params;

	  var div_filters = d3.select(params.root + ' .sidebar_wrapper').append('div').classed('div_filters', true).style('padding-left', '15px').style('padding-right', '15px');

	  if (params.viz.possible_filters[filter_type] == 'numerical') {
	    make_slider_filter(cgm, filter_type, div_filters);
	  } else if (params.viz.possible_filters[filter_type] == 'categorical') {
	    make_button_filter(cgm, filter_type, div_filters);
	  }
		};

/***/ },
/* 676 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var make_filter_title = __webpack_require__(677);
	var run_filter_slider = __webpack_require__(678);
	var get_filter_default_state = __webpack_require__(5);
	var get_subset_views = __webpack_require__(12);

	module.exports = function make_slider_filter(cgm, filter_type, div_filters) {

	  var params = cgm.params;

	  var requested_view = {};

	  var possible_filters = _.keys(params.viz.possible_filters);

	  _.each(possible_filters, function (tmp_filter) {
	    if (tmp_filter != filter_type) {
	      var default_state = get_filter_default_state(params.viz.filter_data, tmp_filter);
	      requested_view[tmp_filter] = default_state;
	    }
	  });

	  var filter_title = make_filter_title(params, filter_type);

	  div_filters.append('div').classed('title_' + filter_type, true).classed('sidebar_text', true).classed('slider_description', true).style('margin-top', '5px').style('margin-bottom', '3px').text(filter_title.text + filter_title.state + filter_title.suffix);

	  div_filters.append('div').classed('slider_' + filter_type, true).classed('slider', true).attr('current_state', filter_title.state);

	  var views = params.network_data.views;

	  var available_views = get_subset_views(params, views, requested_view);

	  // sort available views by filter_type value
	  available_views = available_views.sort(function (a, b) {
	    return b[filter_type] - a[filter_type];
	  });

	  var inst_max = available_views.length - 1;

	  // $( params.root+' .slider_'+filter_type ).slider({
	  //   value:0,
	  //   min: 0,
	  //   max: inst_max,
	  //   step: 1,
	  //   stop: function() {
	  //     run_filter_slider(cgm, filter_type, available_views);
	  //   }
	  // });

	  // Filter Slider
	  //////////////////////////////////////////////////////////////////////
	  var slide_filter_fun = d3.slider()
	  // .snap(true)
	  .value(0).min(0).max(inst_max).step(1).on('slide', function (evt, value) {
	    run_filter_slider_db(cgm, filter_type, available_views, value);
	  }).on('slideend', function (evt, value) {
	    run_filter_slider_db(cgm, filter_type, available_views, value);
	  });

	  // save slider function in order to reset value later
	  cgm.slider_functions[filter_type] = slide_filter_fun;

	  d3.select(cgm.params.root + ' .slider_' + filter_type).call(slide_filter_fun);

	  //////////////////////////////////////////////////////////////////////

	  var run_filter_slider_db = _.debounce(run_filter_slider, 1500);
		};

/***/ },
/* 677 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var get_filter_default_state = __webpack_require__(5);

	module.exports = function make_filter_title(params, filter_type) {

	  var filter_title = {};
	  var title = {};
	  var type = {};

	  filter_title.state = get_filter_default_state(params.viz.filter_data, filter_type);

	  type.top = filter_type.split('_')[0];
	  type.node = filter_type.split('_')[1];
	  type.measure = filter_type.split('_')[2];

	  if (type.node === 'row') {
	    title.node = 'rows';
	  } else {
	    title.node = 'columns';
	  }

	  if (type.top === 'N') {
	    // filter_title.suffix = ' '+title.node;
	    filter_title.suffix = '';
	  }

	  if (type.top === 'pct') {
	    filter_title.suffix = '%';
	  }

	  if (type.measure == 'sum') {
	    title.measure = 'sum';
	  } else if (type.measure == 'var') {
	    title.measure = 'variance';
	  }

	  if (type.measure === 'sum') {
	    filter_title.text = 'Top ' + title.node + ' ' + title.measure + ': ';
	  }

	  if (type.measure === 'var') {
	    filter_title.text = 'Top ' + title.node + ' ' + title.measure + ': ';
	  }

	  // Enrichr specific rules 
	  if (_.keys(params.viz.possible_filters).indexOf('enr_score_type') > -1) {
	    if (type.node === 'col') {
	      filter_title.text = 'Top Enriched Terms: ';
	      filter_title.suffix = '';
	    }
	  }

	  return filter_title;
	};

/***/ },
/* 678 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var update_viz_with_view = __webpack_require__(123);
	var reset_other_filter_sliders = __webpack_require__(679);
	var get_current_orders = __webpack_require__(680);
	var make_requested_view = __webpack_require__(14);

	module.exports = function run_filter_slider(cgm, filter_type, available_views, inst_index) {

	  var params = cgm.params;

	  // get value
	  var inst_state = available_views[inst_index][filter_type];

	  // console.log('fix this')
	  reset_other_filter_sliders(cgm, filter_type, inst_state);

	  params = get_current_orders(params);

	  var requested_view = {};
	  requested_view[filter_type] = inst_state;

	  requested_view = make_requested_view(params, requested_view);

	  if (_.has(available_views[0], 'enr_score_type')) {
	    var enr_state = d3.select(params.root + ' .toggle_enr_score_type').attr('current_state');

	    requested_view.enr_score_type = enr_state;
	  }

	  update_viz_with_view(cgm, requested_view);
		};

/***/ },
/* 679 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var make_filter_title = __webpack_require__(677);

	module.exports = function reset_other_filter_sliders(cgm, filter_type, inst_state) {

	  var params = cgm.params;
	  var inst_rc;
	  var reset_rc;

	  d3.select(params.root + ' .slider_' + filter_type).attr('current_state', inst_state);

	  _.each(_.keys(params.viz.possible_filters), function (reset_filter) {

	    if (filter_type.indexOf('row') > -1) {
	      inst_rc = 'row';
	    } else if (filter_type.indexOf('col') > -1) {
	      inst_rc = 'col';
	    } else {
	      inst_rc = 'neither';
	    }

	    if (reset_filter.indexOf('row') > -1) {
	      reset_rc = 'row';
	    } else if (reset_filter.indexOf('col') > -1) {
	      reset_rc = 'col';
	    } else {
	      reset_rc = 'neither';
	    }

	    if (filter_type != reset_filter && inst_rc != 'neither') {

	      if (inst_rc == reset_rc) {

	        var tmp_title = make_filter_title(params, reset_filter);

	        // reset other filter slider positions
	        // $(params.root+' .slider_'+reset_filter).slider( "value", 0);

	        // d3.select('.slider_'+reset_filter).select('a').style('left','0%')

	        // console.log('reset_filter '+String(reset_filter))
	        // debugger

	        cgm.slider_functions[reset_filter].value(0);

	        d3.select(params.root + ' .title_' + reset_filter).text(tmp_title.text + tmp_title.state);

	        d3.select(params.root + ' .slider_' + reset_filter).attr('current_state', tmp_title.state);
	      }
	    }
	  });

	  var filter_title = make_filter_title(params, filter_type);

	  d3.select(params.root + ' .title_' + filter_type).text(filter_title.text + inst_state + filter_title.suffix);
		};

/***/ },
/* 680 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function get_current_orders(params) {

	  // get current orders 
	  var other_rc;
	  _.each(['row', 'col'], function (inst_rc) {

	    if (inst_rc === 'row') {
	      other_rc = 'col';
	    } else {
	      other_rc = 'row';
	    }

	    if (d3.select(params.root + ' .toggle_' + other_rc + '_order .active').empty() === false) {

	      params.viz.inst_order[inst_rc] = d3.select(params.root + ' .toggle_' + other_rc + '_order').select('.active').attr('name');
	    } else {

	      // default to cluster ordering 
	      params.viz.inst_order[inst_rc] = 'clust';
	    }
	  });

	  return params;
	};

/***/ },
/* 681 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// var update_network = require('../network/update_network');
	var make_requested_view = __webpack_require__(14);

	module.exports = function make_button_filter(config, params, filter_type, div_filters) {

	  /*
	  Enrichr specific code
	  */

	  var buttons = div_filters.append('div').classed('categorical_filter', true).classed('toggle_' + filter_type, true).classed('btn-group-vertical', true).style('width', '100%').style('margin-top', '10px').attr('current_state', 'combined_score');

	  var filter_options = params.viz.filter_data[filter_type];

	  var button_dict = {
	    'combined_score': 'Combined Score',
	    'pval': 'P-Value',
	    'zscore': 'Z-score'
	  };

	  buttons.selectAll('button').data(filter_options).enter().append('button').attr('type', 'button').classed('btn', true).classed('btn-primary', true).classed('.filter_button', true).classed('active', function (d) {
	    var is_active = false;
	    if (d == 'combined_score') {
	      is_active = true;
	    }
	    return is_active;
	  }).attr('name', function (d) {
	    return d;
	  }).html(function (d) {
	    return button_dict[d];
	  });

	  $(params.root + ' .categorical_filter .btn').off().click(function () {

	    d3.selectAll(params.root + ' .categorical_filter .btn').classed('active', false);

	    d3.select(this).classed('active', true);

	    var inst_state = d3.select(this).attr('name');

	    var requested_view = { 'enr_score_type': inst_state };

	    requested_view = make_requested_view(params, requested_view);

	    // console.log('\n---------\n requested_view from button filter')
	    // console.log(requested_view)

	    // update_network(config, params, requested_view);

	    d3.select(params.root + ' .toggle_enr_score_type').attr('current_state', inst_state);
	  });
		};

/***/ },
/* 682 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function set_up_dendro_sliders(sidebar, params) {

	  var dendro_sliders = sidebar.append('div').classed('dendro_sliders', true).style('padding-left', '15px').style('padding-right', '15px');

	  var dendro_types;
	  if (params.sim_mat) {
	    dendro_types = ['both'];
	  } else {
	    dendro_types = ['row', 'col'];
	  }

	  var dendro_text = {};
	  dendro_text.row = 'Row Group Size';
	  dendro_text.col = 'Column Group Size';
	  dendro_text.both = 'Group Size';

	  _.each(dendro_types, function (inst_rc) {

	    dendro_sliders.append('div').classed('sidebar_text', true).classed('slider_description', true).style('margin-top', '5px').style('margin-bottom', '3px').text(dendro_text[inst_rc]);

	    dendro_sliders.append('div').classed('slider_' + inst_rc, true).classed('slider', true);
	  });
		};

/***/ },
/* 683 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function set_up_search(sidebar, params) {

	  var search_container = sidebar.append('div')
	  // .classed('row',true)
	  .classed('gene_search_container', true).style('padding-left', '15px').style('padding-right', '15px').style('margin-top', '10px');

	  search_container.append('input').classed('form-control', true).classed('gene_search_box', true).classed('sidebar_text', true).attr('type', 'text').attr('placeholder', params.sidebar.row_search.placeholder).style('height', params.sidebar.row_search.box.height + 'px');

	  search_container.append('div').classed('gene_search_button', true).style('margin-top', '5px').attr('data-toggle', 'buttons').append('button').classed('sidebar_text', true).html('Search').attr('type', 'button').classed('btn', true).classed('btn-primary', true).classed('submit_gene_button', true).style('width', '100%').style('font-size', '14px');
		};

/***/ },
/* 684 */
/***/ function(module, exports) {

	'use strict';

	// var get_cat_title = require('../categories/get_cat_title');

	module.exports = function set_up_reorder(params, sidebar) {

	  var button_dict;
	  var tmp_orders;
	  var rc_dict = { 'row': 'Row', 'col': 'Column', 'both': '' };
	  var is_active;
	  var inst_reorder;
	  // var all_cats;
	  // var inst_order_label;

	  var reorder_section = sidebar.append('div').style('padding-left', '15px').style('padding-right', '15px').classed('reorder_section', true);

	  var reorder_types;
	  if (params.sim_mat) {
	    reorder_types = ['both'];
	  } else {
	    reorder_types = ['row', 'col'];
	  }

	  _.each(reorder_types, function (inst_rc) {

	    button_dict = {
	      'clust': 'Cluster',
	      'rank': 'Rank by Sum',
	      'rankvar': 'Rank by Variance',
	      'ini': 'Initial Order',
	      'alpha': 'Alphabetically'
	    };

	    var other_rc;
	    if (inst_rc === 'row') {
	      other_rc = 'col';
	    } else {
	      other_rc = 'row';
	    }

	    // // removing categories from reorder buttons
	    // /////////////////////////////////////////////
	    // var cat_rc;
	    // if (inst_rc != 'both'){
	    //   cat_rc = inst_rc;
	    // } else {
	    //   cat_rc = 'row';
	    // }
	    // if ( params.viz.all_cats[cat_rc].length > 0 ){
	    //   all_cats = params.viz.all_cats[cat_rc];
	    //   _.each(all_cats, function(inst_cat){
	    //     var cat_title = get_cat_title(params.viz, inst_cat, cat_rc);
	    //     inst_order_label = inst_cat.replace('-','_')+'_index';
	    //     button_dict[inst_order_label] = cat_title;
	    //   });
	    // }

	    tmp_orders = Object.keys(params.matrix.orders);

	    var possible_orders = [];

	    _.each(tmp_orders, function (inst_name) {

	      if (inst_name.indexOf(other_rc) > -1) {
	        inst_name = inst_name.replace('_row', '').replace('_col', '');

	        if (inst_name.indexOf('cat_') < 0) {
	          possible_orders.push(inst_name);
	        }
	      }
	    });

	    // specific to Enrichr
	    if (_.keys(params.viz.filter_data).indexOf('enr_score_type') > -1) {
	      possible_orders = ['clust', 'rank'];
	    }

	    possible_orders = _.uniq(possible_orders);

	    possible_orders = possible_orders.sort();

	    var reorder_text;
	    if (inst_rc != 'both') {
	      reorder_text = ' Order';
	    } else {
	      reorder_text = 'Reorder Matrix';
	    }

	    reorder_section.append('div').classed('sidebar_text', true).style('clear', 'both').style('margin-top', '10px').style('font-size', '13px').html(rc_dict[inst_rc] + reorder_text);

	    inst_reorder = reorder_section.append('div').classed('btn-group-vertical', true).style('width', '100%').classed('toggle_' + inst_rc + '_order', true).attr('role', 'group');

	    inst_reorder.selectAll('.button').data(possible_orders).enter().append('button').attr('type', 'button').style('font-size', '13px').classed('btn', true).classed('btn-primary', true).classed('sidebar_text', true).classed('active', function (d) {
	      is_active = false;
	      if (d == params.viz.inst_order[other_rc]) {
	        is_active = true;
	      }
	      return is_active;
	    }).attr('name', function (d) {
	      return d;
	    }).html(function (d) {
	      return button_dict[d];
	    });
	  });
		};

/***/ },
/* 685 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var make_filter_title = __webpack_require__(677);

	module.exports = function set_sidebar_ini_view(params) {

	  _.each(_.keys(params.ini_view), function (inst_filter) {

	    // initialize filter slider using ini_view
	    var inst_value = params.ini_view[inst_filter];

	    var filter_type = params.viz.possible_filters[inst_filter];

	    if (filter_type === 'numerical') {

	      if (inst_value != 'all') {
	        inst_value = parseInt(inst_value, 10);
	      }

	      if (params.viz.filter_data[inst_filter].indexOf(inst_value) <= -1) {
	        inst_value = 'all';
	      }

	      var filter_title = make_filter_title(params, inst_filter);

	      d3.select(params.root + ' .title_' + inst_filter).text(filter_title.text + inst_value + filter_title.suffix);

	      d3.select(params.root + ' .slider_' + inst_filter).attr('current_state', inst_value);
	    } else {

	      // set up button initialization

	    }
	  });
		};

/***/ },
/* 686 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var save_svg_png = __webpack_require__(687);
	var file_saver = __webpack_require__(688);

	module.exports = function make_icons(params, sidebar) {

	  // <a href="help" target="_blank"  id="help_link">
	  //   <i class="fa fa-question-circle icon_buttons"></i>
	  // </a>

	  var saveSvgAsPng = save_svg_png();
	  var saveAs = file_saver();

	  var row = sidebar.select('.icons_section').style('margin-top', '7px');

	  row.append('div').classed('col-xs-4', true).append('a').attr('href', 'http://amp.pharm.mssm.edu/clustergrammer/help').attr('target', '_blank').append('i').classed('fa', true).classed('fa-question-circle', true).classed('icon_buttons', true).style('font-size', '25px');

	  row.append('div').classed('col-xs-4', true).append('i').classed('fa', true).classed('fa-share-alt', true).classed('icon_buttons', true).style('font-size', '25px').on('click', function () {

	    $(params.root + ' .share_info').modal('toggle');
	    $('.share_url').val(window.location.href);
	  });

	  row.append('div').classed('col-xs-4', true).append('i').classed('fa', true).classed('fa-camera', true).classed('icon_buttons', true).style('font-size', '25px').on('click', function () {

	    $(params.root + ' .picture_info').modal('toggle');
	  });

	  // save svg: example from: http://bl.ocks.org/pgiraud/8955139#profile.json
	  ////////////////////////////////////////////////////////////////////////////
	  function save_clust_svg() {

	    d3.select(params.root + ' .expand_button').style('opacity', 0);

	    var html = d3.select(params.root + " svg").attr("title", "test2").attr("version", 1.1).attr("xmlns", "http://www.w3.org/2000/svg").node().parentNode.innerHTML;

	    var blob = new Blob([html], { type: "image/svg+xml" });

	    saveAs(blob, "clustergrammer.svg");

	    d3.select(params.root + ' .expand_button').style('opacity', 0.4);
	  }

	  d3.select(params.root + ' .download_buttons').append('p').append('a').html('Download SVG').on('click', function () {
	    save_clust_svg();
	  });

	  var svg_id = 'svg_' + params.root.replace('#', '');

	  // save as PNG
	  /////////////////////////////////////////
	  d3.select(params.root + ' .download_buttons').append('p').append('a').html('Download PNG').on('click', function () {
	    d3.select(params.root + ' .expand_button').style('opacity', 0);
	    saveSvgAsPng(document.getElementById(svg_id), "clustergrammer.png");
	    d3.select(params.root + ' .expand_button').style('opacity', 0.4);
	  });
		};

/***/ },
/* 687 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function save_svg_png() {
	  /* eslint-disable */
	  // (function() {
	  var out$ = typeof exports != 'undefined' && exports || this;

	  var doctype = '<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">';

	  function isExternal(url) {
	    return url && url.lastIndexOf('http', 0) == 0 && url.lastIndexOf(window.location.host) == -1;
	  }

	  function inlineImages(el, callback) {
	    var images = el.querySelectorAll('image');
	    var left = images.length;
	    if (left == 0) {
	      callback();
	    }
	    for (var i = 0; i < images.length; i++) {
	      (function (image) {
	        var href = image.getAttributeNS("http://www.w3.org/1999/xlink", "href");
	        if (href) {
	          if (isExternal(href.value)) {
	            console.warn("Cannot render embedded images linking to external hosts: " + href.value);
	            return;
	          }
	        }
	        var canvas = document.createElement('canvas');
	        var ctx = canvas.getContext('2d');
	        var img = new Image();
	        href = href || image.getAttribute('href');
	        img.src = href;
	        img.onload = function () {
	          canvas.width = img.width;
	          canvas.height = img.height;
	          ctx.drawImage(img, 0, 0);
	          image.setAttributeNS("http://www.w3.org/1999/xlink", "href", canvas.toDataURL('image/png'));
	          left--;
	          if (left == 0) {
	            callback();
	          }
	        };
	        img.onerror = function () {
	          console.log("Could not load " + href);
	          left--;
	          if (left == 0) {
	            callback();
	          }
	        };
	      })(images[i]);
	    }
	  }

	  function styles(el, selectorRemap) {
	    var css = "";
	    var sheets = document.styleSheets;
	    for (var i = 0; i < sheets.length; i++) {
	      try {
	        var rules = sheets[i].cssRules;
	      } catch (e) {
	        console.warn("Stylesheet could not be loaded: " + sheets[i].href);
	        continue;
	      }

	      if (rules != null) {
	        for (var j = 0; j < rules.length; j++) {
	          var rule = rules[j];
	          if (typeof rule.style != "undefined") {
	            var match = null;
	            try {
	              match = el.querySelector(rule.selectorText);
	            } catch (err) {
	              console.warn('Invalid CSS selector "' + rule.selectorText + '"', err);
	            }
	            if (match) {
	              var selector = selectorRemap ? selectorRemap(rule.selectorText) : rule.selectorText;
	              css += selector + " { " + rule.style.cssText + " }\n";
	            } else if (rule.cssText.match(/^@font-face/)) {
	              css += rule.cssText + '\n';
	            }
	          }
	        }
	      }
	    }
	    return css;
	  }

	  function getDimension(el, clone, dim) {
	    var v = el.viewBox.baseVal && el.viewBox.baseVal[dim] || clone.getAttribute(dim) !== null && !clone.getAttribute(dim).match(/%$/) && parseInt(clone.getAttribute(dim)) || el.getBoundingClientRect()[dim] || parseInt(clone.style[dim]) || parseInt(window.getComputedStyle(el).getPropertyValue(dim));
	    return typeof v === 'undefined' || v === null || isNaN(parseFloat(v)) ? 0 : v;
	  }

	  function reEncode(data) {
	    data = encodeURIComponent(data);
	    data = data.replace(/%([0-9A-F]{2})/g, function (match, p1) {
	      var c = String.fromCharCode('0x' + p1);
	      return c === '%' ? '%25' : c;
	    });
	    return decodeURIComponent(data);
	  }

	  out$.svgAsDataUri = function (el, options, cb) {
	    options = options || {};
	    options.scale = options.scale || 1;
	    var xmlns = "http://www.w3.org/2000/xmlns/";

	    inlineImages(el, function () {
	      var outer = document.createElement("div");
	      var clone = el.cloneNode(true);
	      var width, height;
	      if (el.tagName == 'svg') {
	        width = options.width || getDimension(el, clone, 'width');
	        height = options.height || getDimension(el, clone, 'height');
	      } else if (el.getBBox) {
	        var box = el.getBBox();
	        width = box.x + box.width;
	        height = box.y + box.height;
	        clone.setAttribute('transform', clone.getAttribute('transform').replace(/translate\(.*?\)/, ''));

	        var svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
	        svg.appendChild(clone);
	        clone = svg;
	      } else {
	        console.error('Attempted to render non-SVG element', el);
	        return;
	      }

	      clone.setAttribute("version", "1.1");
	      clone.setAttributeNS(xmlns, "xmlns", "http://www.w3.org/2000/svg");
	      clone.setAttributeNS(xmlns, "xmlns:xlink", "http://www.w3.org/1999/xlink");
	      clone.setAttribute("width", width * options.scale);
	      clone.setAttribute("height", height * options.scale);
	      clone.setAttribute("viewBox", [options.left || 0, options.top || 0, width, height].join(" "));

	      outer.appendChild(clone);

	      var css = styles(el, options.selectorRemap);
	      var s = document.createElement('style');
	      s.setAttribute('type', 'text/css');
	      s.innerHTML = "<![CDATA[\n" + css + "\n]]>";
	      var defs = document.createElement('defs');
	      defs.appendChild(s);
	      clone.insertBefore(defs, clone.firstChild);

	      var svg = doctype + outer.innerHTML;
	      var uri = 'data:image/svg+xml;base64,' + window.btoa(reEncode(svg));
	      if (cb) {
	        cb(uri);
	      }
	    });
	  };

	  out$.svgAsPngUri = function (el, options, cb) {
	    out$.svgAsDataUri(el, options, function (uri) {
	      var image = new Image();
	      image.onload = function () {
	        var canvas = document.createElement('canvas');
	        canvas.width = image.width;
	        canvas.height = image.height;
	        var context = canvas.getContext('2d');
	        if (options && options.backgroundColor) {
	          context.fillStyle = options.backgroundColor;
	          context.fillRect(0, 0, canvas.width, canvas.height);
	        }
	        context.drawImage(image, 0, 0);
	        var a = document.createElement('a'),
	            png;
	        try {
	          png = canvas.toDataURL('image/png');
	        } catch (e) {
	          if (e instanceof SecurityError) {
	            console.error("Rendered SVG images cannot be downloaded in this browser.");
	            return;
	          } else {
	            throw e;
	          }
	        }
	        cb(png);
	      };
	      image.src = uri;
	    });
	  };

	  out$.saveSvgAsPng = function (el, name, options) {
	    options = options || {};
	    out$.svgAsPngUri(el, options, function (uri) {
	      var a = document.createElement('a');
	      a.download = name;
	      a.href = uri;
	      document.body.appendChild(a);
	      a.addEventListener("click", function (e) {
	        a.parentNode.removeChild(a);
	      });
	      a.click();
	    });
	  };
	  // })();

	  return out$.saveSvgAsPng;
		};

/***/ },
/* 688 */
/***/ function(module, exports) {

	"use strict";

	module.exports = function file_saver() {
	  /* eslint-disable */
	  /* FileSaver.js
	   * A saveAs() FileSaver implementation.
	   * 2013-01-23
	   * 
	   * By Eli Grey, http://eligrey.com
	   * License: X11/MIT
	   *   See LICENSE.md
	   */

	  /*global self */
	  /*jslint bitwise: true, regexp: true, confusion: true, es5: true, vars: true, white: true,
	    plusplus: true */

	  /*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */

	  var saveAs = saveAs || navigator.msSaveBlob && navigator.msSaveBlob.bind(navigator) || function (view) {
	    "use strict";

	    var doc = view.document
	    // only get URL when necessary in case BlobBuilder.js hasn't overridden it yet
	    ,
	        get_URL = function get_URL() {
	      return view.URL || view.webkitURL || view;
	    },
	        URL = view.URL || view.webkitURL || view,
	        save_link = doc.createElementNS("http://www.w3.org/1999/xhtml", "a"),
	        can_use_save_link = "download" in save_link,
	        click = function click(node) {
	      var event = doc.createEvent("MouseEvents");
	      event.initMouseEvent("click", true, false, view, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
	      node.dispatchEvent(event);
	    },
	        webkit_req_fs = view.webkitRequestFileSystem,
	        req_fs = view.requestFileSystem || webkit_req_fs || view.mozRequestFileSystem,
	        throw_outside = function throw_outside(ex) {
	      (view.setImmediate || view.setTimeout)(function () {
	        throw ex;
	      }, 0);
	    },
	        force_saveable_type = "application/octet-stream",
	        fs_min_size = 0,
	        deletion_queue = [],
	        process_deletion_queue = function process_deletion_queue() {
	      var i = deletion_queue.length;
	      while (i--) {
	        var file = deletion_queue[i];
	        if (typeof file === "string") {
	          // file is an object URL
	          URL.revokeObjectURL(file);
	        } else {
	          // file is a File
	          file.remove();
	        }
	      }
	      deletion_queue.length = 0; // clear queue
	    },
	        dispatch = function dispatch(filesaver, event_types, event) {
	      event_types = [].concat(event_types);
	      var i = event_types.length;
	      while (i--) {
	        var listener = filesaver["on" + event_types[i]];
	        if (typeof listener === "function") {
	          try {
	            listener.call(filesaver, event || filesaver);
	          } catch (ex) {
	            throw_outside(ex);
	          }
	        }
	      }
	    },
	        FileSaver = function FileSaver(blob, name) {
	      // First try a.download, then web filesystem, then object URLs
	      var filesaver = this,
	          type = blob.type,
	          blob_changed = false,
	          object_url,
	          target_view,
	          get_object_url = function get_object_url() {
	        var object_url = get_URL().createObjectURL(blob);
	        deletion_queue.push(object_url);
	        return object_url;
	      },
	          dispatch_all = function dispatch_all() {
	        dispatch(filesaver, "writestart progress write writeend".split(" "));
	      }
	      // on any filesys errors revert to saving with object URLs
	      ,
	          fs_error = function fs_error() {
	        // don't create more object URLs than needed
	        if (blob_changed || !object_url) {
	          object_url = get_object_url(blob);
	        }
	        if (target_view) {
	          target_view.location.href = object_url;
	        }
	        filesaver.readyState = filesaver.DONE;
	        dispatch_all();
	      },
	          abortable = function abortable(func) {
	        return function () {
	          if (filesaver.readyState !== filesaver.DONE) {
	            return func.apply(this, arguments);
	          }
	        };
	      },
	          create_if_not_found = { create: true, exclusive: false },
	          slice;
	      filesaver.readyState = filesaver.INIT;
	      if (!name) {
	        name = "download";
	      }
	      if (can_use_save_link) {
	        object_url = get_object_url(blob);
	        save_link.href = object_url;
	        save_link.download = name;
	        click(save_link);
	        filesaver.readyState = filesaver.DONE;
	        dispatch_all();
	        return;
	      }
	      // Object and web filesystem URLs have a problem saving in Google Chrome when
	      // viewed in a tab, so I force save with application/octet-stream
	      // http://code.google.com/p/chromium/issues/detail?id=91158
	      if (view.chrome && type && type !== force_saveable_type) {
	        slice = blob.slice || blob.webkitSlice;
	        blob = slice.call(blob, 0, blob.size, force_saveable_type);
	        blob_changed = true;
	      }
	      // Since I can't be sure that the guessed media type will trigger a download
	      // in WebKit, I append .download to the filename.
	      // https://bugs.webkit.org/show_bug.cgi?id=65440
	      if (webkit_req_fs && name !== "download") {
	        name += ".download";
	      }
	      if (type === force_saveable_type || webkit_req_fs) {
	        target_view = view;
	      } else {
	        target_view = view.open();
	      }
	      if (!req_fs) {
	        fs_error();
	        return;
	      }
	      fs_min_size += blob.size;
	      req_fs(view.TEMPORARY, fs_min_size, abortable(function (fs) {
	        fs.root.getDirectory("saved", create_if_not_found, abortable(function (dir) {
	          var save = function save() {
	            dir.getFile(name, create_if_not_found, abortable(function (file) {
	              file.createWriter(abortable(function (writer) {
	                writer.onwriteend = function (event) {
	                  target_view.location.href = file.toURL();
	                  deletion_queue.push(file);
	                  filesaver.readyState = filesaver.DONE;
	                  dispatch(filesaver, "writeend", event);
	                };
	                writer.onerror = function () {
	                  var error = writer.error;
	                  if (error.code !== error.ABORT_ERR) {
	                    fs_error();
	                  }
	                };
	                "writestart progress write abort".split(" ").forEach(function (event) {
	                  writer["on" + event] = filesaver["on" + event];
	                });
	                writer.write(blob);
	                filesaver.abort = function () {
	                  writer.abort();
	                  filesaver.readyState = filesaver.DONE;
	                };
	                filesaver.readyState = filesaver.WRITING;
	              }), fs_error);
	            }), fs_error);
	          };
	          dir.getFile(name, { create: false }, abortable(function (file) {
	            // delete file if it already exists
	            file.remove();
	            save();
	          }), abortable(function (ex) {
	            if (ex.code === ex.NOT_FOUND_ERR) {
	              save();
	            } else {
	              fs_error();
	            }
	          }));
	        }), fs_error);
	      }), fs_error);
	    },
	        FS_proto = FileSaver.prototype,
	        saveAs = function saveAs(blob, name) {
	      return new FileSaver(blob, name);
	    };
	    FS_proto.abort = function () {
	      var filesaver = this;
	      filesaver.readyState = filesaver.DONE;
	      dispatch(filesaver, "abort");
	    };
	    FS_proto.readyState = FS_proto.INIT = 0;
	    FS_proto.WRITING = 1;
	    FS_proto.DONE = 2;

	    FS_proto.error = FS_proto.onwritestart = FS_proto.onprogress = FS_proto.onwrite = FS_proto.onabort = FS_proto.onerror = FS_proto.onwriteend = null;

	    view.addEventListener("unload", process_deletion_queue, false);
	    return saveAs;
	  }(self);

	  return saveAs;
		};

/***/ },
/* 689 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var make_modal_skeleton = __webpack_require__(690);

	module.exports = function ini_modals(params) {

	  // share modal 
	  ///////////////////////////////////////
	  var share_modal = make_modal_skeleton(params, 'share_info');

	  share_modal.header.append('a').attr('target', '_blank').attr('href', '/clustergrammer/');

	  share_modal.header.append('h4').classed('modal-title', true).html('Share the visualization using the current URL:');

	  share_modal.body.append('input').classed('bootstrap_highlight', true).classed('share_url', true);

	  // picture modal 
	  ///////////////////////////////////////
	  var screenshot_modal = make_modal_skeleton(params, 'picture_info');

	  screenshot_modal.header.append('h4').classed('modal-title', true).html('Save a snapshot of the visualization');

	  screenshot_modal.body.append('div').classed('download_buttons', true);

	  // dendro modal 
	  ///////////////////////////////////////
	  var dendro_modal = make_modal_skeleton(params, 'dendro_info');

	  dendro_modal.header.append('h4').classed('modal-title', true);
	  // .html('Group data points');

	  dendro_modal.body.append('div').classed('dendro_text', true).append('input').classed('bootstrap_highlight', true).classed('current_names', true).style('width', '100%');
		};

/***/ },
/* 690 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function make_modal_skeleton(params, modal_class) {

	  var modal_skeleton = {};

	  var modal = d3.select(params.root).append('div').classed('modal', true).classed('fade', true).classed(modal_class, true).attr('role', 'dialog');

	  var modal_dialog = modal.append('div').classed('modal-dialog', true);

	  var modal_content = modal_dialog.append('div').classed('modal-content', true);

	  modal_skeleton.header = modal_content.append('div').classed('modal-header', true);

	  modal_skeleton.header.append('button').attr('type', 'button').classed('close', true).attr('data-dismiss', 'modal').html('&times;');

	  modal_skeleton.body = modal_content.append('div').classed('modal-body', true);

	  return modal_skeleton;
		};

/***/ },
/* 691 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function set_up_opacity_slider(sidebar) {

	  var slider_container = sidebar.append('div').classed('opacity_slider_container', true).style('margin-top', '5px').style('padding-left', '15px').style('padding-right', '15px');

	  slider_container.append('div').classed('sidebar_text', true).classed('opacity_slider_text', true).style('margin-bottom', '3px').text('Opacity Slider');

	  slider_container.append('div').classed('slider', true).classed('opacity_slider', true);

	  // $( params.root+' .opacity_slider' ).slider({
	  //   value:1.0
	  // });
		};

/***/ }
/******/ ]);
//# sourceMappingURL=clustergrammer.js.map